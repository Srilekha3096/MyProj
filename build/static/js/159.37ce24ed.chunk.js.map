{"version":3,"file":"static/js/159.37ce24ed.chunk.js","mappings":"mLAIA,MAuDA,EAvDoBA,IAAuB,IAAtB,aAAEC,GAAcD,EACnC,MAAOE,EAAWC,IAAgBC,EAAAA,EAAAA,WAAS,GACrCC,GAAYC,EAAAA,EAAAA,GAAc,KAAM,MAEhCC,EAAeA,KACfC,OAAOC,QAAUR,EACnBE,GAAa,GAEbA,GAAa,EACf,EAkBF,OARAO,EAAAA,EAAAA,YAAU,KACRF,OAAOG,iBAAiB,SAAUJ,GAE3B,KACLC,OAAOI,oBAAoB,SAAUL,EAAa,IAEnD,KAGDM,EAAAA,EAAAA,KAAA,OACEC,MAAO,CACLC,QAASb,EAAY,OAAS,OAC9Bc,eAAgB,SAChBC,WAAY,SACZC,SAAU,QACVC,OAAQd,EAAY,MAAQ,QAC5Be,MAAO,OACPC,OAAQ,MACRC,aAAc,MACdC,UAAW,wBACXC,QAAS,GACTC,MAAO,OACPC,OAAQ,OACRC,gBAAiB,QACjBC,MAAO,UACPC,WAAY,0BACZC,OAAQ,WAEVC,QAnCuBC,KACzBxB,OAAOyB,SAAS,CACdC,IAAK,EACLC,SAAU,UACV,EAgCAC,UAAU,uBAAsBC,UAEhCxB,EAAAA,EAAAA,KAACyB,EAAAA,IAAe,CAACC,KAAM,MACnB,C,4FC/CV,MAYA,EAZgBC,KAEZ3B,EAAAA,EAAAA,KAAA4B,EAAAA,SAAA,CAAAJ,UACExB,EAAAA,EAAAA,KAAC6B,EAAAA,EAAG,CAAAL,UAEFxB,EAAAA,EAAAA,KAAC8B,EAAAA,EAAU,CAACC,QAAQ,KAAKC,GAAI,CAAEC,WAAY,IAAKC,IAAK,GAAGV,SAAC,gB,+YCQjE,MAytBA,EAztB8BrC,IAKvB,IALwB,gBAC7BgD,EAAe,kBACfC,EAAiB,gBACjBC,EAAe,UACfC,GACDnD,EACC,MAAMoD,EAAQC,aAAaC,QAAQ,eAE7BC,EAAS,CACbC,QAAS,CACPC,cAAc,UAADC,OAAYN,GACzB,eAAgB,mBAChBO,OAAQ,sBAILC,EAAcC,IAAmBzD,EAAAA,EAAAA,WAAS,IAC1C0D,EAAWC,IAAgB3D,EAAAA,EAAAA,WAAS,IACpC4D,EAAmBC,IAAwB7D,EAAAA,EAAAA,UAAS,KACpD8D,EAAaC,IAAkB/D,EAAAA,EAAAA,UAAS,KACxCgE,EAAeC,IAAoBjE,EAAAA,EAAAA,UAAS,KAC5CkE,EAAmBC,IAAwBnE,EAAAA,EAAAA,UAAS,KACpDoE,EAAgBC,IAAqBrE,EAAAA,EAAAA,UAAS,KAC9CsE,EAAiBC,IAAsBvE,EAAAA,EAAAA,UAAS,KAEhDwE,EAAUC,IAAezE,EAAAA,EAAAA,UAAS,KAClC0E,EAAcC,IAAmB3E,EAAAA,EAAAA,UAAS,KAC1C4E,EAAWC,IAAgB7E,EAAAA,EAAAA,UAAS,KACpC8E,EAAiBC,IAAsB/E,EAAAA,EAAAA,UAAS,WAChDgF,EAAQC,IAAajF,EAAAA,EAAAA,WAAS,IAC9BkF,EAAcC,KAAmBnF,EAAAA,EAAAA,UAAS,KAC1CoF,GAAYC,KAAiBrF,EAAAA,EAAAA,UAAS,KAEtCsF,GAAYC,KAAiBvF,EAAAA,EAAAA,UAAS,KACtCwF,GAAUC,KAAezF,EAAAA,EAAAA,UAAS,KAClC0F,GAAYC,KAAiB3F,EAAAA,EAAAA,UAAS,KAEtC4F,GAAQC,KAAa7F,EAAAA,EAAAA,YA0O5B,OACE8F,EAAAA,EAAAA,MAAAzD,EAAAA,SAAA,CAAAJ,SAAA,EAEExB,EAAAA,EAAAA,KAAC8B,EAAAA,EAAU,CAACC,QAAQ,KAAKC,GAAI,CAAEC,WAAY,KAAMT,SAAC,qBAGlDxB,EAAAA,EAAAA,KAAC8B,EAAAA,EAAU,CAACC,QAAQ,KAAKC,GAAI,CAAEC,WAAY,KAAMT,SAAC,oFAKlD6D,EAAAA,EAAAA,MAAA,QAAMC,SAlEoBC,IAG5B,GAFAA,EAAEC,iBACFC,QAAQC,IAAI,qBAAsBpD,GA9EfqD,MACnB,MAAMC,EAAY,CAAC,EAmBnB,YAjBqBC,IAAjB5B,GAA+C,OAAjBA,GAA0C,KAAjBA,IACzD2B,EAAU3B,aAAe,8BAEV4B,IAAb9B,GAAuC,OAAbA,GAAkC,KAAbA,IACjD6B,EAAU7B,SAAW,0BAElBM,IACHuB,EAAUvB,gBAAkB,kCAEzBI,IACHmB,EAAUnB,aAAe,8BAEtBE,KACHiB,EAAUjB,WAAa,4BAGzBS,GAAUQ,GAC+B,IAAlCE,OAAOC,KAAKH,GAAWI,MAAY,EA2DtCL,GACF,GAAa,OAATrD,QAAS,IAATA,GAAAA,EAAW2D,MAAMC,IAAW,OAAHA,QAAG,IAAHA,OAAG,EAAHA,EAAKC,iBAAkB1B,IAClD2B,EAAAA,GAAMC,QAAQ,uBAADxD,OAAwB4B,EAAY,6BAC5C,CACL,IAAI6B,EAAU,CACZH,cAAe1B,EACf8B,WAAYpC,EACZqC,cAAezD,EACf0D,WAAY9B,GACZ+B,UAAW3C,EACX4C,gBAA6B,OAAZ1C,QAAY,IAAZA,OAAY,EAAZA,EAAc2C,GAC/BC,iBAAkBxC,EAClByC,cAA2B,OAAZ7C,QAAY,IAAZA,OAAY,EAAZA,EAAc6C,cAC7BC,WAAYC,SAASxE,aAAaC,QAAQ,mBAC1CwE,WAAYD,SAASxE,aAAaC,QAAQ,cAC1CyE,WAAYF,SAASxE,aAAaC,QAAQ,WAC1C0E,WAAYH,SAASxE,aAAaC,QAAQ,WAC1C2E,aAAcC,EAAAA,IAEhBC,IAAAA,KACQ,GAADzE,OAAI0E,EAAAA,GAAQ,+BAA+BjB,EAAS5D,GACxD8E,MAAMC,IAAS,IAADC,EACbjC,QAAQC,IAAI+B,GACL,OAAHA,QAAG,IAAHA,GAAS,QAANC,EAAHD,EAAKE,YAAI,IAAAD,GAATA,EAAWd,IACbR,EAAAA,GAAMwB,QAAQ,qCACdxF,GAAkB,GAClBD,GAAgB,GAChBE,IAEAqC,GAAgB,IAChBE,GAAc,IACdZ,EAAY,IACZE,EAAgB,IAChBI,EAAmB,IACnBF,EAAa,IACbgB,GAAU,CAAC,IAEXgB,EAAAA,GAAMyB,MAAM,yCACd,IACCC,OAAOD,IACRpC,QAAQC,IAAImC,GACZzB,EAAAA,GAAMyB,MAAMA,EAAME,QAAQ,GAEhC,CACF,EAmBuCvG,SAAA,EACnCxB,EAAAA,EAAAA,KAAC6B,EAAAA,EAAG,CAACG,GAAI,CAAEgG,UAAW,SAAUxG,UAC9B6D,EAAAA,EAAAA,MAAC4C,EAAAA,GAAI,CAACC,WAAS,EAAClG,GAAI,CAAEE,GAAI,EAAGiG,GAAI,CAAEC,GAAI,EAAGC,GAAI,IAAM7G,SAAA,EAClD6D,EAAAA,EAAAA,MAAC4C,EAAAA,GAAI,CAACK,MAAI,EAACC,GAAI,GAAIhH,UAAU,MAAMS,GAAI,CAAEE,GAAI,GAAIV,SAAA,EAC/C6D,EAAAA,EAAAA,MAACvD,EAAAA,EAAU,CAACP,UAAU,iCAAiCS,GAAI,CAAEE,GAAI,GAAIV,SAAA,CAAC,kBACtDxB,EAAAA,EAAAA,KAAA,QAAMuB,UAAU,WAAUC,SAAC,UAE3C6D,EAAAA,EAAAA,MAACxD,EAAAA,EAAG,CAACN,UAAU,8BAA6BC,SAAA,EAC1CxB,EAAAA,EAAAA,KAACwI,EAAAA,EAAY,CACXjH,UAAU,uBACVkH,KAAK,eACLC,QAnMSC,KACvBC,EAAAA,EAAgBrF,cAAcb,GAAQ8E,MAAMC,IAC1ChC,QAAQC,IAAI,MAAO+B,GACnB/D,EAAwB,OAAH+D,QAAG,IAAHA,OAAG,EAAHA,EAAKoB,QAAQ3C,IAA0B,KAAjB,OAAHA,QAAG,IAAHA,OAAG,EAAHA,EAAK4C,cAAsB,IAClEhB,OAAOD,IACRpC,QAAQC,IAAImC,EAAM,GAClB,EA8LYkB,eAAiBC,GACO,kBAAXA,EACFA,EAELA,GAAgB,OAANA,QAAM,IAANA,GAAAA,EAAQC,SACP,OAAND,QAAM,IAANA,OAAM,EAANA,EAAQC,SAEV,GAETC,QAASzF,EACT0F,cAvQMA,CAAC1F,EAAiB2F,KAAsB,IAApB,WAAEC,GAAYD,EACtD,OAAwB,OAAjB3F,QAAiB,IAAjBA,OAAiB,EAAjBA,EAAmBoF,QAAQG,GAC1B,OAANA,QAAM,IAANA,OAAM,EAANA,EAAQC,SAASK,cAAcC,WAAWF,EAAWC,gBACtD,EAqQaE,OAAwB,OAAjB/F,QAAiB,IAAjBA,OAAiB,EAAjBA,EAAmBwC,MACvB+C,IAAiB,OAANA,QAAM,IAANA,OAAM,EAANA,EAAQC,YAAaxE,GAAgB,OAC9C,KACLgF,SAAUA,CAAClE,EAAGmE,KACZjE,QAAQC,IAAIgE,GACZhF,GAAwB,OAARgF,QAAQ,IAARA,OAAQ,EAARA,EAAUT,UA3MrBS,KACrBd,EAAAA,EACGe,mCAA2C,OAARD,QAAQ,IAARA,OAAQ,EAARA,EAAUT,SAAUvG,GACvD8E,MAAMC,IACLhC,QAAQC,IAAI,SAAU+B,EAAIzB,QAC1BpC,EAAkB6D,GACE,KAAb,OAAHA,QAAG,IAAHA,OAAG,EAAHA,EAAKzB,SACPxB,GAAU,GACVF,EAAmB,WAEnBE,GAAU,GACVF,EAAmB,UACrB,IACCwD,OAAOD,IACRpC,QAAQC,IAAImC,EAAM,GAClB,EA6LY+B,CAAcF,EAAS,EAEzBG,qBAAsBA,CAACb,EAAQQ,KACvB,OAANR,QAAM,IAANA,OAAM,EAANA,EAAQC,YAAaO,GAAmB,KAAVA,EAEhCM,YAAcC,IACZ/J,EAAAA,EAAAA,KAACgK,EAAAA,GAASC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACJF,GAAM,IACVG,YAAY,gBACZnI,QAAQ,WACRoI,aAAa,YAInBnK,EAAAA,EAAAA,KAAC6B,EAAAA,EAAG,CAAC5B,MAAO,CAAEc,MAAO,OAAQS,UACzBiD,IAAsB,OAANU,SAAM,IAANA,QAAM,EAANA,GAAQV,oBAG9BzE,EAAAA,EAAAA,KAAC6B,EAAAA,EAAG,CAACN,UAAU,uCAAsCC,UACnD6D,EAAAA,EAAAA,MAAC+E,EAAAA,EAAW,CAAC,aAAW,eAAepI,GAAI,CAAEpB,MAAO,CAAE2H,GAAI,kBAAmBF,GAAI,kBAAmBgC,GAAI,kBAAmBC,GAAI,mBAAqBpI,GAAI,CAAEqG,GAAI,EAAGF,GAAI,IAAOnH,QAhE1JqJ,KAC9BrH,GAAa,EAAK,EA+DuM1B,SAAA,EAC3MxB,EAAAA,EAAAA,KAACwK,EAAAA,EAAM,CAACjJ,UAAU,gBAAgBS,GAAI,CAAEpB,MAAO,CAAE2H,GAAI,kBAAmBF,GAAI,kBAAmBgC,GAAI,kBAAmBC,GAAI,oBAAsB9I,SAAC,eACjJxB,EAAAA,EAAAA,KAACwK,EAAAA,EAAM,CAACzI,QAAQ,YAAYR,UAAU,cAAaC,UACjDxB,EAAAA,EAAAA,KAACyK,EAAAA,IAAM,CAAC/I,KAAM,gBAMV,IAAX6C,IACCc,EAAAA,EAAAA,MAAC4C,EAAAA,GAAI,CAACK,MAAI,EAACC,GAAI,GAAIhH,UAAU,MAAMS,GAAI,CAAEE,GAAI,GAAIV,SAAA,EAE/CxB,EAAAA,EAAAA,KAAC8B,EAAAA,EAAU,CAACP,UAAU,uBAAuBS,GAAI,CAAEE,GAAI,GAAIV,SAAC,gBAI5DxB,EAAAA,EAAAA,KAAC6B,EAAAA,EAAG,CAACN,UAAU,8BAA6BC,UAC1CxB,EAAAA,EAAAA,KAACwI,EAAAA,EAAY,CACXjH,UAAU,uBACVkH,KAAK,YACLS,QAASvF,EACToF,eAAiBC,GACO,kBAAXA,EACFA,EAELA,GAAgB,OAANA,QAAM,IAANA,GAAAA,EAAQzC,WACP,OAANyC,QAAM,IAANA,OAAM,EAANA,EAAQzC,WAEV,GAETiD,OAAqB,OAAd7F,QAAc,IAAdA,OAAc,EAAdA,EAAgBsC,MACpB+C,IAAiB,OAANA,QAAM,IAANA,OAAM,EAANA,EAAQzC,cAAepC,MAChC,KACLsF,SAAUA,CAAClE,EAAGmE,KACZjE,QAAQC,IAAIgE,GACZtF,EAAqB,OAARsF,QAAQ,IAARA,OAAQ,EAARA,EAAUnD,WAAW,EAEpCsD,qBAAsBA,CAACb,EAAQQ,KACvB,OAANR,QAAM,IAANA,OAAM,EAANA,EAAQzC,cAAeiD,GAAmB,KAAVA,EAElCM,YAAcC,IACZ/J,EAAAA,EAAAA,KAACgK,EAAAA,GAASC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACJF,GAAM,IACVG,YAAY,aACZnI,QAAQ,WACRoI,aAAa,iBAQzB9E,EAAAA,EAAAA,MAAC4C,EAAAA,GAAI,CAACK,MAAI,EAACC,GAAI,GAAIhH,UAAU,MAAMS,GAAI,CAAEE,GAAI,GAAIV,SAAA,EAE/C6D,EAAAA,EAAAA,MAACvD,EAAAA,EAAU,CAACP,UAAU,uBAAuBS,GAAI,CAAEE,GAAI,GAAIV,SAAA,CAAC,kBAC5CxB,EAAAA,EAAAA,KAAA,QAAMuB,UAAU,WAAUC,SAAC,UAE3C6D,EAAAA,EAAAA,MAACxD,EAAAA,EAAG,CAACN,UAAU,8BAA6BC,SAAA,EAC1CxB,EAAAA,EAAAA,KAACwI,EAAAA,EAAY,CACXjH,UAAU,uBACVkH,KAAK,eACLC,QAzVegC,KAC7BpD,IAAAA,IACO,GAADzE,OAAI0E,EAAAA,GAAQ,6BAA6B7E,GAC5C8E,MAAMC,IAAS,IAADkD,EACblF,QAAQC,IAAI,UAAW+B,EAAIE,MAC3BvE,EAAwB,OAAHqE,QAAG,IAAHA,GAAS,QAANkD,EAAHlD,EAAKE,YAAI,IAAAgD,OAAN,EAAHA,EAAWC,QAAQ,IACvC9C,OAAOD,IACRpC,QAAQC,IAAImC,EAAM,GAClB,EAkVUkB,eAAiBC,GACO,kBAAXA,EACFA,EAELA,GAAgB,OAANA,QAAM,IAANA,GAAAA,EAAQlC,cACP,OAANkC,QAAM,IAANA,OAAM,EAANA,EAAQlC,cAEV,GAEToC,QAAS/F,EACTqG,MAAOvF,EACPwF,SAAUA,CAAClE,EAAGmE,KACZjE,QAAQC,IAAIgE,GACRA,GACFxF,EAAgBwF,GA5VPA,KAC3BpC,IAAAA,IACO,GAADzE,OACC0E,EAAAA,GAAQ,8CAAA1E,OAA6C6G,EAAS5C,eAAiBpE,GACnF8E,MAAMC,IAAS,IAADoD,EAAAC,EACbrF,QAAQC,IAAI,SAAU+B,EAAIE,MAC1B3D,EAAuB,QAAZ6G,EAACpD,EAAIE,KAAK,UAAE,IAAAkD,OAAA,EAAXA,EAAanE,WACzB9B,GAAyB,QAAZkG,EAACrD,EAAIE,KAAK,UAAE,IAAAmD,OAAA,EAAXA,EAAarE,WAAW,IACrCqB,OAAOD,IACRpC,QAAQC,IAAImC,EAAM,GAClB,EAmVckD,CAAoBrB,KAEpB9E,GAAc,IACdZ,EAAY,IACZE,EAAgB,IAClB,EAEF2F,qBAAsBA,CAACb,EAAQQ,KACvB,OAANR,QAAM,IAANA,OAAM,EAANA,EAAQlC,iBAAkB0C,GAAmB,KAAVA,EAErCM,YAAcC,IACZ/J,EAAAA,EAAAA,KAACgK,EAAAA,GAASC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACJF,GAAM,IACVG,YAAY,gBACZnI,QAAQ,WACRoI,aAAa,YAInBnK,EAAAA,EAAAA,KAAC6B,EAAAA,EAAG,CAAC5B,MAAO,CAAEc,MAAO,OAAQS,UACzByC,IAAsB,OAANkB,SAAM,IAANA,QAAM,EAANA,GAAQlB,uBAKhCoB,EAAAA,EAAAA,MAAC4C,EAAAA,GAAI,CAACK,MAAI,EAACC,GAAI,GAAIhH,UAAU,MAAMS,GAAI,CAAEE,GAAI,GAAIV,SAAA,EAC/C6D,EAAAA,EAAAA,MAACvD,EAAAA,EAAU,CAACP,UAAU,uBAAuBS,GAAI,CAAEE,GAAI,GAAIV,SAAA,CAAC,iBAC7CxB,EAAAA,EAAAA,KAAA,QAAMuB,UAAU,WAAUC,SAAC,UAE1C6D,EAAAA,EAAAA,MAACxD,EAAAA,EAAG,CAACN,UAAU,8BAA6BC,SAAA,EAC1CxB,EAAAA,EAAAA,KAACgK,EAAAA,EAAS,CACRzI,UAAU,mBACVkH,KAAK,aACLe,MAAO7E,GACPuF,YAAY,eACZnI,QAAQ,WACRoI,aAAa,MACba,UAAQ,KAEVhL,EAAAA,EAAAA,KAAC6B,EAAAA,EAAG,CAAC5B,MAAO,CAAEc,MAAO,OAAQS,UACzBmD,KAAoB,OAANQ,SAAM,IAANA,QAAM,EAANA,GAAQR,qBAqC9BU,EAAAA,EAAAA,MAAC4C,EAAAA,GAAI,CAACK,MAAI,EAACC,GAAI,GAAIhH,UAAU,MAAMS,GAAI,CAAEE,GAAI,GAAIV,SAAA,EAE/C6D,EAAAA,EAAAA,MAACvD,EAAAA,EAAU,CAACP,UAAU,uBAAuBS,GAAI,CAAEE,GAAI,GAAIV,SAAA,CAAC,cAChDxB,EAAAA,EAAAA,KAAA,QAAMuB,UAAU,WAAUC,SAAC,UAGvC6D,EAAAA,EAAAA,MAACxD,EAAAA,EAAG,CAACN,UAAU,8BAA6BC,SAAA,EAC1CxB,EAAAA,EAAAA,KAACgK,EAAAA,EAAS,CACRzI,UAAU,mBACVkH,KAAK,WACLe,MAAOzF,EACPmG,YAAY,YACZnI,QAAQ,WACRoI,aAAa,MACba,UAAQ,KAEVhL,EAAAA,EAAAA,KAAC6B,EAAAA,EAAG,CAAC5B,MAAO,CAAEc,MAAO,OAAQS,UACzBuC,IAAkB,OAANoB,SAAM,IAANA,QAAM,EAANA,GAAQpB,wBAqBhCsB,EAAAA,EAAAA,MAACxD,EAAAA,EAAG,CAACN,UAAU,UAAUS,GAAI,CAAEE,GAAI,GAAIV,SAAA,EACrC6D,EAAAA,EAAAA,MAAC+E,EAAAA,EAAW,CACV,aAAW,eACXa,KAAK,SACLjJ,GAAI,CACFE,GAAI,CAAEqG,GAAI,GAAK8B,GAAI,GACnBa,GAAI,CAAE3C,GAAI,EAAGF,GAAI,IACjB7G,SAAA,EAEFxB,EAAAA,EAAAA,KAACwK,EAAAA,EAAM,CAACS,KAAK,SAAS1J,UAAU,cAAaC,SAAC,UAG9CxB,EAAAA,EAAAA,KAACwK,EAAAA,EAAM,CAACzI,QAAQ,YAAYR,UAAU,cAAaC,UACjDxB,EAAAA,EAAAA,KAACmL,EAAAA,IAAM,CAACzJ,KAAM,WAIlB2D,EAAAA,EAAAA,MAAC+E,EAAAA,EAAW,CACV,aAAW,eACXpI,GAAI,CACFE,GAAI,CAAEqG,GAAI,GAAK8B,GAAI,GACnBa,GAAI,CAAE3C,GAAI,EAAGF,GAAI,IAEnBnH,QAASA,KACPiB,GAAgB,GAChBC,GAAkB,GAElBsC,GAAgB,IAChBE,GAAc,IACdZ,EAAY,IACZE,EAAgB,IAChBI,EAAmB,IACnBF,EAAa,IAEbgB,GAAU,CAAC,EAAE,EACb5D,SAAA,EAEFxB,EAAAA,EAAAA,KAACwK,EAAAA,EAAM,CAACjJ,UAAU,cAAaC,SAAC,YAChCxB,EAAAA,EAAAA,KAACwK,EAAAA,EAAM,CAACzI,QAAQ,YAAYR,UAAU,cAAaC,UACjDxB,EAAAA,EAAAA,KAACoL,EAAAA,IAAQ,CAAC1J,KAAM,iBAMxB1B,EAAAA,EAAAA,KAACqL,EAAAA,EAAM,CACLC,KAAMrI,EACN,kBAAgB,qBAChB,mBAAiB,2BAA0BzB,UAE3CxB,EAAAA,EAAAA,KAAA,QAAMsF,SAvY0BC,IAEpC,GADAA,EAAEC,iBAnBkB+F,MACpB,MAAM3F,EAAY,CAAC,EAanB,YAXmBC,IAAfhB,IAA2C,OAAfA,IAAsC,KAAfA,KACrDe,EAAUf,WAAa,4BAEpBE,KACHa,EAAUb,SAAW,0BAElBE,KACHW,EAAUX,WAAa,2BAGzBG,GAAUQ,GAC+B,IAAlCE,OAAOC,KAAKH,GAAWI,MAAY,EAMtCuF,GAAiB,CACnB,IAAIjF,EAAU,CACZkF,UAAWzG,GACXwB,WAAYtB,GACZwG,gBAAiB,GACjBvE,WAAYF,SAASxE,aAAaC,QAAQ,WAC1C0E,WAAYH,SAASxE,aAAaC,QAAQ,WAC1C2E,aAAcC,EAAAA,IAEhBC,IAAAA,KACQ,GAADzE,OAAI0E,EAAAA,GAAQ,+BAA+BjB,EAAS5D,GACxD8E,MAAMC,IAAS,IAADiE,EACbjG,QAAQC,IAAI+B,GACL,OAAHA,QAAG,IAAHA,GAAS,QAANiE,EAAHjE,EAAKE,YAAI,IAAA+D,GAATA,EAAW9E,IACbR,EAAAA,GAAMwB,QAAQ,+BACd9C,GAAc,IACdE,GAAY,IACZE,GAAc,IACdhC,GAAa,GACbkC,GAAU,CAAC,KAEXgB,EAAAA,GAAMyB,MAAM,qBACZ3E,GAAa,GACf,IACC4E,OAAOD,IACRpC,QAAQC,IAAImC,GACZzB,EAAAA,GAAMyB,MAAMA,EAAME,QAAQ,GAEhC,GAyWiDvG,UAC3C6D,EAAAA,EAAAA,MAAA,OAAA7D,SAAA,EACE6D,EAAAA,EAAAA,MAACsG,EAAAA,EAAa,CAAAnK,SAAA,EACZxB,EAAAA,EAAAA,KAAC8B,EAAAA,EAAU,CAACC,QAAQ,KAAIP,SAAC,wBACzB6D,EAAAA,EAAAA,MAAC4C,EAAAA,GAAI,CAACC,WAAS,EAAClG,GAAI,CAAEE,GAAI,GAAIV,SAAA,EAC5BxB,EAAAA,EAAAA,KAACiI,EAAAA,GAAI,CAACK,MAAI,EAACC,GAAI,GAAIvG,GAAI,CAAEmG,GAAI,GAAI3G,UAC/B6D,EAAAA,EAAAA,MAACvD,EAAAA,EAAU,CAACP,UAAU,qBAAoBC,SAAA,CAAC,eAC9BxB,EAAAA,EAAAA,KAAA,QAAMuB,UAAU,WAAUC,SAAC,YAG1C6D,EAAAA,EAAAA,MAAC4C,EAAAA,GAAI,CAACK,MAAI,EAACC,GAAI,GAAIvG,GAAI,CAAEmG,GAAI,GAAI3G,SAAA,EAC/BxB,EAAAA,EAAAA,KAACwI,EAAAA,EAAY,CACXE,QAjgBKkD,gBACftE,IAAAA,KAAW,GAADzE,OACX0E,EAAAA,GAAQ,2BACX7E,GACA8E,MAAMC,IACNhC,QAAQC,IAAO,OAAH+B,QAAG,IAAHA,OAAG,EAAHA,EAAKE,MACjBrE,EAAkB,OAAHmE,QAAG,IAAHA,OAAG,EAAHA,EAAKE,KAAK,IACxBG,OAAOD,IACRpC,QAAQC,IAAImC,EAAM,GAClB,EAyfctG,UAAU,uBACVqF,GAAG,iBACHsC,QAAS7F,EACT0F,eAAiBC,GAAiB,OAANA,QAAM,IAANA,OAAM,EAANA,EAAQ6C,WACpCrC,OAAkB,OAAXnG,QAAW,IAAXA,OAAW,EAAXA,EAAa4C,MACjB+C,IAAiB,OAANA,QAAM,IAANA,OAAM,EAANA,EAAQ6C,cAAehH,OAChC,KACL4E,SAAUA,CAAClE,EAAGmE,KACZjE,QAAQC,IAAIgE,GACZ5E,GAAsB,OAAR4E,QAAQ,IAARA,OAAQ,EAARA,EAAUmC,YA/ftBnC,KACpB,IAAIpD,EAAU,CACZuF,WAAoB,OAARnC,QAAQ,IAARA,OAAQ,EAARA,EAAUmC,YAExBvE,IAAAA,KACQ,GAADzE,OAAI0E,EAAAA,GAAQ,iCAAiCjB,EAAS5D,GAC1D8E,MAAMC,IACLhC,QAAQC,IAAI,MAAO+B,GACnBjE,EAAoB,OAAHiE,QAAG,IAAHA,OAAG,EAAHA,EAAKE,KAAK,IAC1BG,OAAOD,IACRpC,QAAQC,IAAImC,EAAM,GAClB,EAqfciE,CAAapC,EAAS,EAExB1H,GAAI,CAAE+J,SAAU,QAASC,SAAU,UACnClC,YAAcC,IACZ/J,EAAAA,EAAAA,KAACgK,EAAAA,GAASC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACJF,GAAM,IACVG,YAAY,YACZnI,QAAQ,WAERoI,aAAa,YAInBnK,EAAAA,EAAAA,KAAC6B,EAAAA,EAAG,CAAC5B,MAAO,CAAEc,MAAO,OAAQS,UACzBqD,KAAoB,OAANM,SAAM,IAANA,QAAM,EAANA,GAAQN,kBAI5B7E,EAAAA,EAAAA,KAACiI,EAAAA,GAAI,CAACK,MAAI,EAACC,GAAI,GAAIvG,GAAI,CAAEmG,GAAI,GAAI3G,UAC/B6D,EAAAA,EAAAA,MAACvD,EAAAA,EAAU,CAACP,UAAU,qBAAoBC,SAAA,CAAC,4BACjBxB,EAAAA,EAAAA,KAAA,QAAMuB,UAAU,WAAUC,SAAC,YAGvD6D,EAAAA,EAAAA,MAAC4C,EAAAA,GAAI,CAACK,MAAI,EAACC,GAAI,GAAIvG,GAAI,CAAEmG,GAAI,GAAI3G,SAAA,EAC/BxB,EAAAA,EAAAA,KAACwI,EAAAA,EACC,CACAjH,UAAU,uBACVqF,GAAG,iBACHsC,QAAS3F,EACTwF,eAAiBC,GAAiB,OAANA,QAAM,IAANA,OAAM,EAANA,EAAQC,SACpCO,OAAoB,OAAbjG,QAAa,IAAbA,OAAa,EAAbA,EAAe0C,MACnB+C,IAAiB,OAANA,QAAM,IAANA,OAAM,EAANA,EAAQC,YAAalE,OAC9B,KACL0E,SAAUA,CAAClE,EAAGmE,KACZjE,QAAQC,IAAIgE,GACZ1E,GAAoB,OAAR0E,QAAQ,IAARA,OAAQ,EAARA,EAAUT,UA1flBS,KACtB,IAAIuC,EAAmB,OAARvC,QAAQ,IAARA,OAAQ,EAARA,EAAUT,SACzBL,EAAAA,EAAgBsD,qBAAqBD,EAAUvJ,GAAQ8E,MAAMC,IAAS,IAAD0E,EAE5BC,EADvC3G,QAAQC,IAAI,YAAa+B,GACrB4E,MAAMC,QAAc,QAAPH,EAAC1E,EAAI,UAAE,IAAA0E,OAAA,EAANA,EAAQ5F,aACxBzC,GAAyB,QAANsI,EAAA3E,EAAI,UAAE,IAAA2E,OAAA,EAANA,EAAQ7F,aAAc,IACzC/B,GAAU,IAEVA,GAAU,EACZ,IACCsD,OAAOD,IACRpC,QAAQC,IAAImC,EAAM,GAClB,EA+egB0E,CAAe7C,EAAS,EAM1B1H,GAAI,CAAE+J,SAAU,QAASC,SAAU,UACnClC,YAAcC,IACZ/J,EAAAA,EAAAA,KAACgK,EAAAA,GAASC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACJF,GAAM,IACVG,YAAY,gBACZnI,QAAQ,WACRoI,aAAa,YAInBnK,EAAAA,EAAAA,KAAC6B,EAAAA,EAAG,CAAC5B,MAAO,CAAEc,MAAO,OAAQS,UACzBuD,KAAkB,OAANI,SAAM,IAANA,QAAM,EAANA,GAAQJ,gBAI1B/E,EAAAA,EAAAA,KAACiI,EAAAA,GAAI,CAACK,MAAI,EAACC,GAAI,GAAIvG,GAAI,CAAEmG,GAAI,GAAI3G,UAC/B6D,EAAAA,EAAAA,MAACvD,EAAAA,EAAU,CAACP,UAAU,qBAAoBC,SAAA,CAAC,eAC9BxB,EAAAA,EAAAA,KAAA,QAAMuB,UAAU,WAAUC,SAAC,YAG1C6D,EAAAA,EAAAA,MAAC4C,EAAAA,GAAI,CAACK,MAAI,EAACC,GAAI,GAAIvG,GAAI,CAAEmG,GAAI,GAAI3G,SAAA,EAC/BxB,EAAAA,EAAAA,KAACwI,EAAAA,EAAY,CACXjH,UAAU,uBACVqF,GAAG,iBACH6B,KAAK,aACLS,QAASrF,GAAmB,GAC5BkF,eAAiBC,IAAiB,OAANA,QAAM,IAANA,OAAM,EAANA,EAAQzC,aAAc,GAClDiD,OAAsB,OAAf3F,QAAe,IAAfA,OAAe,EAAfA,EAAiBoC,MACrB+C,IAAiB,OAANA,QAAM,IAANA,OAAM,EAANA,EAAQzC,cAAetB,OAChC,KACLwE,SAAUA,CAAClE,EAAGmE,KACZjE,QAAQC,IAAIgE,GACZxE,GAAsB,OAARwE,QAAQ,IAARA,OAAQ,EAARA,EAAUnD,WAAW,EAErCuD,YAAcC,IACZ/J,EAAAA,EAAAA,KAACgK,EAAAA,GAASC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACJF,GAAM,IACVG,YAAY,aACZnI,QAAQ,WACRoI,aAAa,SAGjBnI,GAAI,CAAE+J,SAAU,QAASC,SAAU,aAErChM,EAAAA,EAAAA,KAAC6B,EAAAA,EAAG,CAAC5B,MAAO,CAAEc,MAAO,OAAQS,UACzByD,KAAoB,OAANE,SAAM,IAANA,QAAM,EAANA,GAAQF,wBAKhCI,EAAAA,EAAAA,MAACmH,EAAAA,EAAa,CAAAhL,SAAA,EACZ6D,EAAAA,EAAAA,MAAC+E,EAAAA,EAAW,CACV,aAAW,eACXa,KAAK,SACLjJ,GAAI,CACFE,GAAI,CAAEqG,GAAI,GAAK8B,GAAI,GACnBa,GAAI,CAAE3C,GAAI,EAAGF,GAAI,IACjB7G,SAAA,EAEFxB,EAAAA,EAAAA,KAACwK,EAAAA,EAAM,CAACS,KAAK,SAAS1J,UAAU,cAAaC,SAAC,UAC9CxB,EAAAA,EAAAA,KAACwK,EAAAA,EAAM,CAACzI,QAAQ,YAAYR,UAAU,cAAaC,UACjDxB,EAAAA,EAAAA,KAACmL,EAAAA,IAAM,CAACzJ,KAAM,WAGlB2D,EAAAA,EAAAA,MAAC+E,EAAAA,EAAW,CAAC,aAAW,eACtBpI,GAAI,CACFE,GAAI,CAAEqG,GAAI,GAAK8B,GAAI,GACnBa,GAAI,CAAE3C,GAAI,EAAGF,GAAI,IAEnBnH,QAASA,KACPgC,GAAa,GACb4B,GAAc,IACdE,GAAY,IACZE,GAAc,IAEdE,GAAU,CAAC,EAAE,EACb5D,SAAA,EAEFxB,EAAAA,EAAAA,KAACwK,EAAAA,EAAM,CAACjJ,UAAU,cAAaC,SAAC,YAChCxB,EAAAA,EAAAA,KAACwK,EAAAA,EAAM,CAACzI,QAAQ,YAAYR,UAAU,cAAaC,UACjDxB,EAAAA,EAAAA,KAACoL,EAAAA,IAAQ,CAAC1J,KAAM,sBAO3B,ECuHP,EA70B4BvC,IAKrB,IALsB,gBAC3BgD,EAAe,gBACfsK,EAAe,gBACfpK,EAAe,iBACfqK,GACDvN,EACC,MAAMoD,EAAQC,aAAaC,QAAQ,eAE7BC,EAAS,CACbC,QAAS,CACPC,cAAc,UAADC,OAAYN,GACzB,eAAgB,mBAChBO,OAAQ,sBAILC,EAAcC,IAAmBzD,EAAAA,EAAAA,WAAS,IAC1C0D,EAAWC,IAAgB3D,EAAAA,EAAAA,WAAS,IACpC4D,EAAmBC,IAAwB7D,EAAAA,EAAAA,UAAS,KACpD8D,EAAaC,IAAkB/D,EAAAA,EAAAA,UAAS,KACxCgE,EAAeC,IAAoBjE,EAAAA,EAAAA,UAAS,KAC5CkE,EAAmBC,IAAwBnE,EAAAA,EAAAA,UAAS,KACpDoE,EAAgBC,IAAqBrE,EAAAA,EAAAA,UAAS,KAC9CsE,EAAiBC,IAAsBvE,EAAAA,EAAAA,UAAS,KAEhDwE,EAAUC,IAAezE,EAAAA,EAAAA,UAAS,KAClC0E,EAAcC,IAAmB3E,EAAAA,EAAAA,UAAS,KAC1C4E,EAAWC,IAAgB7E,EAAAA,EAAAA,UAAS,KACpC8E,EAAiBC,IAAsB/E,EAAAA,EAAAA,UAAS,WAChDgF,EAAQC,IAAajF,EAAAA,EAAAA,WAAS,IAC9BkF,EAAcC,IAAmBnF,EAAAA,EAAAA,UAAS,KAC1CoF,GAAYC,KAAiBrF,EAAAA,EAAAA,UAAS,KAEtCsF,GAAYC,KAAiBvF,EAAAA,EAAAA,UAAS,KACtCwF,GAAUC,KAAezF,EAAAA,EAAAA,UAAS,KAClC0F,GAAYC,KAAiB3F,EAAAA,EAAAA,UAAS,KAEtC4F,GAAQC,KAAa7F,EAAAA,EAAAA,YAEtBoN,GAAsBD,EAAiB5F,cACvC8F,GAAsBF,EAAiBvG,cACvC0G,GAAmBH,EAAiBnG,WACpCuG,GAAoBJ,EAAiBjG,WACrCsG,GAAsBL,EAAiBlG,cACvCwG,GAAkBN,EAAiBhG,WAEzC7G,EAAAA,EAAAA,YAAU,KACRqE,EAAgByI,IAChBjI,EAAgBkI,IAChBxI,EAAayI,IACbjI,GAAckI,IACd9J,EAAgB+J,IAChB/I,EAAYgJ,GAAgB,GAC3B,CACDN,EACAC,GACAC,GACAC,GACAC,GACAC,GACAC,KAIF,MAoEMpD,GAAiBF,IACrBjE,QAAQC,IAAI,qBAA8B,OAARgE,QAAQ,IAARA,OAAQ,EAARA,EAAUT,UAC5CL,EAAAA,EACGe,mCAAmCD,EAAUhH,GAC7C8E,MAAMC,IACLhC,QAAQC,IAAI,OAAQ+B,EAAIzB,QACxBpC,EAAkB6D,GACE,KAAb,OAAHA,QAAG,IAAHA,OAAG,EAAHA,EAAKzB,QACPxB,GAAU,GAGVA,GAAU,EAEZ,IACCsD,OAAOD,IACRpC,QAAQC,IAAImC,EAAM,GAClB,GAGNhI,EAAAA,EAAAA,YAAU,KACR+J,GAAcgD,GAAoB,GACjC,CAACF,EAAkBE,KAoJtB,OACEvH,EAAAA,EAAAA,MAAAzD,EAAAA,SAAA,CAAAJ,SAAA,EACExB,EAAAA,EAAAA,KAAC8B,EAAAA,EAAU,CAACC,QAAQ,KAAKC,GAAI,CAAEC,WAAY,KAAMT,SAAC,qBAGlDxB,EAAAA,EAAAA,KAAC8B,EAAAA,EAAU,CAACC,QAAQ,KAAKC,GAAI,CAAEC,WAAY,KAAMT,SAAC,oFAKlD6D,EAAAA,EAAAA,MAAA,QAAMC,SAxDoBC,IAE5B,GADAA,EAAEC,iBA9EiBG,MACnB,MAAMC,EAAY,CAAC,EAmBnB,YAjBqBC,IAAjB5B,GAA+C,OAAjBA,GAA0C,KAAjBA,IACzD2B,EAAU3B,aAAe,8BAEV4B,IAAb9B,GAAuC,OAAbA,GAAkC,KAAbA,IACjD6B,EAAU7B,SAAW,0BAElBM,IACHuB,EAAUvB,gBAAkB,kCAEzBI,IACHmB,EAAUnB,aAAe,8BAEtBE,KACHiB,EAAUjB,WAAa,4BAGzBS,GAAUQ,GAC+B,IAAlCE,OAAOC,KAAKH,GAAWI,MAAY,EA2DtCL,GAAgB,CAClB,IAAIW,EAAU,CACZM,GAAI8F,EAAiB9F,GACrBqG,kBAAmBP,EAAiBO,kBACpC9G,cAAe1B,EACf8B,WAAYpC,EACZqC,cAAezD,EACf0D,WAAY9B,GACZ+B,UAAW3C,EACX4C,gBAA6B,OAAZ1C,QAAY,IAAZA,OAAY,EAAZA,EAAc2C,GAC/BC,iBAAkBxC,EAClByC,cAA2B,OAAZ7C,QAAY,IAAZA,OAAY,EAAZA,EAAc6C,cAC7BC,WAAYC,SAASxE,aAAaC,QAAQ,mBAC1CwE,WAAYD,SAASxE,aAAaC,QAAQ,cAC1CyE,WAAYF,SAASxE,aAAaC,QAAQ,WAC1C0E,WAAYH,SAASxE,aAAaC,QAAQ,YAE5C6E,IAAAA,IACO,GAADzE,OAAI0E,EAAAA,GAAQ,+BAA+BjB,EAAS5D,GACvD8E,MAAMC,IAAS,IAADiE,EACbjG,QAAQC,IAAI+B,GACL,OAAHA,QAAG,IAAHA,GAAS,QAANiE,EAAHjE,EAAKE,YAAI,IAAA+D,GAATA,EAAW9E,IACbR,EAAAA,GAAMwB,QAAQ,qCACd6E,GAAgB,GAChBtK,GAAgB,GAChBE,IAEA+C,GAAU,CAAC,IAEXgB,EAAAA,GAAMyB,MAAM,yCACd,IACCC,OAAOD,IACRpC,QAAQC,IAAImC,GACZzB,EAAAA,GAAMyB,MAAMA,EAAME,QAAQ,GAEhC,GAmBuCvG,SAAA,EACnCxB,EAAAA,EAAAA,KAAC6B,EAAAA,EAAG,CAACG,GAAI,CAAEgG,UAAW,SAAUxG,UAC9B6D,EAAAA,EAAAA,MAAC4C,EAAAA,GAAI,CAACC,WAAS,EAAClG,GAAI,CAAEE,GAAI,EAAGiG,GAAI,CAAEC,GAAI,EAAGC,GAAI,IAAM7G,SAAA,EA6ClD6D,EAAAA,EAAAA,MAAC4C,EAAAA,GAAI,CAACK,MAAI,EAACC,GAAI,GAAIhH,UAAU,MAAMS,GAAI,CAAEE,GAAI,GAAIV,SAAA,EAE/C6D,EAAAA,EAAAA,MAACvD,EAAAA,EAAU,CAACP,UAAU,iCAAiCS,GAAI,CAAEE,GAAI,GAAIV,SAAA,CAAC,kBACtDxB,EAAAA,EAAAA,KAAA,QAAMuB,UAAU,WAAUC,SAAC,UAG3C6D,EAAAA,EAAAA,MAACxD,EAAAA,EAAG,CAACN,UAAU,8BAA6BC,SAAA,EAC1CxB,EAAAA,EAAAA,KAACwI,EAAAA,EAAY,CACXjH,UAAU,uBACVkH,KAAK,eACLC,QArPSC,KACvBC,EAAAA,EAAgBrF,cAAcb,GAAQ8E,MAAMC,IAC1ChC,QAAQC,IAAI,MAAO+B,GACnB/D,EAAwB,OAAH+D,QAAG,IAAHA,OAAG,EAAHA,EAAKoB,QAAQ3C,IAA0B,KAAjB,OAAHA,QAAG,IAAHA,OAAG,EAAHA,EAAK4C,cAAsB,IAClEhB,OAAOD,IACRpC,QAAQC,IAAImC,EAAM,GAClB,EAgPYkB,eAAiBC,GACO,kBAAXA,EACFA,EAELA,GAAgB,OAANA,QAAM,IAANA,GAAAA,EAAQC,SACP,OAAND,QAAM,IAANA,OAAM,EAANA,EAAQC,SAEV,GAETC,QAASzF,EACT+F,MAAO/E,EACPgF,SAAUA,CAAClE,EAAGmE,IAlNAA,KAC5BjE,QAAQC,IAAIgE,GACZhF,EAAwB,OAARgF,QAAQ,IAARA,OAAQ,EAARA,EAAUT,UAC1BW,GAAsB,OAARF,QAAQ,IAARA,OAAQ,EAARA,EAAUT,SAAS,EA+MQiE,CAAqBxD,GAChDG,qBAAsBA,CAACb,EAAQQ,KACvB,OAANR,QAAM,IAANA,OAAM,EAANA,EAAQC,YAAaO,GAAmB,KAAVA,EAEhCM,YAAcC,IACZ/J,EAAAA,EAAAA,KAACgK,EAAAA,GAASC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACJF,GAAM,IACVG,YAAY,gBACZnI,QAAQ,WACRoI,aAAa,YAInBnK,EAAAA,EAAAA,KAAC6B,EAAAA,EAAG,CAAC5B,MAAO,CAAEc,MAAO,OAAQS,UACzBiD,IAAsB,OAANU,SAAM,IAANA,QAAM,EAANA,GAAQV,oBAG9BzE,EAAAA,EAAAA,KAAC6B,EAAAA,EAAG,CAACN,UAAU,uCAAsCC,UACnD6D,EAAAA,EAAAA,MAAC+E,EAAAA,EAAW,CAAC,aAAW,eAAepI,GAAI,CAAEpB,MAAO,CAAE2H,GAAI,kBAAmBF,GAAI,kBAAmBgC,GAAI,kBAAmBC,GAAI,mBAAqBpI,GAAI,CAAEqG,GAAI,EAAGF,GAAI,IAAOnH,QAvG1JqJ,KAC9BrH,GAAa,EAAK,EAsGuM1B,SAAA,EAC3MxB,EAAAA,EAAAA,KAACwK,EAAAA,EAAM,CAACjJ,UAAU,gBAAgBS,GAAI,CAAEpB,MAAO,CAAE2H,GAAI,kBAAmBF,GAAI,kBAAmBgC,GAAI,kBAAmBC,GAAI,oBAAsB9I,SAAC,eACjJxB,EAAAA,EAAAA,KAACwK,EAAAA,EAAM,CAACzI,QAAQ,YAAYR,UAAU,cAAaC,UACjDxB,EAAAA,EAAAA,KAACyK,EAAAA,IAAM,CAAC/I,KAAM,gBAMV,IAAX6C,IACCc,EAAAA,EAAAA,MAAC4C,EAAAA,GAAI,CAACK,MAAI,EAACC,GAAI,GAAIhH,UAAU,MAAMS,GAAI,CAAEE,GAAI,GAAIV,SAAA,EAE/CxB,EAAAA,EAAAA,KAAC8B,EAAAA,EAAU,CAACP,UAAU,uBAAuBS,GAAI,CAAEE,GAAI,GAAIV,SAAC,gBAI5DxB,EAAAA,EAAAA,KAAC6B,EAAAA,EAAG,CAACN,UAAU,8BAA6BC,UAC1CxB,EAAAA,EAAAA,KAACwI,EAAAA,EAAY,CACXjH,UAAU,uBACVkH,KAAK,YACLS,QAASvF,EACToF,eAAiBC,GACO,kBAAXA,EACFA,EAELA,GAAgB,OAANA,QAAM,IAANA,GAAAA,EAAQzC,WACP,OAANyC,QAAM,IAANA,OAAM,EAANA,EAAQzC,WAEV,GAETiD,MAAOrF,EACPsF,SAAUA,CAAClE,EAAGmE,KACZjE,QAAQC,IAAIgE,GACRA,GACFtF,EAAqB,OAARsF,QAAQ,IAARA,OAAQ,EAARA,EAAUnD,YACvBjC,EAAmB,YAEnBF,EAAa,IACbE,EAAmB,SACrB,EAEFuF,qBAAsBA,CAACb,EAAQQ,KACvB,OAANR,QAAM,IAANA,OAAM,EAANA,EAAQzC,cAAeiD,GAAmB,KAAVA,EAElCM,YAAcC,IACZ/J,EAAAA,EAAAA,KAACgK,EAAAA,GAASC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACJF,GAAM,IACVG,YAAY,aACZnI,QAAQ,WACRoI,aAAa,iBAQzB9E,EAAAA,EAAAA,MAAC4C,EAAAA,GAAI,CAACK,MAAI,EAACC,GAAI,GAAIhH,UAAU,MAAMS,GAAI,CAAEE,GAAI,GAAIV,SAAA,EAE/C6D,EAAAA,EAAAA,MAACvD,EAAAA,EAAU,CAACP,UAAU,uBAAuBS,GAAI,CAAEE,GAAI,GAAIV,SAAA,CAAC,kBAC5CxB,EAAAA,EAAAA,KAAA,QAAMuB,UAAU,WAAUC,SAAC,UAW3C6D,EAAAA,EAAAA,MAACxD,EAAAA,EAAG,CAACN,UAAU,8BAA6BC,SAAA,EAC1CxB,EAAAA,EAAAA,KAACwI,EAAAA,EAAY,CACXjH,UAAU,uBACVkH,KAAK,eACLC,QAzZegC,KAC7BpD,IAAAA,IACO,GAADzE,OAAI0E,EAAAA,GAAQ,6BAA6B,CAC3C5E,QAAS,CACPC,cAAc,UAADC,OAAYN,GACzB,eAAgB,mBAChBO,OAAQ,sBAGX0E,MAAMC,IACLhC,QAAQC,IAAI,UAAW+B,EAAIE,MAC3BvE,EAAqBqE,EAAIE,KAAKiD,QAAQ,IACrC9C,OAAOD,IACRpC,QAAQC,IAAImC,EAAM,GAClB,EA4YUkB,eAAiBC,GACO,kBAAXA,EACFA,EAELA,GAAgB,OAANA,QAAM,IAANA,GAAAA,EAAQlC,cACP,OAANkC,QAAM,IAANA,OAAM,EAANA,EAAQlC,cAEV,GAEToC,QAAS/F,EACTqG,MAAOvF,EACPwF,SAAUA,CAAClE,EAAGmE,KACZjE,QAAQC,IAAIgE,GACZxF,EAAgBwF,GArZLA,KAC3BpC,IAAAA,IACO,GAADzE,OACC0E,EAAAA,GAAQ,8CAAA1E,OAA6C6G,EAAS5C,eACjEpE,GAED8E,MAAMC,IAAS,IAADoD,EAAAC,EACbrF,QAAQC,IAAI,SAAU+B,EAAIE,MAC1B3D,EAAuB,QAAZ6G,EAACpD,EAAIE,KAAK,UAAE,IAAAkD,OAAA,EAAXA,EAAanE,WACzB9B,GAAyB,QAAZkG,EAACrD,EAAIE,KAAK,UAAE,IAAAmD,OAAA,EAAXA,EAAarE,WAAW,IACrCqB,OAAOD,IACRpC,QAAQC,IAAImC,EAAM,GAClB,EA0YYkD,CAAoBrB,EAAS,EAE/BG,qBAAsBA,CAACb,EAAQQ,KACvB,OAANR,QAAM,IAANA,OAAM,EAANA,EAAQlC,iBAAkB0C,GAAmB,KAAVA,EAErCM,YAAcC,IACZ/J,EAAAA,EAAAA,KAACgK,EAAAA,GAASC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACJF,GAAM,IACVG,YAAY,gBACZnI,QAAQ,WACRoI,aAAa,YAInBnK,EAAAA,EAAAA,KAAC6B,EAAAA,EAAG,CAAC5B,MAAO,CAAEc,MAAO,OAAQS,UACzByC,IAAsB,OAANkB,SAAM,IAANA,QAAM,EAANA,GAAQlB,uBA4DhCoB,EAAAA,EAAAA,MAAC4C,EAAAA,GAAI,CAACK,MAAI,EAACC,GAAI,GAAIhH,UAAU,MAAMS,GAAI,CAAEE,GAAI,GAAIV,SAAA,EAE/C6D,EAAAA,EAAAA,MAACvD,EAAAA,EAAU,CAACP,UAAU,uBAAuBS,GAAI,CAAEE,GAAI,GAAIV,SAAA,CAAC,iBAC7CxB,EAAAA,EAAAA,KAAA,QAAMuB,UAAU,WAAUC,SAAC,UAG1C6D,EAAAA,EAAAA,MAACxD,EAAAA,EAAG,CAACN,UAAU,8BAA6BC,SAAA,EAC1CxB,EAAAA,EAAAA,KAACgK,EAAAA,EAAS,CACRzI,UAAU,mBACVkH,KAAK,aACLe,MAAO7E,GAEPuF,YAAY,eACZnI,QAAQ,WACRoI,aAAa,MACba,UAAQ,KAEVhL,EAAAA,EAAAA,KAAC6B,EAAAA,EAAG,CAAC5B,MAAO,CAAEc,MAAO,OAAQS,UACzBmD,KAAoB,OAANQ,SAAM,IAANA,QAAM,EAANA,GAAQR,qBAqC9BU,EAAAA,EAAAA,MAAC4C,EAAAA,GAAI,CAACK,MAAI,EAACC,GAAI,GAAIhH,UAAU,MAAMS,GAAI,CAAEE,GAAI,GAAIV,SAAA,EAE/C6D,EAAAA,EAAAA,MAACvD,EAAAA,EAAU,CAACP,UAAU,uBAAuBS,GAAI,CAAEE,GAAI,GAAIV,SAAA,CAAC,cAChDxB,EAAAA,EAAAA,KAAA,QAAMuB,UAAU,WAAUC,SAAC,UAEvC6D,EAAAA,EAAAA,MAACxD,EAAAA,EAAG,CAACN,UAAU,8BAA6BC,SAAA,EAC1CxB,EAAAA,EAAAA,KAACgK,EAAAA,EAAS,CACRzI,UAAU,mBACVkH,KAAK,WACLe,MAAOzF,EACPmG,YAAY,YACZnI,QAAQ,WACRoI,aAAa,MACba,UAAQ,KAEVhL,EAAAA,EAAAA,KAAC6B,EAAAA,EAAG,CAAC5B,MAAO,CAAEc,MAAO,OAAQS,UACzBuC,IAAkB,OAANoB,SAAM,IAANA,QAAM,EAANA,GAAQpB,wBAmBhCsB,EAAAA,EAAAA,MAACxD,EAAAA,EAAG,CAACN,UAAU,UAAUS,GAAI,CAAEE,GAAI,GAAIV,SAAA,EACrC6D,EAAAA,EAAAA,MAAC+E,EAAAA,EAAW,CACV,aAAW,eACXa,KAAK,SACLjJ,GAAI,CACFE,GAAI,CAAEqG,GAAI,GAAK8B,GAAI,GACnBa,GAAI,CAAE3C,GAAI,EAAGF,GAAI,IACjB7G,SAAA,EAEFxB,EAAAA,EAAAA,KAACwK,EAAAA,EAAM,CAACS,KAAK,SAAS1J,UAAU,cAAaC,SAAC,YAC9CxB,EAAAA,EAAAA,KAACwK,EAAAA,EAAM,CAACzI,QAAQ,YAAYR,UAAU,cAAaC,UACjDxB,EAAAA,EAAAA,KAACmL,EAAAA,IAAM,CAACzJ,KAAM,WAGlB2D,EAAAA,EAAAA,MAAC+E,EAAAA,EAAW,CAAC,aAAW,eACtBpI,GAAI,CACFE,GAAI,CAAEqG,GAAI,GAAK8B,GAAI,GACnBa,GAAI,CAAE3C,GAAI,EAAGF,GAAI,IAEnBnH,QAASA,KACPiB,GAAgB,GAChBsK,GAAgB,GAChBrH,GAAU,CAAC,EAAE,EACb5D,SAAA,EACFxB,EAAAA,EAAAA,KAACwK,EAAAA,EAAM,CAACjJ,UAAU,cAAaC,SAAC,YAChCxB,EAAAA,EAAAA,KAACwK,EAAAA,EAAM,CAACzI,QAAQ,YAAYR,UAAU,cAAaC,UACjDxB,EAAAA,EAAAA,KAACoL,EAAAA,IAAQ,CAAC1J,KAAM,iBAMxB1B,EAAAA,EAAAA,KAACqL,EAAAA,EAAM,CACLC,KAAMrI,EACN,kBAAgB,qBAChB,mBAAiB,2BAA0BzB,UAE3CxB,EAAAA,EAAAA,KAAA,QAAMsF,SArd0BC,IAEpC,GADAA,EAAEC,iBApBkB+F,MACpB,MAAM3F,EAAY,CAAC,EAanB,YAXmBC,IAAfhB,IAA2C,OAAfA,IAAsC,KAAfA,KACrDe,EAAUf,WAAa,4BAEpBE,KACHa,EAAUb,SAAW,0BAElBE,KACHW,EAAUX,WAAa,2BAGzBG,GAAUQ,GAC+B,IAAlCE,OAAOC,KAAKH,GAAWI,MAAY,EAOtCuF,GAAiB,CACnB,IAAIjF,EAAU,CACZkF,UAAWzG,GACXwB,WAAYtB,GACZwG,gBAAiB,GACjBvE,WAAYF,SAASxE,aAAaC,QAAQ,WAC1C0E,WAAYH,SAASxE,aAAaC,QAAQ,YAE5C6E,IAAAA,KACQ,GAADzE,OAAI0E,EAAAA,GAAQ,+BAA+BjB,EAAS5D,GACxD8E,MAAMC,IAAS,IAADkD,EACblF,QAAQC,IAAI+B,GACL,OAAHA,QAAG,IAAHA,GAAS,QAANkD,EAAHlD,EAAKE,YAAI,IAAAgD,GAATA,EAAW/D,IACbR,EAAAA,GAAMwB,QAAQ,+BACdgC,GAAcgD,IACd9H,GAAc,IACdE,GAAY,IACZE,GAAc,IACdhC,GAAa,GAEbkC,GAAU,CAAC,KAEXgB,EAAAA,GAAMyB,MAAM,qBACZ3E,GAAa,GACf,IACC4E,OAAOD,IACRpC,QAAQC,IAAImC,GACZzB,EAAAA,GAAMyB,MAAMA,EAAME,QAAQ,GAEhC,GAsbiDvG,UAC3C6D,EAAAA,EAAAA,MAAA,OAAA7D,SAAA,EACE6D,EAAAA,EAAAA,MAACsG,EAAAA,EAAa,CAAAnK,SAAA,EACZxB,EAAAA,EAAAA,KAAC8B,EAAAA,EAAU,CAACC,QAAQ,KAAIP,SAAC,uBACzB6D,EAAAA,EAAAA,MAAC4C,EAAAA,GAAI,CAACC,WAAS,EAAClG,GAAI,CAAEE,GAAI,GAAIV,SAAA,EAC5BxB,EAAAA,EAAAA,KAACiI,EAAAA,GAAI,CAACK,MAAI,EAACC,GAAI,GAAIvG,GAAI,CAAEmG,GAAI,GAAI3G,UAC/B6D,EAAAA,EAAAA,MAACvD,EAAAA,EAAU,CAACP,UAAU,qBAAoBC,SAAA,CAAC,eAC9BxB,EAAAA,EAAAA,KAAA,QAAMuB,UAAU,WAAUC,SAAC,YAG1C6D,EAAAA,EAAAA,MAAC4C,EAAAA,GAAI,CAACK,MAAI,EAACC,GAAI,GAAIvG,GAAI,CAAEmG,GAAI,GAAI3G,SAAA,EAC/BxB,EAAAA,EAAAA,KAACwI,EAAAA,EAAY,CACXE,QA7lBKkD,gBACftE,IAAAA,KAAW,GAADzE,OACX0E,EAAAA,GAAQ,2BACX7E,GACA8E,MAAMC,IACNhC,QAAQC,IAAO,OAAH+B,QAAG,IAAHA,OAAG,EAAHA,EAAKE,MACjBrE,EAAkB,OAAHmE,QAAG,IAAHA,OAAG,EAAHA,EAAKE,KAAK,IACxBG,OAAOD,IACRpC,QAAQC,IAAImC,EAAM,GAClB,EAqlBctG,UAAU,uBACVqF,GAAG,iBACHsC,QAAS7F,EACT0F,eAAiBC,GAAiB,OAANA,QAAM,IAANA,OAAM,EAANA,EAAQ6C,WACpCrC,OAAkB,OAAXnG,QAAW,IAAXA,OAAW,EAAXA,EAAa4C,MACjB+C,IAAiB,OAANA,QAAM,IAANA,OAAM,EAANA,EAAQ6C,cAAehH,OAChC,KACL4E,SAAUA,CAAClE,EAAGmE,KACZjE,QAAQC,IAAIgE,GACZ5E,GAAsB,OAAR4E,QAAQ,IAARA,OAAQ,EAARA,EAAUmC,YA3lBtBnC,KACpB,IAAIpD,EAAU,CACZuF,WAAoB,OAARnC,QAAQ,IAARA,OAAQ,EAARA,EAAUmC,YAExBvE,IAAAA,KACQ,GAADzE,OAAI0E,EAAAA,GAAQ,iCAAiCjB,EAAS5D,GAC1D8E,MAAMC,IACLhC,QAAQC,IAAI,MAAO+B,GACnBjE,EAAiBiE,EAAIE,KAAK,IACzBG,OAAOD,IACRpC,QAAQC,IAAImC,EAAM,GAClB,EAilBciE,CAAapC,EAAS,EAExB1H,GAAI,CAAE+J,SAAU,QAASC,SAAU,UACnClC,YAAcC,IACZ/J,EAAAA,EAAAA,KAACgK,EAAAA,GAASC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACJF,GAAM,IACVG,YAAY,YACZnI,QAAQ,WACRoI,aAAa,YAInBnK,EAAAA,EAAAA,KAAC6B,EAAAA,EAAG,CAAC5B,MAAO,CAAEc,MAAO,OAAQS,UACzBqD,KAAoB,OAANM,SAAM,IAANA,QAAM,EAANA,GAAQN,kBAI5B7E,EAAAA,EAAAA,KAACiI,EAAAA,GAAI,CAACK,MAAI,EAACC,GAAI,GAAIvG,GAAI,CAAEmG,GAAI,GAAI3G,UAC/B6D,EAAAA,EAAAA,MAACvD,EAAAA,EAAU,CAACP,UAAU,qBAAoBC,SAAA,CAAC,4BACjBxB,EAAAA,EAAAA,KAAA,QAAMuB,UAAU,WAAUC,SAAC,YAGvD6D,EAAAA,EAAAA,MAAC4C,EAAAA,GAAI,CAACK,MAAI,EAACC,GAAI,GAAIvG,GAAI,CAAEmG,GAAI,GAAI3G,SAAA,EAC/BxB,EAAAA,EAAAA,KAACwI,EAAAA,EACC,CACAjH,UAAU,uBACVqF,GAAG,iBACHsC,QAAS3F,EACTwF,eAAiBC,GAAiB,OAANA,QAAM,IAANA,OAAM,EAANA,EAAQC,SACpCO,OAAoB,OAAbjG,QAAa,IAAbA,OAAa,EAAbA,EAAe0C,MACnB+C,IAAiB,OAANA,QAAM,IAANA,OAAM,EAANA,EAAQC,YAAalE,OAC9B,KACL0E,SAAUA,CAAClE,EAAGmE,KACZjE,QAAQC,IAAIgE,GACZ1E,GAAoB,OAAR0E,QAAQ,IAARA,OAAQ,EAARA,EAAUT,UAhlBlBS,KACtB,IAAIuC,EAAmB,OAARvC,QAAQ,IAARA,OAAQ,EAARA,EAAUT,SACzBL,EAAAA,EAAgBsD,qBAAqBD,EAAUvJ,GAAQ8E,MAAMC,IAAS,IAAD0E,EAE5BC,EADvC3G,QAAQC,IAAI,OAAQ+B,GAChB4E,MAAMC,QAAc,QAAPH,EAAC1E,EAAI,UAAE,IAAA0E,OAAA,EAANA,EAAQ5F,aACxBzC,GAAyB,QAANsI,EAAA3E,EAAI,UAAE,IAAA2E,OAAA,EAANA,EAAQ7F,aAAc,IACzC/B,GAAU,IAEVA,GAAU,EACZ,IACCsD,OAAOD,IACRpC,QAAQC,IAAImC,EAAM,GAClB,EAqkBgB0E,CAAe7C,EAAS,EAM1B1H,GAAI,CAAE+J,SAAU,QAASC,SAAU,UACnClC,YAAcC,IACZ/J,EAAAA,EAAAA,KAACgK,EAAAA,GAASC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACJF,GAAM,IACVG,YAAY,gBACZnI,QAAQ,WACRoI,aAAa,YAInBnK,EAAAA,EAAAA,KAAC6B,EAAAA,EAAG,CAAC5B,MAAO,CAAEc,MAAO,OAAQS,UACzBuD,KAAkB,OAANI,SAAM,IAANA,QAAM,EAANA,GAAQJ,gBAI1B/E,EAAAA,EAAAA,KAACiI,EAAAA,GAAI,CAACK,MAAI,EAACC,GAAI,GAAIvG,GAAI,CAAEmG,GAAI,GAAI3G,UAC/B6D,EAAAA,EAAAA,MAACvD,EAAAA,EAAU,CAACP,UAAU,qBAAoBC,SAAA,CAAC,eAC9BxB,EAAAA,EAAAA,KAAA,QAAMuB,UAAU,WAAUC,SAAC,YAG1C6D,EAAAA,EAAAA,MAAC4C,EAAAA,GAAI,CAACK,MAAI,EAACC,GAAI,GAAIvG,GAAI,CAAEmG,GAAI,GAAI3G,SAAA,EAC/BxB,EAAAA,EAAAA,KAACwI,EAAAA,EAAY,CACXjH,UAAU,uBACVqF,GAAG,iBACH6B,KAAK,aACLS,QAASrF,EACTkF,eAAiBC,GAAiB,OAANA,QAAM,IAANA,OAAM,EAANA,EAAQzC,WACpCiD,OAAsB,OAAf3F,QAAe,IAAfA,OAAe,EAAfA,EAAiBoC,MACrB+C,IAAiB,OAANA,QAAM,IAANA,OAAM,EAANA,EAAQzC,cAAetB,OAChC,KACLwE,SAAUA,CAAClE,EAAGmE,KACZjE,QAAQC,IAAIgE,GACZxE,GAAsB,OAARwE,QAAQ,IAARA,OAAQ,EAARA,EAAUnD,WAAW,EAErC4D,aAAa,MACbnI,GAAI,CAAE+J,SAAU,QAASC,SAAU,UACnClC,YAAcC,IACZ/J,EAAAA,EAAAA,KAACgK,EAAAA,GAASC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACJF,GAAM,IACVG,YAAY,aACZnI,QAAQ,WACRoI,aAAa,YAInBnK,EAAAA,EAAAA,KAAC6B,EAAAA,EAAG,CAAC5B,MAAO,CAAEc,MAAO,OAAQS,UACzByD,KAAoB,OAANE,SAAM,IAANA,QAAM,EAANA,GAAQF,wBAKhCI,EAAAA,EAAAA,MAACmH,EAAAA,EAAa,CAAAhL,SAAA,EACZ6D,EAAAA,EAAAA,MAAC+E,EAAAA,EAAW,CACV,aAAW,eACXa,KAAK,SACLjJ,GAAI,CACFE,GAAI,CAAEqG,GAAI,GAAK8B,GAAI,GACnBa,GAAI,CAAE3C,GAAI,EAAGF,GAAI,IACjB7G,SAAA,EAEFxB,EAAAA,EAAAA,KAACwK,EAAAA,EAAM,CAACS,KAAK,SAAS1J,UAAU,cAAaC,SAAC,YAC9CxB,EAAAA,EAAAA,KAACwK,EAAAA,EAAM,CAACzI,QAAQ,YAAYR,UAAU,cAAaC,UACjDxB,EAAAA,EAAAA,KAACmL,EAAAA,IAAM,CAACzJ,KAAM,WAGlB2D,EAAAA,EAAAA,MAAC+E,EAAAA,EAAW,CAAC,aAAW,eACtBpI,GAAI,CACFE,GAAI,CAAEqG,GAAI,GAAK8B,GAAI,GACnBa,GAAI,CAAE3C,GAAI,EAAGF,GAAI,IAEnBnH,QAASA,KACPgC,GAAa,GACb4B,GAAc,IACdE,GAAY,IACZE,GAAc,IACdE,GAAU,CAAC,EAAE,EACb5D,SAAA,EAEFxB,EAAAA,EAAAA,KAACwK,EAAAA,EAAM,CAACjJ,UAAU,cAAaC,SAAC,YAChCxB,EAAAA,EAAAA,KAACwK,EAAAA,EAAM,CAACzI,QAAQ,YAAYR,UAAU,cAAaC,UACjDxB,EAAAA,EAAAA,KAACoL,EAAAA,IAAQ,CAAC1J,KAAM,sBAO3B,E,gFC3zBP,MAyUA,EAzU4BvC,IAAuB,IAAtB,aAAEgO,GAAchO,EAC3C,MAAMoD,EAAQC,aAAaC,QAAQ,eAE7BC,EAAS,CACbC,QAAS,CACPC,cAAc,UAADC,OAAYN,GACzB,eAAgB,mBAChBO,OAAQ,sBAILsK,EAAcjL,IAAmB5C,EAAAA,EAAAA,WAAS,IAC1C8N,EAAgBjL,IAAqB7C,EAAAA,EAAAA,WAAS,IAC9C+N,EAAcb,IAAmBlN,EAAAA,EAAAA,WAAS,IAC1CgO,EAAYC,IAAiBjO,EAAAA,EAAAA,WAAS,IAEtCkO,EAAiBC,IAAsBnO,EAAAA,EAAAA,UAAS,KAChDoO,EAAyBC,IAA8BrO,EAAAA,EAAAA,UAAS,KAEhE+C,EAAWuL,IAAgBtO,EAAAA,EAAAA,UAAS,KACpCmN,EAAkBoB,IAAuBvO,EAAAA,EAAAA,UAAS,KAElDwO,EAAYC,IAAiBzO,EAAAA,EAAAA,UAAS,KAItC0O,EAAUC,IAAe3O,EAAAA,EAAAA,WAAS,IAIlC4O,EAAMC,KAAW7O,EAAAA,EAAAA,UAAS,IAC1B8O,GAAOC,KAAY/O,EAAAA,EAAAA,UAAS,IAC5BgP,GAAaC,KAAkBjP,EAAAA,EAAAA,UAAS,KACxCkP,GAAcC,KAAmBnP,EAAAA,EAAAA,UAAS4O,EAAO,GAElDQ,GAAeN,GACfO,GAAaC,KAAKC,KAAKH,GAAeJ,KAE7B9O,EAAAA,EAAAA,GAAc,OAAQ,MAGrC,MA4BM4C,GAAkBA,KACtB6L,GAAY,GACZtF,EAAAA,EACGmG,oBAAoBZ,EAAMzL,GAC1B8E,MAAMC,IACLhC,QAAQC,IAAO,OAAH+B,QAAG,IAAHA,OAAG,EAAHA,EAAK4G,OACjBR,EAAgB,OAAHpG,QAAG,IAAHA,OAAG,EAAHA,EAAKmD,SAClB0D,GAAY,OAAH7G,QAAG,IAAHA,OAAG,EAAHA,EAAK4G,OACdH,GAAY,EAAM,IAEnBpG,OAAOD,IACNpC,QAAQC,IAAImC,GACZqG,GAAY,EAAM,GAClB,GAGNrO,EAAAA,EAAAA,YAAU,KACRwC,IAAiB,GAChB,CAACwL,IAyEJ,OACE7N,EAAAA,EAAAA,KAAA4B,EAAAA,SAAA,CAAAJ,UACE6D,EAAAA,EAAAA,MAAC2J,EAAAA,EAAsB,CAAAxN,SAAA,EACrBxB,EAAAA,EAAAA,KAAC2B,EAAAA,EAAO,KACR0D,EAAAA,EAAAA,MAACxD,EAAAA,EAAG,CAACG,GAAI,CAAE9B,SAA0B,IAAjBkN,EAAwB,QAAU,QAAS5L,SAAA,EAC7D6D,EAAAA,EAAAA,MAACvD,EAAAA,EAAU,CAACC,QAAQ,KAAKC,GAAI,CAAEC,WAAY,KAAMT,SAAA,CAAC,kCAChB6M,IAAS,MAE3CrO,EAAAA,EAAAA,KAAC8B,EAAAA,EAAU,CAACC,QAAQ,KAAKC,GAAI,CAAEC,WAAY,KAAMT,SAAC,qJAKlD6D,EAAAA,EAAAA,MAAC4C,EAAAA,GAAI,CAACC,WAAS,EAAClG,GAAI,CAAEE,GAAI,GAAIV,SAAA,EAC5BxB,EAAAA,EAAAA,KAACiI,EAAAA,GAAI,CACHK,MAAI,EACJ/G,UAAU,SACVgH,GAAI,GACJF,GAAI,EACJgC,GAAI,EACJC,GAAI,KAGNtK,EAAAA,EAAAA,KAACiI,EAAAA,GAAI,CAACK,MAAI,EAACC,GAAI,GAAIF,GAAI,EAAGD,GAAI,GAAIiC,GAAI,EAAGC,GAAI,EAAE9I,UAC7CxB,EAAAA,EAAAA,KAACiP,EAAAA,GAAY,CAACC,aAhCK3J,IAC7B,IAAIoC,EAAOpC,EAAE4J,OAAO3F,MACpBwE,EAAcrG,GACL,KAATA,EAjBmBiE,iBACbtE,IAAAA,IACC,GAADzE,OAAI0E,EAAAA,GAAQ,wCAAA1E,OAAuC8E,GAAQjF,GAC9D8E,MAAMC,IAAS,IAADkD,EACblF,QAAQC,IAAO,OAAH+B,QAAG,IAAHA,OAAG,EAAHA,EAAKE,MACjBkG,EAAgB,OAAHpG,QAAG,IAAHA,OAAG,EAAHA,EAAKE,MAClB2G,GAAY,OAAH7G,QAAG,IAAHA,GAAS,QAANkD,EAAHlD,EAAKE,YAAI,IAAAgD,OAAN,EAAHA,EAAW3E,OAAO,IAE5B8B,OAAOD,IACNpC,QAAQC,IAAI,KAAMmC,EAAM,GACxB,EAOUuH,CAAazH,GAAQtF,IAAiB,EA6BS0L,WAAYA,OAGjE/N,EAAAA,EAAAA,KAACiI,EAAAA,GAAI,CAACK,MAAI,EAACC,GAAI,GAAIF,GAAI,EAAGD,GAAI,GAAIiC,GAAI,EAAGC,GAAI,EAAGtI,GAAI,CAAE9B,QAAS,OAAQC,eAAgB,WAAY+B,GAAI,CAAEqG,GAAI,EAAGF,GAAI,IAAM7G,UACxHxB,EAAAA,EAAAA,KAACqP,EAAAA,GAAe,CAACC,YAnGNC,KACrBpN,GAAgB,GAChBC,GAAkB,EAAK,EAiGiCqG,KAAM,0BAKxDpD,EAAAA,EAAAA,MAACmK,EAAAA,SAAc,CAAAhO,SAAA,EACbxB,EAAAA,EAAAA,KAAC6B,EAAAA,EAAG,CAACG,GAAI,CAAEE,GAAI,GAAIV,UACjBxB,EAAAA,EAAAA,KAACyP,EAAAA,EAAc,CACbC,YAAY,EACZC,gBAAiB,IACjBC,cAAezC,GAA8B,IAC7C0C,UAAU,EACVC,yBAAuB,EACvBlJ,GAAG,iBAAgBpF,UAEnB6D,EAAAA,EAAAA,MAAC0K,EAAAA,EAAK,CAACC,cAAY,EAACzO,UAAU,QAAOC,SAAA,EACnCxB,EAAAA,EAAAA,KAACiQ,EAAAA,EAAS,CAAC1O,UAAU,aAAYC,UAC/B6D,EAAAA,EAAAA,MAAC6K,EAAAA,EAAQ,CAAA1O,SAAA,EACPxB,EAAAA,EAAAA,KAACmQ,EAAAA,EAAS,CAAA3O,SAAC,UACXxB,EAAAA,EAAAA,KAACmQ,EAAAA,EAAS,CAAA3O,SAAC,mBAGXxB,EAAAA,EAAAA,KAACmQ,EAAAA,EAAS,CAAA3O,SAAC,mBAGXxB,EAAAA,EAAAA,KAACmQ,EAAAA,EAAS,CAACnO,GAAI,CAAE+J,SAAU,oBAAqBvK,SAAC,uBAGjDxB,EAAAA,EAAAA,KAACmQ,EAAAA,EAAS,CAAA3O,SAAC,UACXxB,EAAAA,EAAAA,KAACmQ,EAAAA,EAAS,CAAA3O,SAAC,kBACXxB,EAAAA,EAAAA,KAACmQ,EAAAA,EAAS,CAAA3O,SAAC,iBAGfxB,EAAAA,EAAAA,KAACoQ,EAAAA,EAAS,CAAA5O,SACPyM,GAAWjO,EAAAA,EAAAA,KAACqQ,EAAAA,GAAc,CAACC,UAAW,EAAGC,SAAU,KAChDlC,GAAQ,EACC,OAAT/L,QAAS,IAATA,OAAS,EAATA,EACIkO,MACA/B,GAAeF,GACfE,GAAeF,GAAcA,IAE9BkC,KAAK9I,IAEFtC,EAAAA,EAAAA,MAAC6K,EAAAA,EAAQ,CAACQ,OAAK,EAAe1O,GAAI,CAAE2O,SAAU,IAAKnP,SAAA,EACjDxB,EAAAA,EAAAA,KAACmQ,EAAAA,EAAS,CAAC,aAAW,OAAM3O,UAE1BxB,EAAAA,EAAAA,KAAC4Q,EAAAA,GAAa,CAACC,KAAU,OAAJlJ,QAAI,IAAJA,OAAI,EAAJA,EAAMP,kBAE7BpH,EAAAA,EAAAA,KAACmQ,EAAAA,EAAS,CAAC,aAAW,gBAAe3O,SAClCmG,EAAKxB,iBAERnG,EAAAA,EAAAA,KAACmQ,EAAAA,EAAS,CAAC,aAAW,gBAAe3O,SAClCmG,EAAKb,iBAER9G,EAAAA,EAAAA,KAACmQ,EAAAA,EAAS,CAAC,aAAW,oBAAmB3O,SACtCmG,EAAKd,oBAGR7G,EAAAA,EAAAA,KAACmQ,EAAAA,EAAS,CAAC,aAAW,OAAM3O,SACzBmG,EAAKjB,aAER1G,EAAAA,EAAAA,KAACmQ,EAAAA,EAAS,CAAC,aAAW,eAAc3O,SACjCmG,EAAKlB,cAERzG,EAAAA,EAAAA,KAACmQ,EAAAA,EAAS,CAAC,aAAW,SAAQ3O,UAC5B6D,EAAAA,EAAAA,MAACxD,EAAAA,EAAG,CAAAL,SAAA,EACFxB,EAAAA,EAAAA,KAAC8Q,EAAAA,EAAU,CACTpP,KAAK,QACLH,UAAU,YACVL,QAASA,IAnKpByG,KACvB8E,GAAgB,GAChBtK,GAAgB,GAChB2L,EAAoB,CAClBlH,GAAQ,OAAJe,QAAI,IAAJA,OAAI,EAAJA,EAAMf,GACVqG,kBAAuB,OAAJtF,QAAI,IAAJA,OAAI,EAAJA,EAAMsF,kBACzBhG,WAAgB,OAAJU,QAAI,IAAJA,OAAI,EAAJA,EAAMV,WAClBN,gBAAqB,OAAJgB,QAAI,IAAJA,OAAI,EAAJA,EAAMhB,gBACvBG,cAAmB,OAAJa,QAAI,IAAJA,OAAI,EAAJA,EAAMb,cACrBD,iBAAsB,OAAJc,QAAI,IAAJA,OAAI,EAAJA,EAAMd,iBACxBV,cAAmB,OAAJwB,QAAI,IAAJA,OAAI,EAAJA,EAAMxB,cACrBI,WAAgB,OAAJoB,QAAI,IAAJA,OAAI,EAAJA,EAAMpB,WAClBE,WAAgB,OAAJkB,QAAI,IAAJA,OAAI,EAAJA,EAAMlB,WAClBD,cAAmB,OAAJmB,QAAI,IAAJA,OAAI,EAAJA,EAAMnB,cACrBE,UAAe,OAAJiB,QAAI,IAAJA,OAAI,EAAJA,EAAMjB,UACjBQ,WAAgB,OAAJS,QAAI,IAAJA,OAAI,EAAJA,EAAMT,YAClB,EAmJ+C6J,CAAgBpJ,GAAMnG,UAErCxB,EAAAA,EAAAA,KAACgR,EAAAA,IAAM,OAGThR,EAAAA,EAAAA,KAAC8Q,EAAAA,EAAU,CACTpP,KAAK,QACLH,UAAU,cACVL,QAASA,KAxJlByG,KACzB6F,GAAc,GACdE,EAAuB,OAAJ/F,QAAI,IAAJA,OAAI,EAAJA,EAAMf,IACzBgH,EAA+B,OAAJjG,QAAI,IAAJA,OAAI,EAAJA,EAAMsF,mBACjCa,EAAoBnG,EAAK,EAqJWsJ,CAAkBtJ,EAAK,EACvBnG,UAEFxB,EAAAA,EAAAA,KAACkR,EAAAA,IAAQ,aAtCIvJ,EAAKf,OA8ChC5G,EAAAA,EAAAA,KAACkQ,EAAAA,EAAQ,CAAA1O,UACPxB,EAAAA,EAAAA,KAACmQ,EAAAA,EAAS,CAACgB,QAAS,EAAGC,MAAM,SAAQ5P,SAAC,6BAWpDxB,EAAAA,EAAAA,KAAC6B,EAAAA,EAAG,CAACG,GAAI,CAAE9B,QAAS,OAAQmR,SAAU,QAAS7P,UAC7CxB,EAAAA,EAAAA,KAACsR,EAAAA,EAAgB,CACf1C,WAAYA,GACZT,KAAMA,EACNoD,iBA5PWA,CAACC,EAAOC,KAC/BrD,GAAQqD,GACRjD,GAAe,IACfN,GAAY,GACZtF,EAAAA,EACGmG,oBAAoB0C,EAAS/O,GAC7B8E,MAAMC,IACLoG,EAAgB,OAAHpG,QAAG,IAAHA,OAAG,EAAHA,EAAKmD,SAClB0D,GAAY,OAAH7G,QAAG,IAAHA,OAAG,EAAHA,EAAK4G,OACdH,GAAY,EAAM,IAEnBpG,OAAOD,IACNpC,QAAQC,IAAImC,GACZqG,GAAY,EAAM,GAClB,EA+OQwD,mBApQa,CAAC,IAqQdnD,YAAaA,GACboD,wBA9OmBH,IAI/B,MAAMI,EAAiB5K,SAASwK,EAAMrC,OAAO3F,MAAO,IAC9CiI,EAAU5C,KAAKgD,OAAQ1D,EAAO,GAAKI,GAAeqD,GAAkB,EAE1EpD,GAAeoD,GACfxD,GAAQqD,EAAQ,UA4OVzR,EAAAA,EAAAA,KAAC8R,EAAAA,GAAkB,CAACC,KAAMxE,EAAYyE,QAASxE,EAAe8B,YAtLlD/J,IAClBA,EAAEC,iBAEFoD,EAAAA,EACGqJ,qBAAqBtE,EAAyBjL,GAC9C8E,MAAM0K,IACLzM,QAAQC,IAAIwM,GACZ9L,EAAAA,GAAMwB,QAAQ,GAAD/E,OAAI8K,EAAuB,6BACxCH,GAAc,GACdnL,IAAiB,IAGlByF,OAAOvC,IACNE,QAAQC,IAAIH,EAAE,GACd,EAwKyF4M,QAAS,+CAAgDvL,GAAoB,OAAhB8F,QAAgB,IAAhBA,OAAgB,EAAhBA,EAAkBvG,oBAKxKnG,EAAAA,EAAAA,KAAC6B,EAAAA,EAAG,CAACG,GAAI,CAAE9B,SAA4B,IAAnBmN,EAA0B,QAAU,QAAS7L,UAC/DxB,EAAAA,EAAAA,KAACoS,EAAqB,CACpBhQ,kBAAmBA,EACnBD,gBAAiBA,EACjBE,gBAAiBA,GACjBC,UAAWA,OAGftC,EAAAA,EAAAA,KAAC6B,EAAAA,EAAG,CAACG,GAAI,CAAE9B,SAA0B,IAAjBoN,EAAwB,QAAU,QAAS9L,UAC7DxB,EAAAA,EAAAA,KAACqS,EAAmB,CAClB5F,gBAAiBA,EACjBtK,gBAAiBA,EACjBE,gBAAiBA,GACjBqK,iBAAkBA,OAGtB1M,EAAAA,EAAAA,KAACsS,EAAAA,EAAW,CAAClT,aAAc,UAE5B,C,6DCjWQ,SAASK,EAAc8S,EAAOC,EAAKC,EAAOC,GACvD,MAAMC,GAAQC,EAAAA,EAAAA,KAERC,GAAUC,EAAAA,EAAAA,GAAcH,EAAMI,YAAYC,GAAGR,IAE7CS,GAAYH,EAAAA,EAAAA,GAAcH,EAAMI,YAAYG,KAAKV,IAEjDW,GAAeL,EAAAA,EAAAA,GAAcH,EAAMI,YAAYK,QAAQX,EAAOC,IAE9DW,GAAYP,EAAAA,EAAAA,GAAcH,EAAMI,YAAYO,KAAKd,IAEvD,MAAc,OAAVD,EACKM,EAGK,SAAVN,EACKU,EAGK,YAAVV,EACKY,EAGK,SAAVZ,EACKc,EAEF,IACT,C,yGC5BA,MAAM/B,EAAmBnS,IAOlB,IAPmB,WACxByP,EAAU,KACVT,EAAO,EAAC,iBACRoD,EAAmBA,SAAS,mBAC5BG,EAAkB,YAClBnD,EAAW,wBACXoD,EAA0BA,UAC3BxS,EAEKoU,GAAW9T,EAAAA,EAAAA,GAAc,OAAQ,MACjC+T,GAAY/T,EAAAA,EAAAA,GAAc,OAAQ,MAEtC,MAAM,eAAEgU,EAAc,kBAAEC,IAAsBC,EAAAA,EAAAA,MAI9C,OAFAlO,QAAQC,IAAI,iCAAgD,OAAd+N,QAAc,IAAdA,OAAc,EAAdA,EAAgBnI,OAG5DjG,EAAAA,EAAAA,MAAC4C,EAAAA,GAAI,CAACC,WAAS,EAAC0L,QAAS,EAAG5R,GAAI,CAAEE,GAAI,EAAGhC,QAAS,OAAQE,WAAY,UAAWoB,SAAA,EAC/ExB,EAAAA,EAAAA,KAACiI,EAAAA,GAAI,CAACK,MAAI,EAACC,GAAI,GAAIF,GAAI,EAAGgC,GAAkB,OAAdoJ,QAAc,IAAdA,GAAAA,EAAgBnI,KAAO,IAAM,EAAGhB,GAAI,OAClEtK,EAAAA,EAAAA,KAACiI,EAAAA,GAAI,CAACK,MAAI,EAACC,GAAI,GAAIF,GAAkB,OAAdoL,QAAc,IAAdA,GAAAA,EAAgBnI,KAAO,EAAI,EAAGjB,IAAkB,OAAdoJ,QAAc,IAAdA,GAAAA,EAAgBnI,KAAO,GAAOhB,GAAI,IAAKtI,GAAI,CAAE9B,QAAS,OAAQC,eAAgB,CAAEoI,GAAI,SAAUF,GAAI,YAAcjI,WAAY,SAAUyT,IAAK,sBAgBpM7T,EAAAA,EAAAA,KAACiI,EAAAA,GAAI,CAACK,MAAI,EAACC,GAAI,GAAIF,GAAkB,OAAdoL,QAAc,IAAdA,GAAAA,EAAgBnI,KAAO,EAAI,EAAGjB,GAAkB,OAAdoJ,QAAc,IAAdA,GAAAA,EAAgBnI,KAAO,IAAM,EAAGhB,GAAI,EAAGtI,GAAI,CAAE9B,QAAS,OAAQC,eAAgB,CAAEoI,GAAI,SAAUF,GAAI,YAAcjI,WAAY,SAAUyT,IAAK,mBAAoBrS,UACtNxB,EAAAA,EAAAA,KAAC8T,EAAAA,EAAU,CACT/S,MAAM,UACNsN,MAAOO,EACPT,KAAMA,EACN1E,SAAUA,CAAClE,EAAGmE,IAAa6H,EAAiBhM,EAAGmE,GAC/C3H,QAAQ,WACRgS,MAAM,UACNC,iBAAiBC,QAAQV,GAAYC,KAAaS,SAAsB,OAAdR,QAAc,IAAdA,OAAc,EAAdA,EAAgBnI,OAAQiI,GAClFW,gBAAgBD,QAAQV,GAAYC,KAAaS,SAAsB,OAAdR,QAAc,IAAdA,OAAc,EAAdA,EAAgBnI,OAAQiI,GACjFY,aAAc,QAGb,EAIX,GAAeC,EAAAA,EAAAA,MAAK9C,E,8NClDpB,MAAM+C,GAAYC,EAAAA,EAAAA,IAAOjJ,EAAAA,EAAPiJ,EAAenV,IAAA,IAAC,MAAEwT,GAAOxT,EAAA,MAAM,CAC7C,qBAAsB,CAClBsB,aAAc,EACdK,gBAAiB6R,EAAM4B,QAAQC,WAAWC,QAC1CC,OAAO,aAAD7R,OAAe8P,EAAM4B,QAAQI,UAE1C,IAEKC,GAAmBN,EAAAA,EAAAA,IAAOxD,EAAAA,EAAPwD,EAAmBlL,IAAA,IAAC,MAAEuJ,GAAOvJ,EAAA,MAAM,CACxDrI,MAAO4R,EAAM4B,QAAQ1M,MAAMgN,KAC3B,UAAW,CACP/T,gBAAiB6R,EAAM4B,QAAQ1M,MAAMiN,MACrC/T,MAAO4R,EAAM4B,QAAQC,WAAWC,SAEvC,IAEKM,GAAmBT,EAAAA,EAAAA,IAAOxS,EAAAA,EAAPwS,EAAmBU,IAAA,IAAC,MAAErC,GAAOqC,EAAA,MAAM,CACxDrU,QAASgS,EAAMiB,QAAQ,IACvBqB,UAAW,OAGXxU,aAAckS,EAAMoB,MAAMtT,aAC7B,IAGYqR,EAAqBoD,IAA4D,IAA3D,KAAEnD,EAAI,QAAEC,EAAO,YAAE1C,EAAW,QAAE6C,EAAO,GAAEvL,EAAE,SAAE2M,GAAU2B,EACpF,MAAMvC,GAAQC,EAAAA,EAAAA,KACRuC,GAASrC,EAAAA,EAAAA,GAAcH,EAAMI,YAAYG,KAAK,OAEpD,OACI7N,EAAAA,EAAAA,MAACgP,EAAS,CAAC/I,KAAMyG,EACb/F,SAAUrM,OAAOyV,YAAc,IAAM,MAAOzV,OAAOyV,YAAc,KAAazV,OAAOyV,WAAd,MACvEC,WAAS,EACTC,QAASA,IAAMtD,GAAQ,GAAOxQ,SAAA,EAE9BxB,EAAAA,EAAAA,KAAC2L,EAAAA,EAAa,CAAAnK,UACV6D,EAAAA,EAAAA,MAACvD,EAAAA,EAAU,CAACC,QAAQ,KAAIP,SAAA,CACnB2Q,GACDnS,EAAAA,EAAAA,KAAA,QAAAwB,SAAM,UACN6D,EAAAA,EAAAA,MAAA,QAAMpF,MAAO,CAAEgC,WAAY,KAAMT,SAAA,CAC5B,IAAI,IACHoF,EAAG,eAIjB5G,EAAAA,EAAAA,KAACwM,EAAAA,EAAa,CAAAhL,SACT+R,IAAsB4B,GACnB9P,EAAAA,EAAAA,MAAAzD,EAAAA,SAAA,CAAAJ,SAAA,EACIxB,EAAAA,EAAAA,KAACwK,EAAAA,EAAM,CAACzI,QAAQ,YAAYhB,MAAO,QAASwU,SAASvV,EAAAA,EAAAA,KAACkR,EAAAA,IAAQ,IAAKhQ,QAASoO,EAAY9N,SAAC,YAGzFxB,EAAAA,EAAAA,KAACwK,EAAAA,EAAM,CAACzI,QAAQ,YAAYwT,SAASvV,EAAAA,EAAAA,KAACoL,EAAAA,IAAQ,IAAKlK,QAASA,IAAM8Q,GAAQ,GAAOxQ,SAAC,eAKtF6D,EAAAA,EAAAA,MAACxD,EAAAA,EAAG,CAACN,UAAU,UAASC,SAAA,EACpB6D,EAAAA,EAAAA,MAAC+E,EAAAA,EAAW,CACR,aAAW,eACXlJ,QAASoO,EACTtN,GAAI,CACAE,GAAI,CAAEqG,GAAI,GAAK8B,GAAI,GACnBa,GAAI,CAAE3C,GAAI,EAAGF,GAAI,IACnB7G,SAAA,EAEFxB,EAAAA,EAAAA,KAACwK,EAAAA,EAAM,CAACjJ,UAAU,cAAaC,SAAC,YAGhCxB,EAAAA,EAAAA,KAACwK,EAAAA,EAAM,CAACzI,QAAQ,YAAYR,UAAU,cAAaC,UAC/CxB,EAAAA,EAAAA,KAACkR,EAAAA,IAAQ,CAACxP,KAAM,WAIxB2D,EAAAA,EAAAA,MAAC+E,EAAAA,EAAW,CACR,aAAW,eACXlJ,QAASA,IAAM8Q,GAAQ,GACvBhQ,GAAI,CACAE,GAAI,CAAEqG,GAAI,GAAK8B,GAAI,GACnBa,GAAI,CAAE3C,GAAI,EAAGF,GAAI,IACnB7G,SAAA,EAEFxB,EAAAA,EAAAA,KAACwK,EAAAA,EAAM,CAACjJ,UAAU,cAAaC,SAAC,YAChCxB,EAAAA,EAAAA,KAACwK,EAAAA,EAAM,CAACzI,QAAQ,YAAYR,UAAU,cAAaC,UAC/CxB,EAAAA,EAAAA,KAACoL,EAAAA,IAAQ,CAAC1J,KAAM,kBAM5B,EAKP8T,EAAsBC,IAAwD,IAAvD,KAAE1D,EAAI,QAAEC,EAAO,YAAE1C,EAAW,QAAE6C,EAAO,SAAEoB,GAAUkC,EACjF,OACIpQ,EAAAA,EAAAA,MAACgG,EAAAA,EAAM,CACHC,KAAMyG,EACN/F,SAAS,KACTqJ,WAAS,EAAA7T,SAAA,EAET6D,EAAAA,EAAAA,MAACsG,EAAAA,EAAa,CAAAnK,SAAA,EACVxB,EAAAA,EAAAA,KAAC8B,EAAAA,EAAU,CAACC,QAAQ,KAAIP,SACnB2Q,KAELnS,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAAC8B,EAAAA,EAAU,CAACC,QAAQ,KAAIP,SAAC,yCAI7BxB,EAAAA,EAAAA,KAACwM,EAAAA,EAAa,CAAAhL,SACT+R,GACGlO,EAAAA,EAAAA,MAAAzD,EAAAA,SAAA,CAAAJ,SAAA,EACIxB,EAAAA,EAAAA,KAACwK,EAAAA,EAAM,CAACzI,QAAQ,YAAYhB,MAAO,QAASwU,SAASvV,EAAAA,EAAAA,KAAC0V,EAAAA,IAAO,IAAKxU,QAASA,IAAM8Q,GAAQ,GAAOxQ,SAAE,SAGlGxB,EAAAA,EAAAA,KAACwK,EAAAA,EAAM,CAACzI,QAAQ,YAAYwT,SAASvV,EAAAA,EAAAA,KAAC2V,EAAAA,IAAO,IAAKzU,QAASoO,EAAY9N,SAAC,WAK5E6D,EAAAA,EAAAA,MAACxD,EAAAA,EAAG,CAACN,UAAU,UAASC,SAAA,EACpB6D,EAAAA,EAAAA,MAAC+E,EAAAA,EAAW,CACR,aAAW,eACXlJ,QAASA,IAAM8Q,GAAQ,GACvBhQ,GAAI,CACAE,GAAI,CAAEqG,GAAI,GAAK8B,GAAI,GACnBa,GAAI,CAAE3C,GAAI,EAAGF,GAAI,IACnB7G,SAAA,EAEFxB,EAAAA,EAAAA,KAACwK,EAAAA,EAAM,CAACjJ,UAAU,cAAaC,SAAC,SAGhCxB,EAAAA,EAAAA,KAACwK,EAAAA,EAAM,CAACzI,QAAQ,YAAYR,UAAU,cAAaC,UAC/CxB,EAAAA,EAAAA,KAAC0V,EAAAA,IAAO,CAAChU,KAAM,WAGvB2D,EAAAA,EAAAA,MAAC+E,EAAAA,EAAW,CACR,aAAW,eACXlJ,QAASoO,EACTtN,GAAI,CACAE,GAAI,CAAEqG,GAAI,GAAK8B,GAAI,GACnBa,GAAI,CAAE3C,GAAI,EAAGF,GAAI,IACnB7G,SAAA,EAEFxB,EAAAA,EAAAA,KAACwK,EAAAA,EAAM,CAACjJ,UAAU,cAAaC,SAAC,QAGhCxB,EAAAA,EAAAA,KAACwK,EAAAA,EAAM,CAACzI,QAAQ,YAAYR,UAAU,cAAaC,UAC/CxB,EAAAA,EAAAA,KAAC2V,EAAAA,IAAO,CAACjU,KAAM,iBAM9B,EAmEJkU,EAAwBC,IAAkC,IAAjC,KAAE9D,EAAI,QAAEC,EAAO,SAAEuB,GAAUsC,EAC7D,OACI7V,EAAAA,EAAAA,KAACqU,EAAS,CACN/I,KAAMyG,EACN/F,SAAS,KACbxK,UAEI6D,EAAAA,EAAAA,MAACsG,EAAAA,EAAa,CAAAnK,SAAA,EACV6D,EAAAA,EAAAA,MAACxD,EAAAA,EAAG,CAACG,GAAI,CAAE8T,EAAG,EAAGC,EAAG,EAAGC,GAAI,EAAG9V,QAAS,OAAQC,eAAgB,gBAAiBC,WAAY,UAAWoB,SAAA,EACnGxB,EAAAA,EAAAA,KAAC+U,EAAgB,CAAChT,QAAQ,KAAIP,SAAC,WAI/BxB,EAAAA,EAAAA,KAAC4U,EAAgB,CAAC1T,QAASA,IAAM8Q,GAAQ,GAAQhQ,GAAI,CAAE8T,EAAG,IAAMtU,UAC5DxB,EAAAA,EAAAA,KAACiW,EAAAA,IAAO,CAACvU,KAAM,WAGvB1B,EAAAA,EAAAA,KAAC8B,EAAAA,EAAU,CAACC,QAAQ,KAAKC,GAAI,CAAEjB,MAAO,kBAAmBS,SAAC,yDAItD,C","sources":["app/pages/ScrollToTop.js","app/pages/settings/Setting.js","app/pages/settings/Workflow/AssignWorkflow/CreateAssignWorkflows.js","app/pages/settings/Workflow/AssignWorkflow/EditAssignWorkflows.js","app/pages/settings/Workflow/AssignWorkflow/ListAssignWorkflows.js","app/pages/useResponsive.js","app/shared/ReuseComponents/CommonPagination.js","app/shared/ReuseComponents/ErpDialogBoxes.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { FaArrowCircleUp } from 'react-icons/fa';\r\nimport useResponsive from './useResponsive';\r\n\r\nconst ScrollToTop = ({ Scrollheight }) => {\r\n  const [isVisible, setIsVisible] = useState(false);\r\n  const isAboveXl = useResponsive(\"up\", \"xl\");\r\n\r\n  const handleScroll = () => {\r\n    if (window.scrollY > Scrollheight) {\r\n      setIsVisible(true);\r\n    } else {\r\n      setIsVisible(false);\r\n    }\r\n  };\r\n\r\n  const scrollToTopHandler = () => {\r\n    window.scrollTo({\r\n      top: 0,\r\n      behavior: 'smooth',\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    window.addEventListener('scroll', handleScroll);\r\n\r\n    return () => {\r\n      window.removeEventListener('scroll', handleScroll);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        display: isVisible ? 'flex' : 'none',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        position: 'fixed',\r\n        bottom: isAboveXl ? \"10%\" : \"10.5%\",\r\n        right: '10px',\r\n        zIndex: 99999,\r\n        borderRadius: '50%',\r\n        boxShadow: '0px 2px 9px lightgray',\r\n        padding: 0.5,\r\n        width: '35px',\r\n        height: '35px',\r\n        backgroundColor: 'white',\r\n        color: '#00bfff',\r\n        transition: 'linear 1.5s ease-in-out',\r\n        cursor: 'pointer',\r\n      }}\r\n      onClick={scrollToTopHandler}\r\n      className=\"topToBottomAnimation\"\r\n    >\r\n      <FaArrowCircleUp size={22} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ScrollToTop;\r\n","import React from 'react';\nimport { Typography } from '@mui/material';\nimport Div from \"@jumbo/shared/Div\";\nimport './Setting.css';\n\n\n\n\nconst Setting = () => {\n  return ( \n    <>\n      <Div>\n        {/* <img src='.\\images\\mainlogo-icon.jpg' width={30} height={30}></img> */}\n        <Typography variant='h1' sx={{ fontWeight: 800, mt: -2}}>Settings</Typography>\n      </Div>\n    </>\n    \n  )\n}\n\nexport default Setting;\n","import {\r\n  Autocomplete,\r\n  Button,\r\n  ButtonGroup,\r\n  Dialog,\r\n  DialogActions,\r\n  DialogContent,\r\n  Grid,\r\n  TextField,\r\n  Typography,\r\n} from \"@mui/material\";\r\nimport React, { useState } from \"react\";\r\nimport Div from \"@jumbo/shared/Div/Div\";\r\nimport axios from \"axios\";\r\nimport { BASE_URL } from \"app/services/auth-services\";\r\nimport settingServices from \"app/services/setting-api-services\";\r\nimport { toast } from \"react-toastify\";\r\nimport { FaPlus, FaSave } from \"react-icons/fa\";\r\nimport { TiCancel } from \"react-icons/ti\";\r\nimport { todayDate } from \"app/shared/ReuseComponents/DateFormatter\";\r\n\r\nconst CreateAssignWorkflows = ({\r\n  setListWorkflow,\r\n  setCreateWorkflow,\r\n  listOfWorkflows,\r\n  workflows\r\n}) => {\r\n  const token = localStorage.getItem(\"accesstoken\");\r\n\r\n  const header = {\r\n    headers: {\r\n      Authorization: `Bearer ${token}`,\r\n      \"Content-Type\": \"application/json\",\r\n      Accept: \"application/json\",\r\n    },\r\n  };\r\n\r\n  const [approverHead, setApproverHead] = useState(false);\r\n  const [openForms, setOpenForms] = useState(false);\r\n  const [workflowNamesList, setWorkflowNamesList] = useState([]);\r\n  const [listModules, setListModules] = useState([]);\r\n  const [listFormNames, setListFormNames] = useState([]);\r\n  const [listDocumentNames, setListDocumentNames] = useState([]);\r\n  const [listFieldNames, setListFieldNames] = useState([]);\r\n  const [listFieldNames2, setListFieldNames2] = useState([]);\r\n\r\n  const [ruleName, setRuleName] = useState(\"\");\r\n  const [workflowName, setWorkflowName] = useState(\"\");\r\n  const [fieldName, setFieldName] = useState(\"\");\r\n  const [basedOnWorkflow, setBasedOnWorkflow] = useState(\"Amount\");\r\n  const [amount, setAmount] = useState(true);\r\n  const [documentName, setDocumentName] = useState(\"\");\r\n  const [noOfLevels, setNoOfLevels] = useState(\"\");\r\n\r\n  const [moduleName, setModuleName] = useState(\"\");\r\n  const [formName, setFormName] = useState(\"\");\r\n  const [fieldName2, setFieldName2] = useState(\"\");\r\n\r\n  const [errors, setErrors] = useState();\r\n\r\n\r\n\r\n  const filterOptions = (listDocumentNames, { inputValue }) => {\r\n    return listDocumentNames?.filter((option) =>\r\n      option?.FormName.toLowerCase().startsWith(inputValue.toLowerCase())\r\n    );\r\n  };\r\n\r\n  const getListofWorkflowNames = () => {\r\n    axios\r\n      .get(`${BASE_URL}/Erpapp/WorkflowNamelist/`, header)\r\n      .then((res) => {\r\n        console.log(\"WFNAmes\", res.data);\r\n        setWorkflowNamesList(res?.data?.results);\r\n      }).catch((error) => {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  // workflow name filter based on workflow name\r\n  const filterWorkflowNames = (newValue) => {\r\n    axios\r\n      .get(\r\n        `${BASE_URL}/Erpapp/WorkflowNamefilter/?Workflow_Name=${newValue.Workflow_Name}`, header)\r\n      .then((res) => {\r\n        console.log(\"Filter\", res.data);\r\n        setRuleName(res.data[0]?.Rule_Name);\r\n        setNoOfLevels(res.data[0]?.Noof_Level);\r\n      }).catch((error) => {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  const getModuleNames = async () => {\r\n    await axios.post(\r\n      `${BASE_URL}/Erpapp/Formmasterlist/`,\r\n      header\r\n    ).then((res) => {\r\n      console.log(res?.data);\r\n      setListModules(res?.data);\r\n    }).catch((error) => {\r\n      console.log(error);\r\n    });\r\n  };\r\n\r\n  const getFormNames = (newValue) => {\r\n    var payload = {\r\n      ModuleName: newValue?.ModuleName,\r\n    };\r\n    axios\r\n      .post(`${BASE_URL}/Erpapp/Formpermissionfilter/`, payload, header)\r\n      .then((res) => {\r\n        console.log(\"res\", res);\r\n        setListFormNames(res?.data);\r\n      }).catch((error) => {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  const getDocumentNames = () => {\r\n    settingServices.listFormNames(header).then((res) => {\r\n      console.log(\"Res\", res);\r\n      setListDocumentNames(res?.filter((opt)=>opt?.Is_Deleted === false));\r\n    }).catch((error) => {\r\n      console.log(error);\r\n    });\r\n  };\r\n\r\n  const getFieldNames = (newValue) => {\r\n    settingServices\r\n      .filterFieldNamesFromWorkflowOrigin(newValue?.FormName, header)\r\n      .then((res) => {\r\n        console.log(\"res111\", res.length);\r\n        setListFieldNames(res);\r\n        if (res?.length === 0) {\r\n          setAmount(false);\r\n          setBasedOnWorkflow(\"Level\");\r\n        } else {\r\n          setAmount(true);\r\n          setBasedOnWorkflow(\"Amount\");\r\n        }\r\n      }).catch((error) => {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  const getFieldNames2 = (newValue) => {\r\n    var formname = newValue?.FormName;\r\n    settingServices.filterlistFieldNames(formname, header).then((res) => {\r\n      console.log(\"res111111\", res);\r\n      if (Array.isArray(res[0]?.Field_Name)) {\r\n        setListFieldNames2(res[0]?.Field_Name || []);\r\n        setAmount(true);\r\n      } else {\r\n        setAmount(false);\r\n      }\r\n    }).catch((error) => {\r\n      console.log(error);\r\n    });\r\n  };\r\n\r\n  const validateForm = () => {\r\n    const newErrors = {};\r\n\r\n    if (workflowName === undefined || workflowName === null || workflowName === \"\") {\r\n      newErrors.workflowName = \"Workflow is required.\";\r\n    }\r\n    if (ruleName === undefined || ruleName === null || ruleName === \"\") {\r\n      newErrors.ruleName = \"Rule Name is required.\";\r\n    }\r\n    if (!basedOnWorkflow) {\r\n      newErrors.basedOnWorkflow = \"Based on workflow is required.\";\r\n    }\r\n    if (!documentName) {\r\n      newErrors.documentName = \"Document Name is required.\";\r\n    }\r\n    if (!noOfLevels) {\r\n      newErrors.noOfLevels = \"No of level is required.\";\r\n    }\r\n\r\n    setErrors(newErrors);\r\n    return Object.keys(newErrors).length === 0;\r\n  };\r\n\r\n\r\n  const validateForm1 = () => {\r\n    const newErrors = {};\r\n\r\n    if (moduleName === undefined || moduleName === null || moduleName === \"\") {\r\n      newErrors.moduleName = \"Module Name is required.\";\r\n    }\r\n    if (!formName) {\r\n      newErrors.formName = \"Form Name is required.\";\r\n    }\r\n    if (!fieldName2) {\r\n      newErrors.fieldName2 = \"Field Name is required.\";\r\n    }\r\n\r\n    setErrors(newErrors);\r\n    return Object.keys(newErrors).length === 0;\r\n  };\r\n\r\n\r\n  const handleSubmitCreateFormFields = (e) => {\r\n    e.preventDefault();\r\n    if (validateForm1()) {\r\n      var payload = {\r\n        Form_Name: formName,\r\n        Field_Name: fieldName2,\r\n        FieldShort_Name: \"\",\r\n        Created_By: parseInt(localStorage.getItem(\"UserId\")),\r\n        Updated_By: parseInt(localStorage.getItem(\"UserId\")),\r\n        Created_Date: todayDate\r\n      };\r\n      axios\r\n        .post(`${BASE_URL}/Erpapp/WorkfloworiginCRUD/`, payload, header)\r\n        .then((res) => {\r\n          console.log(res);\r\n          if (res?.data?.id) {\r\n            toast.success(\"Fields Created Successfully\");\r\n            setModuleName(\"\");\r\n            setFormName(\"\");\r\n            setFieldName2(\"\");\r\n            setOpenForms(false);\r\n            setErrors({})\r\n          } else {\r\n            toast.error(\"Check Your Inputs\");\r\n            setOpenForms(true);\r\n          }\r\n        }).catch((error) => {\r\n          console.log(error);\r\n          toast.error(error.message)\r\n        });\r\n    }\r\n  };\r\n\r\n\r\n  const handleSubmitWorkflow = (e) => {\r\n    e.preventDefault();\r\n    console.log(\"workflowsworkflows\", workflows)\r\n    if (validateForm()) {\r\n      if (workflows?.find((opt) => opt?.Document_Name === documentName)) {\r\n        toast.warning(`Assign Workflow For ${documentName} is already created.`)\r\n      } else {\r\n        var payload = {\r\n          Document_Name: documentName,\r\n          Field_Name: fieldName,\r\n          Head_Approval: approverHead,\r\n          Noof_Level: noOfLevels,\r\n          Rule_Name: ruleName,\r\n          WorkflowName_Id: workflowName?.id,\r\n          Workflow_Basedon: basedOnWorkflow,\r\n          Workflow_Name: workflowName?.Workflow_Name,\r\n          Company_Id: parseInt(localStorage.getItem(\"OrganizationId\")),\r\n          Partner_Id: parseInt(localStorage.getItem(\"PartnerId\")),\r\n          Created_By: parseInt(localStorage.getItem(\"UserId\")),\r\n          Updated_By: parseInt(localStorage.getItem(\"UserId\")),\r\n          Created_Date: todayDate\r\n        };\r\n        axios\r\n          .post(`${BASE_URL}/Erpapp/AssignworkflowCRUD/`, payload, header)\r\n          .then((res) => {\r\n            console.log(res);\r\n            if (res?.data?.id) {\r\n              toast.success(\"Workflow is Assigned Successfully\");\r\n              setCreateWorkflow(false);\r\n              setListWorkflow(true);\r\n              listOfWorkflows();\r\n\r\n              setDocumentName(\"\");\r\n              setNoOfLevels(\"\");\r\n              setRuleName(\"\");\r\n              setWorkflowName(\"\");\r\n              setBasedOnWorkflow(\"\");\r\n              setFieldName(\"\");\r\n              setErrors({})\r\n            } else {\r\n              toast.error(\"Workflow Matching Query Doesn't Exist.\")\r\n            }\r\n          }).catch((error) => {\r\n            console.log(error);\r\n            toast.error(error.message)\r\n          });\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleOpenWorkflowSetup = () => {\r\n    setOpenForms(true);\r\n  };\r\n\r\n\r\n  return (\r\n    <>\r\n\r\n      <Typography variant=\"h3\" sx={{ fontWeight: 600 }}>\r\n        Assign Workflow\r\n      </Typography>\r\n      <Typography variant=\"h4\" sx={{ fontWeight: 500 }}>\r\n        Users shall use this form to set up the approvers to approve various\r\n        documents\r\n      </Typography>\r\n\r\n      <form onSubmit={handleSubmitWorkflow}>\r\n        <Div sx={{ minHeight: \"300px\" }}>\r\n          <Grid container sx={{ mt: 2, ml: { sm: 0, md: 2 } }}>\r\n            <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\r\n              <Typography className=\"col-xs-12 col-lg-3 input-label\" sx={{ mt: 2 }}>\r\n                Document Name <span className=\"required\">*</span>\r\n              </Typography>\r\n              <Div className=\"col-xs-12 col-md-7 col-lg-4\">\r\n                <Autocomplete\r\n                  className=\"col-12 search-select\"\r\n                  name=\"documentName\"\r\n                  onFocus={getDocumentNames}\r\n                  getOptionLabel={(option) => {\r\n                    if (typeof option === \"string\") {\r\n                      return option;\r\n                    }\r\n                    if (option && option?.FormName) {\r\n                      return option?.FormName;\r\n                    }\r\n                    return \"\";\r\n                  }}\r\n                  options={listDocumentNames}\r\n                  filterOptions={filterOptions}\r\n                  value={listDocumentNames?.find(\r\n                    (option) => option?.FormName === documentName || \"\"\r\n                  ) || null}\r\n                  onChange={(e, newValue) => {\r\n                    console.log(newValue);\r\n                    setDocumentName(newValue?.FormName);\r\n                    getFieldNames(newValue);\r\n                  }}\r\n                  isOptionEqualToValue={(option, value) =>\r\n                    option?.FormName === value || value === \"\"\r\n                  }\r\n                  renderInput={(params) => (\r\n                    <TextField\r\n                      {...params}\r\n                      placeholder=\"Document Name\"\r\n                      variant=\"outlined\"\r\n                      autoComplete=\"off\"\r\n                    />\r\n                  )}\r\n                />\r\n                <Div style={{ color: \"red\" }}>\r\n                  {!documentName && errors?.documentName}\r\n                </Div>\r\n              </Div>\r\n              <Div className=\"col-xs-12 col-md-5 col-lg-4 col-xl-2\">\r\n                <ButtonGroup aria-label=\"split button\" sx={{ width: { xs: \"100% !important\", md: \"100% !important\", lg: \"100% !important\", xl: \"100% !important\" }, mt: { xs: 1, md: 0 } }} onClick={handleOpenWorkflowSetup}>\r\n                  <Button className=\"create-button\" sx={{ width: { xs: \"100% !important\", md: \"100% !important\", lg: \"100% !important\", xl: \"100% !important\" } }}>Add Field</Button>\r\n                  <Button variant=\"contained\" className=\"icon-button\">\r\n                    <FaPlus size={20} />\r\n                  </Button>\r\n                </ButtonGroup>\r\n              </Div>\r\n            </Grid>\r\n\r\n            {amount === true && (\r\n              <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\r\n\r\n                <Typography className=\"col-lg-3 input-label\" sx={{ mt: 2 }}>\r\n                  Field Name\r\n                </Typography>\r\n\r\n                <Div className=\"col-md-12 col-lg-9 col-xl-4\">\r\n                  <Autocomplete\r\n                    className=\"col-12 search-select\"\r\n                    name=\"fieldName\"\r\n                    options={listFieldNames}\r\n                    getOptionLabel={(option) => {\r\n                      if (typeof option === \"string\") {\r\n                        return option;\r\n                      }\r\n                      if (option && option?.Field_Name) {\r\n                        return option?.Field_Name;\r\n                      }\r\n                      return \"\";\r\n                    }}\r\n                    value={listFieldNames?.find(\r\n                      (option) => option?.Field_Name === fieldName\r\n                    ) || null}\r\n                    onChange={(e, newValue) => {\r\n                      console.log(newValue);\r\n                      setFieldName(newValue?.Field_Name);\r\n                    }}\r\n                    isOptionEqualToValue={(option, value) =>\r\n                      option?.Field_Name === value || value === \"\"\r\n                    }\r\n                    renderInput={(params) => (\r\n                      <TextField\r\n                        {...params}\r\n                        placeholder=\"Field Name\"\r\n                        variant=\"outlined\"\r\n                        autoComplete=\"off\"\r\n                      />\r\n                    )}\r\n                  />\r\n                </Div>\r\n              </Grid>\r\n            )}\r\n\r\n            <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\r\n\r\n              <Typography className=\"col-lg-3 input-label\" sx={{ mt: 2 }}>\r\n                Workflow Name <span className=\"required\">*</span>\r\n              </Typography>\r\n              <Div className=\"col-md-12 col-lg-9 col-xl-4\">\r\n                <Autocomplete\r\n                  className=\"col-12 search-select\"\r\n                  name=\"workflowName\"\r\n                  onFocus={getListofWorkflowNames}\r\n                  getOptionLabel={(option) => {\r\n                    if (typeof option === \"string\") {\r\n                      return option;\r\n                    }\r\n                    if (option && option?.Workflow_Name) {\r\n                      return option?.Workflow_Name;\r\n                    }\r\n                    return \"\";\r\n                  }}\r\n                  options={workflowNamesList}\r\n                  value={workflowName}\r\n                  onChange={(e, newValue) => {\r\n                    console.log(newValue);\r\n                    if (newValue) {\r\n                      setWorkflowName(newValue);\r\n                      filterWorkflowNames(newValue);\r\n                    } else {\r\n                      setNoOfLevels(\"\");\r\n                      setRuleName(\"\");\r\n                      setWorkflowName(\"\");\r\n                    }\r\n                  }}\r\n                  isOptionEqualToValue={(option, value) =>\r\n                    option?.Workflow_Name === value || value === \"\"\r\n                  }\r\n                  renderInput={(params) => (\r\n                    <TextField\r\n                      {...params}\r\n                      placeholder=\"Workflow Name\"\r\n                      variant=\"outlined\"\r\n                      autoComplete=\"off\"\r\n                    />\r\n                  )}\r\n                />\r\n                <Div style={{ color: \"red\" }}>\r\n                  {!workflowName && errors?.workflowName}\r\n                </Div>\r\n              </Div>\r\n            </Grid>\r\n\r\n            <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\r\n              <Typography className=\"col-lg-3 input-label\" sx={{ mt: 2 }}>\r\n                No of Levels <span className=\"required\">*</span>\r\n              </Typography>\r\n              <Div className=\"col-md-12 col-lg-9 col-xl-4\">\r\n                <TextField\r\n                  className=\"col-12 input-box\"\r\n                  name=\"noOfLevels\"\r\n                  value={noOfLevels}\r\n                  placeholder=\"No of Levels\"\r\n                  variant=\"outlined\"\r\n                  autoComplete=\"off\"\r\n                  disabled\r\n                />\r\n                <Div style={{ color: \"red\" }}>\r\n                  {!noOfLevels && errors?.noOfLevels}\r\n                </Div>\r\n              </Div>\r\n              {/* <FormControl className=\"col-md-4\">\r\n                  <Autocomplete\r\n                    className=\"search-select\"\r\n                    name=\"noOfLevels\"\r\n                    getOptionLabel={(option) => {\r\n                      if (typeof option === \"number\") {\r\n                        return option.toString();\r\n                      }\r\n                      if (option && option) {\r\n                        return option;\r\n                      }\r\n                      return 0;\r\n                    }}\r\n                    options={numbers}\r\n                    value={numbers.find((option) => option === noOfLevels)}\r\n                    onChange={(e, newValue) => {\r\n                      console.log(newValue);\r\n                      setNoOfLevels(newValue);\r\n                    }}\r\n                    isOptionEqualToValue={(option, value) =>\r\n                      option === value || value === 0\r\n                    }\r\n                    renderInput={(params) => (\r\n                      <TextField\r\n                        {...params}\r\n                        placeholder=\"No of Levels\"\r\n                        variant=\"outlined\"\r\n                        autoComplete=\"off\"\r\n                      />\r\n                    )}\r\n                  />\r\n                </FormControl> */}\r\n            </Grid>\r\n\r\n            <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\r\n\r\n              <Typography className=\"col-lg-3 input-label\" sx={{ mt: 2 }}>\r\n                Rule Name <span className=\"required\">*</span>\r\n              </Typography>\r\n\r\n              <Div className=\"col-md-12 col-lg-9 col-xl-4\">\r\n                <TextField\r\n                  className=\"col-12 input-box\"\r\n                  name=\"ruleName\"\r\n                  value={ruleName}\r\n                  placeholder=\"Rule Name\"\r\n                  variant=\"outlined\"\r\n                  autoComplete=\"off\"\r\n                  disabled\r\n                />\r\n                <Div style={{ color: \"red\" }}>\r\n                  {!ruleName && errors?.ruleName}\r\n                </Div>\r\n              </Div>\r\n            </Grid>\r\n          </Grid>\r\n\r\n          {/* <Div sx={{ mt: 2 }}>\r\n            <FormControlLabel\r\n              className=\"input-label\"\r\n              checked={approverHead}\r\n              onChange={(e) => setApproverHead(e.target.checked)}\r\n              control={<Checkbox size=\"small\" />}\r\n              label=\"Require Department Head Approval\"\r\n              labelPlacement=\"start\"\r\n            />\r\n          </Div> */}\r\n\r\n        </Div>\r\n\r\n\r\n        {/* code for save and cancel button */}\r\n        <Div className=\"buttons\" sx={{ mt: 5 }}>\r\n          <ButtonGroup\r\n            aria-label=\"split button\"\r\n            type=\"submit\"\r\n            sx={{\r\n              mt: { xs: 0.5, lg: 0 },\r\n              mr: { xs: 0, md: 1 }\r\n            }}\r\n          >\r\n            <Button type=\"submit\" className=\"plus-button\">\r\n              Save\r\n            </Button>\r\n            <Button variant=\"contained\" className=\"icon-button\">\r\n              <FaSave size={18} />\r\n            </Button>\r\n          </ButtonGroup>\r\n\r\n          <ButtonGroup\r\n            aria-label=\"split button\"\r\n            sx={{\r\n              mt: { xs: 0.5, lg: 0 },\r\n              mr: { xs: 0, md: 1 }\r\n            }}\r\n            onClick={() => {\r\n              setListWorkflow(true);\r\n              setCreateWorkflow(false);\r\n\r\n              setDocumentName(\"\");\r\n              setNoOfLevels(\"\");\r\n              setRuleName(\"\");\r\n              setWorkflowName(\"\");\r\n              setBasedOnWorkflow(\"\");\r\n              setFieldName(\"\");\r\n\r\n              setErrors({});\r\n            }}\r\n          >\r\n            <Button className=\"plus-button\">Cancel</Button>\r\n            <Button variant=\"contained\" className=\"icon-button\">\r\n              <TiCancel size={24} />\r\n            </Button>\r\n          </ButtonGroup>\r\n        </Div>\r\n      </form>\r\n\r\n      <Dialog\r\n        open={openForms}\r\n        aria-labelledby=\"alert-dialog-title\"\r\n        aria-describedby=\"alert-dialog-description\"\r\n      >\r\n        <form onSubmit={handleSubmitCreateFormFields}>\r\n          <div>\r\n            <DialogContent>\r\n              <Typography variant=\"h3\">Create Field Name </Typography>\r\n              <Grid container sx={{ mt: 2 }}>\r\n                <Grid item xs={12} sx={{ ml: 2 }}>\r\n                  <Typography className=\"col-12 input-label\">\r\n                    Model Name <span className=\"required\">*</span>\r\n                  </Typography>\r\n                </Grid>\r\n                <Grid item xs={12} sx={{ ml: 2 }}>\r\n                  <Autocomplete\r\n                    onFocus={getModuleNames}\r\n                    className=\"search-select col-12\"\r\n                    id=\"free-solo-demo\"\r\n                    options={listModules}\r\n                    getOptionLabel={(option) => option?.ModuleName}\r\n                    value={listModules?.find(\r\n                      (option) => option?.ModuleName === moduleName\r\n                    ) || null}\r\n                    onChange={(e, newValue) => {\r\n                      console.log(newValue);\r\n                      setModuleName(newValue?.ModuleName);\r\n                      getFormNames(newValue);\r\n                    }}\r\n                    sx={{ minWidth: \"250px\", maxWidth: \"1005px\" }}\r\n                    renderInput={(params) => (\r\n                      <TextField\r\n                        {...params}\r\n                        placeholder=\"Form Name\"\r\n                        variant=\"outlined\"\r\n                        // {...register3(\"entityName\")}\r\n                        autoComplete=\"off\"\r\n                      />\r\n                    )}\r\n                  />\r\n                  <Div style={{ color: \"red\" }}>\r\n                    {!moduleName && errors?.moduleName}\r\n                  </Div>\r\n                </Grid>\r\n\r\n                <Grid item xs={12} sx={{ ml: 2 }}>\r\n                  <Typography className=\"col-12 input-label\">\r\n                    Document Name/Form Name <span className=\"required\">*</span>\r\n                  </Typography>\r\n                </Grid>\r\n                <Grid item xs={12} sx={{ ml: 2 }}>\r\n                  <Autocomplete\r\n                    // onFocus={getFormNames}\r\n                    className=\"search-select col-12\"\r\n                    id=\"free-solo-demo\"\r\n                    options={listFormNames}\r\n                    getOptionLabel={(option) => option?.FormName}\r\n                    value={listFormNames?.find(\r\n                      (option) => option?.FormName === formName\r\n                    ) || null}\r\n                    onChange={(e, newValue) => {\r\n                      console.log(newValue);\r\n                      setFormName(newValue?.FormName);\r\n                      getFieldNames2(newValue);\r\n                      // settingServices.filterFieldNames(newValue.FormName).then((res)=>{\r\n                      //   console.log(res);\r\n                      //   setListFieldNames(res);\r\n                      // })\r\n                    }}\r\n                    sx={{ minWidth: \"250px\", maxWidth: \"1005px\" }}\r\n                    renderInput={(params) => (\r\n                      <TextField\r\n                        {...params}\r\n                        placeholder=\"Document Name\"\r\n                        variant=\"outlined\"\r\n                        autoComplete=\"off\"\r\n                      />\r\n                    )}\r\n                  />\r\n                  <Div style={{ color: \"red\" }}>\r\n                    {!formName && errors?.formName}\r\n                  </Div>\r\n                </Grid>\r\n\r\n                <Grid item xs={12} sx={{ ml: 2 }}>\r\n                  <Typography className=\"col-12 input-label\">\r\n                    Field Name <span className=\"required\">*</span>\r\n                  </Typography>\r\n                </Grid>\r\n                <Grid item xs={12} sx={{ ml: 2 }}>\r\n                  <Autocomplete\r\n                    className=\"search-select col-12\"\r\n                    id=\"free-solo-demo\"\r\n                    name=\"fieldName2\"\r\n                    options={listFieldNames2 || []}\r\n                    getOptionLabel={(option) => option?.Field_Name || []}\r\n                    value={listFieldNames2?.find(\r\n                      (option) => option?.Field_Name === fieldName2\r\n                    ) || null}\r\n                    onChange={(e, newValue) => {\r\n                      console.log(newValue);\r\n                      setFieldName2(newValue?.Field_Name);\r\n                    }}\r\n                    renderInput={(params) => (\r\n                      <TextField\r\n                        {...params}\r\n                        placeholder=\"Field Name\"\r\n                        variant=\"outlined\"\r\n                        autoComplete=\"off\"\r\n                      />\r\n                    )}\r\n                    sx={{ minWidth: \"250px\", maxWidth: \"1005px\" }}\r\n                  />\r\n                  <Div style={{ color: \"red\" }}>\r\n                    {!fieldName2 && errors?.fieldName2}\r\n                  </Div>\r\n                </Grid>\r\n              </Grid>\r\n            </DialogContent>\r\n            <DialogActions>\r\n              <ButtonGroup\r\n                aria-label=\"split button\"\r\n                type=\"submit\"\r\n                sx={{\r\n                  mt: { xs: 0.5, lg: 0 },\r\n                  mr: { xs: 0, md: 1 }\r\n                }}\r\n              >\r\n                <Button type=\"submit\" className=\"plus-button\">Save</Button>\r\n                <Button variant=\"contained\" className=\"icon-button\">\r\n                  <FaSave size={18} />\r\n                </Button>\r\n              </ButtonGroup>\r\n              <ButtonGroup aria-label=\"split button\"\r\n                sx={{\r\n                  mt: { xs: 0.5, lg: 0 },\r\n                  mr: { xs: 0, md: 1 }\r\n                }}\r\n                onClick={() => {\r\n                  setOpenForms(false);\r\n                  setModuleName(\"\");\r\n                  setFormName(\"\");\r\n                  setFieldName2(\"\");\r\n\r\n                  setErrors({});\r\n                }}\r\n              >\r\n                <Button className=\"plus-button\">Cancel</Button>\r\n                <Button variant=\"contained\" className=\"icon-button\">\r\n                  <TiCancel size={24} />\r\n                </Button>\r\n              </ButtonGroup>\r\n            </DialogActions>\r\n          </div>\r\n        </form>\r\n      </Dialog>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CreateAssignWorkflows;\r\n","import {\r\n  Autocomplete,\r\n  Button,\r\n  ButtonGroup,\r\n  Dialog,\r\n  DialogActions,\r\n  DialogContent,\r\n  Grid,\r\n  TextField,\r\n  Typography,\r\n} from \"@mui/material\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport Div from \"@jumbo/shared/Div/Div\";\r\nimport axios from \"axios\";\r\nimport { BASE_URL } from \"app/services/auth-services\";\r\nimport settingServices from \"app/services/setting-api-services\";\r\nimport { toast } from \"react-toastify\";\r\nimport { TiCancel } from \"react-icons/ti\";\r\nimport { FaPlus, FaSave } from \"react-icons/fa\";\r\n\r\nconst EditAssignWorkflows = ({\r\n  setListWorkflow,\r\n  setEditWorkflow,\r\n  listOfWorkflows,\r\n  currentWorkflows,\r\n}) => {\r\n  const token = localStorage.getItem(\"accesstoken\");\r\n\r\n  const header = {\r\n    headers: {\r\n      Authorization: `Bearer ${token}`,\r\n      \"Content-Type\": \"application/json\",\r\n      Accept: \"application/json\",\r\n    },\r\n  };\r\n\r\n  const [approverHead, setApproverHead] = useState(false);\r\n  const [openForms, setOpenForms] = useState(false);\r\n  const [workflowNamesList, setWorkflowNamesList] = useState([]);\r\n  const [listModules, setListModules] = useState([]);\r\n  const [listFormNames, setListFormNames] = useState([]);\r\n  const [listDocumentNames, setListDocumentNames] = useState([]);\r\n  const [listFieldNames, setListFieldNames] = useState([]);\r\n  const [listFieldNames2, setListFieldNames2] = useState([]);\r\n\r\n  const [ruleName, setRuleName] = useState(\"\");\r\n  const [workflowName, setWorkflowName] = useState(\"\");\r\n  const [fieldName, setFieldName] = useState(\"\");\r\n  const [basedOnWorkflow, setBasedOnWorkflow] = useState(\"Amount\");\r\n  const [amount, setAmount] = useState(false);\r\n  const [documentName, setDocumentName] = useState(\"\");\r\n  const [noOfLevels, setNoOfLevels] = useState(\"\");\r\n\r\n  const [moduleName, setModuleName] = useState(\"\");\r\n  const [formName, setFormName] = useState(\"\");\r\n  const [fieldName2, setFieldName2] = useState(\"\");\r\n\r\n  const [errors, setErrors] = useState();\r\n\r\n  const defaultWorkflowName = currentWorkflows.Workflow_Name;\r\n  const defaultDocumentName = currentWorkflows.Document_Name;\r\n  const defaultFieldName = currentWorkflows.Field_Name;\r\n  const defaultNoofLevels = currentWorkflows.Noof_Level;\r\n  const defaultHeadApproval = currentWorkflows.Head_Approval;\r\n  const defaultRuleName = currentWorkflows.Rule_Name;\r\n\r\n  useEffect(() => {\r\n    setWorkflowName(defaultWorkflowName);\r\n    setDocumentName(defaultDocumentName);\r\n    setFieldName(defaultFieldName);\r\n    setNoOfLevels(defaultNoofLevels);\r\n    setApproverHead(defaultHeadApproval);\r\n    setRuleName(defaultRuleName);\r\n  }, [\r\n    currentWorkflows,\r\n    defaultWorkflowName,\r\n    defaultDocumentName,\r\n    defaultFieldName,\r\n    defaultNoofLevels,\r\n    defaultHeadApproval,\r\n    defaultRuleName,\r\n  ]);\r\n\r\n\r\n  const getListofWorkflowNames = () => {\r\n    axios\r\n      .get(`${BASE_URL}/Erpapp/WorkflowNamelist/`, {\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n          \"Content-Type\": \"application/json\",\r\n          Accept: \"application/json\",\r\n        },\r\n      })\r\n      .then((res) => {\r\n        console.log(\"WFNAmes\", res.data);\r\n        setWorkflowNamesList(res.data.results);\r\n      }).catch((error) => {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  // workflow name filter based on workflow name\r\n  const filterWorkflowNames = (newValue) => {\r\n    axios\r\n      .get(\r\n        `${BASE_URL}/Erpapp/WorkflowNamefilter/?Workflow_Name=${newValue.Workflow_Name}`,\r\n        header\r\n      )\r\n      .then((res) => {\r\n        console.log(\"Filter\", res.data);\r\n        setRuleName(res.data[0]?.Rule_Name);\r\n        setNoOfLevels(res.data[0]?.Noof_Level);\r\n      }).catch((error) => {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  const getModuleNames = async () => {\r\n    await axios.post(\r\n      `${BASE_URL}/Erpapp/Formmasterlist/`,\r\n      header\r\n    ).then((res) => {\r\n      console.log(res?.data);\r\n      setListModules(res?.data);\r\n    }).catch((error) => {\r\n      console.log(error);\r\n    });\r\n  };\r\n\r\n  const getFormNames = (newValue) => {\r\n    var payload = {\r\n      ModuleName: newValue?.ModuleName,\r\n    };\r\n    axios\r\n      .post(`${BASE_URL}/Erpapp/Formpermissionfilter/`, payload, header)\r\n      .then((res) => {\r\n        console.log(\"res\", res);\r\n        setListFormNames(res.data);\r\n      }).catch((error) => {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  const getDocumentNames = () => {\r\n    settingServices.listFormNames(header).then((res) => {\r\n      console.log(\"Res\", res);\r\n      setListDocumentNames(res?.filter((opt)=>opt?.Is_Deleted === false));\r\n    }).catch((error) => {\r\n      console.log(error);\r\n    });\r\n  };\r\n\r\n  const getFieldNames = (newValue) => {\r\n    console.log(\"newValue.Form_Name\", newValue?.FormName);\r\n    settingServices\r\n      .filterFieldNamesFromWorkflowOrigin(newValue, header)\r\n      .then((res) => {\r\n        console.log(\"res1\", res.length);\r\n        setListFieldNames(res);\r\n        if (res?.length === 0) {\r\n          setAmount(false);\r\n          // setBasedOnWorkflow(\"Level\");\r\n        } else {\r\n          setAmount(true);\r\n          // setBasedOnWorkflow(\"Amount\");\r\n        }\r\n      }).catch((error) => {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    getFieldNames(defaultDocumentName);\r\n  }, [currentWorkflows, defaultDocumentName]);\r\n\r\n  const getFieldNames2 = (newValue) => {\r\n    var formname = newValue?.FormName;\r\n    settingServices.filterlistFieldNames(formname, header).then((res) => {\r\n      console.log(\"res1\", res);\r\n      if (Array.isArray(res[0]?.Field_Name)) {\r\n        setListFieldNames2(res[0]?.Field_Name || []);\r\n        setAmount(true);\r\n      } else {\r\n        setAmount(false);\r\n      }\r\n    }).catch((error) => {\r\n      console.log(error);\r\n    });\r\n  };\r\n\r\n  const handleChangeDocument = (newValue) => {\r\n    console.log(newValue);\r\n    setDocumentName(newValue?.FormName);\r\n    getFieldNames(newValue?.FormName);\r\n  };\r\n\r\n\r\n\r\n  const validateForm = () => {\r\n    const newErrors = {};\r\n\r\n    if (workflowName === undefined || workflowName === null || workflowName === \"\") {\r\n      newErrors.workflowName = \"Workflow is required.\";\r\n    }\r\n    if (ruleName === undefined || ruleName === null || ruleName === \"\") {\r\n      newErrors.ruleName = \"Rule Name is required.\";\r\n    }\r\n    if (!basedOnWorkflow) {\r\n      newErrors.basedOnWorkflow = \"Based on workflow is required.\";\r\n    }\r\n    if (!documentName) {\r\n      newErrors.documentName = \"Document Name is required.\";\r\n    }\r\n    if (!noOfLevels) {\r\n      newErrors.noOfLevels = \"No of level is required.\";\r\n    }\r\n\r\n    setErrors(newErrors);\r\n    return Object.keys(newErrors).length === 0;\r\n  };\r\n\r\n\r\n  const validateForm1 = () => {\r\n    const newErrors = {};\r\n\r\n    if (moduleName === undefined || moduleName === null || moduleName === \"\") {\r\n      newErrors.moduleName = \"Module Name is required.\";\r\n    }\r\n    if (!formName) {\r\n      newErrors.formName = \"Form Name is required.\";\r\n    }\r\n    if (!fieldName2) {\r\n      newErrors.fieldName2 = \"Field Name is required.\";\r\n    }\r\n\r\n    setErrors(newErrors);\r\n    return Object.keys(newErrors).length === 0;\r\n  };\r\n\r\n\r\n\r\n  const handleSubmitCreateFormFields = (e) => {\r\n    e.preventDefault();\r\n    if (validateForm1()) {\r\n      var payload = {\r\n        Form_Name: formName,\r\n        Field_Name: fieldName2,\r\n        FieldShort_Name: \"\",\r\n        Created_By: parseInt(localStorage.getItem(\"UserId\")),\r\n        Updated_By: parseInt(localStorage.getItem(\"UserId\")),\r\n      };\r\n      axios\r\n        .post(`${BASE_URL}/Erpapp/WorkfloworiginCRUD/`, payload, header)\r\n        .then((res) => {\r\n          console.log(res);\r\n          if (res?.data?.id) {\r\n            toast.success(\"Fields Created Successfully\");\r\n            getFieldNames(defaultDocumentName);\r\n            setModuleName(\"\");\r\n            setFormName(\"\");\r\n            setFieldName2(\"\");\r\n            setOpenForms(false);\r\n\r\n            setErrors({});\r\n          } else {\r\n            toast.error(\"Check Your Inputs\");\r\n            setOpenForms(true);\r\n          }\r\n        }).catch((error) => {\r\n          console.log(error);\r\n          toast.error(error.message)\r\n        });\r\n    }\r\n  };\r\n\r\n  const handleSubmitWorkflow = (e) => {\r\n    e.preventDefault();\r\n    if (validateForm()) {\r\n      var payload = {\r\n        id: currentWorkflows.id,\r\n        Assignworkflow_Id: currentWorkflows.Assignworkflow_Id,\r\n        Document_Name: documentName,\r\n        Field_Name: fieldName,\r\n        Head_Approval: approverHead,\r\n        Noof_Level: noOfLevels,\r\n        Rule_Name: ruleName,\r\n        WorkflowName_Id: workflowName?.id,\r\n        Workflow_Basedon: basedOnWorkflow,\r\n        Workflow_Name: workflowName?.Workflow_Name,\r\n        Company_Id: parseInt(localStorage.getItem(\"OrganizationId\")),\r\n        Partner_Id: parseInt(localStorage.getItem(\"PartnerId\")),\r\n        Created_By: parseInt(localStorage.getItem(\"UserId\")),\r\n        Updated_By: parseInt(localStorage.getItem(\"UserId\")),\r\n      };\r\n      axios\r\n        .put(`${BASE_URL}/Erpapp/AssignworkflowCRUD/`, payload, header)\r\n        .then((res) => {\r\n          console.log(res);\r\n          if (res?.data?.id) {\r\n            toast.success(\"Workflow is Assigned Successfully\");\r\n            setEditWorkflow(false);\r\n            setListWorkflow(true);\r\n            listOfWorkflows();\r\n\r\n            setErrors({});\r\n          } else {\r\n            toast.error(\"Workflow Matching Query Doesn't Exist.\")\r\n          }\r\n        }).catch((error) => {\r\n          console.log(error);\r\n          toast.error(error.message)\r\n        });\r\n    }\r\n  };\r\n\r\n  const handleOpenWorkflowSetup = () => {\r\n    setOpenForms(true);\r\n  };\r\n\r\n\r\n\r\n  return (\r\n    <>\r\n      <Typography variant=\"h3\" sx={{ fontWeight: 600 }}>\r\n        Assign Workflow\r\n      </Typography>\r\n      <Typography variant=\"h4\" sx={{ fontWeight: 500 }}>\r\n        Users shall use this form to set up the approvers to approve various\r\n        documents\r\n      </Typography>\r\n\r\n      <form onSubmit={handleSubmitWorkflow}>\r\n        <Div sx={{ minHeight: \"300px\" }}>\r\n          <Grid container sx={{ mt: 2, ml: { sm: 0, md: 2 } }}>\r\n            {/* <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\r\n                  <Div className=\"col-md-1\"></Div>\r\n                  <Typography className=\"col-md-3 input-label\" sx={{ mt: 2 }}>\r\n                    Partner Name <span className=\"required\">*</span>\r\n                  </Typography>\r\n                  <FormControl className=\"col-md-6\">\r\n                    <Autocomplete\r\n                      className=\"search-select\"\r\n                      name=\"partnerName\"\r\n                      onFocus={getListOfPartners}\r\n                      getOptionLabel={(option) => {\r\n                        if (typeof option === \"string\") {\r\n                          return option;\r\n                        }\r\n                        if (option && option?.Partner_Name) {\r\n                          return option?.Partner_Name;\r\n                        }\r\n                        return \"\";\r\n                      }}\r\n                      options={approvers}\r\n                      value={approvers.find(\r\n                        (option) => option?.Partner_Name === partnerName\r\n                      )}\r\n                      onChange={(e, newValue) => {\r\n                        console.log(newValue);\r\n                        setPartnerName(newValue);\r\n                      }}\r\n                      isOptionEqualToValue={(option, value) =>\r\n                        option?.Partner_Name === value || value === \"\"\r\n                      }\r\n                      renderInput={(params) => (\r\n                        <TextField\r\n                          {...params}\r\n                          placeholder=\"Partner Name\"\r\n                          variant=\"outlined\"\r\n                          autoComplete=\"off\"\r\n                        />\r\n                      )}\r\n                    />\r\n                  </FormControl>\r\n\r\n                  <Div className=\"col-md-1\"></Div>\r\n                </Grid> */}\r\n\r\n            <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\r\n\r\n              <Typography className=\"col-xs-12 col-lg-3 input-label\" sx={{ mt: 2 }}>\r\n                Document Name <span className=\"required\">*</span>\r\n              </Typography>\r\n\r\n              <Div className=\"col-xs-12 col-md-7 col-lg-4\">\r\n                <Autocomplete\r\n                  className=\"col-12 search-select\"\r\n                  name=\"documentName\"\r\n                  onFocus={getDocumentNames}\r\n                  getOptionLabel={(option) => {\r\n                    if (typeof option === \"string\") {\r\n                      return option;\r\n                    }\r\n                    if (option && option?.FormName) {\r\n                      return option?.FormName;\r\n                    }\r\n                    return \"\";\r\n                  }}\r\n                  options={listDocumentNames}\r\n                  value={documentName}\r\n                  onChange={(e, newValue) => handleChangeDocument(newValue)}\r\n                  isOptionEqualToValue={(option, value) =>\r\n                    option?.FormName === value || value === \"\"\r\n                  }\r\n                  renderInput={(params) => (\r\n                    <TextField\r\n                      {...params}\r\n                      placeholder=\"Document Name\"\r\n                      variant=\"outlined\"\r\n                      autoComplete=\"off\"\r\n                    />\r\n                  )}\r\n                />\r\n                <Div style={{ color: \"red\" }}>\r\n                  {!documentName && errors?.documentName}\r\n                </Div>\r\n              </Div>\r\n              <Div className=\"col-xs-12 col-md-5 col-lg-4 col-xl-2\">\r\n                <ButtonGroup aria-label=\"split button\" sx={{ width: { xs: \"100% !important\", md: \"100% !important\", lg: \"100% !important\", xl: \"100% !important\" }, mt: { xs: 1, md: 0 } }} onClick={handleOpenWorkflowSetup}>\r\n                  <Button className=\"create-button\" sx={{ width: { xs: \"100% !important\", md: \"100% !important\", lg: \"100% !important\", xl: \"100% !important\" } }}>Add Field</Button>\r\n                  <Button variant=\"contained\" className=\"icon-button\">\r\n                    <FaPlus size={20} />\r\n                  </Button>\r\n                </ButtonGroup>\r\n              </Div>\r\n            </Grid>\r\n\r\n            {amount === true && (\r\n              <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\r\n\r\n                <Typography className=\"col-lg-3 input-label\" sx={{ mt: 2 }}>\r\n                  Field Name\r\n                </Typography>\r\n\r\n                <Div className=\"col-md-12 col-lg-9 col-xl-4\">\r\n                  <Autocomplete\r\n                    className=\"col-12 search-select\"\r\n                    name=\"fieldName\"\r\n                    options={listFieldNames}\r\n                    getOptionLabel={(option) => {\r\n                      if (typeof option === \"string\") {\r\n                        return option;\r\n                      }\r\n                      if (option && option?.Field_Name) {\r\n                        return option?.Field_Name;\r\n                      }\r\n                      return \"\";\r\n                    }}\r\n                    value={fieldName}\r\n                    onChange={(e, newValue) => {\r\n                      console.log(newValue);\r\n                      if (newValue) {\r\n                        setFieldName(newValue?.Field_Name);\r\n                        setBasedOnWorkflow(\"Amount\");\r\n                      } else {\r\n                        setFieldName(\"\");\r\n                        setBasedOnWorkflow(\"Level\");\r\n                      }\r\n                    }}\r\n                    isOptionEqualToValue={(option, value) =>\r\n                      option?.Field_Name === value || value === \"\"\r\n                    }\r\n                    renderInput={(params) => (\r\n                      <TextField\r\n                        {...params}\r\n                        placeholder=\"Field Name\"\r\n                        variant=\"outlined\"\r\n                        autoComplete=\"off\"\r\n                      />\r\n                    )}\r\n                  />\r\n                </Div>\r\n              </Grid>\r\n            )}\r\n\r\n            <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\r\n\r\n              <Typography className=\"col-lg-3 input-label\" sx={{ mt: 2 }}>\r\n                Workflow Name <span className=\"required\">*</span>\r\n              </Typography>\r\n              {/* <TextField\r\n                    className=\"col-md-4 input-box\"\r\n                    name=\"workflowName\"\r\n                    value={workflowName}\r\n                    // onChange={(e) => setWorkflowName(e.target.value)}\r\n                    placeholder=\"Workflow Name\"\r\n                    variant=\"outlined\"\r\n                    autoComplete=\"off\"\r\n                  /> */}\r\n              <Div className=\"col-md-12 col-lg-9 col-xl-4\">\r\n                <Autocomplete\r\n                  className=\"col-12 search-select\"\r\n                  name=\"workflowName\"\r\n                  onFocus={getListofWorkflowNames}\r\n                  getOptionLabel={(option) => {\r\n                    if (typeof option === \"string\") {\r\n                      return option;\r\n                    }\r\n                    if (option && option?.Workflow_Name) {\r\n                      return option?.Workflow_Name;\r\n                    }\r\n                    return \"\";\r\n                  }}\r\n                  options={workflowNamesList}\r\n                  value={workflowName}\r\n                  onChange={(e, newValue) => {\r\n                    console.log(newValue);\r\n                    setWorkflowName(newValue);\r\n                    filterWorkflowNames(newValue);\r\n                  }}\r\n                  isOptionEqualToValue={(option, value) =>\r\n                    option?.Workflow_Name === value || value === \"\"\r\n                  }\r\n                  renderInput={(params) => (\r\n                    <TextField\r\n                      {...params}\r\n                      placeholder=\"Workflow Name\"\r\n                      variant=\"outlined\"\r\n                      autoComplete=\"off\"\r\n                    />\r\n                  )}\r\n                />\r\n                <Div style={{ color: \"red\" }}>\r\n                  {!workflowName && errors?.workflowName}\r\n                </Div>\r\n              </Div>\r\n            </Grid>\r\n\r\n            {/* <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\r\n                  <Div className=\"col-md-1\"></Div>\r\n                  <Typography className=\"col-md-3 input-label\" sx={{ mt: 2 }}>\r\n                    Workflow Based On <span className=\"required\">*</span>\r\n                  </Typography>\r\n                  <FormControl className=\"col-md-4\">\r\n                    <JumboAutocomplete\r\n                      className=\"search-select\"\r\n                      name=\"basedOnWorkflow\"\r\n                      // onFocus={getListBasedOnWorkflows}\r\n                      getOptionLabel={(option) => {\r\n                        if (typeof option === \"string\") {\r\n                          return option;\r\n                        }\r\n                        if (option && option.values) {\r\n                          return option.values;\r\n                        }\r\n                        return \"\";\r\n                      }}\r\n                      options={workflows}\r\n                      value={basedOnWorkflow}\r\n                      onChange={(e, newValue) => {\r\n                        console.log(newValue);\r\n                        setBasedOnWorkflow(newValue.values);\r\n                        switch (newValue.values) {\r\n                          case \"Amount\":\r\n                            setAmount(true);\r\n                            setLevels(false);\r\n                            break;\r\n                          case \"Level\":\r\n                            setLevels(true);\r\n                            setAmount(false);\r\n                            break;\r\n                          default:\r\n                            setAmount(true);\r\n                            setLevels(false);\r\n                            break;\r\n                        }\r\n                      }}\r\n                      isOptionEqualToValue={(option, value) =>\r\n                        option.values === value || value === \"\"\r\n                      }\r\n                      renderInput={(params) => (\r\n                        <TextField\r\n                          {...params}\r\n                          placeholder=\"Workflow Based On\"\r\n                          variant=\"outlined\"\r\n                          autoComplete=\"off\"\r\n                        />\r\n                      )}\r\n                    />\r\n                  </FormControl>\r\n                  <Div className=\"col-md-1\"></Div>\r\n                </Grid> */}\r\n\r\n            <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\r\n\r\n              <Typography className=\"col-lg-3 input-label\" sx={{ mt: 2 }}>\r\n                No of Levels <span className=\"required\">*</span>\r\n              </Typography>\r\n\r\n              <Div className=\"col-md-12 col-lg-9 col-xl-4\">\r\n                <TextField\r\n                  className=\"col-12 input-box\"\r\n                  name=\"noOfLevels\"\r\n                  value={noOfLevels}\r\n                  // onChange={(e) => setWorkflowName(e.target.value)}\r\n                  placeholder=\"No of Levels\"\r\n                  variant=\"outlined\"\r\n                  autoComplete=\"off\"\r\n                  disabled\r\n                />\r\n                <Div style={{ color: \"red\" }}>\r\n                  {!noOfLevels && errors?.noOfLevels}\r\n                </Div>\r\n              </Div>\r\n              {/* <FormControl className=\"col-md-4\">\r\n                  <Autocomplete\r\n                    className=\"search-select\"\r\n                    name=\"noOfLevels\"\r\n                    getOptionLabel={(option) => {\r\n                      if (typeof option === \"number\") {\r\n                        return option.toString();\r\n                      }\r\n                      if (option && option) {\r\n                        return option;\r\n                      }\r\n                      return 0;\r\n                    }}\r\n                    options={numbers}\r\n                    value={numbers.find((option) => option === noOfLevels)}\r\n                    onChange={(e, newValue) => {\r\n                      console.log(newValue);\r\n                      setNoOfLevels(newValue);\r\n                    }}\r\n                    isOptionEqualToValue={(option, value) =>\r\n                      option === value || value === 0\r\n                    }\r\n                    renderInput={(params) => (\r\n                      <TextField\r\n                        {...params}\r\n                        placeholder=\"No of Levels\"\r\n                        variant=\"outlined\"\r\n                        autoComplete=\"off\"\r\n                      />\r\n                    )}\r\n                  />\r\n                </FormControl> */}\r\n            </Grid>\r\n\r\n            <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\r\n\r\n              <Typography className=\"col-lg-3 input-label\" sx={{ mt: 2 }}>\r\n                Rule Name <span className=\"required\">*</span>\r\n              </Typography>\r\n              <Div className=\"col-md-12 col-lg-9 col-xl-4\">\r\n                <TextField\r\n                  className=\"col-12 input-box\"\r\n                  name=\"ruleName\"\r\n                  value={ruleName}\r\n                  placeholder=\"Rule Name\"\r\n                  variant=\"outlined\"\r\n                  autoComplete=\"off\"\r\n                  disabled\r\n                />\r\n                <Div style={{ color: \"red\" }}>\r\n                  {!ruleName && errors?.ruleName}\r\n                </Div>\r\n              </Div>\r\n            </Grid>\r\n          </Grid>\r\n\r\n          {/* <Div sx={{ mt: 2 }}>\r\n            <FormControlLabel\r\n              className=\"input-label\"\r\n              checked={approverHead}\r\n              onChange={(e) => setApproverHead(e.target.checked)}\r\n              control={<Checkbox size=\"small\" />}\r\n              label=\"Require Department Head Approval\"\r\n              labelPlacement=\"start\"\r\n            />\r\n          </Div> */}\r\n        </Div>\r\n\r\n        {/* code for update and cancel button */}\r\n        <Div className=\"buttons\" sx={{ mt: 5 }}>\r\n          <ButtonGroup\r\n            aria-label=\"split button\"\r\n            type=\"submit\"\r\n            sx={{\r\n              mt: { xs: 0.5, lg: 0 },\r\n              mr: { xs: 0, md: 1 }\r\n            }}\r\n          >\r\n            <Button type=\"submit\" className=\"plus-button\">Update</Button>\r\n            <Button variant=\"contained\" className=\"icon-button\">\r\n              <FaSave size={18} />\r\n            </Button>\r\n          </ButtonGroup>\r\n          <ButtonGroup aria-label=\"split button\"\r\n            sx={{\r\n              mt: { xs: 0.5, lg: 0 },\r\n              mr: { xs: 0, md: 1 }\r\n            }}\r\n            onClick={() => {\r\n              setListWorkflow(true);\r\n              setEditWorkflow(false);\r\n              setErrors({});\r\n            }}>\r\n            <Button className=\"plus-button\">Cancel</Button>\r\n            <Button variant=\"contained\" className=\"icon-button\">\r\n              <TiCancel size={24} />\r\n            </Button>\r\n          </ButtonGroup>\r\n        </Div>\r\n      </form>\r\n\r\n      <Dialog\r\n        open={openForms}\r\n        aria-labelledby=\"alert-dialog-title\"\r\n        aria-describedby=\"alert-dialog-description\"\r\n      >\r\n        <form onSubmit={handleSubmitCreateFormFields}>\r\n          <div>\r\n            <DialogContent>\r\n              <Typography variant=\"h3\">Create Field Name</Typography>\r\n              <Grid container sx={{ mt: 2 }}>\r\n                <Grid item xs={12} sx={{ ml: 2 }}>\r\n                  <Typography className=\"col-12 input-label\">\r\n                    Model Name <span className=\"required\">*</span>\r\n                  </Typography>\r\n                </Grid>\r\n                <Grid item xs={12} sx={{ ml: 2 }}>\r\n                  <Autocomplete\r\n                    onFocus={getModuleNames}\r\n                    className=\"search-select col-12\"\r\n                    id=\"free-solo-demo\"\r\n                    options={listModules}\r\n                    getOptionLabel={(option) => option?.ModuleName}\r\n                    value={listModules?.find(\r\n                      (option) => option?.ModuleName === moduleName\r\n                    ) || null}\r\n                    onChange={(e, newValue) => {\r\n                      console.log(newValue);\r\n                      setModuleName(newValue?.ModuleName);\r\n                      getFormNames(newValue);\r\n                    }}\r\n                    sx={{ minWidth: \"250px\", maxWidth: \"1005px\" }}\r\n                    renderInput={(params) => (\r\n                      <TextField\r\n                        {...params}\r\n                        placeholder=\"Form Name\"\r\n                        variant=\"outlined\"\r\n                        autoComplete=\"off\"\r\n                      />\r\n                    )}\r\n                  />\r\n                  <Div style={{ color: \"red\" }}>\r\n                    {!moduleName && errors?.moduleName}\r\n                  </Div>\r\n                </Grid>\r\n\r\n                <Grid item xs={12} sx={{ ml: 2 }}>\r\n                  <Typography className=\"col-12 input-label\">\r\n                    Document Name/Form Name <span className=\"required\">*</span>\r\n                  </Typography>\r\n                </Grid>\r\n                <Grid item xs={12} sx={{ ml: 2 }}>\r\n                  <Autocomplete\r\n                    // onFocus={getFormNames}\r\n                    className=\"search-select col-12\"\r\n                    id=\"free-solo-demo\"\r\n                    options={listFormNames}\r\n                    getOptionLabel={(option) => option?.FormName}\r\n                    value={listFormNames?.find(\r\n                      (option) => option?.FormName === formName\r\n                    ) || null}\r\n                    onChange={(e, newValue) => {\r\n                      console.log(newValue);\r\n                      setFormName(newValue?.FormName);\r\n                      getFieldNames2(newValue);\r\n                      // settingServices.filterFieldNames(newValue.FormName).then((res)=>{\r\n                      //   console.log(res);\r\n                      //   setListFieldNames(res);\r\n                      // })\r\n                    }}\r\n                    sx={{ minWidth: \"250px\", maxWidth: \"1005px\" }}\r\n                    renderInput={(params) => (\r\n                      <TextField\r\n                        {...params}\r\n                        placeholder=\"Document Name\"\r\n                        variant=\"outlined\"\r\n                        autoComplete=\"off\"\r\n                      />\r\n                    )}\r\n                  />\r\n                  <Div style={{ color: \"red\" }}>\r\n                    {!formName && errors?.formName}\r\n                  </Div>\r\n                </Grid>\r\n\r\n                <Grid item xs={12} sx={{ ml: 2 }}>\r\n                  <Typography className=\"col-12 input-label\">\r\n                    Field Name <span className=\"required\">*</span>\r\n                  </Typography>\r\n                </Grid>\r\n                <Grid item xs={12} sx={{ ml: 2 }}>\r\n                  <Autocomplete\r\n                    className=\"search-select col-12\"\r\n                    id=\"free-solo-demo\"\r\n                    name=\"fieldName2\"\r\n                    options={listFieldNames2}\r\n                    getOptionLabel={(option) => option?.Field_Name}\r\n                    value={listFieldNames2?.find(\r\n                      (option) => option?.Field_Name === fieldName2\r\n                    ) || null}\r\n                    onChange={(e, newValue) => {\r\n                      console.log(newValue);\r\n                      setFieldName2(newValue?.Field_Name);\r\n                    }}\r\n                    autoComplete=\"off\"\r\n                    sx={{ minWidth: \"250px\", maxWidth: \"1005px\" }}\r\n                    renderInput={(params) => (\r\n                      <TextField\r\n                        {...params}\r\n                        placeholder=\"Field Name\"\r\n                        variant=\"outlined\"\r\n                        autoComplete=\"off\"\r\n                      />\r\n                    )}\r\n                  />\r\n                  <Div style={{ color: \"red\" }}>\r\n                    {!fieldName2 && errors?.fieldName2}\r\n                  </Div>\r\n                </Grid>\r\n              </Grid>\r\n            </DialogContent>\r\n            <DialogActions>\r\n              <ButtonGroup\r\n                aria-label=\"split button\"\r\n                type=\"submit\"\r\n                sx={{\r\n                  mt: { xs: 0.5, lg: 0 },\r\n                  mr: { xs: 0, md: 1 }\r\n                }}\r\n              >\r\n                <Button type=\"submit\" className=\"plus-button\">Update</Button>\r\n                <Button variant=\"contained\" className=\"icon-button\">\r\n                  <FaSave size={18} />\r\n                </Button>\r\n              </ButtonGroup>\r\n              <ButtonGroup aria-label=\"split button\"\r\n                sx={{\r\n                  mt: { xs: 0.5, lg: 0 },\r\n                  mr: { xs: 0, md: 1 }\r\n                }}\r\n                onClick={() => {\r\n                  setOpenForms(false);\r\n                  setModuleName(\"\");\r\n                  setFormName(\"\");\r\n                  setFieldName2(\"\");\r\n                  setErrors({});\r\n                }}\r\n              >\r\n                <Button className=\"plus-button\">Cancel</Button>\r\n                <Button variant=\"contained\" className=\"icon-button\">\r\n                  <TiCancel size={24} />\r\n                </Button>\r\n              </ButtonGroup>\r\n            </DialogActions>\r\n          </div>\r\n        </form>\r\n      </Dialog>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default EditAssignWorkflows;\r\n","import JumboContentLayoutMain from \"@jumbo/components/JumboContentLayout/JumboContentLayoutMain\";\r\nimport JumboScrollbar from \"@jumbo/components/JumboScrollbar\";\r\nimport Div from \"@jumbo/shared/Div\";\r\nimport {\r\n  Grid,\r\n  IconButton,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TableRow,\r\n  Typography,\r\n} from \"@mui/material\";\r\nimport React, { useState } from \"react\";\r\nimport { useEffect } from \"react\";\r\nimport { BiEdit } from \"react-icons/bi\";\r\nimport { MdDelete } from \"react-icons/md\";\r\nimport { toast } from \"react-toastify\";\r\nimport settingServices from \"app/services/setting-api-services\";\r\nimport CreateAssignWorkflows from \"./CreateAssignWorkflows\";\r\nimport EditAssignWorkflows from \"./EditAssignWorkflows\";\r\nimport Setting from \"../../Setting\";\r\nimport ScrollToTop from \"app/pages/ScrollToTop\";\r\nimport useResponsive from \"app/pages/useResponsive\";\r\nimport { DateFormatter } from \"app/shared/ReuseComponents/DateFormatter\";\r\nimport axios from \"axios\";\r\nimport { BASE_URL } from \"app/services/auth-services\";\r\nimport CommonPagination from \"app/shared/ReuseComponents/CommonPagination\";\r\nimport { ErpDeleteDialogBox } from \"app/shared/ReuseComponents/ErpDialogBoxes\";\r\nimport { CustomSkeleton } from \"app/shared/ReuseComponents/StyledComponents\";\r\nimport { ErpCreateButton, ErpSearchBox } from \"app/shared/ReuseComponents/ButtonComponent\";\r\n\r\n\r\n\r\nconst ListAssignWorkflows = ({ scrollHeight }) => {\r\n  const token = localStorage.getItem(\"accesstoken\");\r\n\r\n  const header = {\r\n    headers: {\r\n      Authorization: `Bearer ${token}`,\r\n      \"Content-Type\": \"application/json\",\r\n      Accept: \"application/json\",\r\n    },\r\n  };\r\n\r\n  const [listWorkflow, setListWorkflow] = useState(true);\r\n  const [createWorkflow, setCreateWorkflow] = useState(false);\r\n  const [editWorkflow, setEditWorkflow] = useState(false);\r\n  const [openDelete, setOpenDelete] = useState(false);\r\n\r\n  const [currentDeleteId, setCurrentDeleteId] = useState(\"\");\r\n  const [currentDeleteWorkflowNo, setCurrentDeleteWorkflowNo] = useState(\"\");\r\n\r\n  const [workflows, setWorkflows] = useState([]);\r\n  const [currentWorkflows, setCurrentWorkflows] = useState([]);\r\n\r\n  const [searchData, setSearchData] = useState(\"\")\r\n\r\n\r\n  // skeleton flag\r\n  const [skeleton, setSkeleton] = useState(false);\r\n\r\n\r\n\r\n  const [page, setPage] = useState(1);\r\n  const [count, setCount] = useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = useState(10);\r\n  const [visitedPages, setVisitedPages] = useState(page - 1);\r\n  const rowsPerPageOptions = [10];\r\n  const totalRecords = count;\r\n  const totalPages = Math.ceil(totalRecords / rowsPerPage);\r\n\r\n  let isMobile = useResponsive(\"down\", \"md\");\r\n\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n    setRowsPerPage(10);\r\n    setSkeleton(true);\r\n    settingServices\r\n      .AssignWorkflowLists(newPage, header)\r\n      .then((res) => {\r\n        setWorkflows(res?.results);\r\n        setCount(res?.count);\r\n        setSkeleton(false);\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n        setSkeleton(false);\r\n      });\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    // setRowsPerPage(parseInt(event.target.value, 10));\r\n    // setPage(1);\r\n    // setVisitedPages(visitedPages);\r\n    const newRowsPerPage = parseInt(event.target.value, 10);\r\n    const newPage = Math.floor(((page - 1) * rowsPerPage) / newRowsPerPage) + 1;\r\n\r\n    setRowsPerPage(newRowsPerPage);\r\n    setPage(newPage);\r\n  };\r\n\r\n  const listOfWorkflows = () => {\r\n    setSkeleton(true);\r\n    settingServices\r\n      .AssignWorkflowLists(page, header)\r\n      .then((res) => {\r\n        console.log(res?.count);\r\n        setWorkflows(res?.results);\r\n        setCount(res?.count);\r\n        setSkeleton(false);\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n        setSkeleton(false);\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    listOfWorkflows();\r\n  }, [setWorkflows]);\r\n\r\n  const CreateWorkFlow = () => {\r\n    setListWorkflow(false);\r\n    setCreateWorkflow(true);\r\n  };\r\n\r\n  const handleEditPopup = (data) => {\r\n    setEditWorkflow(true);\r\n    setListWorkflow(false);\r\n    setCurrentWorkflows({\r\n      id: data?.id,\r\n      Assignworkflow_Id: data?.Assignworkflow_Id,\r\n      Partner_Id: data?.Partner_Id,\r\n      WorkflowName_Id: data?.WorkflowName_Id,\r\n      Workflow_Name: data?.Workflow_Name,\r\n      Workflow_Basedon: data?.Workflow_Basedon,\r\n      Document_Name: data?.Document_Name,\r\n      Field_Name: data?.Field_Name,\r\n      Noof_Level: data?.Noof_Level,\r\n      Head_Approval: data?.Head_Approval,\r\n      Rule_Name: data?.Rule_Name,\r\n      Created_By: data?.Created_By,\r\n    });\r\n  };\r\n\r\n  const handleDeletePopup = (data) => {\r\n    setOpenDelete(true);\r\n    setCurrentDeleteId(data?.id);\r\n    setCurrentDeleteWorkflowNo(data?.Assignworkflow_Id);\r\n    setCurrentWorkflows(data);\r\n  };\r\n\r\n  const deleteData = (e) => {\r\n    e.preventDefault();\r\n\r\n    settingServices\r\n      .deleteAssignWorkflow(currentDeleteWorkflowNo, header)\r\n      .then((response) => {\r\n        console.log(response);\r\n        toast.success(`${currentDeleteWorkflowNo} is Deleted Successfully`);\r\n        setOpenDelete(false);\r\n        listOfWorkflows();\r\n        // window.location.reload();\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n\r\n\r\n  const handleSearch = async (data) => {\r\n    await axios\r\n      .get(`${BASE_URL}/Erpapp/workflowasignsearch/?search=${data}`, header)\r\n      .then((res) => {\r\n        console.log(res?.data);\r\n        setWorkflows(res?.data);\r\n        setCount(res?.data?.length);\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"ds\", error);\r\n      });\r\n  };\r\n\r\n\r\n  const handleSearchWorkflows = (e) => {\r\n    var data = e.target.value;\r\n    setSearchData(data);\r\n    data !== \"\" ? handleSearch(data) : listOfWorkflows();\r\n  }\r\n\r\n\r\n\r\n  return (\r\n    <>\r\n      <JumboContentLayoutMain>\r\n        <Setting />\r\n        <Div sx={{ display: listWorkflow === true ? \"block\" : \"none\" }}>\r\n          <Typography variant=\"h3\" sx={{ fontWeight: 600 }}>\r\n            Assign Workflow List - Count : {count || 0}\r\n          </Typography>\r\n          <Typography variant=\"h4\" sx={{ fontWeight: 500 }}>\r\n            User shall use this form to list all the Assign workflows created by\r\n            administrator. Administrator can also edit and remove the Assign workflow.\r\n          </Typography>\r\n\r\n          <Grid container sx={{ mt: 2 }}>\r\n            <Grid\r\n              item\r\n              className=\"filter\"\r\n              xs={12}\r\n              md={1}\r\n              lg={3}\r\n              xl={5}\r\n            ></Grid>\r\n\r\n            <Grid item xs={12} md={5} sm={12} lg={4} xl={4}>\r\n              <ErpSearchBox handleChange={handleSearchWorkflows} searchData={searchData} />\r\n            </Grid>\r\n\r\n            <Grid item xs={12} md={6} sm={12} lg={5} xl={3} sx={{ display: \"flex\", justifyContent: \"flex-end\", mt: { xs: 1, md: 0 } }}>\r\n              <ErpCreateButton handleClick={CreateWorkFlow} name={\"Assign Workflow\"} />\r\n            </Grid>\r\n          </Grid>\r\n\r\n          {/* code for workflow list table */}\r\n          <React.Fragment>\r\n            <Div sx={{ mt: 1 }}>\r\n              <JumboScrollbar\r\n                autoHeight={true}\r\n                autoHideTimeout={4000}\r\n                autoHeightMin={scrollHeight ? scrollHeight : 360}\r\n                autoHide={true}\r\n                hideTracksWhenNotNeeded\r\n                id=\"no-more-tables\"\r\n              >\r\n                <Table stickyHeader className=\"table\">\r\n                  <TableHead className=\"table-head\">\r\n                    <TableRow>\r\n                      <TableCell>Date</TableCell>\r\n                      <TableCell>\r\n                        Document Name\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        Workflow Name\r\n                      </TableCell>\r\n                      <TableCell sx={{ minWidth: \"180px !important\" }}>\r\n                        Workflow Based On\r\n                      </TableCell>\r\n                      <TableCell>Rule</TableCell>\r\n                      <TableCell>No Of Levels</TableCell>\r\n                      <TableCell>Action</TableCell>\r\n                    </TableRow>\r\n                  </TableHead>\r\n                  <TableBody>\r\n                    {skeleton ? <CustomSkeleton headCount={7} rowCount={10} />\r\n                      : count > 0 ? (\r\n                        workflows\r\n                          ?.slice(\r\n                            visitedPages * rowsPerPage,\r\n                            visitedPages * rowsPerPage + rowsPerPage\r\n                          )\r\n                          .map((data) => {\r\n                            return (\r\n                              <TableRow hover key={data.id} sx={{ fontSize: 14 }}>\r\n                                <TableCell data-title=\"Date\">\r\n                                  {/* {data.Created_Date.slice(0, 10)} */}\r\n                                  <DateFormatter date={data?.Created_Date} />\r\n                                </TableCell>\r\n                                <TableCell data-title=\"Document Name\">\r\n                                  {data.Document_Name}\r\n                                </TableCell>\r\n                                <TableCell data-title=\"Workflow Name\">\r\n                                  {data.Workflow_Name}\r\n                                </TableCell>\r\n                                <TableCell data-title=\"Workflow Based On\">\r\n                                  {data.Workflow_Basedon}\r\n                                </TableCell>\r\n\r\n                                <TableCell data-title=\"Rule\">\r\n                                  {data.Rule_Name}\r\n                                </TableCell>\r\n                                <TableCell data-title=\"No Of Levels\">\r\n                                  {data.Noof_Level}\r\n                                </TableCell>\r\n                                <TableCell data-title=\"Action\">\r\n                                  <Div>\r\n                                    <IconButton\r\n                                      size=\"small\"\r\n                                      className=\"edit-icon\"\r\n                                      onClick={() => handleEditPopup(data)}\r\n                                    >\r\n                                      <BiEdit />\r\n                                    </IconButton>\r\n\r\n                                    <IconButton\r\n                                      size=\"small\"\r\n                                      className=\"delete-icon\"\r\n                                      onClick={() => {\r\n                                        handleDeletePopup(data);\r\n                                      }}\r\n                                    >\r\n                                      <MdDelete />\r\n                                    </IconButton>\r\n                                  </Div>\r\n                                </TableCell>\r\n                              </TableRow>\r\n                            );\r\n                          })\r\n                      ) : (\r\n                        <TableRow>\r\n                          <TableCell colSpan={8} align=\"center\">\r\n                            No Workflows\r\n                          </TableCell>\r\n                        </TableRow>\r\n                      )}\r\n                  </TableBody>\r\n                </Table>\r\n              </JumboScrollbar>\r\n            </Div>\r\n\r\n            {/* pagination */}\r\n            <Div sx={{ display: \"flex\", flexWrap: \"wrap\" }}>\r\n              <CommonPagination\r\n                totalPages={totalPages}\r\n                page={page}\r\n                handleChangePage={handleChangePage}\r\n                rowsPerPageOptions={rowsPerPageOptions}\r\n                rowsPerPage={rowsPerPage}\r\n                handleChangeRowsPerPage={handleChangeRowsPerPage}\r\n              />\r\n            </Div>\r\n          </React.Fragment>\r\n\r\n          {/* Delete workflow popup */}\r\n          <ErpDeleteDialogBox flag={openDelete} setFlag={setOpenDelete} handleClick={deleteData} content={\"Are you sure you want to delete the workflow\"} id={currentWorkflows?.Document_Name} />\r\n\r\n\r\n        </Div>\r\n\r\n        <Div sx={{ display: createWorkflow === true ? \"block\" : \"none\" }}>\r\n          <CreateAssignWorkflows\r\n            setCreateWorkflow={setCreateWorkflow}\r\n            setListWorkflow={setListWorkflow}\r\n            listOfWorkflows={listOfWorkflows}\r\n            workflows={workflows}\r\n          />\r\n        </Div>\r\n        <Div sx={{ display: editWorkflow === true ? \"block\" : \"none\" }}>\r\n          <EditAssignWorkflows\r\n            setEditWorkflow={setEditWorkflow}\r\n            setListWorkflow={setListWorkflow}\r\n            listOfWorkflows={listOfWorkflows}\r\n            currentWorkflows={currentWorkflows}\r\n          />\r\n        </Div>\r\n        <ScrollToTop Scrollheight={180} />\r\n      </JumboContentLayoutMain>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ListAssignWorkflows;\r\n","// @mui\r\nimport { useTheme } from '@mui/material/styles';\r\nimport useMediaQuery from '@mui/material/useMediaQuery';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nexport default function useResponsive(query, key, start, end) {\r\n  const theme = useTheme();\r\n\r\n  const mediaUp = useMediaQuery(theme.breakpoints.up(key));\r\n\r\n  const mediaDown = useMediaQuery(theme.breakpoints.down(key));\r\n\r\n  const mediaBetween = useMediaQuery(theme.breakpoints.between(start, end));\r\n\r\n  const mediaOnly = useMediaQuery(theme.breakpoints.only(key));\r\n\r\n  if (query === 'up') {\r\n    return mediaUp;\r\n  }\r\n\r\n  if (query === 'down') {\r\n    return mediaDown;\r\n  }\r\n\r\n  if (query === 'between') {\r\n    return mediaBetween;\r\n  }\r\n\r\n  if (query === 'only') {\r\n    return mediaOnly;\r\n  }\r\n  return null;\r\n}\r\n","import { useJumboLayoutSidebar } from \"@jumbo/hooks\";\r\nimport { Grid, MenuItem, Pagination, Select } from \"@mui/material\";\r\nimport useResponsive from \"app/pages/useResponsive\";\r\nimport React, { memo } from \"react\";\r\n\r\nconst CommonPagination = ({\r\n  totalPages,\r\n  page = 1,\r\n  handleChangePage = () => { },\r\n  rowsPerPageOptions,\r\n  rowsPerPage,\r\n  handleChangeRowsPerPage = () => { }\r\n}) => {\r\n\r\n  let isMobile = useResponsive(\"down\", \"md\");\r\n  let isTabOnly = useResponsive(\"down\", \"lg\");\r\n\r\n  const { sidebarOptions, setSidebarOptions } = useJumboLayoutSidebar();\r\n\r\n  console.log(\"sidebarOptions from pagination\", sidebarOptions?.open);\r\n\r\n  return (\r\n    <Grid container spacing={1} sx={{ mt: 2, display: \"flex\", alignItems: \"center\" }}>\r\n      <Grid item xs={12} md={0} lg={sidebarOptions?.open ? 1.5 : 3} xl={4.5}></Grid>\r\n      <Grid item xs={12} md={sidebarOptions?.open ? 5 : 4} lg={sidebarOptions?.open ? 4 : 4} xl={3.5} sx={{ display: \"flex\", justifyContent: { xs: \"center\", md: \"flex-end\" }, alignItems: \"center\", gap: \"10px !important\" }}>\r\n        {/* <label className=\"input-label\">Rows per page</label>\r\n        <Select\r\n          className=\"input-pagination-select\"\r\n          value={rowsPerPage}\r\n          onChange={handleChangeRowsPerPage}\r\n          variant=\"outlined\"\r\n          sx={{ minWidth: \"60px !important\" }}\r\n        >\r\n          {rowsPerPageOptions?.map((option) => (\r\n            <MenuItem key={option} value={option}>\r\n              {option}\r\n            </MenuItem>\r\n          ))}\r\n        </Select> */}\r\n      </Grid>\r\n      <Grid item xs={12} md={sidebarOptions?.open ? 7 : 8} lg={sidebarOptions?.open ? 6.5 : 5} xl={4} sx={{ display: \"flex\", justifyContent: { xs: \"center\", md: \"flex-end\" }, alignItems: \"center\", gap: \"10px !important\" }}>\r\n        <Pagination\r\n          color=\"primary\"\r\n          count={totalPages}\r\n          page={page}\r\n          onChange={(e, newValue) => handleChangePage(e, newValue)}\r\n          variant=\"outlined\"\r\n          shape=\"rounded\"\r\n          showFirstButton={Boolean(isMobile || isTabOnly) ? Boolean(sidebarOptions?.open || isMobile) ? false : true : true}\r\n          showLastButton={Boolean(isMobile || isTabOnly) ? Boolean(sidebarOptions?.open || isMobile) ? false : true : true}\r\n          siblingCount={0}\r\n        />\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default memo(CommonPagination);\r\n","import Div from '@jumbo/shared/Div'\r\nimport { Box, Button, ButtonGroup, Dialog, DialogActions, DialogContent, IconButton, Typography, styled, useMediaQuery, useTheme } from '@mui/material'\r\nimport React from 'react'\r\nimport { MdCheck, MdClear, MdClose, MdDelete } from 'react-icons/md'\r\nimport { TiCancel } from 'react-icons/ti'\r\n\r\n\r\nconst DialogBox = styled(Dialog)(({ theme }) => ({\r\n    '& .MuiDialog-paper': {\r\n        borderRadius: 5,\r\n        backgroundColor: theme.palette.background.default,\r\n        border: `1px solid ${theme.palette.divider}`,\r\n    },\r\n}));\r\n\r\nconst StyledIconButton = styled(IconButton)(({ theme }) => ({\r\n    color: theme.palette.error.main,\r\n    '&:hover': {\r\n        backgroundColor: theme.palette.error.light,\r\n        color: theme.palette.background.default,\r\n    },\r\n}));\r\n\r\nconst CustomTypography = styled(Typography)(({ theme }) => ({\r\n    padding: theme.spacing(0.5),\r\n    textAlign: 'left',\r\n    // backgroundColor: theme.palette.error.light,\r\n    // color: theme.palette.error.contrastText,\r\n    borderRadius: theme.shape.borderRadius,\r\n}));\r\n\r\n\r\nexport const ErpDeleteDialogBox = ({ flag, setFlag, handleClick, content, id, isMobile }) => {\r\n    const theme = useTheme();\r\n    const isMdUp = useMediaQuery(theme.breakpoints.down('md'));\r\n\r\n    return (\r\n        <DialogBox open={flag}\r\n            maxWidth={window.innerWidth <= 600 ? 'xs' : window.innerWidth <= 768 ? 'sm' : window.innerWidth <= 992 ? 'sm' : 'sm'}\r\n            fullWidth\r\n            onClose={() => setFlag(false)}\r\n        >\r\n            <DialogContent>\r\n                <Typography variant=\"h3\">\r\n                    {content}\r\n                    <span>&nbsp;</span>\r\n                    <span style={{ fontWeight: 700 }}>\r\n                        {\" \"}\r\n                        \"{id}\" ?\r\n                    </span>\r\n                </Typography>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                {isMobile ? isMobile : isMdUp ? (\r\n                    <>\r\n                        <Button variant=\"contained\" color={\"error\"} endIcon={<MdDelete />} onClick={handleClick}>\r\n                            Delete\r\n                        </Button>\r\n                        <Button variant=\"contained\" endIcon={<TiCancel />} onClick={() => setFlag(false)}>\r\n                            Cancel\r\n                        </Button>\r\n                    </>\r\n                ) :\r\n                    <Div className=\"buttons\">\r\n                        <ButtonGroup\r\n                            aria-label=\"split button\"\r\n                            onClick={handleClick}\r\n                            sx={{\r\n                                mt: { xs: 0.5, lg: 0 },\r\n                                mr: { xs: 0, md: 1 }\r\n                            }}\r\n                        >\r\n                            <Button className=\"plus-button\">\r\n                                Delete\r\n                            </Button>\r\n                            <Button variant=\"contained\" className=\"icon-button\">\r\n                                <MdDelete size={18} />\r\n                            </Button>\r\n                        </ButtonGroup>\r\n\r\n                        <ButtonGroup\r\n                            aria-label=\"split button\"\r\n                            onClick={() => setFlag(false)}\r\n                            sx={{\r\n                                mt: { xs: 0.5, lg: 0 },\r\n                                mr: { xs: 0, md: 1 }\r\n                            }}\r\n                        >\r\n                            <Button className=\"plus-button\">Cancel</Button>\r\n                            <Button variant=\"contained\" className=\"icon-button\">\r\n                                <TiCancel size={22} />\r\n                            </Button>\r\n                        </ButtonGroup>\r\n                    </Div>\r\n                }\r\n            </DialogActions>\r\n        </DialogBox>\r\n    )\r\n}\r\n\r\n\r\nexport const ErpConfirmDialogBox = ({ flag, setFlag, handleClick, content, isMobile }) => {\r\n    return (\r\n        <Dialog\r\n            open={flag}\r\n            maxWidth=\"sm\"\r\n            fullWidth\r\n        >\r\n            <DialogContent>\r\n                <Typography variant='h4'>\r\n                    {content}\r\n                </Typography>\r\n                <br />\r\n                <Typography variant='h4'>\r\n                    Do you want still to continue...\r\n                </Typography>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                {isMobile ? (\r\n                    <>\r\n                        <Button variant=\"contained\" color={\"error\"} endIcon={<MdCheck />} onClick={() => setFlag(false)} >\r\n                            Yes\r\n                        </Button>\r\n                        <Button variant=\"contained\" endIcon={<MdClear />} onClick={handleClick}>\r\n                            No\r\n                        </Button>\r\n                    </>\r\n                ) :\r\n                    <Div className=\"buttons\">\r\n                        <ButtonGroup\r\n                            aria-label=\"split button\"\r\n                            onClick={() => setFlag(false)}\r\n                            sx={{\r\n                                mt: { xs: 0.5, lg: 0 },\r\n                                mr: { xs: 0, md: 1 }\r\n                            }}\r\n                        >\r\n                            <Button className=\"plus-button\">\r\n                                Yes\r\n                            </Button>\r\n                            <Button variant=\"contained\" className=\"icon-button\">\r\n                                <MdCheck size={16} />\r\n                            </Button>\r\n                        </ButtonGroup>\r\n                        <ButtonGroup\r\n                            aria-label=\"split button\"\r\n                            onClick={handleClick}\r\n                            sx={{\r\n                                mt: { xs: 0.5, lg: 0 },\r\n                                mr: { xs: 0, md: 1 }\r\n                            }}\r\n                        >\r\n                            <Button className=\"plus-button\">\r\n                                No\r\n                            </Button>\r\n                            <Button variant=\"contained\" className=\"icon-button\">\r\n                                <MdClear size={16} />\r\n                            </Button>\r\n                        </ButtonGroup>\r\n                    </Div>\r\n                }\r\n            </DialogActions>\r\n        </Dialog>\r\n    )\r\n}\r\n\r\n\r\nexport const ErpStatusConfirmDialogBox = ({ flag, setFlag, handleClick, content, isMobile }) => {\r\n    return (\r\n        <Dialog\r\n            open={flag}\r\n            maxWidth=\"sm\"\r\n            fullWidth\r\n        >\r\n            <DialogContent>\r\n                <Typography variant='h4'>\r\n                    {content}\r\n                </Typography>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                {isMobile ? (\r\n                    <>\r\n                        <Button variant=\"contained\" color={\"error\"} endIcon={<MdCheck />} onClick={handleClick} >\r\n                            Yes\r\n                        </Button>\r\n                        <Button variant=\"contained\" endIcon={<MdClear />} onClick={() => setFlag(false)} >\r\n                            No\r\n                        </Button>\r\n                    </>\r\n                ) :\r\n                    <Div className=\"buttons\">\r\n                        <ButtonGroup\r\n                            aria-label=\"split button\"\r\n                            onClick={handleClick}\r\n                            sx={{\r\n                                mt: { xs: 0.5, lg: 0 },\r\n                                mr: { xs: 0, md: 1 }\r\n                            }}\r\n                        >\r\n                            <Button className=\"plus-button\">\r\n                                Yes\r\n                            </Button>\r\n                            <Button variant=\"contained\" className=\"icon-button\">\r\n                                <MdCheck size={16} />\r\n                            </Button>\r\n                        </ButtonGroup>\r\n                        <ButtonGroup\r\n                            aria-label=\"split button\"\r\n                            onClick={() => setFlag(false)}\r\n                            sx={{\r\n                                mt: { xs: 0.5, lg: 0 },\r\n                                mr: { xs: 0, md: 1 }\r\n                            }}\r\n                        >\r\n                            <Button className=\"plus-button\">\r\n                                No\r\n                            </Button>\r\n                            <Button variant=\"contained\" className=\"icon-button\">\r\n                                <MdClear size={16} />\r\n                            </Button>\r\n                        </ButtonGroup>\r\n                    </Div>\r\n                }\r\n            </DialogActions>\r\n        </Dialog>\r\n    )\r\n}\r\n\r\n\r\nexport const ErpAlertViewDialogBox = ({ flag, setFlag, isMobile }) => {\r\n    return (\r\n        <DialogBox\r\n            open={flag}\r\n            maxWidth=\"xs\"\r\n        // onClose={() => setFlag(false)} // Optional: You can enable this if you want the dialog to close on backdrop click.\r\n        >\r\n            <DialogContent>\r\n                <Div sx={{ p: 0, m: 0, mb: 2, display: \"flex\", justifyContent: \"space-between\", alignItems: \"center\" }}>\r\n                    <CustomTypography variant='h3'>\r\n                        Alert\r\n                    </CustomTypography>\r\n\r\n                    <StyledIconButton onClick={() => setFlag(false)} sx={{ p: 0.3 }}>\r\n                        <MdClose size={22} />\r\n                    </StyledIconButton>\r\n                </Div>\r\n                <Typography variant='h4' sx={{ color: 'text.secondary' }}>\r\n                    You don't have the permission to view this page.\r\n                </Typography>\r\n            </DialogContent>\r\n        </DialogBox>\r\n    )\r\n}\r\n\r\n\r\n"],"names":["_ref","Scrollheight","isVisible","setIsVisible","useState","isAboveXl","useResponsive","handleScroll","window","scrollY","useEffect","addEventListener","removeEventListener","_jsx","style","display","justifyContent","alignItems","position","bottom","right","zIndex","borderRadius","boxShadow","padding","width","height","backgroundColor","color","transition","cursor","onClick","scrollToTopHandler","scrollTo","top","behavior","className","children","FaArrowCircleUp","size","Setting","_Fragment","Div","Typography","variant","sx","fontWeight","mt","setListWorkflow","setCreateWorkflow","listOfWorkflows","workflows","token","localStorage","getItem","header","headers","Authorization","concat","Accept","approverHead","setApproverHead","openForms","setOpenForms","workflowNamesList","setWorkflowNamesList","listModules","setListModules","listFormNames","setListFormNames","listDocumentNames","setListDocumentNames","listFieldNames","setListFieldNames","listFieldNames2","setListFieldNames2","ruleName","setRuleName","workflowName","setWorkflowName","fieldName","setFieldName","basedOnWorkflow","setBasedOnWorkflow","amount","setAmount","documentName","setDocumentName","noOfLevels","setNoOfLevels","moduleName","setModuleName","formName","setFormName","fieldName2","setFieldName2","errors","setErrors","_jsxs","onSubmit","e","preventDefault","console","log","validateForm","newErrors","undefined","Object","keys","length","find","opt","Document_Name","toast","warning","payload","Field_Name","Head_Approval","Noof_Level","Rule_Name","WorkflowName_Id","id","Workflow_Basedon","Workflow_Name","Company_Id","parseInt","Partner_Id","Created_By","Updated_By","Created_Date","todayDate","axios","BASE_URL","then","res","_res$data3","data","success","error","catch","message","minHeight","Grid","container","ml","sm","md","item","xs","Autocomplete","name","onFocus","getDocumentNames","settingServices","filter","Is_Deleted","getOptionLabel","option","FormName","options","filterOptions","_ref2","inputValue","toLowerCase","startsWith","value","onChange","newValue","filterFieldNamesFromWorkflowOrigin","getFieldNames","isOptionEqualToValue","renderInput","params","TextField","_objectSpread","placeholder","autoComplete","ButtonGroup","lg","xl","handleOpenWorkflowSetup","Button","FaPlus","getListofWorkflowNames","_res$data","results","_res$data$","_res$data$2","filterWorkflowNames","disabled","type","mr","FaSave","TiCancel","Dialog","open","validateForm1","Form_Name","FieldShort_Name","_res$data2","DialogContent","async","ModuleName","getFormNames","minWidth","maxWidth","formname","filterlistFieldNames","_res$","_res$2","Array","isArray","getFieldNames2","DialogActions","setEditWorkflow","currentWorkflows","defaultWorkflowName","defaultDocumentName","defaultFieldName","defaultNoofLevels","defaultHeadApproval","defaultRuleName","Assignworkflow_Id","handleChangeDocument","scrollHeight","listWorkflow","createWorkflow","editWorkflow","openDelete","setOpenDelete","currentDeleteId","setCurrentDeleteId","currentDeleteWorkflowNo","setCurrentDeleteWorkflowNo","setWorkflows","setCurrentWorkflows","searchData","setSearchData","skeleton","setSkeleton","page","setPage","count","setCount","rowsPerPage","setRowsPerPage","visitedPages","setVisitedPages","totalRecords","totalPages","Math","ceil","AssignWorkflowLists","JumboContentLayoutMain","ErpSearchBox","handleChange","target","handleSearch","ErpCreateButton","handleClick","CreateWorkFlow","React","JumboScrollbar","autoHeight","autoHideTimeout","autoHeightMin","autoHide","hideTracksWhenNotNeeded","Table","stickyHeader","TableHead","TableRow","TableCell","TableBody","CustomSkeleton","headCount","rowCount","slice","map","hover","fontSize","DateFormatter","date","IconButton","handleEditPopup","BiEdit","handleDeletePopup","MdDelete","colSpan","align","flexWrap","CommonPagination","handleChangePage","event","newPage","rowsPerPageOptions","handleChangeRowsPerPage","newRowsPerPage","floor","ErpDeleteDialogBox","flag","setFlag","deleteAssignWorkflow","response","content","CreateAssignWorkflows","EditAssignWorkflows","ScrollToTop","query","key","start","end","theme","useTheme","mediaUp","useMediaQuery","breakpoints","up","mediaDown","down","mediaBetween","between","mediaOnly","only","isMobile","isTabOnly","sidebarOptions","setSidebarOptions","useJumboLayoutSidebar","spacing","gap","Pagination","shape","showFirstButton","Boolean","showLastButton","siblingCount","memo","DialogBox","styled","palette","background","default","border","divider","StyledIconButton","main","light","CustomTypography","_ref3","textAlign","_ref4","isMdUp","innerWidth","fullWidth","onClose","endIcon","ErpConfirmDialogBox","_ref5","MdCheck","MdClear","ErpAlertViewDialogBox","_ref7","p","m","mb","MdClose"],"sourceRoot":""}