{"version":3,"file":"static/js/3.1821fc85.chunk.js","mappings":"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","sources":["app/pages/ScrollToTop.js","app/pages/settings/Setting.js","app/pages/settings/Workflow/PartnerWorkflow/CreatePartnerWorkflow.js","app/pages/settings/Workflow/PartnerWorkflow/EditPartnerWorkflow.js","app/pages/settings/Workflow/PartnerWorkflow/ListPartnerWorkflow.js","app/pages/useResponsive.js","app/shared/ReuseComponents/CommonPagination.js","app/shared/ReuseComponents/ErpDialogBoxes.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { FaArrowCircleUp } from 'react-icons/fa';\r\nimport useResponsive from './useResponsive';\r\n\r\nconst ScrollToTop = ({ Scrollheight }) => {\r\n  const [isVisible, setIsVisible] = useState(false);\r\n  const isAboveXl = useResponsive(\"up\", \"xl\");\r\n\r\n  const handleScroll = () => {\r\n    if (window.scrollY > Scrollheight) {\r\n      setIsVisible(true);\r\n    } else {\r\n      setIsVisible(false);\r\n    }\r\n  };\r\n\r\n  const scrollToTopHandler = () => {\r\n    window.scrollTo({\r\n      top: 0,\r\n      behavior: 'smooth',\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    window.addEventListener('scroll', handleScroll);\r\n\r\n    return () => {\r\n      window.removeEventListener('scroll', handleScroll);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        display: isVisible ? 'flex' : 'none',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        position: 'fixed',\r\n        bottom: isAboveXl ? \"10%\" : \"10.5%\",\r\n        right: '10px',\r\n        zIndex: 99999,\r\n        borderRadius: '50%',\r\n        boxShadow: '0px 2px 9px lightgray',\r\n        padding: 0.5,\r\n        width: '35px',\r\n        height: '35px',\r\n        backgroundColor: 'white',\r\n        color: '#00bfff',\r\n        transition: 'linear 1.5s ease-in-out',\r\n        cursor: 'pointer',\r\n      }}\r\n      onClick={scrollToTopHandler}\r\n      className=\"topToBottomAnimation\"\r\n    >\r\n      <FaArrowCircleUp size={22} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ScrollToTop;\r\n","import React from 'react';\nimport { Typography } from '@mui/material';\nimport Div from \"@jumbo/shared/Div\";\nimport './Setting.css';\n\n\n\n\nconst Setting = () => {\n  return ( \n    <>\n      <Div>\n        {/* <img src='.\\images\\mainlogo-icon.jpg' width={30} height={30}></img> */}\n        <Typography variant='h1' sx={{ fontWeight: 800, mt: -2}}>Settings</Typography>\n      </Div>\n    </>\n    \n  )\n}\n\nexport default Setting;\n","import {\r\n  Autocomplete,\r\n  Button,\r\n  ButtonGroup,\r\n  Checkbox,\r\n  Dialog,\r\n  DialogActions,\r\n  DialogContent,\r\n  FormControl,\r\n  FormControlLabel,\r\n  Grid,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TableRow,\r\n  TextField,\r\n  Typography,\r\n} from \"@mui/material\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport Setting from \"../../Setting\";\r\nimport Div from \"@jumbo/shared/Div/Div\";\r\nimport itemServices from \"app/services/item-master-services\";\r\nimport axios from \"axios\";\r\nimport { BASE_URL } from \"app/services/auth-services\";\r\nimport settingServices from \"app/services/setting-api-services\";\r\nimport { toast } from \"react-toastify\";\r\nimport { FaSave } from \"react-icons/fa\";\r\nimport { TiCancel } from \"react-icons/ti\";\r\nimport JumboScrollbar from \"@jumbo/components/JumboScrollbar\";\r\nimport hrApiServices from \"app/services/hr-api-services\";\r\nimport { todayDate } from \"app/shared/ReuseComponents/DateFormatter\";\r\nimport { handleError } from \"app/pages/auth-pages/login/AuthGuard\";\r\nimport { NumericTextField } from \"app/shared/ReuseComponents/StyledComponents\";\r\n\r\nconst CreatePartnerWorkflow = ({\r\n  setListWorkflow,\r\n  setCreateWorkflow,\r\n  listOfWorkflows,\r\n  scrollHeight\r\n}) => {\r\n  const token = localStorage.getItem(\"accesstoken\");\r\n\r\n  const header = {\r\n    headers: {\r\n      Authorization: `Bearer ${token}`,\r\n      \"Content-Type\": \"application/json\",\r\n      Accept: \"application/json\",\r\n    },\r\n  };\r\n\r\n  const [workflows, setWorkflows] = useState([]);\r\n  const [approverHead, setApproverHead] = useState(false);\r\n  const [openForms, setOpenForms] = useState(false);\r\n  const [employees, setEmployees] = useState([]);\r\n  const [approvers, setApprovers] = useState([]);\r\n  const [listModules, setListModules] = useState([]);\r\n  const [listFormNames, setListFormNames] = useState([]);\r\n  const [listDocumentNames, setListDocumentNames] = useState([]);\r\n  const [listFieldNames, setListFieldNames] = useState([]);\r\n  const [listFieldNames2, setListFieldNames2] = useState([]);\r\n\r\n  const [partnerId, setPartnerId] = useState(\"\");\r\n  const [partnerName, setPartnerName] = useState(\"\");\r\n  const [documentId, setDocumentId] = useState(\"\");\r\n  const [documentName, setDocumentName] = useState(\"\");\r\n  const [ruleName, setRuleName] = useState(\"\");\r\n  const [workflowName, setWorkflowName] = useState(\"\");\r\n  const [fieldName, setFieldName] = useState(\"\");\r\n  const [basedOnWorkflow, setBasedOnWorkflow] = useState(\"Amount\");\r\n  const [amount, setAmount] = useState(false);\r\n  const [noOfLevels, setNoOfLevels] = useState(\"\");\r\n\r\n  const [moduleName, setModuleName] = useState(\"\");\r\n  const [formName, setFormName] = useState(\"\");\r\n  const [fieldName2, setFieldName2] = useState(\"\");\r\n\r\n\r\n  const [approverNameLists, setApproverNameLists] = useState([]);\r\n\r\n\r\n  const [rows, setRows] = useState([{\r\n    id: \"\",\r\n    level: \"Level 1\",\r\n    from_value: \"\",\r\n    to_value: \"\",\r\n    approver_name: \"\",\r\n    role: \"\",\r\n  }]);\r\n\r\n  const [errors, setErrors] = useState();\r\n\r\n\r\n\r\n  const handleAddRow = () => {\r\n    let arr = [];\r\n    rows?.map((item, ind) => {\r\n      console.log(\"kkkkk\", item);\r\n      if (\r\n        item?.id == \"\" ||\r\n        item?.level == \"\" ||\r\n        item?.approver_name == \"\" ||\r\n        item?.role == \"\"\r\n      ) {\r\n        toast.error(\r\n          \"You cannot add more item without adding information in previous Item.\"\r\n        );\r\n        arr.push(ind);\r\n      } else if (\r\n        item?.id == undefined ||\r\n        item?.level == undefined ||\r\n        item?.approver_name == undefined ||\r\n        item?.role == undefined\r\n      ) {\r\n        toast.error(\r\n          \"You cannot add more item without adding information in previous Item.\"\r\n        );\r\n        arr.push(ind);\r\n      }\r\n    });\r\n\r\n    if (arr?.length == 0) {\r\n      let items = {\r\n        id: \"\",\r\n        level: \"\",\r\n        from_value: \"\",\r\n        to_value: \"\",\r\n        approver_name: \"\",\r\n        role: \"\",\r\n      };\r\n      setRows([...rows, items]);\r\n    }\r\n\r\n  };\r\n\r\n  const handleRemoveRow = (index) => {\r\n    const list = [...rows];\r\n    if (rows?.length !== 1) {\r\n      list.splice(index, 1);\r\n    }\r\n    setRows(list);\r\n  };\r\n\r\n\r\n  // get a employee lists\r\n  useEffect(() => {\r\n    const getUsers = () => {\r\n      hrApiServices.listofDropdownAllEmployees(header).then((res) => {\r\n        console.log(res);\r\n        // const list = res?.filter((opt) => opt?.Business_Unit === partnerName)\r\n        setEmployees(res);\r\n      }).catch((error) => {\r\n        console.log(error);\r\n      });\r\n    };\r\n\r\n    getUsers();\r\n  }, [partnerName])\r\n\r\n  const getListOfPartners = () => {\r\n    itemServices.listPartners(header).then((res) => {\r\n      console.log(\"Partners\", res);\r\n      setApprovers(res);\r\n    }).catch((error) => {\r\n      console.log(error);\r\n    });\r\n  };\r\n\r\n\r\n  useEffect(() => {\r\n    const getPreviousWorkflows = async () => {\r\n      await axios.get(`${BASE_URL}/Erpapp/Workflowlistwithoutpagination/?Partner_Id=${partnerId}`, header).then((res) => {\r\n        setWorkflows(res?.data);\r\n      }).catch((error) => {\r\n        console.log(error);\r\n      })\r\n    }\r\n\r\n    getPreviousWorkflows()\r\n  }, [partnerId])\r\n\r\n  // assign workflow filter based on document name\r\n  const filterWorkflowDocumentName = async (newValue) => {\r\n    await axios\r\n      .get(\r\n        `${BASE_URL}/Erpapp/Assignworkflowfilter/?Document_Name=${newValue}`, header)\r\n      .then((res) => {\r\n        console.log(\"WFNAmesWFNAmes\", res?.data);\r\n        setWorkflowName(res?.data[0]?.Workflow_Name);\r\n        setFieldName(res?.data[0]?.Field_Name);\r\n        setRuleName(res?.data[0]?.Rule_Name);\r\n        setNoOfLevels(res?.data[0]?.Noof_Level);\r\n        setApproverHead(res?.data[0]?.Head_Approval);\r\n\r\n        if (res?.data[0]?.Field_Name === \"\") {\r\n          setAmount(false);\r\n          setBasedOnWorkflow(\"Level\");\r\n        } else {\r\n          setAmount(true);\r\n          setBasedOnWorkflow(\"Amount\");\r\n        }\r\n\r\n        const levels = res.data[0]?.Noof_Level;\r\n        if (levels) {\r\n          const newRows = [];\r\n          for (let i = 0; i < levels; i++) {\r\n            const data = {\r\n              id: \"\",\r\n              level: `Level ${i + 1}`,\r\n              from_value: \"\",\r\n              to_value: \"\",\r\n              approver_name: \"\",\r\n              role: \"\",\r\n            };\r\n            newRows.push(data);\r\n          }\r\n          setRows(newRows);\r\n        }\r\n      }).catch((error) => {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n\r\n  // useEffect(() => {\r\n  //   filterWorkflowDocumentName(documentName)\r\n  // }, [documentName]);\r\n\r\n\r\n  const getModuleNames = () => {\r\n    settingServices.filterFormNames(header).then((res) => {\r\n      console.log(res?.results);\r\n      setListModules(res?.results);\r\n    }).catch((error) => {\r\n      console.log(error);\r\n    });\r\n  };\r\n\r\n  const getFormNames = (newValue) => {\r\n    var payload = {\r\n      ModuleName: newValue?.ModuleName,\r\n    };\r\n    axios\r\n      .post(`${BASE_URL}/Erpapp/Formpermissionfilter/`, payload, header)\r\n      .then((res) => {\r\n        console.log(\"res\", res);\r\n        setListFormNames(res.data);\r\n      }).catch((error) => {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  const getDocumentNames = () => {\r\n    axios\r\n      .get(`${BASE_URL}/Erpapp/Assignworkflowdropdwonlist/`, header)\r\n      .then((res) => {\r\n        console.log(res.data);\r\n        setListDocumentNames(res?.data);\r\n      }).catch((error) => {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  const getFieldNames = (newValue) => {\r\n    settingServices\r\n      .filterFieldNamesFromWorkflowOrigin(newValue, header)\r\n      .then((res) => {\r\n        console.log(\"res1\", res?.length);\r\n        setFieldName(res[0]?.Field_Name);\r\n        if (res?.length === 0) {\r\n          setAmount(false);\r\n          setBasedOnWorkflow(\"Level\");\r\n        } else {\r\n          setAmount(true);\r\n          setBasedOnWorkflow(\"Amount\");\r\n        }\r\n      }).catch((error) => {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  // useEffect(() => {\r\n  //   getFieldNames(documentName);\r\n  // }, []);\r\n\r\n  const getFieldNames2 = (newValue) => {\r\n    console.log(\"newValue.FormName\", newValue?.FormName);\r\n    var formname = newValue?.FormName;\r\n    settingServices.filterlistFieldNames(formname, header).then((res) => {\r\n      console.log(\"res1\", res);\r\n      setListFieldNames2(res);\r\n      setFieldName(res[0]?.Field_Name);\r\n      if (res) {\r\n        setAmount(true);\r\n      } else {\r\n        setAmount(false);\r\n      }\r\n    }).catch((error) => {\r\n      console.log(error);\r\n    });\r\n  };\r\n\r\n  const handleSubmitCreateFormFields = (e) => {\r\n    e.preventDefault();\r\n    var payload = {\r\n      Form_Name: formName,\r\n      Field_Name: fieldName2,\r\n      FieldShort_Name: \"\",\r\n      Created_By: parseInt(localStorage.getItem(\"UserId\")),\r\n      Updated_By: parseInt(localStorage.getItem(\"UserId\")),\r\n      Created_Date: todayDate\r\n    };\r\n    axios\r\n      .post(`${BASE_URL}/Erpapp/WorkfloworiginCRUD/`, payload, header)\r\n      .then((res) => {\r\n        console.log(res);\r\n        setOpenForms(false);\r\n        if (res.status === 201) {\r\n          toast.success(\"Fields Created Successfully\");\r\n        }\r\n      }).catch((error) => {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  const handleValueChange = (event, index) => {\r\n    const { name, value } = event.target;\r\n    const list = [...rows];\r\n    if (name === \"from_value\" || name === \"to_value\") {\r\n      list[index][name] = Number(value);\r\n    } else {\r\n      list[index][name] = value;\r\n    }\r\n    setRows(list);\r\n    console.log(list);\r\n  };\r\n\r\n  // const handleChangeApproverName = (event, newValue, index) => {\r\n  //   const list = [...rows];\r\n  //   list[index].approver_name = newValue?.first_name || \"\";\r\n  //   list[index].id = newValue?.id || \"\";\r\n  //   list[index].role = newValue?.Designation || \"\";\r\n  //   setRows(list);\r\n  // };\r\n\r\n\r\n  let loginUser = localStorage.getItem(\"Username\");\r\n  let loginUserRole = localStorage.getItem(\"Designation\");\r\n\r\n  const handleChangeApproverName = (e, newValue, index) => {\r\n    // Create a copy of the rows array\r\n    const list = [...rows];\r\n\r\n    // Ensure index is valid\r\n    if (index < 0 || index >= list.length) return;\r\n\r\n    // Get the current row data\r\n    const rowlist = { ...list[index] };\r\n\r\n    // Get the previous approver name if exists\r\n    const previousApproverName = rowlist?.approver_name;\r\n\r\n    // Update the row with the new approver data\r\n    rowlist[\"approver_name\"] = `${newValue?.Employee_FirstName} ${newValue?.Employee_LasttName}` || \"\";\r\n    rowlist[\"id\"] = newValue?.id || \"\";\r\n    rowlist[\"role\"] = newValue?.Designation || \"\";\r\n    rowlist[\"level\"] = \"\";\r\n\r\n    // Update the list with the modified row\r\n    list[index] = rowlist;\r\n\r\n    // Set the updated rows state\r\n    setRows(list);\r\n\r\n    // Manage the approver names list\r\n    const updatedApproverNameLists = [...approverNameLists];\r\n\r\n    // Remove the previous approver if it exists\r\n    if (previousApproverName) {\r\n      const prevIndex = updatedApproverNameLists.indexOf(previousApproverName);\r\n      if (prevIndex !== -1) {\r\n        updatedApproverNameLists.splice(prevIndex, 1);\r\n      }\r\n    }\r\n\r\n    // // Add the new approver if it's not already in the list\r\n    // if (newValue && !updatedApproverNameLists.includes(`${newValue?.first_name} ${newValue?.last_name}`)) {\r\n    //   updatedApproverNameLists.push(`${newValue?.first_name} ${newValue?.last_name}`);\r\n    // }\r\n\r\n    // Handle existing approver names\r\n    if (previousApproverName && previousApproverName !== `${newValue?.Employee_FirstName} ${newValue?.Employee_LasttName}`) {\r\n      const prevIndex = updatedApproverNameLists.indexOf(previousApproverName);\r\n      if (prevIndex !== -1) {\r\n        updatedApproverNameLists.splice(prevIndex, 1); // Remove the previous approver\r\n      }\r\n    }\r\n\r\n    // Add the new approver if it's not already in the list\r\n    const newApproverName = `${newValue?.Employee_FirstName} ${newValue?.Employee_LasttName}`;\r\n    if (newValue && newApproverName && !updatedApproverNameLists.includes(newApproverName)) {\r\n      updatedApproverNameLists.push(newApproverName);\r\n    }\r\n\r\n    // Set the updated approver names list state\r\n    setApproverNameLists(updatedApproverNameLists);\r\n  };\r\n\r\n\r\n  // Filter users whose first_name is not in the selectedNames array\r\n  const filteroptions = employees?.filter((user) => {\r\n    if (loginUserRole !== \"Admin\" && `${user?.Employee_FirstName} ${user?.Employee_LasttName}` === loginUser) {\r\n      return false; // Include the admin user\r\n    }\r\n    return !approverNameLists?.includes(`${user?.Employee_FirstName} ${user?.Employee_LasttName}`); // Exclude users in approverNameLists\r\n  });\r\n\r\n\r\n  const validateForm = () => {\r\n    const newErrors = {};\r\n\r\n    if (partnerName === undefined || partnerName === null || partnerName === \"\") {\r\n      newErrors.partnerName = \"Business Unit is required.\";\r\n    }\r\n    if (workflowName === undefined || workflowName === null || workflowName === \"\") {\r\n      newErrors.workflowName = \"Workflow is required.\";\r\n    }\r\n    if (ruleName === undefined || ruleName === null || ruleName === \"\") {\r\n      newErrors.ruleName = \"Rule Name is required.\";\r\n    }\r\n    if (!documentName) {\r\n      newErrors.documentName = \"Document Name is required.\";\r\n    }\r\n    if (!noOfLevels) {\r\n      newErrors.noOfLevels = \"No of level is required.\";\r\n    }\r\n\r\n    setErrors(newErrors);\r\n    return Object.keys(newErrors).length === 0;\r\n  };\r\n\r\n\r\n  const handleSubmitWorkflow = (e) => {\r\n    e.preventDefault();\r\n    console.log(\"workflowsworkflows\", workflows)\r\n    if (validateForm()) {\r\n      if (workflows?.filter((i) => i?.Partner_Id?.id === partnerId)?.find((opt) => opt?.Document_Name === documentName)) {\r\n        toast.warning(`Workflow Approval For ${documentName} is already created.`)\r\n      } else {\r\n        var payload = {\r\n          Workflow_Name: workflowName,\r\n          Assignworkflow_Id: documentId,\r\n          Workflow_Basedon: basedOnWorkflow,\r\n          Document_Name: documentName,\r\n          Field_Name: fieldName,\r\n          Noof_Level: noOfLevels,\r\n          Amountjosn: rows,\r\n          leveljson: rows,\r\n          Head_Approval: approverHead,\r\n          Partner_Id: parseInt(partnerId),\r\n          Company_Id: parseInt(localStorage.getItem(\"OrganizationId\")),\r\n          Created_By: parseInt(localStorage.getItem(\"UserId\")),\r\n          Updated_By: parseInt(localStorage.getItem(\"UserId\")),\r\n          Created_Date: todayDate\r\n        };\r\n        axios\r\n          .post(`${BASE_URL}/Erpapp/WorkflowCRUD/`, payload, header)\r\n          .then((res) => {\r\n            console.log(res);\r\n            if (res?.status === 201 && res?.data?.id) {\r\n              toast.success(\"Workflow is Created Successfully\");\r\n              setCreateWorkflow(false);\r\n              setListWorkflow(true);\r\n              listOfWorkflows();\r\n              setPartnerName(\"\");\r\n              setDocumentName(\"\");\r\n              setWorkflowName(\"\");\r\n              setFieldName(\"\");\r\n              setRuleName(\"\");\r\n              setNoOfLevels(\"\");\r\n              setRows([\r\n                {\r\n                  id: \"\",\r\n                  from_value: \"\",\r\n                  to_value: \"\",\r\n                  approver_name: \"\",\r\n                  role: \"\",\r\n                  level: \"\",\r\n                },\r\n              ]);\r\n\r\n              setErrors({})\r\n            }\r\n          }).catch((error) => {\r\n            console.log(error);\r\n            handleError(error)\r\n          });\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Setting />\r\n      <Typography variant=\"h3\" sx={{ fontWeight: 600 }}>\r\n        Workflow Approval\r\n      </Typography>\r\n      <Typography variant=\"h4\" sx={{ fontWeight: 500 }}>\r\n        Users shall use this form to set up the approvers to approve various\r\n        documents\r\n      </Typography>\r\n\r\n      <Div>\r\n        <form onSubmit={handleSubmitWorkflow}>\r\n          <Div className=\"container\" sx={{ minHeight: \"300px\" }}>\r\n            <Grid container sx={{ mt: 2, ml: { sm: 0, md: 3 } }}>\r\n              <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\r\n                <Typography variant=\"h4\" className=\"col-md-4 col-lg-3\" sx={{ mt: 2 }}>\r\n                  Business Unit <span className=\"required\">*</span>\r\n                </Typography>\r\n                <Div className=\"col-md-4\">\r\n                  <Autocomplete\r\n                    className=\"search-select\"\r\n                    name=\"partnerName\"\r\n                    onFocus={getListOfPartners}\r\n                    getOptionLabel={(option) => {\r\n                      if (typeof option === \"string\") {\r\n                        return option;\r\n                      }\r\n                      if (option && option?.Partner_Name) {\r\n                        return option?.Partner_Name;\r\n                      }\r\n                      return \"\";\r\n                    }}\r\n                    options={approvers}\r\n                    value={approvers?.find((opt) => opt?.Partner_Name === partnerName) || null}\r\n                    onChange={(e, newValue) => {\r\n                      console.log(newValue);\r\n                      setPartnerName(newValue?.Partner_Name);\r\n                      setPartnerId(newValue?.id)\r\n                    }}\r\n                    isOptionEqualToValue={(option, value) =>\r\n                      option?.Partner_Name === value || value === \"\"\r\n                    }\r\n                    renderInput={(params) => (\r\n                      <TextField\r\n                        {...params}\r\n                        placeholder=\"Business Unit\"\r\n                        variant=\"outlined\"\r\n                        autoComplete=\"off\"\r\n                      />\r\n                    )}\r\n                  />\r\n                  <Div style={{ color: \"red\" }}>\r\n                    {!partnerName && errors?.partnerName}\r\n                  </Div>\r\n                </Div>\r\n              </Grid>\r\n\r\n              <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\r\n                <Typography variant=\"h4\" className=\"col-md-4 col-lg-3\" sx={{ mt: 2 }}>\r\n                  Document Name <span className=\"required\">*</span>\r\n                </Typography>\r\n\r\n                <Div className=\"col-md-4\">\r\n                  <Autocomplete\r\n                    className=\"search-select\"\r\n                    name=\"documentName\"\r\n                    onFocus={getDocumentNames}\r\n                    getOptionLabel={(option) => {\r\n                      if (typeof option === \"string\") {\r\n                        return option;\r\n                      }\r\n                      if (option && option?.Document_Name) {\r\n                        return option?.Document_Name;\r\n                      }\r\n                      return \"\";\r\n                    }}\r\n                    options={listDocumentNames}\r\n                    value={listDocumentNames?.find((opt) => opt?.Document_Name === documentName) || null}\r\n                    onChange={(e, newValue) => {\r\n                      console.log(newValue);\r\n                      if (newValue) {\r\n                        setDocumentName(newValue?.Document_Name);\r\n                        setDocumentId(newValue?.id)\r\n                        filterWorkflowDocumentName(newValue?.Document_Name);\r\n                        // getFieldNames(newValue?.Document_Name);\r\n                      } else {\r\n                        setWorkflowName(\"\");\r\n                        setFieldName(\"\");\r\n                        setRuleName(\"\");\r\n                        setNoOfLevels(\"\");\r\n                        setDocumentName(\"\");\r\n                        setApproverHead(false);\r\n                        setRows([{\r\n                          id: \"\",\r\n                          level: \"Level 1\",\r\n                          from_value: \"\",\r\n                          to_value: \"\",\r\n                          approver_name: \"\",\r\n                          role: \"\",\r\n                        }])\r\n                      }\r\n                    }}\r\n                    isOptionEqualToValue={(option, value) =>\r\n                      option?.Document_Name === value || value === \"\"\r\n                    }\r\n                    renderInput={(params) => (\r\n                      <TextField\r\n                        {...params}\r\n                        placeholder=\"Document Name\"\r\n                        variant=\"outlined\"\r\n                        autoComplete=\"off\"\r\n                      />\r\n                    )}\r\n                  />\r\n                  <Div style={{ color: \"red\" }}>\r\n                    {!documentName && errors?.documentName}\r\n                  </Div>\r\n                </Div>\r\n              </Grid>\r\n\r\n              <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\r\n                <Typography variant=\"h4\" className=\"col-md-4 col-lg-3\" sx={{ mt: 2 }}>\r\n                  Workflow Name <span className=\"required\">*</span>\r\n                </Typography>\r\n\r\n                <Div className=\"col-md-4\">\r\n                  <TextField\r\n                    className=\"col-12 input-box\"\r\n                    name=\"workflowName\"\r\n                    value={workflowName}\r\n                    placeholder=\"Workflow Name\"\r\n                    variant=\"outlined\"\r\n                    autoComplete=\"off\"\r\n                    disabled\r\n                  />\r\n                  <Div style={{ color: \"red\" }}>\r\n                    {!workflowName && errors?.workflowName}\r\n                  </Div>\r\n                </Div>\r\n              </Grid>\r\n\r\n              {amount === true && (\r\n                <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\r\n                  <Typography variant=\"h4\" className=\"col-md-4 col-lg-3\" sx={{ mt: 2 }}>\r\n                    Field Name\r\n                  </Typography>\r\n\r\n                  <Div className=\"col-md-4\">\r\n                    <TextField\r\n                      className=\"col-12 input-box\"\r\n                      name=\"fieldName\"\r\n                      value={fieldName}\r\n                      placeholder=\"Field Name\"\r\n                      variant=\"outlined\"\r\n                      autoComplete=\"off\"\r\n                      disabled\r\n                    />\r\n                  </Div>\r\n                </Grid>\r\n              )}\r\n\r\n              <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\r\n                <Typography variant=\"h4\" className=\"col-md-4 col-lg-3\" sx={{ mt: 2 }}>\r\n                  Rule Name <span className=\"required\">*</span>\r\n                </Typography>\r\n\r\n                <Div className=\"col-md-4\">\r\n                  <TextField\r\n                    className=\"col-12 input-box\"\r\n                    name=\"ruleName\"\r\n                    value={ruleName}\r\n                    placeholder=\"Rule Name\"\r\n                    variant=\"outlined\"\r\n                    autoComplete=\"off\"\r\n                    disabled\r\n                  />\r\n                  <Div style={{ color: \"red\" }}>\r\n                    {!ruleName && errors?.ruleName}\r\n                  </Div>\r\n                </Div>\r\n              </Grid>\r\n\r\n              <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\r\n                <Typography variant=\"h4\" className=\"col-md-4 col-lg-3\" sx={{ mt: 2 }}>\r\n                  No of Levels <span className=\"required\">*</span>\r\n                </Typography>\r\n\r\n                <Div className=\"col-md-4\">\r\n                  <TextField\r\n                    className=\"col-12 input-box\"\r\n                    name=\"noOfLevels\"\r\n                    value={noOfLevels}\r\n                    placeholder=\"No of Levels\"\r\n                    variant=\"outlined\"\r\n                    autoComplete=\"off\"\r\n                    disabled\r\n                  />\r\n                  <Div style={{ color: \"red\" }}>\r\n                    {!noOfLevels && errors?.noOfLevels}\r\n                  </Div>\r\n                </Div>\r\n              </Grid>\r\n            </Grid>\r\n\r\n            <Div sx={{ mt: 2 }}>\r\n              <FormControlLabel\r\n                className=\"input-label\"\r\n                checked={approverHead}\r\n                onChange={(e) => setApproverHead(e.target.checked)}\r\n                control={<Checkbox size=\"small\" />}\r\n                label=\"Require Department Head Approval\"\r\n                labelPlacement=\"start\"\r\n              />\r\n            </Div>\r\n\r\n            <Div sx={{ mt: 2 }}>\r\n              <JumboScrollbar\r\n                autoHeight={true}\r\n                autoHideTimeout={4000}\r\n                autoHeightMin={scrollHeight ? scrollHeight : 200}\r\n                autoHide={true}\r\n                hideTracksWhenNotNeeded\r\n                id=\"no-more-tables\"\r\n              >\r\n                <Table className=\"table table-bordered\" sx={{ width: \"95%\" }}>\r\n                  <TableHead className=\"table-head\">\r\n                    <TableRow>\r\n                      <TableCell>Level</TableCell>\r\n                      {amount && (\r\n                        <>\r\n                          <TableCell>From Range</TableCell>\r\n                          <TableCell>To Range</TableCell>\r\n                        </>\r\n                      )}\r\n                      <TableCell>Approver's Name</TableCell>\r\n                      {/* <TableCell>Action</TableCell> */}\r\n                    </TableRow>\r\n                  </TableHead>\r\n                  <TableBody>\r\n                    {rows && rows?.map((option, index) => {\r\n                      const { level, from_value, to_value, approver_name } = option;\r\n                      return (\r\n                        <TableRow key={index}>\r\n                          <TableCell sx={{ minWidth: \"210px\" }} data-title=\"Level\">\r\n                            <TextField\r\n                              className=\"input-box col-12\"\r\n                              placeholder=\"Level\"\r\n                              name=\"level\"\r\n                              // value={level}\r\n                              value={`Level ${index + 1}`}\r\n                              autoComplete=\"off\"\r\n                              disabled\r\n                            />\r\n                          </TableCell>\r\n                          {amount && (\r\n                            <>\r\n                              <TableCell sx={{ minWidth: \"210px\" }} data-title=\"From Range\">\r\n                                <NumericTextField\r\n                                  className=\"input-box col-12\"\r\n                                  placeholder=\"From Range\"\r\n                                  name=\"from_value\"\r\n                                  value={from_value}\r\n                                  onChange={(event, newValue) => {\r\n                                    handleValueChange(event, index);\r\n                                  }}\r\n                                  autoComplete=\"off\"\r\n                                />\r\n                              </TableCell>\r\n                              <TableCell sx={{ minWidth: \"210px\" }} data-title=\"To Range\">\r\n                                <NumericTextField\r\n                                  className=\"input-box col-12\"\r\n                                  placeholder=\"To Range\"\r\n                                  name=\"to_value\"\r\n                                  value={to_value}\r\n                                  onChange={(event, newValue) => {\r\n                                    handleValueChange(event, index);\r\n                                  }}\r\n                                  autoComplete=\"off\"\r\n                                />\r\n                              </TableCell>\r\n                            </>\r\n                          )}\r\n\r\n                          <TableCell sx={{ minWidth: \"210px\" }} data-title=\"Approver's Name\">\r\n                            <FormControl className=\"col-12\">\r\n                              <Autocomplete\r\n                                className=\"search-select col-12\"\r\n                                name=\"approver_name\"\r\n                                getOptionLabel={(option) => `${option?.Employee_FirstName} ${option?.Employee_LasttName}`}\r\n                                options={filteroptions}\r\n                                // options={users?.filter((opt) => !approver_name?.includes(opt?.first_name))}\r\n                                value={employees?.find(\r\n                                  (option) => `${option?.Employee_FirstName} ${option?.Employee_LasttName}` === approver_name\r\n                                ) || null}\r\n                                onChange={(event, newValue) => {\r\n                                  handleChangeApproverName(\r\n                                    event,\r\n                                    newValue,\r\n                                    index\r\n                                  );\r\n                                }}\r\n                                isOptionEqualToValue={(option, value) =>\r\n                                  option?.id === value?.id || value === \"\"\r\n                                }\r\n                                renderInput={(params) => (\r\n                                  <TextField\r\n                                    {...params}\r\n                                    placeholder=\"Approver Name\"\r\n                                    variant=\"outlined\"\r\n                                    autoComplete=\"off\"\r\n                                  />\r\n                                )}\r\n                              />\r\n                            </FormControl>\r\n                          </TableCell>\r\n                          {/* <TableCell data-title=\"Action\">\r\n                            <Button\r\n                              color=\"error\"\r\n                              onClick={() => handleRemoveRow(index)}\r\n                            >\r\n                              <MdDelete size={24} />\r\n                            </Button>\r\n                          </TableCell> */}\r\n                        </TableRow>\r\n                      );\r\n                    })}\r\n                  </TableBody>\r\n                </Table>\r\n                {/* {noOfLevels === rows?.length ? (\r\n                  <Button disabled={true}>+ Add More</Button>\r\n                ) : (\r\n                  <Button onClick={handleAddRow}>+ Add More</Button>\r\n                )} */}\r\n              </JumboScrollbar>\r\n            </Div>\r\n          </Div>\r\n\r\n\r\n          {/* code for save and cancel button */}\r\n          <Div className=\"buttons\" sx={{ mt: 5 }}>\r\n            <ButtonGroup\r\n              aria-label=\"split button\"\r\n              type=\"submit\"\r\n              sx={{\r\n                mt: { xs: 0.5, lg: 0 },\r\n                mr: { xs: 0, md: 1 }\r\n              }}\r\n            >\r\n              <Button type=\"submit\" className=\"plus-button\">Save</Button>\r\n              <Button variant=\"contained\" className=\"icon-button\">\r\n                <FaSave size={18} />\r\n              </Button>\r\n            </ButtonGroup>\r\n            <ButtonGroup aria-label=\"split button\"\r\n              sx={{\r\n                mt: { xs: 0.5, lg: 0 },\r\n                mr: { xs: 0, md: 1 }\r\n              }}\r\n              onClick={() => {\r\n                setListWorkflow(true);\r\n                setCreateWorkflow(false);\r\n                setPartnerName(\"\");\r\n                setDocumentName(\"\");\r\n                setWorkflowName(\"\");\r\n                setFieldName(\"\");\r\n                setRuleName(\"\");\r\n                setNoOfLevels(\"\");\r\n                setRows([\r\n                  {\r\n                    id: \"\",\r\n                    level: \"\",\r\n                    from_value: \"\",\r\n                    to_value: \"\",\r\n                    approver_name: \"\",\r\n                    role: \"\",\r\n                  },\r\n                ]);\r\n\r\n                setErrors({})\r\n              }}\r\n            >\r\n              <Button className=\"plus-button\">Cancel</Button>\r\n              <Button variant=\"contained\" className=\"icon-button\">\r\n                <TiCancel size={24} />\r\n              </Button>\r\n            </ButtonGroup>\r\n          </Div>\r\n        </form>\r\n      </Div>\r\n\r\n      {/* create a new field */}\r\n      <Dialog\r\n        open={openForms}\r\n        aria-labelledby=\"alert-dialog-title\"\r\n        aria-describedby=\"alert-dialog-description\"\r\n      >\r\n        <form onSubmit={handleSubmitCreateFormFields}>\r\n          <div>\r\n            <DialogContent>\r\n              <Typography variant=\"h3\">Create Field Name </Typography>\r\n              <Grid container sx={{ mt: 2 }}>\r\n                <Grid item xs={12} sx={{ ml: 2 }}>\r\n                  <Typography className=\"col-12 input-label\">\r\n                    Model Name <span className=\"required\">*</span>\r\n                  </Typography>\r\n                </Grid>\r\n                <Grid item xs={12} sx={{ ml: 2 }}>\r\n                  <Autocomplete\r\n                    onFocus={getModuleNames}\r\n                    className=\"search-select col-12\"\r\n                    id=\"free-solo-demo\"\r\n                    options={listModules}\r\n                    getOptionLabel={(option) => option?.ModuleName}\r\n                    value={listModules?.find(\r\n                      (option) => option?.ModuleName === moduleName\r\n                    )}\r\n                    onChange={(e, newValue) => {\r\n                      console.log(newValue);\r\n                      setModuleName(newValue?.ModuleName);\r\n                      getFormNames(newValue);\r\n                    }}\r\n                    sx={{ minWidth: \"280px\", maxWidth: \"1005px\" }}\r\n                    renderInput={(params) => (\r\n                      <TextField\r\n                        {...params}\r\n                        placeholder=\"Form Name\"\r\n                        variant=\"outlined\"\r\n                        // {...register3(\"entityName\")}\r\n                        autoComplete=\"off\"\r\n                      />\r\n                    )}\r\n                  />\r\n                  <Div style={{ color: \"red\" }}>\r\n                    {/* {errors3.entityName?.message} */}\r\n                  </Div>\r\n                </Grid>\r\n\r\n                <Grid item xs={12} sx={{ ml: 2 }}>\r\n                  <Typography className=\"col-12 input-label\">\r\n                    Document Name/Form Name <span className=\"required\">*</span>\r\n                  </Typography>\r\n                </Grid>\r\n                <Grid item xs={12} sx={{ ml: 2 }}>\r\n                  <Autocomplete\r\n                    // onFocus={getFormNames}\r\n                    className=\"search-select col-12\"\r\n                    id=\"free-solo-demo\"\r\n                    options={listFormNames}\r\n                    getOptionLabel={(option) => option?.FormName}\r\n                    value={listFormNames.find(\r\n                      (option) => option?.FormName === formName\r\n                    )}\r\n                    onChange={(e, newValue) => {\r\n                      console.log(newValue);\r\n                      setFormName(newValue?.FormName);\r\n                      getFieldNames2(newValue);\r\n                      // settingServices.filterFieldNames(newValue.FormName).then((res)=>{\r\n                      //   console.log(res);\r\n                      //   setListFieldNames(res);\r\n                      // })\r\n                    }}\r\n                    sx={{ minWidth: \"280px\", maxWidth: \"1005px\" }}\r\n                    renderInput={(params) => (\r\n                      <TextField\r\n                        {...params}\r\n                        placeholder=\"Document Name\"\r\n                        variant=\"outlined\"\r\n                        // {...register3(\"entityName\")}\r\n                        autoComplete=\"off\"\r\n                      />\r\n                    )}\r\n                  />\r\n                  <Div style={{ color: \"red\" }}>\r\n                    {/* {errors3.entityName?.message} */}\r\n                  </Div>\r\n                </Grid>\r\n\r\n                <Grid item xs={12} sx={{ ml: 2 }}>\r\n                  <Typography className=\"col-12 input-label\">\r\n                    Field Name <span className=\"required\">*</span>\r\n                  </Typography>\r\n                </Grid>\r\n                <Grid item xs={12} sx={{ ml: 2 }}>\r\n                  <Autocomplete\r\n                    className=\"search-select col-12\"\r\n                    // className={`search-select col-12 ${\r\n                    //   errors3.regionName ? \"is-invalid\" : \"\"\r\n                    // }`}\r\n                    id=\"free-solo-demo\"\r\n                    name=\"fieldName2\"\r\n                    getOptionLabel={(option) => option?.Field_Name}\r\n                    value={listFieldNames2.find(\r\n                      (option) => option?.Field_Name === fieldName2\r\n                    )}\r\n                    options={listFieldNames2}\r\n                    onChange={(e, newValue) => {\r\n                      console.log(newValue);\r\n                      setFieldName2(newValue?.Field_Name);\r\n                    }}\r\n                    autoComplete=\"off\"\r\n                    sx={{ minWidth: \"280px\", maxWidth: \"1005px\" }}\r\n                    renderInput={(params) => (\r\n                      <TextField\r\n                        {...params}\r\n                        placeholder=\"Field Name\"\r\n                        variant=\"outlined\"\r\n                        // {...register3(\"regionName\")}\r\n                        autoComplete=\"off\"\r\n                      />\r\n                    )}\r\n                  />\r\n                  <Div style={{ color: \"red\" }}>\r\n                    {/* {errors3.regionName?.message} */}\r\n                  </Div>\r\n                </Grid>\r\n              </Grid>\r\n            </DialogContent>\r\n            <DialogActions>\r\n              <ButtonGroup aria-label=\"split button\" sx={{ mr: 3 }}>\r\n                <Button className=\"plus-button\" type=\"submit\">\r\n                  Save\r\n                </Button>\r\n                <Button\r\n                  variant=\"contained\"\r\n                  type=\"submit\"\r\n                  className=\"icon-button\"\r\n                >\r\n                  <FaSave size={18} />\r\n                </Button>\r\n              </ButtonGroup>\r\n              <ButtonGroup\r\n                aria-label=\"split button\"\r\n                onClick={() => setOpenForms(false)}\r\n              >\r\n                <Button className=\"plus-button\">Cancel</Button>\r\n                <Button variant=\"contained\" className=\"icon-button\">\r\n                  <TiCancel size={24} />\r\n                </Button>\r\n              </ButtonGroup>\r\n            </DialogActions>\r\n          </div>\r\n        </form>\r\n      </Dialog>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CreatePartnerWorkflow;\r\n","import {\r\n  Autocomplete,\r\n  Button,\r\n  ButtonGroup,\r\n  Checkbox,\r\n  FormControl,\r\n  FormControlLabel,\r\n  Grid,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TableRow,\r\n  TextField,\r\n  Typography,\r\n} from \"@mui/material\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport Setting from \"../../Setting\";\r\nimport Div from \"@jumbo/shared/Div/Div\";\r\nimport itemServices from \"app/services/item-master-services\";\r\nimport axios from \"axios\";\r\nimport { BASE_URL } from \"app/services/auth-services\";\r\nimport settingServices from \"app/services/setting-api-services\";\r\nimport { toast } from \"react-toastify\";\r\nimport { FaSave } from \"react-icons/fa\";\r\nimport { TiCancel } from \"react-icons/ti\";\r\nimport JumboScrollbar from \"@jumbo/components/JumboScrollbar\";\r\nimport hrApiServices from \"app/services/hr-api-services\";\r\nimport { NumericTextField } from \"app/shared/ReuseComponents/StyledComponents\";\r\n\r\nconst EditPartnerWorkflow = ({\r\n  setListWorkflow,\r\n  setEditWorkflow,\r\n  listOfWorkflows,\r\n  currentWorkflows,\r\n  scrollHeight\r\n}) => {\r\n  const token = localStorage.getItem(\"accesstoken\");\r\n\r\n  const header = {\r\n    headers: {\r\n      Authorization: `Bearer ${token}`,\r\n      \"Content-Type\": \"application/json\",\r\n      Accept: \"application/json\",\r\n    },\r\n  };\r\n  const [showCreatePage, setShowCreatePage] = useState(true);\r\n  const [showUpdatePage, setShowUpdatePage] = useState(false);\r\n\r\n  const [approverHead, setApproverHead] = useState(false);\r\n  const [employees, setEmployees] = useState([]);\r\n  const [approvers, setApprovers] = useState([]);\r\n  const [listDocumentNames, setListDocumentNames] = useState([]);\r\n  const [listFieldNames, setListFieldNames] = useState([]);\r\n\r\n  const [partnerName, setPartnerName] = useState(\"\");\r\n  const [ruleName, setRuleName] = useState(\"\");\r\n  const [workflowName, setWorkflowName] = useState(\"\");\r\n  const [fieldName, setFieldName] = useState(\"\");\r\n  const [basedOnWorkflow, setBasedOnWorkflow] = useState(\"Amount\");\r\n  const [amount, setAmount] = useState(false);\r\n  const [documentName, setDocumentName] = useState(\"\");\r\n  const [noOfLevels, setNoOfLevels] = useState(\"\");\r\n\r\n  const [approverNameLists, setApproverNameLists] = useState([]);\r\n\r\n  const [rows, setRows] = useState([\r\n    {\r\n      id: \"\",\r\n      from_value: \"\",\r\n      to_value: \"\",\r\n      approver_name: \"\",\r\n      role: \"\",\r\n      level: \"\",\r\n    },\r\n  ]);\r\n\r\n\r\n  const defaultPartnerName = currentWorkflows?.Partner_Id;\r\n  const defaultWorkflowName = currentWorkflows?.Workflow_Name;\r\n  const defaultDocumentName = currentWorkflows?.Document_Name;\r\n  const defaultFieldName = currentWorkflows?.Field_Name;\r\n  const defaultRuleName = currentWorkflows?.Assignworkflow_Id?.Rule_Name;\r\n  const defaultNoofLevel = currentWorkflows?.Noof_Level;\r\n  const defaultHeadApprover = currentWorkflows?.Head_Approval;\r\n  const defaultRows = currentWorkflows?.Amountjosn;\r\n\r\n  useEffect(() => {\r\n    setPartnerName(defaultPartnerName);\r\n    setWorkflowName(defaultWorkflowName);\r\n    setDocumentName(defaultDocumentName);\r\n    setFieldName(defaultFieldName);\r\n    setRuleName(defaultRuleName);\r\n    setNoOfLevels(defaultNoofLevel);\r\n    setApproverHead(defaultHeadApprover);\r\n    setRows(defaultRows);\r\n  }, [\r\n    currentWorkflows,\r\n    defaultPartnerName,\r\n    defaultWorkflowName,\r\n    defaultDocumentName,\r\n    defaultFieldName,\r\n    defaultRuleName,\r\n    defaultNoofLevel,\r\n    defaultHeadApprover,\r\n    defaultRows,\r\n  ]);\r\n\r\n  useEffect((res) => {\r\n    if (res) {\r\n      setShowCreatePage(true);\r\n      setShowUpdatePage(false);\r\n    } else {\r\n      setShowCreatePage(false);\r\n      setShowUpdatePage(true);\r\n    }\r\n  }, []);\r\n\r\n  const numbers = Array.from({ length: 100 }, (_, i) => i + 1);\r\n\r\n  const handleAddRow = () => {\r\n    let arr = [];\r\n    rows?.map((item, ind) => {\r\n      console.log(\"kkkkk\", item);\r\n      if (\r\n        item?.id == \"\" ||\r\n        item?.level == \"\" ||\r\n        item?.approver_name == \"\" ||\r\n        item?.role == \"\"\r\n      ) {\r\n        toast.error(\r\n          \"You cannot add more item without adding information in previous Item.\"\r\n        );\r\n        arr.push(ind);\r\n      } else if (\r\n        item?.id == undefined ||\r\n        item?.level == undefined ||\r\n        item?.approver_name == undefined ||\r\n        item?.role == undefined\r\n      ) {\r\n        toast.error(\r\n          \"You cannot add more item without adding information in previous Item.\"\r\n        );\r\n        arr.push(ind);\r\n      }\r\n    });\r\n\r\n    if (arr.length == 0) {\r\n      let items = {\r\n        id: \"\",\r\n        level: \"\",\r\n        from_value: \"\",\r\n        to_value: \"\",\r\n        approver_name: \"\",\r\n        role: \"\",\r\n      };\r\n      setRows([...rows, items]);\r\n    }\r\n  };\r\n\r\n  const handleRemoveRow = (index) => {\r\n    const list = [...rows];\r\n    if (rows?.length !== 1) {\r\n      list.splice(index, 1);\r\n    }\r\n    setRows(list);\r\n  };\r\n\r\n\r\n  // get a employee lists\r\n  useEffect(() => {\r\n    const getUsers = () => {\r\n      hrApiServices.listofDropdownAllEmployees(header).then((res) => {\r\n        console.log(res);\r\n        // const list = res?.filter((opt) => opt?.Business_Unit === partnerName)\r\n        setEmployees(res);\r\n      }).catch((error) => {\r\n        console.log(error);\r\n      });\r\n    };\r\n\r\n    getUsers();\r\n  }, [])\r\n\r\n  const getListOfPartners = () => {\r\n    itemServices.listPartners(header).then((res) => {\r\n      console.log(\"Partners\", res);\r\n      setApprovers(res);\r\n    }).catch((error) => {\r\n      console.log(error)\r\n    });\r\n  };\r\n\r\n  // assign workflow filter based on document name\r\n  const filterWorkflowDocumentName = (newValue) => {\r\n    axios\r\n      .get(\r\n        `${BASE_URL}/Erpapp/Assignworkflowfilter/?Document_Name=${newValue}`, header)\r\n      .then((res) => {\r\n        console.log(\"WFNAmes\", res.data);\r\n        setWorkflowName(res.data[0]?.Workflow_Name);\r\n        setFieldName(res?.data[0]?.Field_Name);\r\n        setRuleName(res?.data[0]?.Rule_Name);\r\n        setNoOfLevels(res?.data[0]?.Noof_Level);\r\n        setApproverHead(res?.data[0]?.Head_Approval);\r\n\r\n        if (res?.data[0]?.Field_Name === \"\") {\r\n          setAmount(false);\r\n          setBasedOnWorkflow(\"Level\");\r\n        } else {\r\n          setAmount(true);\r\n          setBasedOnWorkflow(\"Amount\");\r\n        }\r\n\r\n        const levels = res.data[0]?.Noof_Level;\r\n        if (levels) {\r\n          const newRows = [];\r\n          for (let i = 0; i < levels; i++) {\r\n            const data = {\r\n              id: \"\",\r\n              level: `Level ${i + 1}`,\r\n              from_value: \"\",\r\n              to_value: \"\",\r\n              approver_name: \"\",\r\n              role: \"\",\r\n            };\r\n            newRows.push(data);\r\n          }\r\n          setRows(newRows);\r\n        }\r\n\r\n      }).catch((error) => {\r\n        console.log(error)\r\n      });\r\n  };\r\n\r\n\r\n  useEffect(() => {\r\n    // filterWorkflowDocumentName(defaultDocumentName)\r\n    axios\r\n      .get(\r\n        `${BASE_URL}/Erpapp/Assignworkflowfilter/?Document_Name=${defaultDocumentName}`, header)\r\n      .then((res) => {\r\n        console.log(\"WFNAmes\", res.data);\r\n        if (res?.data[0]?.Field_Name === \"\") {\r\n          setAmount(false);\r\n          setBasedOnWorkflow(\"Level\");\r\n        } else {\r\n          setAmount(true);\r\n          setBasedOnWorkflow(\"Amount\");\r\n        }\r\n      }).catch((error) => {\r\n        console.log(error)\r\n      });\r\n  }, [currentWorkflows?.id])\r\n\r\n\r\n  const getFieldNames = (newValue) => {\r\n    settingServices\r\n      .filterFieldNamesFromWorkflowOrigin(newValue, header)\r\n      .then((res) => {\r\n        console.log(\"res1\", res?.length);\r\n        setListFieldNames(res);\r\n        setFieldName(res[0]?.Field_Name);\r\n        if (res?.length === 0) {\r\n          setAmount(false);\r\n          setBasedOnWorkflow(\"Level\");\r\n        } else {\r\n          setAmount(true);\r\n          setBasedOnWorkflow(\"Amount\");\r\n        }\r\n      }).catch((error) => {\r\n        console.log(error)\r\n      });\r\n  };\r\n\r\n\r\n  // useEffect(() => {\r\n  //   getFieldNames(defaultDocumentName);\r\n  // }, [currentWorkflows, defaultDocumentName]);\r\n\r\n  const getDocumentNames = () => {\r\n    // settingServices.listFormNames().then((res) => {\r\n    //   console.log(\"Res\", res);\r\n    //   setListDocumentNames(res);\r\n    // });\r\n    axios\r\n      .get(`${BASE_URL}/Erpapp/Assignworkflowdropdwonlist/`, header)\r\n      .then((res) => {\r\n        console.log(res?.data);\r\n        setListDocumentNames(res?.data);\r\n      }).catch((error) => {\r\n        console.log(error)\r\n      });\r\n  };\r\n\r\n  const handleValueChange = (event, index) => {\r\n    const { name, value } = event.target;\r\n    const list = [...rows];\r\n    if (name === \"from_value\" || name === \"to_value\") {\r\n      list[index][name] = Number(value);\r\n    } else {\r\n      list[index][name] = value;\r\n    }\r\n    setRows(list);\r\n    console.log(list);\r\n  };\r\n\r\n  // const handleChangeApproverName = (e, newValue, index) => {\r\n  //   const list = [...rows];\r\n  //   const rowlist = list[index];\r\n  //   rowlist[\"approver_name\"] = newValue?.first_name || \"\";\r\n  //   rowlist[\"id\"] = newValue?.id || \"\";\r\n  //   rowlist[\"role\"] = newValue?.Designation || \"\";\r\n  //   rowlist[\"level\"] = \"\"\r\n  //   setRows(list);\r\n  // };\r\n\r\n\r\n  let loginUser = localStorage.getItem(\"Username\");\r\n  let loginUserRole = localStorage.getItem(\"Designation\");\r\n\r\n  const handleChangeApproverName = (e, newValue, index) => {\r\n    // Create a copy of the rows array\r\n    const list = [...rows];\r\n\r\n    // Ensure index is valid\r\n    if (index < 0 || index >= list.length) return;\r\n\r\n    // Get the current row data\r\n    const rowlist = { ...list[index] };\r\n\r\n    // Get the previous approver name if exists\r\n    const previousApproverName = rowlist?.approver_name;\r\n\r\n    // Update the row with the new approver data\r\n    rowlist[\"approver_name\"] = newValue ? `${newValue?.Employee_FirstName} ${newValue?.Employee_LasttName}` : \"\";\r\n    rowlist[\"id\"] = newValue?.id || \"\";\r\n    rowlist[\"role\"] = newValue?.Designation || \"\";\r\n    rowlist[\"level\"] = `Level ${index + 1}`;\r\n\r\n    // Update the list with the modified row\r\n    list[index] = rowlist;\r\n\r\n    // Set the updated rows state\r\n    setRows(list);\r\n\r\n    // Manage the approver names list\r\n    // let updatedApproverNameLists = rows.map(row => row.approver_name).filter(name => name);\r\n    let updatedApproverNameLists = list?.map(row => row?.approver_name).filter(name => name && name !== \"\");\r\n\r\n    // Add the new approver if it's not already in the list\r\n    const newApproverName = newValue ? `${newValue?.Employee_FirstName} ${newValue?.Employee_LasttName}` : \"\";\r\n    if (newApproverName && !updatedApproverNameLists.includes(newApproverName)) {\r\n      updatedApproverNameLists.push(newApproverName);\r\n    }\r\n\r\n    // Remove the previous approver if it exists\r\n    if (previousApproverName && previousApproverName !== newApproverName) {\r\n      updatedApproverNameLists = updatedApproverNameLists?.filter(name => name !== previousApproverName);\r\n    }\r\n\r\n    // Set the updated approver names list state\r\n    setApproverNameLists(updatedApproverNameLists);\r\n  };\r\n\r\n\r\n\r\n  // Filter users whose first_name is not in the selectedNames array\r\n  const filteroptions = employees?.filter((user) => {\r\n    if (loginUserRole !== \"Admin\" && `${user?.Employee_FirstName} ${user?.Employee_LasttName}` === loginUser) {\r\n      return false; // Include the admin user\r\n    }\r\n    return !approverNameLists?.includes(`${user?.Employee_FirstName} ${user?.Employee_LasttName}`); // Exclude users in approverNameLists\r\n  });\r\n\r\n\r\n  const getFilteredOptions = (currentIndex) => {\r\n    // const selectedApprovers = rows?.map(row => row?.approver_name).filter(name => name && name !== \"\");\r\n    const selectedApprovers = rows?.map((row, index) => index !== currentIndex ? row.approver_name : null)?.filter(name => name && name !== \"\");\r\n    return employees?.filter(user => {\r\n      const userName = `${user?.Employee_FirstName} ${user?.Employee_LasttName}`;\r\n      if (loginUserRole !== \"Admin\" && userName === loginUser) {\r\n        return false; // Include the admin user\r\n      }\r\n      // Allow the current row's approver and exclude others\r\n      return !selectedApprovers.includes(userName) || rows[currentIndex].approver_name === userName;\r\n    });\r\n  };\r\n\r\n\r\n  const handleSubmitWorkflow = (e) => {\r\n    e.preventDefault();\r\n    var payload = {\r\n      id: currentWorkflows?.id,\r\n      Workflow_Id: currentWorkflows?.Workflow_Id,\r\n      Workflow_Name: workflowName?.Workflow_Name,\r\n      WorkflowName_Id: workflowName?.id,\r\n      Workflow_Basedon: basedOnWorkflow,\r\n      Document_Name: documentName?.Document_Name,\r\n      Field_Name: fieldName,\r\n      Noof_Level: noOfLevels,\r\n      Amountjosn: rows,\r\n      leveljson: rows,\r\n      Head_Approval: approverHead,\r\n      Partner_Id: partnerName?.id,\r\n      Company_Id: parseInt(localStorage.getItem(\"OrganizationId\")),\r\n      Created_By: parseInt(localStorage.getItem(\"UserId\")),\r\n      Updated_By: parseInt(localStorage.getItem(\"UserId\")),\r\n    };\r\n    axios\r\n      .put(`${BASE_URL}/Erpapp/WorkflowCRUD/`, payload, header)\r\n      .then((res) => {\r\n        console.log(res);\r\n        if (res?.data?.id) {\r\n          toast.success(\"Workflow is Updated Successfully\");\r\n          setEditWorkflow(false);\r\n          setListWorkflow(true);\r\n          listOfWorkflows();\r\n        }\r\n      }).catch((error) => {\r\n        console.log(error)\r\n      });\r\n  };\r\n\r\n\r\n  const handleClickCancel = () => {\r\n    setListWorkflow(true);\r\n    setEditWorkflow(false);\r\n    setPartnerName(defaultPartnerName);\r\n    setWorkflowName(defaultWorkflowName);\r\n    setDocumentName(defaultDocumentName);\r\n    setFieldName(defaultFieldName);\r\n    setRuleName(defaultRuleName);\r\n    setNoOfLevels(defaultNoofLevel);\r\n    setApproverHead(defaultHeadApprover);\r\n    setRows(defaultRows);\r\n  }\r\n\r\n  console.log(\"approverNameLists\", approverNameLists)\r\n\r\n  return (\r\n    <>\r\n      <Setting />\r\n      <Typography variant=\"h3\" sx={{ fontWeight: 600 }}>\r\n        Workflow Approval\r\n      </Typography>\r\n      <Typography variant=\"h4\" sx={{ fontWeight: 500 }}>\r\n        Users shall use this form to set up the approvers to approve various\r\n        documents\r\n      </Typography>\r\n\r\n      <Div>\r\n        <form onSubmit={handleSubmitWorkflow}>\r\n          <Div className=\"container\" sx={{ minHeight: \"300px\" }}>\r\n            <Grid container sx={{ mt: 2, ml: { sm: 0, md: 3 } }}>\r\n              <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\r\n\r\n                <Typography variant=\"h4\" className=\"col-md-4 col-lg-3\" sx={{ mt: 2 }}>\r\n                  Business Unit <span className=\"required\">*</span>\r\n                </Typography>\r\n                <Div className=\"col-md-4\">\r\n                  <Autocomplete\r\n                    className=\"search-select\"\r\n                    name=\"partnerName\"\r\n                    onFocus={getListOfPartners}\r\n                    getOptionLabel={(option) => {\r\n                      if (typeof option === \"string\") {\r\n                        return option;\r\n                      }\r\n                      if (option && option?.Partner_Name) {\r\n                        return option?.Partner_Name;\r\n                      }\r\n                      return \"\";\r\n                    }}\r\n                    options={approvers}\r\n                    value={partnerName}\r\n                    onChange={(e, newValue) => {\r\n                      console.log(newValue);\r\n                      setPartnerName(newValue);\r\n                    }}\r\n                    isOptionEqualToValue={(option, value) =>\r\n                      option?.Partner_Name === value || value === \"\"\r\n                    }\r\n                    renderInput={(params) => (\r\n                      <TextField\r\n                        {...params}\r\n                        placeholder=\"Business Unit\"\r\n                        variant=\"outlined\"\r\n                        autoComplete=\"off\"\r\n                      />\r\n                    )}\r\n                  />\r\n                </Div>\r\n\r\n\r\n              </Grid>\r\n\r\n              <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\r\n\r\n                <Typography variant=\"h4\" className=\"col-md-4 col-lg-3\" sx={{ mt: 2 }}>\r\n                  Document Name <span className=\"required\">*</span>\r\n                </Typography>\r\n\r\n                <Div className=\"col-md-4\">\r\n                  <Autocomplete\r\n                    className=\"col-12 search-select\"\r\n                    name=\"documentName\"\r\n                    onFocus={getDocumentNames}\r\n                    getOptionLabel={(option) => {\r\n                      if (typeof option === \"string\") {\r\n                        return option;\r\n                      }\r\n                      if (option && option?.Document_Name) {\r\n                        return option?.Document_Name;\r\n                      }\r\n                      return \"\";\r\n                    }}\r\n                    options={listDocumentNames}\r\n                    value={documentName}\r\n                    onChange={(e, newValue) => {\r\n                      console.log(newValue);\r\n                      setDocumentName(newValue);\r\n                      filterWorkflowDocumentName(newValue?.Document_Name);\r\n                      // getFieldNames(newValue?.Document_Name);\r\n                    }}\r\n                    isOptionEqualToValue={(option, value) =>\r\n                      option?.Document_Name === value || value === \"\"\r\n                    }\r\n                    renderInput={(params) => (\r\n                      <TextField\r\n                        {...params}\r\n                        placeholder=\"Document Name\"\r\n                        variant=\"outlined\"\r\n                        autoComplete=\"off\"\r\n                      />\r\n                    )}\r\n                  />\r\n                </Div>\r\n                {/* <Div className=\"col-md-1\">\r\n                      <Button\r\n                        className=\"save-button\"\r\n                        onClick={handleOpenWorkflowSetup}\r\n                      >\r\n                        Add\r\n                      </Button>\r\n                    </Div> */}\r\n              </Grid>\r\n\r\n              <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\r\n\r\n                <Typography variant=\"h4\" className=\"col-md-4 col-lg-3\" sx={{ mt: 2 }}>\r\n                  Workflow Name <span className=\"required\">*</span>\r\n                </Typography>\r\n\r\n                <Div className=\"col-md-4\">\r\n                  <TextField\r\n                    className=\"col-12 input-box\"\r\n                    name=\"workflowName\"\r\n                    value={workflowName}\r\n                    // onChange={(e) => setWorkflowName(e.target.value)}\r\n                    placeholder=\"Workflow Name\"\r\n                    variant=\"outlined\"\r\n                    autoComplete=\"off\"\r\n                    disabled\r\n                  />\r\n                </Div>\r\n                {/* <Div className=\"col-md-6\">\r\n                      <Autocomplete\r\n                        className=\"search-select\"\r\n                        name=\"workflowName\"\r\n                        onFocus={getListofWorkflowNames}\r\n                        getOptionLabel={(option) => {\r\n                          if (typeof option === \"string\") {\r\n                            return option;\r\n                          }\r\n                          if (option && option?.Workflow_Name) {\r\n                            return option?.Workflow_Name;\r\n                          }\r\n                          return \"\";\r\n                        }}\r\n                        options={workflowNamesList}\r\n                        value={workflowNamesList.find(\r\n                          (option) => option?.Workflow_Name === workflowName\r\n                        )}\r\n                        onChange={(e, newValue) => {\r\n                          console.log(newValue);\r\n                          setWorkflowName(newValue);\r\n                        }}\r\n                        isOptionEqualToValue={(option, value) =>\r\n                          option?.Workflow_Name === value || value === \"\"\r\n                        }\r\n                        renderInput={(params) => (\r\n                          <TextField\r\n                            {...params}\r\n                            placeholder=\"Workflow Name\"\r\n                            variant=\"outlined\"\r\n                            autoComplete=\"off\"\r\n                          />\r\n                        )}\r\n                      />\r\n                    </Div> */}\r\n\r\n              </Grid>\r\n\r\n              {/* <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\r\n    \r\n                    <Typography className=\"col-md-4 col-lg-3 input-label\" sx={{ mt: 2 }}>\r\n                      Workflow Based On <span className=\"required\">*</span>\r\n                    </Typography>\r\n                    <Div className=\"col-md-6\">\r\n                      <JumboAutocomplete\r\n                        className=\"search-select\"\r\n                        name=\"basedOnWorkflow\"\r\n                        // onFocus={getListBasedOnWorkflows}\r\n                        getOptionLabel={(option) => {\r\n                          if (typeof option === \"string\") {\r\n                            return option;\r\n                          }\r\n                          if (option && option.values) {\r\n                            return option.values;\r\n                          }\r\n                          return \"\";\r\n                        }}\r\n                        options={workflows}\r\n                        value={basedOnWorkflow}\r\n                        onChange={(e, newValue) => {\r\n                          console.log(newValue);\r\n                          setBasedOnWorkflow(newValue.values);\r\n                          switch (newValue.values) {\r\n                            case \"Amount\":\r\n                              setAmount(true);\r\n                              setLevels(false);\r\n                              break;\r\n                            case \"Level\":\r\n                              setLevels(true);\r\n                              setAmount(false);\r\n                              break;\r\n                            default:\r\n                              setAmount(true);\r\n                              setLevels(false);\r\n                              break;\r\n                          }\r\n                        }}\r\n                        isOptionEqualToValue={(option, value) =>\r\n                          option.values === value || value === \"\"\r\n                        }\r\n                        renderInput={(params) => (\r\n                          <TextField\r\n                            {...params}\r\n                            placeholder=\"Workflow Based On\"\r\n                            variant=\"outlined\"\r\n                            autoComplete=\"off\"\r\n                          />\r\n                        )}\r\n                      />\r\n                    </Div>\r\n    \r\n                  </Grid> */}\r\n\r\n              {amount === true && (\r\n                <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\r\n\r\n                  <Typography variant=\"h4\" className=\"col-md-4 col-lg-3\" sx={{ mt: 2 }}>\r\n                    Field Name\r\n                  </Typography>\r\n\r\n                  <Div className=\"col-md-4\">\r\n                    <TextField\r\n                      className=\"col-12 input-box\"\r\n                      name=\"fieldName\"\r\n                      value={fieldName}\r\n                      placeholder=\"Field Name\"\r\n                      variant=\"outlined\"\r\n                      autoComplete=\"off\"\r\n                      disabled\r\n                    />\r\n                  </Div>\r\n                  {/* <FormControl className=\"col-md-6\">\r\n                        <Autocomplete\r\n                          className=\"search-select\"\r\n                          name=\"fieldName\"\r\n                          options={listFieldNames}\r\n                          getOptionLabel={(option) => {\r\n                            if (typeof option === \"string\") {\r\n                              return option;\r\n                            }\r\n                            if (option && option?.Field_Name) {\r\n                              return option?.Field_Name;\r\n                            }\r\n                            return \"\";\r\n                          }}\r\n                          value={listFieldNames.find(\r\n                            (option) => option?.Field_Name === fieldName\r\n                          )}\r\n                          onChange={(e, newValue) => {\r\n                            console.log(newValue);\r\n                            setFieldName(newValue?.Field_Name);\r\n                          }}\r\n                          isOptionEqualToValue={(option, value) =>\r\n                            option?.Field_Name === value || value === \"\"\r\n                          }\r\n                          renderInput={(params) => (\r\n                            <TextField\r\n                              {...params}\r\n                              placeholder=\"Field Name\"\r\n                              variant=\"outlined\"\r\n                              autoComplete=\"off\"\r\n                            />\r\n                          )}\r\n                        />\r\n                      </FormControl> */}\r\n\r\n\r\n                </Grid>\r\n              )}\r\n\r\n              <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\r\n                <Typography variant=\"h4\" className=\"col-md-4 col-lg-3\" sx={{ mt: 2 }}>\r\n                  Rule Name <span className=\"required\">*</span>\r\n                </Typography>\r\n\r\n                <Div className=\"col-md-4\">\r\n                  <TextField\r\n                    className=\"col-12 input-box\"\r\n                    name=\"ruleName\"\r\n                    value={ruleName}\r\n                    placeholder=\"Rule Name\"\r\n                    variant=\"outlined\"\r\n                    autoComplete=\"off\"\r\n                    disabled\r\n                  />\r\n\r\n                </Div>\r\n              </Grid>\r\n\r\n              <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\r\n\r\n                <Typography variant=\"h4\" className=\"col-md-4 col-lg-3\" sx={{ mt: 2 }}>\r\n                  No of Levels <span className=\"required\">*</span>\r\n                </Typography>\r\n\r\n                <Div className=\"col-md-4\">\r\n                  <TextField\r\n                    className=\"col-12 input-box\"\r\n                    name=\"noOfLevels\"\r\n                    value={noOfLevels}\r\n                    // onChange={(e) => setWorkflowName(e.target.value)}\r\n                    placeholder=\"No of Levels\"\r\n                    variant=\"outlined\"\r\n                    autoComplete=\"off\"\r\n                    disabled\r\n                  />\r\n                </Div>\r\n                {/* <FormControl className=\"col-md-6\">\r\n                      <Autocomplete\r\n                        className=\"search-select\"\r\n                        name=\"noOfLevels\"\r\n                        getOptionLabel={(option) => {\r\n                          if (typeof option === \"number\") {\r\n                            return option.toString();\r\n                          }\r\n                          if (option && option) {\r\n                            return option;\r\n                          }\r\n                          return 0;\r\n                        }}\r\n                        options={numbers}\r\n                        value={numbers.find((option) => option === noOfLevels)}\r\n                        onChange={(e, newValue) => {\r\n                          console.log(newValue);\r\n                          setNoOfLevels(newValue);\r\n                        }}\r\n                        isOptionEqualToValue={(option, value) =>\r\n                          option === value || value === 0\r\n                        }\r\n                        renderInput={(params) => (\r\n                          <TextField\r\n                            {...params}\r\n                            placeholder=\"No of Levels\"\r\n                            variant=\"outlined\"\r\n                            autoComplete=\"off\"\r\n                          />\r\n                        )}\r\n                      />\r\n                    </FormControl> */}\r\n\r\n\r\n              </Grid>\r\n              {/* )} */}\r\n            </Grid>\r\n\r\n            <Div sx={{ mt: 2, p: { xs: 0, md: 2 } }}>\r\n              <FormControlLabel\r\n                className=\"input-label\"\r\n                checked={approverHead}\r\n                onChange={(e) => setApproverHead(e.target.checked)}\r\n                control={<Checkbox size=\"small\" />}\r\n                label=\"Require Department Head Approval\"\r\n                labelPlacement=\"start\"\r\n              />\r\n            </Div>\r\n\r\n            <Div sx={{ mt: 2 }}>\r\n              <JumboScrollbar\r\n                autoHeight={true}\r\n                autoHideTimeout={4000}\r\n                autoHeightMin={scrollHeight ? scrollHeight : 200}\r\n                autoHide={true}\r\n                hideTracksWhenNotNeeded\r\n                id=\"no-more-tables\"\r\n              >\r\n                <Table className=\"table table-bordered\">\r\n                  <TableHead className=\"table-head\">\r\n                    <TableRow>\r\n                      <TableCell>Level</TableCell>\r\n                      {amount && (\r\n                        <>\r\n                          <TableCell>From Range</TableCell>\r\n                          <TableCell>To Range</TableCell>\r\n                        </>\r\n                      )}\r\n                      <TableCell>Approver's Name</TableCell>\r\n                      {/* <TableCell>Action</TableCell> */}\r\n                    </TableRow>\r\n                  </TableHead>\r\n                  <TableBody>\r\n                    {rows?.map((option, index) => {\r\n                      let { level, from_value, to_value, approver_name } = option;\r\n                      return (\r\n                        <TableRow key={index}>\r\n                          <TableCell sx={{ minWidth: \"210px\" }} data-title=\"Level\">\r\n                            <TextField\r\n                              className=\"input-box col-12\"\r\n                              placeholder=\"Level\"\r\n                              name=\"level\"\r\n                              value={`Level ${index + 1}`}\r\n                              // onChange={(event, newValue) => {\r\n                              //   handleValueChange(event, index);\r\n                              // }}\r\n                              autoComplete=\"off\"\r\n                              disabled\r\n                            />\r\n                          </TableCell>\r\n                          {amount && (\r\n                            <>\r\n                              <TableCell sx={{ minWidth: \"210px\" }} data-title=\"From Range\">\r\n                                <NumericTextField\r\n                                  className=\"input-box col-12\"\r\n                                  placeholder=\"From Range\"\r\n                                  name=\"from_value\"\r\n                                  value={from_value}\r\n                                  onChange={(event, newValue) => {\r\n                                    handleValueChange(event, index);\r\n                                  }}\r\n                                  autoComplete=\"off\"\r\n                                />\r\n                              </TableCell>\r\n                              <TableCell sx={{ minWidth: \"210px\" }} data-title=\"To Range\">\r\n                                <NumericTextField\r\n                                  className=\"input-box col-12\"\r\n                                  placeholder=\"To Range\"\r\n                                  name=\"to_value\"\r\n                                  value={to_value}\r\n                                  onChange={(event, newValue) => {\r\n                                    handleValueChange(event, index);\r\n                                  }}\r\n                                  autoComplete=\"off\"\r\n                                />\r\n                              </TableCell>\r\n                            </>\r\n                          )}\r\n\r\n                          <TableCell sx={{ minWidth: \"210px\" }} data-title=\"Approver Name\">\r\n                            <FormControl className=\"col-12\">\r\n                              <Autocomplete\r\n                                className=\"search-select col-12\"\r\n                                name=\"approver_name\"\r\n                                // onFocus={getUsers}\r\n                                getOptionLabel={(option) => {\r\n                                  if (typeof option === \"string\") {\r\n                                    return option;\r\n                                  }\r\n                                  if (option && `${option?.Employee_FirstName} ${option?.Employee_LasttName}`) {\r\n                                    return `${option?.Employee_FirstName} ${option?.Employee_LasttName}`;\r\n                                  }\r\n                                  return \"\";\r\n                                }}\r\n                                options={getFilteredOptions(index)}\r\n                                // options={filteroptions}\r\n                                // options={users?.filter((opt) => !approver_name?.includes(opt?.first_name))}\r\n                                value={approver_name || \"\"}\r\n                                onChange={(e, newValue) =>\r\n                                  handleChangeApproverName(e, newValue, index)\r\n                                }\r\n                                isOptionEqualToValue={(option, value) =>\r\n                                  `${option?.Employee_FirstName} ${option?.Employee_LasttName}` === value || value === \"\"\r\n                                }\r\n                                renderInput={(params) => (\r\n                                  <TextField\r\n                                    {...params}\r\n                                    placeholder=\"Approver Name\"\r\n                                    variant=\"outlined\"\r\n                                    autoComplete=\"off\"\r\n                                  />\r\n                                )}\r\n                              />\r\n                            </FormControl>\r\n                          </TableCell>\r\n                          {/* <TableCell data-title=\"Action\">\r\n                            <Button\r\n                              color=\"error\"\r\n                              onClick={() => handleRemoveRow(index)}\r\n                            >\r\n                              <MdDelete size={24} />\r\n                            </Button>\r\n                          </TableCell> */}\r\n                        </TableRow>\r\n                      );\r\n                    })}\r\n                  </TableBody>\r\n                </Table>\r\n                {/* <Button onClick={handleAddRow}>+ Add More</Button> */}\r\n              </JumboScrollbar>\r\n            </Div>\r\n          </Div>\r\n\r\n          <Div className=\"buttons\" sx={{ mt: 5 }}>\r\n            <ButtonGroup\r\n              aria-label=\"split button\"\r\n              type=\"submit\"\r\n              sx={{\r\n                mt: { xs: 0.5, lg: 0 },\r\n                mr: { xs: 0, md: 1 }\r\n              }}\r\n            >\r\n              <Button className=\"plus-button\" type=\"submit\">\r\n                Update\r\n              </Button>\r\n              <Button\r\n                variant=\"contained\"\r\n                type=\"submit\"\r\n                className=\"icon-button\"\r\n              >\r\n                <FaSave size={18} />\r\n              </Button>\r\n            </ButtonGroup>\r\n            <ButtonGroup\r\n              aria-label=\"split button\"\r\n              onClick={handleClickCancel}\r\n              sx={{\r\n                mt: { xs: 0.5, lg: 0 },\r\n                mr: { xs: 0, md: 1 }\r\n              }}\r\n            >\r\n              <Button className=\"plus-button\">Cancel</Button>\r\n              <Button variant=\"contained\" className=\"icon-button\">\r\n                <TiCancel size={24} />\r\n              </Button>\r\n            </ButtonGroup>\r\n          </Div>\r\n        </form>\r\n      </Div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default EditPartnerWorkflow;\r\n","import JumboContentLayoutMain from \"@jumbo/components/JumboContentLayout/JumboContentLayoutMain\";\r\nimport JumboScrollbar from \"@jumbo/components/JumboScrollbar\";\r\nimport Div from \"@jumbo/shared/Div\";\r\nimport {\r\n  Grid,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TableRow,\r\n  Typography,\r\n} from \"@mui/material\";\r\nimport React, { useState } from \"react\";\r\nimport { useEffect } from \"react\";\r\nimport { toast } from \"react-toastify\";\r\nimport settingServices from \"app/services/setting-api-services\";\r\nimport CreatePartnerWorkflow from \"./CreatePartnerWorkflow\";\r\nimport EditPartnerWorkflow from \"./EditPartnerWorkflow\";\r\nimport ScrollToTop from \"app/pages/ScrollToTop\";\r\nimport useResponsive from \"app/pages/useResponsive\";\r\nimport { DateFormatter } from \"app/shared/ReuseComponents/DateFormatter\";\r\nimport axios from \"axios\";\r\nimport { BASE_URL } from \"app/services/auth-services\";\r\nimport CommonPagination from \"app/shared/ReuseComponents/CommonPagination\";\r\nimport { ErpDeleteDialogBox } from \"app/shared/ReuseComponents/ErpDialogBoxes\";\r\nimport { CustomSkeleton } from \"app/shared/ReuseComponents/StyledComponents\";\r\nimport { ErpActionButton, ErpCreateButton, ErpSearchBox } from \"app/shared/ReuseComponents/ButtonComponent\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { fetchUserRolePermissions, selectedUserRolePermissions } from \"app/redux/actions/fetchUserRolePermissions\";\r\n\r\n\r\nconst ListPartnerWorkflow = ({ scrollHeight }) => {\r\n  const token = localStorage.getItem(\"accesstoken\");\r\n\r\n  const header = {\r\n    headers: {\r\n      Authorization: `Bearer ${token}`,\r\n      \"Content-Type\": \"application/json\",\r\n      Accept: \"application/json\",\r\n    },\r\n  };\r\n\r\n  const dispatch = useDispatch();\r\n  const { userRolePermissions, formPermissions, modulePermissions } = useSelector(selectedUserRolePermissions);\r\n\r\n\r\n  const [listWorkflow, setListWorkflow] = useState(true);\r\n  const [createWorkflow, setCreateWorkflow] = useState(false);\r\n  const [editWorkflow, setEditWorkflow] = useState(false);\r\n  const [openDelete, setOpenDelete] = useState(false);\r\n\r\n  const [currentDeleteId, setCurrentDeleteId] = useState(\"\");\r\n  const [currentDeleteWorkflowNo, setCurrentDeleteWorkflowNo] = useState(\"\");\r\n\r\n  const [workflows, setWorkflows] = useState([]);\r\n  const [currentWorkflows, setCurrentWorkflows] = useState([]);\r\n\r\n  const [searchData, setSearchData] = useState(\"\")\r\n\r\n\r\n  // skeleton flag\r\n  const [skeleton, setSkeleton] = useState(false);\r\n\r\n\r\n  const [page, setPage] = useState(1);\r\n  const [count, setCount] = useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = useState(10);\r\n  const [visitedPages, setVisitedPages] = useState(page - 1);\r\n  const rowsPerPageOptions = [10];\r\n  const totalRecords = count;\r\n  const totalPages = Math.ceil(totalRecords / rowsPerPage);\r\n\r\n  let isMobile = useResponsive(\"down\", \"md\");\r\n\r\n\r\n  const handleChangePage = async (event, newPage) => {\r\n    setPage(newPage);\r\n    setSkeleton(true);\r\n\r\n    try {\r\n      //  search\r\n      if (Boolean(searchData) && Boolean(searchData?.length > 0)) {\r\n        await axios\r\n          .get(`${BASE_URL}/Erpapp/workflowsearch/?search=${searchData}&page=${newPage}`, header)\r\n          .then((res) => {\r\n            console.log(res?.data);\r\n            setWorkflows(res?.data);\r\n            setCount(res?.data?.length);\r\n          })\r\n          .catch((error) => {\r\n            console.log(\"ds\", error);\r\n          });\r\n      } else {\r\n        settingServices\r\n          .listWorkflows(newPage, header)\r\n          .then((res) => {\r\n            setWorkflows(res?.results);\r\n            setCount(res?.count);\r\n            setSkeleton(false);\r\n          })\r\n          .catch((error) => {\r\n            console.log(error);\r\n            setSkeleton(false);\r\n          });\r\n      }\r\n    }\r\n    catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    // setRowsPerPage(parseInt(event.target.value, 10));\r\n    // setPage(1);\r\n    // setVisitedPages(visitedPages);\r\n    const newRowsPerPage = parseInt(event.target.value, 10);\r\n    const newPage = Math.floor(((page - 1) * rowsPerPage) / newRowsPerPage) + 1;\r\n\r\n    setRowsPerPage(newRowsPerPage);\r\n    setPage(newPage);\r\n  };\r\n\r\n  const listOfWorkflows = () => {\r\n    setSkeleton(true);\r\n    settingServices\r\n      .listWorkflows(page, header)\r\n      .then((res) => {\r\n        console.log(res?.count);\r\n        setWorkflows(res?.results);\r\n        setCount(res?.count);\r\n        setSkeleton(false);\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n        setSkeleton(false);\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    listOfWorkflows();\r\n  }, [setWorkflows]);\r\n\r\n  const CreateWorkFlow = () => {\r\n    setListWorkflow(false);\r\n    setCreateWorkflow(true);\r\n  };\r\n\r\n  const handleEditPopup = (data) => {\r\n    setEditWorkflow(true);\r\n    setListWorkflow(false);\r\n    setCurrentWorkflows(data);\r\n  };\r\n\r\n  const handleDeletePopup = (data) => {\r\n    setOpenDelete(true);\r\n    setCurrentDeleteId(data?.id);\r\n    setCurrentDeleteWorkflowNo(data?.Workflow_Id);\r\n    setCurrentWorkflows(data);\r\n  };\r\n\r\n  const deleteData = (e) => {\r\n    e.preventDefault();\r\n\r\n    settingServices\r\n      .deleteWorkflow(currentDeleteWorkflowNo, header)\r\n      .then((response) => {\r\n        toast.success(`${currentWorkflows?.Document_Name} is Deleted Successfully`);\r\n        setOpenDelete(false);\r\n        listOfWorkflows();\r\n        // window.location.reload();\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n\r\n\r\n\r\n  const handleSearch = async (data) => {\r\n    await axios\r\n      .get(`${BASE_URL}/Erpapp/workflowsearch/?search=${data}`, header)\r\n      .then((res) => {\r\n        console.log(res?.data);\r\n        setWorkflows(res?.data);\r\n        setCount(res?.data?.length);\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"ds\", error);\r\n      });\r\n  };\r\n\r\n\r\n  const handleSearchWorkflows = (e) => {\r\n    var data = e.target.value;\r\n    setSearchData(data);\r\n    data !== \"\" ? handleSearch(data) : listOfWorkflows();\r\n  }\r\n\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchUserRolePermissions(token))\r\n  }, []);\r\n\r\n\r\n  return (\r\n    <>\r\n      <JumboContentLayoutMain>\r\n        <Div sx={{ display: listWorkflow === true ? \"block\" : \"none\" }}>\r\n          <Typography variant=\"h3\" sx={{ fontWeight: 600 }}>\r\n            Business Unit Workflow List - Count : {count || 0}\r\n          </Typography>\r\n          <Typography variant=\"h4\" sx={{ fontWeight: 500 }}>\r\n            User shall use this form to apply the workflow to business unit for\r\n            specific documents.\r\n          </Typography>\r\n\r\n          <Grid container sx={{ mt: 2 }}>\r\n            <Grid\r\n              item\r\n              className=\"filter\"\r\n              xs={12}\r\n              md={1}\r\n              lg={3}\r\n              xl={5}\r\n            ></Grid>\r\n\r\n            <Grid item xs={12} md={5} sm={12} lg={4} xl={4}>\r\n              <ErpSearchBox handleChange={handleSearchWorkflows} searchData={searchData} />\r\n            </Grid>\r\n\r\n            <Grid item xs={12} md={6} sm={12} lg={5} xl={3} sx={{ display: \"flex\", justifyContent: \"flex-end\", mt: { xs: 1, md: 0 } }}>\r\n              {Array.isArray(userRolePermissions) && userRolePermissions.includes(217) && (\r\n                <ErpCreateButton handleClick={CreateWorkFlow} name={\"Create Workflow\"} />\r\n              )}\r\n            </Grid>\r\n          </Grid>\r\n\r\n          {/* code for purchase list table */}\r\n          <Div sx={{ mt: 1 }}>\r\n            <React.Fragment>\r\n              <JumboScrollbar\r\n                autoHeight={true}\r\n                autoHideTimeout={4000}\r\n                autoHeightMin={scrollHeight ? scrollHeight : 360}\r\n                autoHide={true}\r\n                hideTracksWhenNotNeeded\r\n                id=\"no-more-tables\"\r\n              >\r\n                <Table stickyHeader className=\"table\">\r\n                  <TableHead className=\"table-head\">\r\n                    <TableRow>\r\n                      <TableCell>Date</TableCell>\r\n                      <TableCell>\r\n                        Business Unit\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        Workflow Name\r\n                      </TableCell>\r\n                      <TableCell sx={{ minWidth: \"200px !important\" }}>\r\n                        Workflow Based On\r\n                      </TableCell>\r\n                      <TableCell sx={{ minWidth: \"200px !important\" }}>\r\n                        Document Name\r\n                      </TableCell>\r\n                      {/* <TableCell>\r\n                      Rule\r\n                    </TableCell> */}\r\n                      {/* <TableCell>Field Name</TableCell> */}\r\n                      <TableCell>No Of Levels</TableCell>\r\n                      <TableCell>Action</TableCell>\r\n                    </TableRow>\r\n                  </TableHead>\r\n                  <TableBody>\r\n                    {skeleton ? <CustomSkeleton headCount={7} rowCount={10} />\r\n                      : workflows?.length > 0 ? (\r\n                        workflows?.map((data) => {\r\n                            return (\r\n                              <TableRow hover key={data?.id} sx={{ fontSize: 14 }}>\r\n                                <TableCell data-title=\"Date\">\r\n                                  {/* {data.Created_Date.slice(0, 10)} */}\r\n                                  <DateFormatter date={data?.Created_Date} />\r\n                                </TableCell>\r\n                                <TableCell data-title=\"Business Unit\">\r\n                                  {data?.Partner_Id?.Partner_Name}\r\n                                </TableCell>\r\n                                <TableCell data-title=\"Workflow Name\">\r\n                                  {data?.Workflow_Name}\r\n                                </TableCell>\r\n                                <TableCell data-title=\"Workflow Based On\">\r\n                                  {data?.Workflow_Basedon}\r\n                                </TableCell>\r\n                                <TableCell data-title=\"Document Name\">\r\n                                  {data?.Document_Name}\r\n                                </TableCell>\r\n                                {/* <TableCell data-title=\"Field Name\">\r\n                              {data.Field_Name}\r\n                            </TableCell> */}\r\n                                <TableCell data-title=\"No Of Levels\">\r\n                                  {data?.Noof_Level}\r\n                                </TableCell>\r\n                                <TableCell data-title=\"Action\">\r\n                                  <ErpActionButton userRolePermissions={userRolePermissions} editPermissionId={218} deletePermissionId={219} onClickEdit={() => handleEditPopup(data)} onClickDelete={() => handleDeletePopup(data)} align=\"left\" />\r\n                                </TableCell>\r\n                              </TableRow>\r\n                            );\r\n                          })\r\n                      ) : (\r\n                        <TableRow>\r\n                          <TableCell colSpan={8} align=\"center\">\r\n                            No Workflows\r\n                          </TableCell>\r\n                        </TableRow>\r\n                      )}\r\n                  </TableBody>\r\n                </Table>\r\n              </JumboScrollbar>\r\n\r\n              {/* pagination */}\r\n              <Div sx={{ display: \"flex\", flexWrap: \"wrap\" }}>\r\n                <CommonPagination\r\n                  totalPages={totalPages}\r\n                  page={page}\r\n                  handleChangePage={handleChangePage}\r\n                  rowsPerPageOptions={rowsPerPageOptions}\r\n                  rowsPerPage={rowsPerPage}\r\n                  handleChangeRowsPerPage={handleChangeRowsPerPage}\r\n                />\r\n              </Div>\r\n            </React.Fragment>\r\n          </Div>\r\n\r\n          {/* Delete workflow popup */}\r\n          <ErpDeleteDialogBox flag={openDelete} setFlag={setOpenDelete} handleClick={deleteData} content={\"Are you sure you want to delete the workflow\"} id={currentWorkflows?.Document_Name} />\r\n\r\n\r\n        </Div>\r\n\r\n        <Div sx={{ display: createWorkflow === true ? \"block\" : \"none\" }}>\r\n          <CreatePartnerWorkflow\r\n            setCreateWorkflow={setCreateWorkflow}\r\n            setListWorkflow={setListWorkflow}\r\n            listOfWorkflows={listOfWorkflows}\r\n            workflows={workflows}\r\n          />\r\n        </Div>\r\n        <Div sx={{ display: editWorkflow === true ? \"block\" : \"none\" }}>\r\n          <EditPartnerWorkflow\r\n            setEditWorkflow={setEditWorkflow}\r\n            setListWorkflow={setListWorkflow}\r\n            listOfWorkflows={listOfWorkflows}\r\n            currentWorkflows={currentWorkflows}\r\n          />\r\n        </Div>\r\n        <ScrollToTop Scrollheight={180} />\r\n      </JumboContentLayoutMain>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ListPartnerWorkflow;\r\n","// @mui\r\nimport { useTheme } from '@mui/material/styles';\r\nimport useMediaQuery from '@mui/material/useMediaQuery';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nexport default function useResponsive(query, key, start, end) {\r\n  const theme = useTheme();\r\n\r\n  const mediaUp = useMediaQuery(theme.breakpoints.up(key));\r\n\r\n  const mediaDown = useMediaQuery(theme.breakpoints.down(key));\r\n\r\n  const mediaBetween = useMediaQuery(theme.breakpoints.between(start, end));\r\n\r\n  const mediaOnly = useMediaQuery(theme.breakpoints.only(key));\r\n\r\n  if (query === 'up') {\r\n    return mediaUp;\r\n  }\r\n\r\n  if (query === 'down') {\r\n    return mediaDown;\r\n  }\r\n\r\n  if (query === 'between') {\r\n    return mediaBetween;\r\n  }\r\n\r\n  if (query === 'only') {\r\n    return mediaOnly;\r\n  }\r\n  return null;\r\n}\r\n","import { useJumboLayoutSidebar } from \"@jumbo/hooks\";\r\nimport { Grid, MenuItem, Pagination, Select } from \"@mui/material\";\r\nimport useResponsive from \"app/pages/useResponsive\";\r\nimport React, { memo } from \"react\";\r\n\r\nconst CommonPagination = ({\r\n  totalPages,\r\n  page = 1,\r\n  handleChangePage = () => { },\r\n  rowsPerPageOptions,\r\n  rowsPerPage,\r\n  handleChangeRowsPerPage = () => { }\r\n}) => {\r\n\r\n  let isMobile = useResponsive(\"down\", \"md\");\r\n  let isTabOnly = useResponsive(\"down\", \"lg\");\r\n\r\n  const { sidebarOptions, setSidebarOptions } = useJumboLayoutSidebar();\r\n\r\n  console.log(\"sidebarOptions from pagination\", sidebarOptions?.open);\r\n\r\n  return (\r\n    <Grid container spacing={1} sx={{ mt: 2, display: \"flex\", alignItems: \"center\" }}>\r\n      <Grid item xs={12} md={0} lg={sidebarOptions?.open ? 1.5 : 3} xl={4.5}></Grid>\r\n      <Grid item xs={12} md={sidebarOptions?.open ? 5 : 4} lg={sidebarOptions?.open ? 4 : 4} xl={3.5} sx={{ display: \"flex\", justifyContent: { xs: \"center\", md: \"flex-end\" }, alignItems: \"center\", gap: \"10px !important\" }}>\r\n        {/* <label className=\"input-label\">Rows per page</label>\r\n        <Select\r\n          className=\"input-pagination-select\"\r\n          value={rowsPerPage}\r\n          onChange={handleChangeRowsPerPage}\r\n          variant=\"outlined\"\r\n          sx={{ minWidth: \"60px !important\" }}\r\n        >\r\n          {rowsPerPageOptions?.map((option) => (\r\n            <MenuItem key={option} value={option}>\r\n              {option}\r\n            </MenuItem>\r\n          ))}\r\n        </Select> */}\r\n      </Grid>\r\n      <Grid item xs={12} md={sidebarOptions?.open ? 7 : 8} lg={sidebarOptions?.open ? 6.5 : 5} xl={4} sx={{ display: \"flex\", justifyContent: { xs: \"center\", md: \"flex-end\" }, alignItems: \"center\", gap: \"10px !important\" }}>\r\n        <Pagination\r\n          color=\"primary\"\r\n          count={totalPages}\r\n          page={page}\r\n          onChange={(e, newValue) => handleChangePage(e, newValue)}\r\n          variant=\"outlined\"\r\n          shape=\"rounded\"\r\n          showFirstButton={Boolean(isMobile || isTabOnly) ? Boolean(sidebarOptions?.open || isMobile) ? false : true : true}\r\n          showLastButton={Boolean(isMobile || isTabOnly) ? Boolean(sidebarOptions?.open || isMobile) ? false : true : true}\r\n          siblingCount={0}\r\n        />\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default memo(CommonPagination);\r\n","import Div from '@jumbo/shared/Div'\r\nimport { Box, Button, ButtonGroup, Dialog, DialogActions, DialogContent, IconButton, Typography, styled, useMediaQuery, useTheme } from '@mui/material'\r\nimport React from 'react'\r\nimport { MdCheck, MdClear, MdClose, MdDelete } from 'react-icons/md'\r\nimport { TiCancel } from 'react-icons/ti'\r\n\r\n\r\nconst DialogBox = styled(Dialog)(({ theme }) => ({\r\n    '& .MuiDialog-paper': {\r\n        borderRadius: 5,\r\n        backgroundColor: theme.palette.background.default,\r\n        border: `1px solid ${theme.palette.divider}`,\r\n    },\r\n}));\r\n\r\nconst StyledIconButton = styled(IconButton)(({ theme }) => ({\r\n    color: theme.palette.error.main,\r\n    '&:hover': {\r\n        backgroundColor: theme.palette.error.light,\r\n        color: theme.palette.background.default,\r\n    },\r\n}));\r\n\r\nconst CustomTypography = styled(Typography)(({ theme }) => ({\r\n    padding: theme.spacing(0.5),\r\n    textAlign: 'left',\r\n    // backgroundColor: theme.palette.error.light,\r\n    // color: theme.palette.error.contrastText,\r\n    borderRadius: theme.shape.borderRadius,\r\n}));\r\n\r\n\r\nexport const ErpDeleteDialogBox = ({ flag, setFlag, handleClick, content, id, isMobile }) => {\r\n    const theme = useTheme();\r\n    const isMdUp = useMediaQuery(theme.breakpoints.down('md'));\r\n\r\n    return (\r\n        <DialogBox open={flag}\r\n            maxWidth={window.innerWidth <= 600 ? 'xs' : window.innerWidth <= 768 ? 'sm' : window.innerWidth <= 992 ? 'sm' : 'sm'}\r\n            fullWidth\r\n            onClose={() => setFlag(false)}\r\n        >\r\n            <DialogContent>\r\n                <Typography variant=\"h3\">\r\n                    {content}\r\n                    <span>&nbsp;</span>\r\n                    <span style={{ fontWeight: 700 }}>\r\n                        {\" \"}\r\n                        \"{id}\" ?\r\n                    </span>\r\n                </Typography>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                {isMobile ? isMobile : isMdUp ? (\r\n                    <>\r\n                        <Button variant=\"contained\" color={\"error\"} endIcon={<MdDelete />} onClick={handleClick}>\r\n                            Delete\r\n                        </Button>\r\n                        <Button variant=\"contained\" endIcon={<TiCancel />} onClick={() => setFlag(false)}>\r\n                            Cancel\r\n                        </Button>\r\n                    </>\r\n                ) :\r\n                    <Div className=\"buttons\">\r\n                        <ButtonGroup\r\n                            aria-label=\"split button\"\r\n                            onClick={handleClick}\r\n                            sx={{\r\n                                mt: { xs: 0.5, lg: 0 },\r\n                                mr: { xs: 0, md: 1 }\r\n                            }}\r\n                        >\r\n                            <Button className=\"plus-button\">\r\n                                Delete\r\n                            </Button>\r\n                            <Button variant=\"contained\" className=\"icon-button\">\r\n                                <MdDelete size={18} />\r\n                            </Button>\r\n                        </ButtonGroup>\r\n\r\n                        <ButtonGroup\r\n                            aria-label=\"split button\"\r\n                            onClick={() => setFlag(false)}\r\n                            sx={{\r\n                                mt: { xs: 0.5, lg: 0 },\r\n                                mr: { xs: 0, md: 1 }\r\n                            }}\r\n                        >\r\n                            <Button className=\"plus-button\">Cancel</Button>\r\n                            <Button variant=\"contained\" className=\"icon-button\">\r\n                                <TiCancel size={22} />\r\n                            </Button>\r\n                        </ButtonGroup>\r\n                    </Div>\r\n                }\r\n            </DialogActions>\r\n        </DialogBox>\r\n    )\r\n}\r\n\r\n\r\nexport const ErpConfirmDialogBox = ({ flag, setFlag, handleClick, content, isMobile }) => {\r\n    return (\r\n        <Dialog\r\n            open={flag}\r\n            maxWidth=\"sm\"\r\n            fullWidth\r\n        >\r\n            <DialogContent>\r\n                <Typography variant='h4'>\r\n                    {content}\r\n                </Typography>\r\n                <br />\r\n                <Typography variant='h4'>\r\n                    Do you want still to continue...\r\n                </Typography>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                {isMobile ? (\r\n                    <>\r\n                        <Button variant=\"contained\" color={\"error\"} endIcon={<MdCheck />} onClick={() => setFlag(false)} >\r\n                            Yes\r\n                        </Button>\r\n                        <Button variant=\"contained\" endIcon={<MdClear />} onClick={handleClick}>\r\n                            No\r\n                        </Button>\r\n                    </>\r\n                ) :\r\n                    <Div className=\"buttons\">\r\n                        <ButtonGroup\r\n                            aria-label=\"split button\"\r\n                            onClick={() => setFlag(false)}\r\n                            sx={{\r\n                                mt: { xs: 0.5, lg: 0 },\r\n                                mr: { xs: 0, md: 1 }\r\n                            }}\r\n                        >\r\n                            <Button className=\"plus-button\">\r\n                                Yes\r\n                            </Button>\r\n                            <Button variant=\"contained\" className=\"icon-button\">\r\n                                <MdCheck size={16} />\r\n                            </Button>\r\n                        </ButtonGroup>\r\n                        <ButtonGroup\r\n                            aria-label=\"split button\"\r\n                            onClick={handleClick}\r\n                            sx={{\r\n                                mt: { xs: 0.5, lg: 0 },\r\n                                mr: { xs: 0, md: 1 }\r\n                            }}\r\n                        >\r\n                            <Button className=\"plus-button\">\r\n                                No\r\n                            </Button>\r\n                            <Button variant=\"contained\" className=\"icon-button\">\r\n                                <MdClear size={16} />\r\n                            </Button>\r\n                        </ButtonGroup>\r\n                    </Div>\r\n                }\r\n            </DialogActions>\r\n        </Dialog>\r\n    )\r\n}\r\n\r\n\r\nexport const ErpStatusConfirmDialogBox = ({ flag, setFlag, handleClick, content, isMobile }) => {\r\n    return (\r\n        <Dialog\r\n            open={flag}\r\n            maxWidth=\"sm\"\r\n            fullWidth\r\n        >\r\n            <DialogContent>\r\n                <Typography variant='h4'>\r\n                    {content}\r\n                </Typography>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                {isMobile ? (\r\n                    <>\r\n                        <Button variant=\"contained\" color={\"error\"} endIcon={<MdCheck />} onClick={handleClick} >\r\n                            Yes\r\n                        </Button>\r\n                        <Button variant=\"contained\" endIcon={<MdClear />} onClick={() => setFlag(false)} >\r\n                            No\r\n                        </Button>\r\n                    </>\r\n                ) :\r\n                    <Div className=\"buttons\">\r\n                        <ButtonGroup\r\n                            aria-label=\"split button\"\r\n                            onClick={handleClick}\r\n                            sx={{\r\n                                mt: { xs: 0.5, lg: 0 },\r\n                                mr: { xs: 0, md: 1 }\r\n                            }}\r\n                        >\r\n                            <Button className=\"plus-button\">\r\n                                Yes\r\n                            </Button>\r\n                            <Button variant=\"contained\" className=\"icon-button\">\r\n                                <MdCheck size={16} />\r\n                            </Button>\r\n                        </ButtonGroup>\r\n                        <ButtonGroup\r\n                            aria-label=\"split button\"\r\n                            onClick={() => setFlag(false)}\r\n                            sx={{\r\n                                mt: { xs: 0.5, lg: 0 },\r\n                                mr: { xs: 0, md: 1 }\r\n                            }}\r\n                        >\r\n                            <Button className=\"plus-button\">\r\n                                No\r\n                            </Button>\r\n                            <Button variant=\"contained\" className=\"icon-button\">\r\n                                <MdClear size={16} />\r\n                            </Button>\r\n                        </ButtonGroup>\r\n                    </Div>\r\n                }\r\n            </DialogActions>\r\n        </Dialog>\r\n    )\r\n}\r\n\r\n\r\nexport const ErpAlertViewDialogBox = ({ flag, setFlag, isMobile }) => {\r\n    return (\r\n        <DialogBox\r\n            open={flag}\r\n            maxWidth=\"xs\"\r\n        // onClose={() => setFlag(false)} // Optional: You can enable this if you want the dialog to close on backdrop click.\r\n        >\r\n            <DialogContent>\r\n                <Div sx={{ p: 0, m: 0, mb: 2, display: \"flex\", justifyContent: \"space-between\", alignItems: \"center\" }}>\r\n                    <CustomTypography variant='h3'>\r\n                        Alert\r\n                    </CustomTypography>\r\n\r\n                    <StyledIconButton onClick={() => setFlag(false)} sx={{ p: 0.3 }}>\r\n                        <MdClose size={22} />\r\n                    </StyledIconButton>\r\n                </Div>\r\n                <Typography variant='h4' sx={{ color: 'text.secondary' }}>\r\n                    You don't have the permission to view this page.\r\n                </Typography>\r\n            </DialogContent>\r\n        </DialogBox>\r\n    )\r\n}\r\n\r\n\r\n"],"names":["_ref","Scrollheight","isVisible","setIsVisible","useState","isAboveXl","useResponsive","handleScroll","window","scrollY","useEffect","addEventListener","removeEventListener","_jsx","style","display","justifyContent","alignItems","position","bottom","right","zIndex","borderRadius","boxShadow","padding","width","height","backgroundColor","color","transition","cursor","onClick","scrollToTopHandler","scrollTo","top","behavior","className","children","FaArrowCircleUp","size","Setting","_Fragment","Div","Typography","variant","sx","fontWeight","mt","setListWorkflow","setCreateWorkflow","listOfWorkflows","scrollHeight","token","localStorage","getItem","header","headers","Authorization","concat","Accept","workflows","setWorkflows","approverHead","setApproverHead","openForms","setOpenForms","employees","setEmployees","approvers","setApprovers","listModules","setListModules","listFormNames","setListFormNames","listDocumentNames","setListDocumentNames","listFieldNames","setListFieldNames","listFieldNames2","setListFieldNames2","partnerId","setPartnerId","partnerName","setPartnerName","documentId","setDocumentId","documentName","setDocumentName","ruleName","setRuleName","workflowName","setWorkflowName","fieldName","setFieldName","basedOnWorkflow","setBasedOnWorkflow","amount","setAmount","noOfLevels","setNoOfLevels","moduleName","setModuleName","formName","setFormName","fieldName2","setFieldName2","approverNameLists","setApproverNameLists","rows","setRows","id","level","from_value","to_value","approver_name","role","errors","setErrors","hrApiServices","listofDropdownAllEmployees","then","res","console","log","catch","error","async","axios","BASE_URL","data","getPreviousWorkflows","handleValueChange","event","index","name","value","target","list","Number","loginUser","loginUserRole","filteroptions","filter","user","Employee_FirstName","Employee_LasttName","includes","_jsxs","onSubmit","e","_workflows$filter","preventDefault","validateForm","newErrors","undefined","Object","keys","length","i","_i$Partner_Id","Partner_Id","find","opt","Document_Name","toast","warning","payload","Workflow_Name","Assignworkflow_Id","Workflow_Basedon","Field_Name","Noof_Level","Amountjosn","leveljson","Head_Approval","parseInt","Company_Id","Created_By","Updated_By","Created_Date","todayDate","_res$data","status","success","handleError","minHeight","Grid","container","ml","sm","md","item","xs","Autocomplete","onFocus","getListOfPartners","itemServices","listPartners","getOptionLabel","option","Partner_Name","options","onChange","newValue","isOptionEqualToValue","renderInput","params","TextField","_objectSpread","placeholder","autoComplete","getDocumentNames","_res$data$","_res$data$2","_res$data$3","_res$data$4","_res$data$5","_res$data$6","_res$data$7","Rule_Name","levels","newRows","push","filterWorkflowDocumentName","disabled","FormControlLabel","checked","control","Checkbox","label","labelPlacement","JumboScrollbar","autoHeight","autoHideTimeout","autoHeightMin","autoHide","hideTracksWhenNotNeeded","Table","TableHead","TableRow","TableCell","TableBody","map","minWidth","NumericTextField","FormControl","handleChangeApproverName","rowlist","previousApproverName","Designation","updatedApproverNameLists","prevIndex","indexOf","splice","newApproverName","ButtonGroup","type","lg","mr","Button","FaSave","TiCancel","Dialog","open","Form_Name","FieldShort_Name","DialogContent","getModuleNames","settingServices","filterFormNames","results","ModuleName","getFormNames","maxWidth","FormName","formname","filterlistFieldNames","_res$2","getFieldNames2","DialogActions","_currentWorkflows$Ass","setEditWorkflow","currentWorkflows","showCreatePage","setShowCreatePage","showUpdatePage","setShowUpdatePage","defaultPartnerName","defaultWorkflowName","defaultDocumentName","defaultFieldName","defaultRuleName","defaultNoofLevel","defaultHeadApprover","defaultRows","Array","from","_","_res$data$8","getFilteredOptions","currentIndex","_rows$map","selectedApprovers","row","userName","Workflow_Id","WorkflowName_Id","p","_updatedApproverNameL","handleClickCancel","dispatch","useDispatch","userRolePermissions","formPermissions","modulePermissions","useSelector","selectedUserRolePermissions","listWorkflow","createWorkflow","editWorkflow","openDelete","setOpenDelete","currentDeleteId","setCurrentDeleteId","currentDeleteWorkflowNo","setCurrentDeleteWorkflowNo","setCurrentWorkflows","searchData","setSearchData","skeleton","setSkeleton","page","setPage","count","setCount","rowsPerPage","setRowsPerPage","visitedPages","setVisitedPages","totalRecords","totalPages","Math","ceil","listWorkflows","fetchUserRolePermissions","JumboContentLayoutMain","xl","ErpSearchBox","handleChange","_res$data2","handleSearch","isArray","ErpCreateButton","handleClick","CreateWorkFlow","React","stickyHeader","CustomSkeleton","headCount","rowCount","_data$Partner_Id","hover","fontSize","DateFormatter","date","ErpActionButton","editPermissionId","deletePermissionId","onClickEdit","handleEditPopup","onClickDelete","handleDeletePopup","align","colSpan","flexWrap","CommonPagination","handleChangePage","newPage","Boolean","rowsPerPageOptions","handleChangeRowsPerPage","newRowsPerPage","floor","ErpDeleteDialogBox","flag","setFlag","deleteWorkflow","response","content","CreatePartnerWorkflow","EditPartnerWorkflow","ScrollToTop","query","key","start","end","theme","useTheme","mediaUp","useMediaQuery","breakpoints","up","mediaDown","down","mediaBetween","between","mediaOnly","only","isMobile","isTabOnly","sidebarOptions","setSidebarOptions","useJumboLayoutSidebar","spacing","gap","Pagination","shape","showFirstButton","showLastButton","siblingCount","memo","DialogBox","styled","palette","background","default","border","divider","StyledIconButton","IconButton","_ref2","main","light","CustomTypography","_ref3","textAlign","_ref4","isMdUp","innerWidth","fullWidth","onClose","endIcon","MdDelete","ErpConfirmDialogBox","_ref5","MdCheck","MdClear","ErpAlertViewDialogBox","_ref7","m","mb","MdClose"],"sourceRoot":""}