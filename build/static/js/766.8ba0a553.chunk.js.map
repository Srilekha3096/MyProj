{"version":3,"file":"static/js/766.8ba0a553.chunk.js","mappings":"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","sources":["app/pages/settings/Organization/ZoneLists.js","app/pages/settings/Organization/CityLists.js","app/pages/settings/Organization/StateLists.js","app/pages/TableStyled.js","app/services/common-services.js","app/shared/ReuseComponents/UpdatedHistoryRecords.js","app/pages/settings/Organization/Partner/CreatePartner.js","app/pages/settings/Organization/Partner/EditPartnerList.js","app/shared/ReuseComponents/HistoryOverview.js","app/pages/settings/Organization/Partner/partnerOverview.js","app/pages/settings/Organization/Partner/PartnerList.js","app/pages/settings/Organization/Store/CreateStore.js","app/services/dropdownapi-services.js","app/pages/settings/Organization/Store/ViewStoreSettings.js","app/pages/settings/Organization/Store/StoreList.js","app/pages/settings/Organization/OrganizationStructure.js","app/schemas/SettingValidationSchemas.js"],"sourcesContent":["import Div from \"@jumbo/shared/Div\";\r\nimport {\r\n  Autocomplete,\r\n  Button,\r\n  ButtonGroup,\r\n  Dialog,\r\n  DialogContent,\r\n  FormControl,\r\n  FormControlLabel,\r\n  Grid,\r\n  Radio,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TableRow,\r\n  TextField,\r\n  Typography,\r\n} from \"@mui/material\";\r\nimport axios from \"axios\";\r\nimport React, { useContext, useEffect, useState } from \"react\";\r\nimport { DataContext } from \"./OrganizationStructure\";\r\nimport { toast } from \"react-toastify\";\r\nimport { BASE_URL } from \"app/services/auth-services\";\r\nimport JumboScrollbar from \"@jumbo/components/JumboScrollbar\";\r\nimport { FaSave } from \"react-icons/fa\";\r\nimport { TiCancel } from \"react-icons/ti\";\r\nimport { ErpActionButton, ErpCreateButton } from \"app/shared/ReuseComponents/ButtonComponent\";\r\n\r\n\r\nconst ZoneLists = (scrollHeight) => {\r\n  const { name1, name3, name4, cities, zones, getId4, getId6, setGetId6, setName6, getZoneDatas, getId5, name5, checkId7, setCheckId7, userRolePermissions, currentData, setCurrentData } = useContext(DataContext);\r\n\r\n  const token = localStorage.getItem(\"accesstoken\");\r\n\r\n  const header = {\r\n    headers: {\r\n      Authorization: `Bearer ${token}`,\r\n      \"Content-Type\": \"application/json\",\r\n      Accept: \"application/json\",\r\n    },\r\n  };\r\n\r\n\r\n  const [partners, setPartners] = useState([]);\r\n\r\n\r\n  const [open, setOpen] = useState(false);\r\n  const [showSave, setShowSave] = useState(false);\r\n  const [cityName, setCityName] = useState({\r\n    City_Name: name4\r\n  });\r\n  const [businessUnit, setBusinessUnit] = useState(name5);\r\n  const [zoneLists, setZoneLists] = useState([]);\r\n  const [zoneName, setZoneName] = useState();\r\n  const [pincode, setPincode] = useState(\"\");\r\n  const [cityId, setCityId] = useState(getId4);\r\n  const [errors, setErrors] = useState({});\r\n\r\n\r\n  const handleAddZones = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n    setZoneName(\"\");\r\n    // setCityName(\"\");\r\n    // setBusinessUnit(\"\");\r\n    setPincode(\"\");\r\n    setErrors({});\r\n  };\r\n\r\n  const handleCheckZone = async () => {\r\n    try {\r\n      console.log(\"pin\", pincode);\r\n      const response = await axios.get(`${BASE_URL}/Erpapp/PincodeCRUD/?pincode=${pincode}`, header);\r\n      const dataResponse = response?.data;\r\n      console.log(\"PincodeCRUD\", response?.data);\r\n\r\n      const normalizeCityName = (cityName) => {\r\n        let normalized = cityName?.toLowerCase().replace(/\\s/g, '');\r\n        normalized = normalized?.normalize('NFD').replace(/[\\u0300-\\u036f]/g, '');\r\n\r\n        return normalized;\r\n      };\r\n\r\n      const isValidPincode = dataResponse?.some((opt) => {\r\n        const normalizedCityName = normalizeCityName(opt?.cityname);\r\n        const normalizedSearchName = normalizeCityName(cityName?.City_Name);\r\n\r\n        return normalizedCityName === normalizedSearchName;\r\n      });\r\n\r\n      console.log(\"isValidPincode\", isValidPincode, dataResponse);\r\n      if (dataResponse?.length > 0) {\r\n        toast.success(\"Pincode is valid\");\r\n        setZoneLists(dataResponse);\r\n        getZoneDatas();\r\n        setShowSave(true);\r\n      } else {\r\n        toast.error(\"The provided pincode doesn't exist in the city.\");\r\n        setZoneLists([]);\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n      setZoneName(\"\");\r\n      setCityName(\"\");\r\n      setBusinessUnit(\"\");\r\n      setPincode(\"\");\r\n      setErrors({});\r\n\r\n      // Show error message\r\n      toast.error(\"Please enter a valid pincode\");\r\n    }\r\n  };\r\n\r\n\r\n\r\n  // const handleCheckZone = async () => {\r\n  //   console.log(\"pin\", pincode);\r\n  //   axios\r\n  //     .get(`https://api.postalpincode.in/pincode/${pincode}`)\r\n  //     .then((res) => {\r\n  //       console.log(\"pinCodes\", res?.data);\r\n  //       if (res?.data) {\r\n  //         res?.data?.map((item) => {\r\n  //           let postOffice = item?.PostOffice\r\n  //           setZoneName(postOffice)\r\n  //         })\r\n  //       }\r\n  //       if (res.data.cityname.toLowerCase() === name4.toLowerCase()) {\r\n  //         toast.success(\"Pincode is valid\");\r\n  //       } else {\r\n  //         toast.error(\"Pincode is Already Exists\");\r\n  //       }\r\n  //     })\r\n  //     .catch((error) => {\r\n  //       console.log(error);\r\n  //       toast.error(\"Please enter a valid pincode\");\r\n  //     });\r\n  //   // let API_KEY = '65afa4042e767571080003lgca37daa'\r\n  //   // await axios.get(`https://app.zipcodebase.com/landing_demo/?codes=${pincode}&country=&api_key=${API_KEY}`).then((res) => {\r\n  //   //   console.log(\"PPPP...\", res)\r\n  //   //   let result = res.data.results[pincode]?.filter((opt) => opt.province === cityName?.City_Name) || [];\r\n  //   //   if (result) {\r\n  //   //     console.log(\"result\", result)\r\n  //   //     setZoneLists(result);\r\n  //   //     getZoneDatas();\r\n  //   //     setShowSave(true);\r\n  //   //     toast.success(\"Pincode is valid\")\r\n  //   //   }else{\r\n  //   //     toast.error(\"Please enter a valid pincode\");\r\n  //   //   }\r\n  //   // }).catch((error) => {\r\n  //   //   console.log(error);\r\n  //   //   toast.error(error.message);\r\n  //   // })\r\n  // };\r\n\r\n  // Regular Expression\r\n  const validate = () => {\r\n    let error = {};\r\n\r\n    if (pincode === \"\" || pincode === null || pincode === undefined) {\r\n      error.pincode = \"Pin Code is required\"\r\n    }\r\n    if (zoneName === \"\" || zoneName === null || zoneName === undefined) {\r\n      error.zoneName = \"Zone Name is required\"\r\n    }\r\n\r\n    return error;\r\n  };\r\n\r\n  const handleCreateZone = (e) => {\r\n    e.preventDefault();\r\n\r\n    let validForm = validate();\r\n    setErrors(validForm);\r\n\r\n    if (Object.keys(validForm).length === 0) {\r\n      if (currentData?.id !== undefined) {\r\n        var zonepayload = {\r\n          ...currentData,\r\n          Zone_Name: zoneName,\r\n          Pincode: pincode,\r\n          City_Id: cityId,\r\n          Zone_Type_Code: 6,\r\n          Partner_Id: getId5,\r\n          Company_Id: parseInt(localStorage.getItem(\"OrganizationId\")),\r\n          Created_By: parseInt(localStorage.getItem(\"UserId\")),\r\n          Updated_By: parseInt(localStorage.getItem(\"UserId\")),\r\n        };\r\n        axios\r\n          .put(`${BASE_URL}/Erpapp/ZoneDetailsCRUD/`, zonepayload, header)\r\n          .then((res) => {\r\n            console.log(res?.data);\r\n            if (res?.data?.id) {\r\n              toast.success(\"Zone updated successfully\");\r\n              getZoneDatas();\r\n              setOpen(false);\r\n            }\r\n          })\r\n          .catch((error) => {\r\n            console.log(error);\r\n          });\r\n      } else {\r\n        var zonepayload = {\r\n          Zone_Name: zoneName,\r\n          Pincode: pincode,\r\n          City_Id: cityId,\r\n          Zone_Type_Code: 6,\r\n          Partner_Id: getId5,\r\n          Company_Id: parseInt(localStorage.getItem(\"OrganizationId\")),\r\n          Created_By: parseInt(localStorage.getItem(\"UserId\")),\r\n          Updated_By: parseInt(localStorage.getItem(\"UserId\")),\r\n        };\r\n        axios\r\n          .post(`${BASE_URL}/Erpapp/ZoneDetailsCRUD/`, zonepayload, header)\r\n          .then((res) => {\r\n            console.log(res?.data);\r\n            if (res?.data?.id) {\r\n              toast.success(\"Zone created successfully\");\r\n              getZoneDatas();\r\n              setZoneName(\"\");\r\n              setPincode(\"\");\r\n              setBusinessUnit(\"\");\r\n              setCityName(\"\");\r\n              setErrors({});\r\n              setOpen(false);\r\n            }\r\n          })\r\n          .catch((error) => {\r\n            console.log(error);\r\n            toast.error(\"Zone name is already exists\");\r\n          });\r\n      }\r\n    }\r\n  };\r\n\r\n\r\n  // GetPartners\r\n  const getPartners = async () => {\r\n    await axios.get(`${BASE_URL}/Erpapp/citywisepartner/?BusinessUnit_City=${cityName?.City_Name}`, header)\r\n      .then((response) => {\r\n        console.log(\"Partner Response\", response?.data);\r\n        const names = response?.data;\r\n        setPartners(names);\r\n      }).catch((error) => {\r\n        console.log(error);\r\n      })\r\n  }\r\n\r\n\r\n  useEffect(() => {\r\n    getPartners();\r\n  }, [cityName]);\r\n\r\n\r\n  // edit a zone\r\n  const editZoneById = async (id) => {\r\n    setCurrentData(id);\r\n    await axios.get(`${BASE_URL}/Erpapp/ZoneDetailsCRUD/?id=${id?.id}`, header)\r\n      .then((res) => {\r\n        console.log(res.data);\r\n        if (res?.status === 200) {\r\n          setPincode(res?.data?.Pincode);\r\n          setZoneName(res?.data?.Zone_Name);\r\n          setShowSave(true);\r\n        } else {\r\n          toast.error(res.message)\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n    setOpen(true);\r\n  }\r\n\r\n\r\n  // delete a zone \r\n  const deleteZoneById = async (id) => {\r\n    await axios.delete(`${BASE_URL}/Erpapp/ZoneDetailsCRUD/?id=${id}`, header)\r\n      .then((res) => {\r\n        console.log(res?.data);\r\n        if (res?.status === 200 && res?.data?.id) {\r\n          toast.success(\"Zone deleted successfully\");\r\n          getZoneDatas();\r\n        } else {\r\n          toast.error(res.message)\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n        toast.error(error.message);\r\n      });\r\n  }\r\n\r\n\r\n\r\n\r\n  return (\r\n    <>\r\n      <Div>\r\n        <Div\r\n          className=\"card\"\r\n          sx={{ p: 2, borderRadius: 0, m: 0 }}\r\n        >\r\n          <Div\r\n            sx={{\r\n              position: \"absolute\",\r\n              right: 15,\r\n              // width: \"100%\",\r\n              display: \"flex\",\r\n              justifyContent: \"flex-end\"\r\n            }}\r\n          >\r\n            {Array.isArray(userRolePermissions) && userRolePermissions.includes(201) && (\r\n              <ErpCreateButton handleClick={handleAddZones} name={\"Add Zone\"} />\r\n            )}\r\n          </Div>\r\n          <br />\r\n\r\n          <Div sx={{ mt: { lg: 3, md: 5, xs: 5 }, minHeight: \"300px\" }}>\r\n            <JumboScrollbar\r\n              autoHeight={true}\r\n              autoHideTimeout={4000}\r\n              autoHeightMin={scrollHeight ? scrollHeight : 300}\r\n              autoHide={true}\r\n              hideTracksWhenNotNeeded\r\n              id=\"no-more-tables\"\r\n            >\r\n              <Table stickyHeader className=\"table table-borderless\">\r\n                <TableHead className=\"table-head\">\r\n                  <TableRow>\r\n                    <TableCell></TableCell>\r\n                    <TableCell sx={{ fontWeight: 600 }}>Pincode</TableCell>\r\n                    <TableCell sx={{ fontWeight: 600 }}>Zone Name</TableCell>\r\n                    <TableCell sx={{ fontWeight: 600 }}>City Name</TableCell>\r\n                    <TableCell sx={{ fontWeight: 600 }}>Action</TableCell>\r\n                  </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                  {zones?.filter((opt) => opt?.Partner_Id === getId5).length > 0 ? zones?.filter((opt) => opt.Partner_Id === getId5).map((zone) => {\r\n                    return (\r\n                      <TableRow key={zone?.id}>\r\n                        <TableCell padding=\"checkbox\" data-title=\"Status\">\r\n                          <FormControlLabel\r\n                            control={\r\n                              <Radio\r\n                                color=\"primary\"\r\n                                size=\"small\"\r\n                                checked={getId6 === zone?.id}\r\n                                value={zone?.id}\r\n                                onChange={(e) => {\r\n                                  console.log(\"e.target.value\", e.target.value, getId6)\r\n                                  setCheckId7(e.target.value);\r\n                                  setGetId6(zone?.id);\r\n                                  setName6(zone?.Zone_Name);\r\n                                }}\r\n                              />\r\n                            }\r\n                          />\r\n                        </TableCell>\r\n                        <TableCell data-title=\"Pincode\">{zone?.Pincode}</TableCell>\r\n                        <TableCell data-title=\"Zone Name\">{zone?.Zone_Name}</TableCell>\r\n                        <TableCell data-title=\"City Name\">{name4}</TableCell>\r\n                        <TableCell data-title=\"Action\">\r\n                          <ErpActionButton userRolePermissions={userRolePermissions} editPermissionId={202} deletePermissionId={204} onClickEdit={() => editZoneById(zone)} onClickDelete={() => deleteZoneById(zone?.id)} align=\"left\" />\r\n                        </TableCell>\r\n                      </TableRow>\r\n                    );\r\n                  }) : (\r\n                    <TableRow>\r\n                      <TableCell colSpan={10} sx={{ textAlign: \"center\" }}>No Records</TableCell>\r\n                    </TableRow>\r\n                  )}\r\n                </TableBody>\r\n              </Table>\r\n            </JumboScrollbar>\r\n          </Div>\r\n        </Div>\r\n\r\n        {/* create a zone */}\r\n        <Dialog\r\n          open={open}\r\n          aria-labelledby=\"alert-dialog-title\"\r\n          aria-describedby=\"alert-dialog-description\"\r\n        >\r\n          <form onSubmit={handleCreateZone}>\r\n            <DialogContent>\r\n              <Grid container>\r\n                <Grid item xs={12}>\r\n                  <Typography className=\"col-12 input-label\">\r\n                    City Name <span className=\"required\">*</span>\r\n                  </Typography>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                  <FormControl className=\"col-12\">\r\n                    <Autocomplete\r\n                      className={`search-select col-12 ${errors.cityName ? \"is-invalid\" : \"\"\r\n                        }`}\r\n                      id=\"free-solo-demo\"\r\n                      name=\"cityName\"\r\n                      options={cities?.map((city) => city)}\r\n                      getOptionLabel={(option) => {\r\n                        if (typeof option === \"string\") {\r\n                          return option;\r\n                        }\r\n                        if (option && option?.City_Name) {\r\n                          return option?.City_Name;\r\n                        }\r\n                        return \"\";\r\n                      }}\r\n                      value={cityName?.City_Name}\r\n                      onChange={(e, newValue) => {\r\n                        setCityName(newValue);\r\n                        setCityId(newValue?.id);\r\n                      }}\r\n                      isOptionEqualToValue={(option, value) => option?.City_Name === value}\r\n                      sx={{\r\n                        minWidth: { xs: \"100%\" },\r\n                        maxWidth: \"1005px\",\r\n                      }}\r\n                      renderInput={(params) => (\r\n                        <TextField\r\n                          {...params}\r\n                          placeholder=\"City Name\"\r\n                          variant=\"outlined\"\r\n                          autoComplete=\"off\"\r\n                        />\r\n                      )}\r\n                    />\r\n                  </FormControl>\r\n                  <Div style={{ color: \"red\" }}>\r\n                    {errors.cityName}\r\n                  </Div>\r\n                </Grid>\r\n\r\n                <Grid item xs={12}>\r\n                  <Typography className=\"col-12 input-label\">\r\n                    Business Unit <span className=\"required\">*</span>\r\n                  </Typography>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                  <FormControl className=\"col-12\">\r\n                    <Autocomplete\r\n                      className=\"search-select col-12\"\r\n                      id=\"free-solo-demo\"\r\n                      name=\"businessUnit\"\r\n                      options={partners}\r\n                      getOptionLabel={(option) => {\r\n                        if (typeof option === \"string\") {\r\n                          return option;\r\n                        }\r\n                        if (option && option?.Partner_Name) {\r\n                          return option?.Partner_Name;\r\n                        }\r\n                        return \"\";\r\n                      }}\r\n                      value={businessUnit}\r\n                      onChange={(e, newValue) => {\r\n                        setBusinessUnit(newValue);\r\n                      }}\r\n                      isOptionEqualToValue={(option, value) => option?.Partner_Name === value}\r\n                      sx={{\r\n                        minWidth: { xs: \"100%\" },\r\n                        maxWidth: \"1005px\",\r\n                      }}\r\n                      renderInput={(params) => (\r\n                        <TextField\r\n                          {...params}\r\n                          placeholder=\"Business Unit\"\r\n                          variant=\"outlined\"\r\n                          autoComplete=\"off\"\r\n                        />\r\n                      )}\r\n                    />\r\n                  </FormControl>\r\n                </Grid>\r\n\r\n                <Grid item xs={12}>\r\n                  <Typography className=\"col-12 input-label\">\r\n                    Pincode <span className=\"required\">*</span>\r\n                  </Typography>\r\n                </Grid>\r\n                <Grid item xs={12} md={9}>\r\n                  <TextField\r\n                    className={`input-box col-10 ${errors.pincode ? \"is-invalid\" : \"\"\r\n                      }`}\r\n                    id=\"outlined-basic\"\r\n                    placeholder=\"Enter the pincode\"\r\n                    variant=\"outlined\"\r\n                    name=\"pincode\"\r\n                    value={pincode}\r\n                    onChange={(e) => {\r\n                      console.log(\"outlined\", e.target.value)\r\n                      setPincode(e.target.value);\r\n                    }}\r\n                    autoComplete=\"off\"\r\n                    sx={{\r\n                      minWidth: { xs: \"100%\" },\r\n                      maxWidth: \"1005px\",\r\n                    }}\r\n                  />\r\n                  <Div style={{ color: \"red\" }}>\r\n                    {errors.pincode}\r\n                  </Div>\r\n                </Grid>\r\n                <Grid\r\n                  item\r\n                  xs={12}\r\n                  md={2}\r\n                  sx={{ ml: { md: 4 }, mt: { xs: 2, md: 0 } }}\r\n                >\r\n                  <Button className=\"save-button\" onClick={handleCheckZone}>\r\n                    Check\r\n                  </Button>\r\n                </Grid>\r\n\r\n                <Grid item xs={12}>\r\n                  <Typography className=\"col-12 input-label\">\r\n                    Zone Name <span className=\"required\">*</span>\r\n                  </Typography>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                  {/* <TextField\r\n                      className={`input-box col-12 ${errors.zoneName ? \"is-invalid\" : \"\"\r\n                        }`}\r\n                      id=\"outlined-basic\"\r\n                      placeholder=\"Enter the zone name\"\r\n                      variant=\"outlined\"\r\n                      {...register(\"zoneName\")}\r\n                      name=\"zoneName\"\r\n                      value={zoneName}\r\n                      onChange={(e) => setZoneName(e.target.value)}\r\n                      autoComplete=\"off\"\r\n                      sx={{\r\n                        minWidth: { xs: \"100%\" },\r\n                        maxWidth: \"1005px\",\r\n                      }}\r\n                    /> */}\r\n                  <FormControl className=\"col-12\">\r\n                    <Autocomplete\r\n                      className={`search-select col-12 ${errors.zoneName ? \"is-invalid\" : \"\"\r\n                        }`}\r\n                      id=\"free-solo-demo\"\r\n                      name=\"zoneName\"\r\n                      options={zoneLists?.map((zone) => zone)}\r\n                      getOptionLabel={(option) => {\r\n                        if (typeof option === \"string\") {\r\n                          return option;\r\n                        }\r\n                        if (option && option?.Zonename) {\r\n                          return option?.Zonename;\r\n                        }\r\n                        return \"\";\r\n                      }}\r\n                      value={zoneName}\r\n                      onChange={(e, newValue) => {\r\n                        setZoneName(newValue?.Zonename);\r\n                      }}\r\n                      isOptionEqualToValue={(option, value) => option?.Zonename === value}\r\n                      sx={{\r\n                        minWidth: { xs: \"100%\" },\r\n                        maxWidth: \"1005px\",\r\n                      }}\r\n                      renderInput={(params) => (\r\n                        <TextField\r\n                          {...params}\r\n                          placeholder=\"Enter the zone name\"\r\n                          variant=\"outlined\"\r\n                          autoComplete=\"off\"\r\n                        />\r\n                      )}\r\n                    />\r\n                  </FormControl>\r\n                  <Div style={{ color: \"red\" }}>\r\n                    {errors.zoneName}\r\n                  </Div>\r\n                </Grid>\r\n              </Grid>\r\n            </DialogContent>\r\n            {/* code for save and cancel button */}\r\n            <Div className=\"buttons\" sx={{\r\n              mt: 5, mb: 3, display: \"flex\",\r\n              justifyContent: \"center\"\r\n            }}>\r\n              <ButtonGroup\r\n                aria-label=\"split button\"\r\n                type=\"submit\"\r\n                color=\"primary\"\r\n                // loading={isSubmitting}\r\n                disabled={showSave ? false : true}\r\n                sx={{\r\n                  mt: { xs: 0.5, lg: 0 },\r\n                  mr: { xs: 0, md: 1 },\r\n                }}\r\n              >\r\n                <Button type=\"submit\" className=\"plus-button\" sx={{ width: { md: \"99px !important\" } }}>\r\n                  {currentData?.id !== undefined ? \"Update\" : \"Save\"}\r\n                </Button>\r\n                <Button variant=\"contained\" className=\"icon-button\">\r\n                  <FaSave size={18} />\r\n                </Button>\r\n              </ButtonGroup>\r\n\r\n              <ButtonGroup\r\n                aria-label=\"split button\"\r\n                onClick={handleClose}\r\n                sx={{\r\n                  mt: { xs: 0.5, lg: 0 },\r\n                  mr: { xs: 0, md: 1 }\r\n                }}\r\n              >\r\n                <Button className=\"plus-button\" sx={{ width: { md: \"99px !important\" } }}>Cancel</Button>\r\n                <Button variant=\"contained\" className=\"icon-button\">\r\n                  <TiCancel size={20} />\r\n                </Button>\r\n              </ButtonGroup>\r\n            </Div>\r\n          </form>\r\n        </Dialog>\r\n      </Div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ZoneLists;","import Div from \"@jumbo/shared/Div\";\r\nimport {\r\n  Autocomplete,\r\n  Button,\r\n  ButtonGroup,\r\n  Dialog,\r\n  DialogActions,\r\n  DialogContent,\r\n  FormControl,\r\n  FormControlLabel,\r\n  Grid,\r\n  Radio,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TableRow,\r\n  TextField,\r\n  Typography,\r\n} from \"@mui/material\";\r\nimport axios from \"axios\";\r\nimport React, { useContext, useEffect, useState } from \"react\";\r\nimport { DataContext } from \"./OrganizationStructure\";\r\nimport { toast } from \"react-toastify\";\r\nimport { BASE_URL } from \"app/services/auth-services\";\r\nimport JumboScrollbar from \"@jumbo/components/JumboScrollbar\";\r\nimport { FaSave } from \"react-icons/fa\";\r\nimport { TiCancel } from \"react-icons/ti\";\r\nimport { handleError } from \"app/pages/auth-pages/login/AuthGuard\";\r\nimport { ErpActionButton, ErpCreateButton } from \"app/shared/ReuseComponents/ButtonComponent\";\r\n\r\n\r\n\r\nconst CityLists = (scrollHeight) => {\r\n  const {\r\n    entities,\r\n    countries,\r\n    regions,\r\n    states,\r\n    cities,\r\n    id,\r\n    id1,\r\n    id2,\r\n    id3,\r\n    name,\r\n    name1,\r\n    name2,\r\n    name3,\r\n    setName4,\r\n    checkId5,\r\n    setCheckId5,\r\n    getId,\r\n    getId1,\r\n    getId2,\r\n    getId3,\r\n    setGetId4,\r\n    getCityDatas,\r\n    getStates,\r\n    userRolePermissions,\r\n    currentData,\r\n    setCurrentData\r\n  } = useContext(DataContext);\r\n\r\n\r\n  const token = localStorage.getItem(\"accesstoken\");\r\n\r\n  const header = {\r\n    headers: {\r\n      Authorization: `Bearer ${token}`,\r\n      \"Content-Type\": \"application/json\",\r\n      Accept: \"application/json\",\r\n    },\r\n  };\r\n\r\n\r\n  const [open, setOpen] = React.useState(false);\r\n  const [entityName, setEntityName] = useState({\r\n    id: getId,\r\n    Entity_Name: name,\r\n  });\r\n  const [countryName, setCountryName] = useState({\r\n    id: getId1,\r\n    Country_Name: name1,\r\n  });\r\n  const [regionName, setRegionName] = useState({\r\n    id: getId2,\r\n    Region_Name: name2,\r\n  });\r\n  const [stateName, setStateName] = useState({\r\n    id: getId3,\r\n    State_Name: name3,\r\n  });\r\n  const [cityId, setCityId] = useState();\r\n  const [cityName, setCityName] = useState(\"\");\r\n  const [cityDescription, setCityDescription] = useState(\"\");\r\n  const [errors, setErrors] = useState({});\r\n\r\n  const [cityLists, setCityLists] = useState([]);\r\n\r\n  const handleAddCity = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n    setCityName(\"\");\r\n    setCityDescription(\"\");\r\n    setErrors({});\r\n  };\r\n\r\n  const getCityLists = () => {\r\n    var payload = {\r\n      country: countryName?.Country_Name,\r\n      state: stateName?.State_Name,\r\n    };\r\n\r\n    axios\r\n      .post(\r\n        `https://countriesnow.space/api/v0.1/countries/state/cities`,\r\n        payload,\r\n        {\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            Accept: \"application/json\",\r\n          },\r\n        }\r\n      )\r\n      .then((res) => {\r\n        console.log(res?.data);\r\n        var city = res?.data?.data;\r\n        var citynames = city?.map((cityname) => {\r\n          const normalizedCity = cityname.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\r\n          if (normalizedCity === \"Naini Tal\") {\r\n            return normalizedCity.replace(\" \", \"\");\r\n          }\r\n          return normalizedCity;\r\n        });\r\n        setCityLists(citynames);\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"ds\", error);\r\n      });\r\n  };\r\n\r\n\r\n  useEffect(() => {\r\n    const currentValue = cities?.filter((opt, index) => index + 1 === cities?.length)[0]?.City_Id\r\n    const numericPart = parseInt(currentValue, 10) + 1;\r\n    const paddedValue = numericPart.toString().padStart(currentValue?.length, '0');\r\n    console.log(\"data\", paddedValue)\r\n    setCityId(paddedValue);\r\n  }, [cityName]);\r\n\r\n\r\n  // Regular Expression\r\n  const validate = () => {\r\n    let error = {};\r\n\r\n    if (cityName === \"\" || cityName === null || cityName === undefined) {\r\n      error.cityName = \"City Name is required\"\r\n    }\r\n    if (cityDescription === \"\" || cityDescription === null || cityDescription === undefined) {\r\n      error.cityDescription = \"City Description is required\"\r\n    }\r\n\r\n    return error;\r\n  };\r\n\r\n  const handleCreateCity = (e) => {\r\n    e.preventDefault();\r\n    let validForm = validate();\r\n    setErrors(validForm);\r\n\r\n    if (Object.keys(validForm).length === 0) {\r\n      if (currentData?.id !== undefined) {\r\n        var citypayload = {\r\n          ...currentData,\r\n          Entity_Id: parseInt(entityName?.id),\r\n          Country_Id: parseInt(countryName?.id),\r\n          Region_Id: parseInt(regionName?.id),\r\n          State_Id: parseInt(stateName?.id),\r\n          City_Name: cityName,\r\n          City_Description: cityDescription,\r\n          // City_Type_Code: parseInt(`${id}${id1}${id2}${id3}${cityId}`),\r\n          City_Type_Code: parseInt(`${id}${id1}${id2}${id3}`),\r\n          Company_Id: parseInt(localStorage.getItem(\"OrganizationId\")),\r\n          Created_By: parseInt(localStorage.getItem(\"UserId\")),\r\n          Updated_By: parseInt(localStorage.getItem(\"UserId\")),\r\n        };\r\n        axios\r\n          .put(`${BASE_URL}/Erpapp/CityDetailsCRUD/`, citypayload, header)\r\n          .then((res) => {\r\n            console.log(res?.data);\r\n            if (res?.data?.id) {\r\n              toast.success(\"City updated successfully\");\r\n              setOpen(false);\r\n              getCityDatas();\r\n            } else {\r\n              toast.error(res.message);\r\n            }\r\n          })\r\n          .catch((error) => {\r\n            console.log(error);\r\n            handleError(error);\r\n            // toast.error(\"City name is already exists\");\r\n          });\r\n      } else {\r\n        var citypayload = {\r\n          Entity_Id: parseInt(entityName?.id),\r\n          Country_Id: parseInt(countryName?.id),\r\n          Region_Id: parseInt(regionName?.id),\r\n          State_Id: parseInt(stateName?.id),\r\n          City_Name: cityName,\r\n          City_Description: cityDescription,\r\n          // City_Type_Code: parseInt(`${id}${id1}${id2}${id3}${cityId}`),\r\n          City_Type_Code: parseInt(`${id}${id1}${id2}${id3}`),\r\n          Company_Id: parseInt(localStorage.getItem(\"OrganizationId\")),\r\n          Created_By: parseInt(localStorage.getItem(\"UserId\")),\r\n          Updated_By: parseInt(localStorage.getItem(\"UserId\")),\r\n        };\r\n        axios\r\n          .post(`${BASE_URL}/Erpapp/CityDetailsCRUD/`, citypayload, header)\r\n          .then((res) => {\r\n            console.log(res?.data);\r\n            if (res?.status === 201 && res?.data?.id) {\r\n              toast.success(\"City created successfully\");\r\n              setOpen(false);\r\n              getCityDatas();\r\n              setCityName(\"\");\r\n              setCityDescription(\"\");\r\n              setErrors({});\r\n            } else {\r\n              toast.error(res.message);\r\n            }\r\n          })\r\n          .catch((error) => {\r\n            console.log(error);\r\n            handleError(error);\r\n            // toast.error(\"City name is already exists\");\r\n          });\r\n      }\r\n    }\r\n  };\r\n\r\n\r\n  // edit a city\r\n  const editCityById = async (id) => {\r\n    setCurrentData(id);\r\n    setOpen(true);\r\n\r\n    await axios.get(`${BASE_URL}/Erpapp/CityDetailsCRUD/?id=${id?.id}`, header)\r\n      .then((res) => {\r\n        console.log(res?.data);\r\n        if (res?.status === 200) {\r\n          setCityName(res?.data?.City_Name);\r\n          setCityDescription(res?.data?.City_Description);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  }\r\n\r\n\r\n\r\n  // delete a city \r\n  const deleteCityById = async (id) => {\r\n    await axios.delete(`${BASE_URL}/Erpapp/CityDetailsCRUD/?id=${id}`, header)\r\n      .then((res) => {\r\n        console.log(res?.data);\r\n        if (res?.status === 200 && res?.data?.id) {\r\n          toast.success(\"City deleted successfully\");\r\n          getCityDatas();\r\n        } else {\r\n          toast.error(res.message)\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n        toast.error(error.message);\r\n      });\r\n  }\r\n\r\n\r\n  return (\r\n    <>\r\n      <Div\r\n        className=\"card\"\r\n        sx={{ p: 2, borderRadius: 0, m: 0 }}\r\n      >\r\n        <Div\r\n          sx={{\r\n            position: \"absolute\",\r\n            right: 15,\r\n            // width: \"100%\",\r\n            display: \"flex\",\r\n            justifyContent: \"flex-end\"\r\n          }}\r\n        >\r\n          {Array.isArray(userRolePermissions) && userRolePermissions.includes(69) && (\r\n            <ErpCreateButton handleClick={handleAddCity} name={\"Add City\"} />\r\n          )}\r\n        </Div>\r\n        <br />\r\n\r\n        <Div sx={{ mt: { lg: 3, md: 5, xs: 5 }, minHeight: \"300px\" }}>\r\n          <JumboScrollbar\r\n            autoHeight={true}\r\n            autoHideTimeout={4000}\r\n            autoHeightMin={scrollHeight ? scrollHeight : 300}\r\n            autoHide={true}\r\n            hideTracksWhenNotNeeded\r\n            id=\"no-more-tables\"\r\n          >\r\n            <Table stickyHeader className=\"table table-borderless\">\r\n              <TableHead className=\"table-head\">\r\n                <TableRow>\r\n                  <TableCell></TableCell>\r\n                  <TableCell sx={{ fontWeight: 600 }}>Code</TableCell>\r\n                  <TableCell sx={{ fontWeight: 600 }}>Name</TableCell>\r\n                  <TableCell sx={{ fontWeight: 600 }}>Description</TableCell>\r\n                  <TableCell sx={{ fontWeight: 600 }}>Action</TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {cities?.map((city) => {\r\n                  return (\r\n                    <TableRow>\r\n                      <TableCell padding=\"checkbox\" data-title=\"Status\">\r\n                        <FormControlLabel\r\n                          control={\r\n                            <Radio\r\n                              color=\"primary\"\r\n                              size=\"small\"\r\n                              checked={checkId5 === city?.City_Id}\r\n                              value={city?.City_Id}\r\n                              onChange={(e) => {\r\n                                setCheckId5(e.target.value);\r\n                                setGetId4(city?.id);\r\n                                setName4(city?.City_Name);\r\n                              }}\r\n                            />\r\n                          }\r\n                        />\r\n                      </TableCell>\r\n                      <TableCell data-title=\"Code\">\r\n                        {id}\r\n                        {id1}\r\n                        {id2}\r\n                        {id3}\r\n                        {city?.City_Id}\r\n                      </TableCell>\r\n                      <TableCell data-title=\"Name\">{city?.City_Name}</TableCell>\r\n                      <TableCell data-title=\"Description\">{city?.City_Description}</TableCell>\r\n                      <TableCell data-title=\"Action\">\r\n                        <ErpActionButton userRolePermissions={userRolePermissions} editPermissionId={70} deletePermissionId={72} onClickEdit={() => editCityById(city)} onClickDelete={() => deleteCityById(city?.id)} align=\"left\" />\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  );\r\n                })}\r\n              </TableBody>\r\n            </Table>\r\n          </JumboScrollbar>\r\n        </Div>\r\n\r\n      </Div>\r\n\r\n      <Dialog\r\n        open={open}\r\n        aria-labelledby=\"alert-dialog-title\"\r\n        aria-describedby=\"alert-dialog-description\"\r\n      >\r\n        <form onSubmit={handleCreateCity}>\r\n          <DialogContent>\r\n            <Grid container>\r\n              <Grid item xs={12} sx={{ ml: { sm: 0, md: 1.5 } }}>\r\n                <Typography className=\"col-12 input-label\">\r\n                  Entity Name <span className=\"required\">*</span>\r\n                </Typography>\r\n              </Grid>\r\n              <Grid item xs={12} sx={{ ml: { sm: 0, md: 1.5 } }}>\r\n                <Autocomplete\r\n                  // freeSolo\r\n                  className={`search-select col-12 ${errors.entityName ? \"is-invalid\" : \"\"\r\n                    }`}\r\n                  id=\"free-solo-demo\"\r\n                  placeholder=\"Entity Name\"\r\n                  variant=\"outlined\"\r\n                  options={entities}\r\n                  getOptionLabel={(option) => option?.Entity_Name}\r\n                  value={entities?.find(\r\n                    (option) =>\r\n                      option?.Entity_Name === entityName?.Entity_Name\r\n                  )}\r\n                  onChange={(e, newValue) => setEntityName(newValue)}\r\n                  sx={{\r\n                    minWidth: { xs: \"100%\" },\r\n                    maxWidth: \"1005px\",\r\n                  }}\r\n                  renderInput={(params) => (\r\n                    <TextField\r\n                      {...params}\r\n                      placeholder=\"Entity Name\"\r\n                      variant=\"outlined\"\r\n                      autoComplete=\"off\"\r\n                    />\r\n                  )}\r\n                />\r\n                <Div style={{ color: \"red\" }}>\r\n                  {errors.entityName}\r\n                </Div>\r\n              </Grid>\r\n\r\n              <Grid item xs={12} sx={{ ml: { sm: 0, md: 1.5 } }}>\r\n                <Typography className=\"col-12 input-label\">\r\n                  Country Name <span className=\"required\">*</span>\r\n                </Typography>\r\n              </Grid>\r\n              <Grid item xs={12} sx={{ ml: { sm: 0, md: 1.5 } }}>\r\n                <Autocomplete\r\n                  // freeSolo\r\n                  className={`search-select col-12 ${errors.countryName ? \"is-invalid\" : \"\"\r\n                    }`}\r\n                  id=\"free-solo-demo\"\r\n                  placeholder=\"Country Name\"\r\n                  variant=\"outlined\"\r\n                  options={countries}\r\n                  getOptionLabel={(option) => option?.Country_Name}\r\n                  value={countries?.find(\r\n                    (option) =>\r\n                      option?.Country_Name === countryName?.Country_Name\r\n                  )}\r\n                  onChange={(e, newValue) => {\r\n                    setCountryName(newValue);\r\n                  }}\r\n                  onFocus={() => getStates()}\r\n                  sx={{\r\n                    minWidth: { xs: \"100%\" },\r\n                    maxWidth: \"1005px\",\r\n                    fontSize: \"14px\",\r\n                  }}\r\n                  renderInput={(params) => (\r\n                    <TextField\r\n                      {...params}\r\n                      placeholder=\"Country Name\"\r\n                      variant=\"outlined\"\r\n                      autoComplete=\"off\"\r\n                    />\r\n                  )}\r\n                />\r\n                <Div style={{ color: \"red\" }}>\r\n                  {errors.countryName}\r\n                </Div>\r\n              </Grid>\r\n\r\n              <Grid item xs={12} sx={{ ml: { sm: 0, md: 1.5 } }}>\r\n                <Typography className=\"col-12 input-label\">\r\n                  Region Name <span className=\"required\">*</span>\r\n                </Typography>\r\n              </Grid>\r\n              <Grid item xs={12} sx={{ ml: { sm: 0, md: 1.5 } }}>\r\n                <Autocomplete\r\n                  // freeSolo\r\n                  className={`search-select col-12 ${errors.regionName ? \"is-invalid\" : \"\"\r\n                    }`}\r\n                  id=\"free-solo-demo\"\r\n                  placeholder=\"Region Name\"\r\n                  options={regions?.map((region) => region)}\r\n                  getOptionLabel={(option) => option?.Region_Name}\r\n                  value={regions?.find(\r\n                    (option) =>\r\n                      option?.Region_Name === regionName?.Region_Name\r\n                  )}\r\n                  onChange={(e, newValue) => {\r\n                    setRegionName(newValue);\r\n                  }}\r\n                  autoComplete=\"off\"\r\n                  sx={{\r\n                    minWidth: { xs: \"100%\" },\r\n                    maxWidth: \"1005px\",\r\n                  }}\r\n                  renderInput={(params) => (\r\n                    <TextField\r\n                      {...params}\r\n                      placeholder=\"Region Name\"\r\n                      variant=\"outlined\"\r\n                      autoComplete=\"off\"\r\n                    />\r\n                  )}\r\n                />\r\n                <Div style={{ color: \"red\" }}>\r\n                  {errors.regionName?.message}\r\n                </Div>\r\n              </Grid>\r\n\r\n              <Grid item xs={12} sx={{ ml: { sm: 0, md: 1.5 } }}>\r\n                <Typography className=\"col-12 input-label\">\r\n                  State Name <span className=\"required\">*</span>\r\n                </Typography>\r\n              </Grid>\r\n              <Grid item xs={12} sx={{ ml: { sm: 0, md: 1.5 } }}>\r\n                <Autocomplete\r\n                  // freeSolo\r\n                  className={`search-select col-12 ${errors.stateName ? \"is-invalid\" : \"\"\r\n                    }`}\r\n                  id=\"free-solo-demo\"\r\n                  placeholder=\"State Name\"\r\n                  options={states?.map((state) => state)}\r\n                  getOptionLabel={(option) => option?.State_Name}\r\n                  value={states?.find(\r\n                    (option) => option?.State_Name === stateName?.State_Name\r\n                  )}\r\n                  onChange={(e, newValue) => {\r\n                    setStateName(newValue);\r\n                  }}\r\n                  onInputChange={() => getCityLists()}\r\n                  sx={{\r\n                    minWidth: { xs: \"100%\" },\r\n                    maxWidth: \"1005px\",\r\n                  }}\r\n                  renderInput={(params) => (\r\n                    <TextField\r\n                      {...params}\r\n                      placeholder=\"State Name\"\r\n                      variant=\"outlined\"\r\n                      autoComplete=\"off\"\r\n                    />\r\n                  )}\r\n                />\r\n                <Div style={{ color: \"red\" }}>\r\n                  {errors.stateName}\r\n                </Div>\r\n              </Grid>\r\n              <Grid item xs={12} sx={{ ml: { sm: 0, md: 1.5 } }}>\r\n                <Typography className=\"col-12 input-label\">\r\n                  City Name <span className=\"required\">*</span>\r\n                </Typography>\r\n              </Grid>\r\n              <Grid item xs={12} sx={{ ml: { sm: 0, md: 1.5 } }}>\r\n                <FormControl className=\"col-12\">\r\n                  <Autocomplete\r\n                    // freeSolo\r\n                    id=\"free-solo-demo\"\r\n                    className={`search-select col-12 ${errors.cityName ? \"is-invalid\" : \"\"\r\n                      }`}\r\n                    type=\"search\"\r\n                    placeholder=\"Select City \"\r\n                    options={cityLists?.map((city) => city)}\r\n                    getOptionLabel={(option) => option}\r\n                    value={cityName}\r\n                    onChange={(e, newValue) => {\r\n                      setCityName(newValue);\r\n                    }}\r\n                    onFocus={() => getCityLists()}\r\n                    autoComplete=\"off\"\r\n                    renderInput={(params) => (\r\n                      <TextField\r\n                        {...params}\r\n                        placeholder=\"City Name\"\r\n                        variant=\"outlined\"\r\n                        autoComplete=\"off\"\r\n                      />\r\n                    )}\r\n                    sx={{\r\n                      height: \"38px\",\r\n                      lineHeight: 1,\r\n                      borderRadius: \"3px\",\r\n                      fontSize: \"14px\",\r\n                    }}\r\n                  />\r\n                </FormControl>\r\n                <Div style={{ color: \"red\" }}>\r\n                  {errors.cityName}\r\n                </Div>\r\n              </Grid>\r\n\r\n              <Grid item xs={12} sx={{ ml: { sm: 0, md: 1.5 } }}>\r\n                <Typography className=\"col-12 input-label\">\r\n                  Description\r\n                </Typography>\r\n              </Grid>\r\n              <Grid item xs={12} sx={{ ml: { sm: 0, md: 1.5 } }}>\r\n                <TextField\r\n                  className={`multiline-box col-12 ${errors.cityDescription ? \"is-invalid\" : \"\"\r\n                    }`}\r\n                  id=\"outlined-basic\"\r\n                  placeholder=\"Description\"\r\n                  multiline\r\n                  rows={3}\r\n                  variant=\"outlined\"\r\n                  autoComplete=\"off\"\r\n                  value={cityDescription}\r\n                  onChange={(e) => setCityDescription(e.target.value)}\r\n                  sx={{\r\n                    minWidth: { xs: \"100%\" },\r\n                    maxWidth: \"1005px\",\r\n                  }}\r\n                />\r\n                <Div style={{ color: \"red\" }}>\r\n                  {errors.cityDescription}\r\n                </Div>\r\n              </Grid>\r\n            </Grid>\r\n          </DialogContent>\r\n\r\n          {/* code for save and cancel button */}\r\n          <DialogActions>\r\n            <Div className=\"buttons\" sx={{\r\n              mt: 5, mb: 3, display: \"flex\",\r\n              justifyContent: \"center\"\r\n            }}>\r\n              <ButtonGroup\r\n                aria-label=\"split button\"\r\n                type=\"submit\"\r\n                // loading={isSubmitting}\r\n                sx={{\r\n                  mt: { xs: 0.5, lg: 0 },\r\n                  mr: { xs: 0, md: 1 }\r\n                }}\r\n              >\r\n                <Button type=\"submit\" className=\"plus-button\" sx={{ width: { md: \"99px !important\" } }}>\r\n                  {currentData?.id !== undefined ? \"Update\" : \"Save\"}\r\n                </Button>\r\n                <Button variant=\"contained\" className=\"icon-button\">\r\n                  <FaSave size={18} />\r\n                </Button>\r\n              </ButtonGroup>\r\n\r\n              <ButtonGroup\r\n                aria-label=\"split button\"\r\n                onClick={handleClose}\r\n                sx={{\r\n                  mt: { xs: 0.5, lg: 0 },\r\n                  mr: { xs: 0, md: 1 }\r\n                }}\r\n              >\r\n                <Button className=\"plus-button\" sx={{ width: { md: \"99px !important\" } }}>Cancel</Button>\r\n                <Button variant=\"contained\" className=\"icon-button\">\r\n                  <TiCancel size={20} />\r\n                </Button>\r\n              </ButtonGroup>\r\n            </Div>\r\n          </DialogActions>\r\n        </form>\r\n      </Dialog>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CityLists;","import Div from \"@jumbo/shared/Div\";\r\nimport {\r\n  Button,\r\n  Dialog,\r\n  DialogContent,\r\n  FormControlLabel,\r\n  Grid,\r\n  Radio,\r\n  Table,\r\n  TextField,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TableRow,\r\n  Typography,\r\n  Autocomplete,\r\n  ButtonGroup,\r\n} from \"@mui/material\";\r\nimport { BASE_URL } from \"app/services/auth-services\";\r\nimport axios from \"axios\";\r\nimport React, { useContext, useEffect, useState } from \"react\";\r\nimport { DataContext } from \"./OrganizationStructure\";\r\nimport { toast } from \"react-toastify\";\r\nimport JumboScrollbar from \"@jumbo/components/JumboScrollbar\";\r\nimport { FaSave } from \"react-icons/fa\";\r\nimport { TiCancel } from \"react-icons/ti\";\r\nimport { handleError } from \"app/pages/auth-pages/login/AuthGuard\";\r\nimport { ErpActionButton, ErpCreateButton } from \"app/shared/ReuseComponents/ButtonComponent\";\r\n\r\nconst StateLists = (scrollHeight) => {\r\n  const {\r\n    entities,\r\n    countries,\r\n    regions,\r\n    states,\r\n    id,\r\n    id1,\r\n    id2,\r\n    name,\r\n    name1,\r\n    name2,\r\n    name3,\r\n    name4,\r\n    setName,\r\n    setName1,\r\n    setName2,\r\n    setName3,\r\n    setName4,\r\n    checkId1,\r\n    checkId2,\r\n    checkId3,\r\n    checkId4,\r\n    checkId5,\r\n    setCheckId1,\r\n    setCheckId2,\r\n    setCheckId3,\r\n    setCheckId4,\r\n    setCheckId5,\r\n    zones,\r\n    getId,\r\n    getId1,\r\n    getId2,\r\n    getId3,\r\n    setGetId3,\r\n    getId4,\r\n    setGetId4,\r\n    getCityDatas,\r\n    getStateDatas,\r\n    getStates,\r\n    userRolePermissions,\r\n    currentData,\r\n    setCurrentData\r\n  } = useContext(DataContext);\r\n\r\n\r\n  const token = localStorage.getItem(\"accesstoken\");\r\n  const header = {\r\n    headers: {\r\n      Authorization: `Bearer ${token}`,\r\n      \"Content-Type\": \"application/json\",\r\n      Accept: \"application/json\",\r\n    },\r\n  };\r\n\r\n  const [open, setOpen] = useState(false);\r\n  const [stateLists, setStateLists] = useState([]);\r\n  const [entityName, setEntityName] = useState({\r\n    id: getId,\r\n    Entity_Name: name,\r\n  });\r\n  const [countryName, setCountryName] = useState({\r\n    id: getId1,\r\n    Country_Name: name1,\r\n  });\r\n  const [regionName, setRegionName] = useState({\r\n    id: getId2,\r\n    Region_Name: name2,\r\n  });\r\n  const [stateId, setStateId] = useState();\r\n  const [stateName, setStateName] = useState(\"\");\r\n  const [stateDescription, setStateDescription] = useState(\"\");\r\n  const [errors, setErrors] = useState({});\r\n\r\n  const handleAddState = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n    setStateName(\"\");\r\n    setStateDescription(\"\");\r\n    setErrors({})\r\n  };\r\n\r\n\r\n  const getStateLists = () => {\r\n    axios\r\n      .post(\r\n        `https://countriesnow.space/api/v0.1/countries/states`,\r\n        { country: countryName?.Country_Name },\r\n        {\r\n          headers: {\r\n            //   Authorization: `Bearer ${token}`,\r\n            \"Content-Type\": \"application/json\",\r\n            Accept: \"application/json\",\r\n          },\r\n        }\r\n      )\r\n      .then((res) => {\r\n        console.log(res?.data?.data);\r\n        var state = res?.data?.data;\r\n        setStateLists(state?.states);\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"ds\", error);\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    getStateDatas();\r\n    getStateLists();\r\n  }, []);\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    const nextState = states?.filter((opt, index) => index + 1 === states?.length);\r\n    if (nextState) {\r\n      const nextStateId = nextState[0]?.State_Id;\r\n      const numericPart = parseInt(nextStateId, 10) + 1;\r\n      const paddedValue = numericPart.toString().padStart(nextStateId?.length, '0');\r\n      console.log(\"nextState\", states, nextState, numericPart, paddedValue)\r\n      setStateId(paddedValue);\r\n    }\r\n  }, [stateName]);\r\n\r\n\r\n\r\n  // Regular Expression\r\n  const validate = () => {\r\n    let error = {};\r\n\r\n    if (stateName === \"\" || stateName === null || stateName === undefined) {\r\n      error.stateName = \"State Name is required\"\r\n    }\r\n    if (stateDescription === \"\" || stateDescription === null || stateDescription === undefined) {\r\n      error.stateDescription = \"State Description is required\"\r\n    }\r\n\r\n    return error;\r\n  };\r\n\r\n\r\n\r\n  const handleCreateState = (e) => {\r\n    e.preventDefault();\r\n    let validForm = validate();\r\n    setErrors(validForm);\r\n\r\n    if (Object.keys(validForm).length === 0) {\r\n      if (currentData?.id !== undefined) {\r\n        var statepayload = {\r\n          ...currentData,\r\n          Entity_Id: parseInt(entityName?.id),\r\n          Country_Id: parseInt(countryName?.id),\r\n          Region_Id: parseInt(regionName?.id),\r\n          State_Name: stateName,\r\n          State_Description: stateDescription,\r\n          State_Type_Code: parseInt(`${id}${id1}${id2}${stateId}`),\r\n          Company_Id: parseInt(localStorage.getItem(\"OrganizationId\")),\r\n          Created_By: parseInt(localStorage.getItem(\"UserId\")),\r\n          Updated_By: parseInt(localStorage.getItem(\"UserId\")),\r\n        };\r\n        axios\r\n          .put(`${BASE_URL}/Erpapp/StateDetailsCRUD/`, statepayload, header)\r\n          .then((res) => {\r\n            console.log(res?.data);\r\n            if (res?.data?.id) {\r\n              toast.success(\"State updated successfully\");\r\n              setOpen(false);\r\n              getStateDatas();\r\n            } else {\r\n              toast.error(res.message)\r\n            }\r\n          })\r\n          .catch((error) => {\r\n            console.log(error);\r\n            handleError(error);\r\n            // toast.error(\"State name is already exists\");\r\n          });\r\n      } else {\r\n        var statepayload = {\r\n          Entity_Id: parseInt(entityName?.id),\r\n          Country_Id: parseInt(countryName?.id),\r\n          Region_Id: parseInt(regionName?.id),\r\n          State_Name: stateName,\r\n          State_Description: stateDescription,\r\n          State_Type_Code: parseInt(`${id}${id1}${id2}${stateId}`),\r\n          Company_Id: parseInt(localStorage.getItem(\"OrganizationId\")),\r\n          Created_By: parseInt(localStorage.getItem(\"UserId\")),\r\n          Updated_By: parseInt(localStorage.getItem(\"UserId\")),\r\n        };\r\n        axios\r\n          .post(`${BASE_URL}/Erpapp/StateDetailsCRUD/`, statepayload, header)\r\n          .then((res) => {\r\n            console.log(res.data);\r\n            if (res?.status === 201 && res?.data?.id) {\r\n              toast.success(\"State created successfully\");\r\n              setOpen(false);\r\n              getStateDatas();\r\n              setStateName(\"\");\r\n              setStateDescription(\"\");\r\n            } else {\r\n              toast.error(res.message)\r\n            }\r\n          })\r\n          .catch((error) => {\r\n            console.log(error);\r\n            handleError(error);\r\n            // toast.error(\"State name is already exists\");\r\n          });\r\n      }\r\n    }\r\n  };\r\n\r\n\r\n  // edit a state\r\n  const editStateById = async (id) => {\r\n    setCurrentData(id);\r\n    setOpen(true);\r\n\r\n    await axios.get(`${BASE_URL}/Erpapp/StateDetailsCRUD/?id=${id?.id}`, header)\r\n      .then((res) => {\r\n        console.log(res?.data);\r\n        if (res?.status === 200) {\r\n          setStateName(res?.data?.State_Name);\r\n          setStateDescription(res?.data?.State_Description);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  }\r\n\r\n  // delete a state \r\n  const deleteStateById = async (id) => {\r\n    await axios.delete(`${BASE_URL}/Erpapp/StateDetailsCRUD/?id=${id}`, header)\r\n      .then((res) => {\r\n        console.log(res?.data);\r\n        if (res?.status === 200 && res?.data?.id) {\r\n          toast.success(\"State deleted successfully\");\r\n          getStateDatas();\r\n        } else {\r\n          toast.error(res.message)\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n        toast.error(error.message);\r\n      });\r\n  }\r\n\r\n\r\n\r\n  return (\r\n    <>\r\n      <Div\r\n        className=\"card\"\r\n        sx={{ p: 2, minHeight: \"390px\", borderRadius: 0, m: 0 }}\r\n      >\r\n        <Div\r\n          sx={{\r\n            position: \"absolute\",\r\n            right: 15,\r\n            // width: \"100%\",\r\n            display: \"flex\",\r\n            justifyContent: \"flex-end\"\r\n          }}\r\n        >\r\n          {Array.isArray(userRolePermissions) && userRolePermissions.includes(313) && (\r\n            <ErpCreateButton handleClick={handleAddState} name={\"Add State\"} />\r\n          )}\r\n        </Div>\r\n        <br />\r\n\r\n        <Div sx={{ mt: { lg: 3, md: 5, xs: 5 } }}>\r\n          <JumboScrollbar\r\n            autoHeight={true}\r\n            autoHideTimeout={4000}\r\n            autoHeightMin={scrollHeight ? scrollHeight : 300}\r\n            autoHide={true}\r\n            hideTracksWhenNotNeeded\r\n            id=\"no-more-tables\"\r\n          >\r\n            <Table stickyHeader className=\"table table-borderless\">\r\n              <TableHead className=\"table-head\">\r\n                <TableRow>\r\n                  <TableCell></TableCell>\r\n                  <TableCell sx={{ fontWeight: 600 }}>Code</TableCell>\r\n                  <TableCell sx={{ fontWeight: 600 }}>Name</TableCell>\r\n                  <TableCell sx={{ fontWeight: 600 }}>Description</TableCell>\r\n                  <TableCell sx={{ fontWeight: 600 }}>Action</TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {states?.map((state) => {\r\n                  return (\r\n                    <TableRow>\r\n                      <TableCell padding=\"checkbox\" data-title=\"Status\">\r\n                        <FormControlLabel\r\n                          control={\r\n                            <Radio\r\n                              color=\"primary\"\r\n                              size=\"small\"\r\n                              checked={checkId4 === state?.State_Id}\r\n                              value={state?.State_Id}\r\n                              onChange={(e) => {\r\n                                setCheckId4(\r\n                                  e.target.value,\r\n                                );\r\n                                setGetId3(state?.id);\r\n                                setName3(state?.State_Name);\r\n                              }}\r\n                            />\r\n                          }\r\n                        />\r\n                      </TableCell>\r\n                      <TableCell data-title=\"Code\">\r\n                        {id}\r\n                        {id1}\r\n                        {id2}\r\n                        {state?.State_Id}\r\n                      </TableCell>\r\n                      <TableCell data-title=\"Name\">{state?.State_Name}</TableCell>\r\n                      <TableCell data-title=\"Description\">{state?.State_Description}</TableCell>\r\n                      <TableCell data-title=\"Action\">\r\n                        <ErpActionButton userRolePermissions={userRolePermissions} editPermissionId={314} deletePermissionId={316} onClickEdit={() => editStateById(state)} onClickDelete={() => deleteStateById(state?.id)} align=\"left\" />\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  );\r\n                })}\r\n              </TableBody>\r\n            </Table>\r\n          </JumboScrollbar>\r\n        </Div>\r\n      </Div>\r\n\r\n      {/* dialog box */}\r\n      <Dialog\r\n        open={open}\r\n        // onClose={handleClose}\r\n        aria-labelledby=\"alert-dialog-title\"\r\n        aria-describedby=\"alert-dialog-description\"\r\n      >\r\n        <form onSubmit={handleCreateState}>\r\n          <div>\r\n            <DialogContent>\r\n              <Grid container>\r\n                <Grid item xs={12} sx={{ ml: { sm: 0, md: 1.5 } }}>\r\n                  <Typography className=\"col-12 input-label\">\r\n                    Entity Name <span className=\"required\">*</span>\r\n                  </Typography>\r\n                </Grid>\r\n                <Grid item xs={12} sx={{ ml: { sm: 0, md: 1.5 } }}>\r\n                  <Autocomplete\r\n                    // freeSolo\r\n                    className={`search-select col-12 ${errors.entityName ? \"is-invalid\" : \"\"\r\n                      }`}\r\n                    id=\"free-solo-demo\"\r\n                    placeholder=\"Entity Name\"\r\n                    variant=\"outlined\"\r\n                    options={entities}\r\n                    getOptionLabel={(option) => {\r\n                      if (typeof option === \"string\") {\r\n                        return option;\r\n                      }\r\n                      if (option && option?.Entity_Name) {\r\n                        return option?.Entity_Name;\r\n                      }\r\n                      // else{\r\n                      //   return option.Entity_Name === null;\r\n                      // }\r\n                      return \"\";\r\n                    }}\r\n                    value={entities?.find((option) => {\r\n                      if (option && option?.Entity_Name) {\r\n                        return entityName?.Entity_Name;\r\n                      } else {\r\n                        return null;\r\n                      }\r\n                    })}\r\n                    onChange={(e, newValue) => setEntityName(newValue)}\r\n                    isOptionEqualToValue={(option, value) =>\r\n                      option?.Entity_Name === value\r\n                    }\r\n                    sx={{\r\n                      minWidth: { xs: \"100%\" },\r\n                      maxWidth: \"1005px\",\r\n                    }}\r\n                    renderInput={(params) => (\r\n                      <TextField\r\n                        {...params}\r\n                        placeholder=\"Entity Name\"\r\n                        variant=\"outlined\"\r\n                        autoComplete=\"off\"\r\n                      />\r\n                    )}\r\n                  />\r\n                  <Div style={{ color: \"red\" }}>\r\n                    {errors.entityName?.message}\r\n                  </Div>\r\n                </Grid>\r\n\r\n                <Grid item xs={12} sx={{ ml: { sm: 0, md: 1.5 } }}>\r\n                  <Typography className=\"col-12 input-label\">\r\n                    Country Name <span className=\"required\">*</span>\r\n                  </Typography>\r\n                </Grid>\r\n                <Grid item xs={12} sx={{ ml: { sm: 0, md: 1.5 } }}>\r\n                  <Autocomplete\r\n                    className={`search-select col-12 ${errors.countryName ? \"is-invalid\" : \"\"\r\n                      }`}\r\n                    id=\"free-solo-demo\"\r\n                    placeholder=\"Country Name\"\r\n                    variant=\"outlined\"\r\n                    options={countries}\r\n                    getOptionLabel={(option) => {\r\n                      if (typeof option === \"string\") {\r\n                        return option;\r\n                      }\r\n                      if (option && option?.Country_Name) {\r\n                        return option?.Country_Name;\r\n                      }\r\n                      return \"\";\r\n                    }}\r\n                    value={countries?.find(\r\n                      (option) =>\r\n                        option?.Country_Name === countryName?.Country_Name\r\n                    )}\r\n                    onChange={(e, newValue) => {\r\n                      setCountryName(newValue);\r\n                    }}\r\n                    onFocus={() => getStateLists()}\r\n                    isOptionEqualToValue={(option, value) =>\r\n                      option?.Country_Name === value\r\n                    }\r\n                    sx={{\r\n                      minWidth: { xs: \"100%\" },\r\n                      maxWidth: \"1005px\",\r\n                      fontSize: \"14px\",\r\n                    }}\r\n                    renderInput={(params) => (\r\n                      <TextField\r\n                        {...params}\r\n                        placeholder=\"Country Name\"\r\n                        variant=\"outlined\"\r\n                        autoComplete=\"off\"\r\n                      />\r\n                    )}\r\n                  />\r\n                  <Div style={{ color: \"red\" }}>\r\n                    {errors.countryName?.message}\r\n                  </Div>\r\n                </Grid>\r\n\r\n                <Grid item xs={12} sx={{ ml: { sm: 0, md: 1.5 } }}>\r\n                  <Typography className=\"col-12 input-label\">\r\n                    Region Name <span className=\"required\">*</span>\r\n                  </Typography>\r\n                </Grid>\r\n                <Grid item xs={12} sx={{ ml: { sm: 0, md: 1.5 } }}>\r\n                  <Autocomplete\r\n                    // freeSolo\r\n                    className={`search-select col-12 ${errors.regionName ? \"is-invalid\" : \"\"\r\n                      }`}\r\n                    id=\"free-solo-demo\"\r\n                    placeholder=\"Region Name\"\r\n                    options={regions?.map((region) => region)}\r\n                    getOptionLabel={(option) => {\r\n                      if (typeof option === \"string\") {\r\n                        return option;\r\n                      }\r\n                      if (option && option?.Region_Name) {\r\n                        return option?.Region_Name;\r\n                      }\r\n                      return \"\";\r\n                    }}\r\n                    value={regions?.find(\r\n                      (option) =>\r\n                        option?.Region_Name === regionName?.Region_Name\r\n                    )}\r\n                    onChange={(e, newValue) => {\r\n                      setRegionName(newValue);\r\n                    }}\r\n                    autoComplete=\"off\"\r\n                    isOptionEqualToValue={(option, value) =>\r\n                      option?.Region_Name === value\r\n                    }\r\n                    sx={{\r\n                      minWidth: { xs: \"100%\" },\r\n                      maxWidth: \"1005px\",\r\n                    }}\r\n                    renderInput={(params) => (\r\n                      <TextField\r\n                        {...params}\r\n                        placeholder=\"Region Name\"\r\n                        variant=\"outlined\"\r\n                        autoComplete=\"off\"\r\n                      />\r\n                    )}\r\n                  />\r\n                  <Div style={{ color: \"red\" }}>\r\n                    {errors.regionName?.message}\r\n                  </Div>\r\n                </Grid>\r\n\r\n                <Grid item xs={12} sx={{ ml: { sm: 0, md: 1.5 } }}>\r\n                  <Typography className=\"col-12 input-label\">\r\n                    State Name <span className=\"required\">*</span>\r\n                  </Typography>\r\n                </Grid>\r\n                <Grid item xs={12} sx={{ ml: { sm: 0, md: 1.5 } }}>\r\n                  <Autocomplete\r\n                    // freeSolo\r\n                    className={`search-select col-12 ${errors.stateName ? \"is-invalid\" : \"\"\r\n                      }`}\r\n                    id=\"free-solo-demo\"\r\n                    getOptionLabel={(option) => {\r\n                      if (typeof option === \"string\") {\r\n                        return option;\r\n                      }\r\n                      if (option && option?.name) {\r\n                        return option?.name;\r\n                      }\r\n                      return \"\";\r\n                    }}\r\n                    options={stateLists?.map((statelist) => statelist)}\r\n                    value={currentData?.id !== undefined ? stateName : stateLists?.find(\r\n                      (option) => option?.name === stateName\r\n                    )}\r\n                    onChange={(e, newValue) => {\r\n                      setStateName(newValue?.name);\r\n                    }}\r\n                    onFocus={() => getStateLists()}\r\n                    autoComplete=\"off\"\r\n                    sx={{\r\n                      minWidth: { xs: \"100%\" },\r\n                      maxWidth: \"1005px\",\r\n                    }}\r\n                    renderInput={(params) => (\r\n                      <TextField\r\n                        {...params}\r\n                        placeholder=\"State Name\"\r\n                        variant=\"outlined\"\r\n                        autoComplete=\"off\"\r\n                      />\r\n                    )}\r\n                  />\r\n                  <Div style={{ color: \"red\" }}>\r\n                    {errors.stateName}\r\n                  </Div>\r\n                </Grid>\r\n\r\n                <Grid item xs={12} sx={{ ml: { sm: 0, md: 1.5 } }}>\r\n                  <Typography className=\"col-12 input-label\">\r\n                    Description\r\n                  </Typography>\r\n                </Grid>\r\n                <Grid item xs={12} sx={{ ml: { sm: 0, md: 1.5 } }}>\r\n                  <TextField\r\n                    className={`multiline-box col-12 ${errors.stateDescription ? \"is-invalid\" : \"\"\r\n                      }`}\r\n                    id=\"outlined-basic\"\r\n                    placeholder=\"Description\"\r\n                    multiline\r\n                    rows={3}\r\n                    variant=\"outlined\"\r\n                    autoComplete=\"off\"\r\n                    value={stateDescription}\r\n                    onChange={(e) => setStateDescription(e.target.value)}\r\n                    sx={{\r\n                      minWidth: { xs: \"100%\" },\r\n                      maxWidth: \"1005px\",\r\n                    }}\r\n                  />\r\n                  <Div style={{ color: \"red\" }}>\r\n                    {!stateDescription && <span style={{ color: \"red\", fontSize: \"13px\" }}>{errors?.stateDescription}</span>}\r\n                  </Div>\r\n                </Grid>\r\n              </Grid>\r\n            </DialogContent>\r\n\r\n            {/* code for save and cancel button */}\r\n            <Div className=\"buttons\" sx={{\r\n              mt: 5, mb: 3, display: \"flex\",\r\n              justifyContent: \"center\"\r\n            }}>\r\n              <ButtonGroup\r\n                aria-label=\"split button\"\r\n                type=\"submit\"\r\n                // loading={isSubmitting}\r\n                sx={{\r\n                  mt: { xs: 0.5, lg: 0 },\r\n                  mr: { xs: 0, md: 1 }\r\n                }}\r\n              >\r\n                <Button type=\"submit\" className=\"plus-button\" sx={{ width: { md: \"99px !important\" } }}>\r\n                  {currentData?.id !== undefined ? \"Update\" : \"Save\"}\r\n                </Button>\r\n                <Button variant=\"contained\" className=\"icon-button\">\r\n                  <FaSave size={18} />\r\n                </Button>\r\n              </ButtonGroup>\r\n\r\n              <ButtonGroup\r\n                aria-label=\"split button\"\r\n                onClick={handleClose}\r\n                sx={{\r\n                  mt: { xs: 0.5, lg: 0 },\r\n                  mr: { xs: 0, md: 1 }\r\n                }}\r\n              >\r\n                <Button className=\"plus-button\" sx={{ width: { md: \"99px !important\" } }}>Cancel</Button>\r\n                <Button variant=\"contained\" className=\"icon-button\">\r\n                  <TiCancel size={20} />\r\n                </Button>\r\n              </ButtonGroup>\r\n            </Div>\r\n          </div>\r\n        </form>\r\n      </Dialog>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default StateLists;","import styled from '@emotion/styled';\r\nimport { Table, TableCell, TableRow } from '@mui/material';\r\n\r\nexport const CellNoborder = styled(TableCell)(({ theme }) => ({\r\n    border: \"none !important\"\r\n}))\r\nexport const TableNoborder = styled(Table)(({ theme }) => ({\r\n    border: \"none !important\"\r\n}))\r\nexport const TableRowNoborder = styled(TableRow)(({ theme }) => ({\r\n    border: \"none !important\"\r\n}))","import axios from \"axios\";\r\nimport { BASE_URL } from \"./auth-services\";\r\n\r\nconst token = localStorage.getItem(\"accesstoken\");\r\n\r\nconst header = {\r\n    headers: {\r\n        Authorization: `Bearer ${token}`,\r\n        \"Content-Type\": \"application/json\",\r\n        Accept: \"application/json\",\r\n    },\r\n};\r\n\r\n\r\nconst commonServices = {};\r\n\r\n\r\ncommonServices.deletePreviousHistory = async (payload, header) => {\r\n    const { data } = await axios.post(\r\n        `${BASE_URL}/Erpapp/updaterecorddelete/`, payload,\r\n        header\r\n    );\r\n    return data;\r\n};\r\n\r\nexport default commonServices;","import React, { useEffect, useState } from 'react'\r\nimport { useCompanyData } from './CompanyDataProvider';\r\nimport JumboScrollbar from '@jumbo/components/JumboScrollbar';\r\nimport { Table, TableBody, TableHead, TableRow } from '@mui/material';\r\nimport { CellNoborder } from '../../pages/TableStyled';\r\nimport commonServices from 'app/services/common-services';\r\nimport axios from 'axios';\r\nimport { BASE_URL } from 'app/services/auth-services';\r\nimport { format } from 'date-fns';\r\nimport { handleError } from 'app/pages/auth-pages/login/AuthGuard';\r\nimport settingServices from 'app/services/setting-api-services';\r\nimport { todayDate } from './DateFormatter';\r\n\r\n\r\nexport const UpdatedHistoryRecords = ({ documentId, scrollHeight }) => {\r\n    const { dateFormat, updatedHistory, fetchHistoryData } = useCompanyData();\r\n\r\n    useEffect(() => {\r\n        fetchHistoryData(documentId);\r\n    }, [documentId]);\r\n\r\n    return (\r\n        <JumboScrollbar\r\n            autoHeight={true}\r\n            autoHideTimeout={4000}\r\n            autoHeightMin={scrollHeight ? scrollHeight : 340}\r\n            autoHide={true}\r\n            hideTracksWhenNotNeeded\r\n            id=\"no-more-tables\"\r\n        >\r\n            <Table stickyHeader className=\"table\">\r\n                <TableHead className=\"history-header\">\r\n                    <TableRow>\r\n                        <CellNoborder sx={{ fontWeight: 600, minWidth: { xs: \"auto\", md: \"200px !important\" } }}>Activity Date</CellNoborder>\r\n                        <CellNoborder sx={{ fontWeight: 600, minWidth: { xs: \"auto\", md: \"200px !important\" } }}>PR No</CellNoborder>\r\n                        <CellNoborder sx={{ fontWeight: 600, minWidth: { xs: \"auto\", md: \"200px !important\" } }}>History</CellNoborder>\r\n                        <CellNoborder sx={{ fontWeight: 600, minWidth: { xs: \"auto\", md: \"200px !important\" } }}>Updated Fields</CellNoborder>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {updatedHistory?.length > 0 ? (\r\n                        updatedHistory?.map((data, index) => {\r\n                            console.log(\"datadata\", data)\r\n                            return (\r\n                                <TableRow>\r\n                                    <CellNoborder sx={{ minWidth: { xs: \"auto\", md: \"200px !important\" } }} data-title=\"Activity Date\">\r\n                                        {dateFormat && data?.Updated_Date && format(\r\n                                            new Date(data?.Updated_Date),\r\n                                            dateFormat\r\n                                        ) || data?.Updated_Date}\r\n                                        <span style={{ marginLeft: \"5px\" }}>\r\n                                            {data?.Updated_Time?.slice(0, 8)}\r\n                                        </span>\r\n                                    </CellNoborder>\r\n                                    <CellNoborder sx={{ minWidth: { xs: \"auto\", md: \"200px !important\" } }} data-title=\"PR No\">\r\n                                        {data?.Document_Id ? data?.Document_Id : \"\"}\r\n                                    </CellNoborder>\r\n                                    <CellNoborder sx={{ minWidth: { xs: \"auto\", md: \"200px !important\" } }} data-title=\"History\">\r\n                                        {data?.Updated_Person ? data?.Updated_Person : \"\"}\r\n                                    </CellNoborder>\r\n                                    <CellNoborder sx={{ minWidth: { xs: \"auto\", md: \"200px !important\" } }} data-title=\"Updated Fields\">\r\n                                        {data?.Updated_Field ? data?.Updated_Field : \"\"}\r\n                                    </CellNoborder>\r\n                                </TableRow>\r\n                            )\r\n                        }\r\n                        )) :\r\n                        <TableRow>\r\n                            <CellNoborder colSpan={8} sx={{ textAlign: \"center\" }}>\r\n                                No Records\r\n                            </CellNoborder>\r\n                        </TableRow>\r\n                    }\r\n                </TableBody>\r\n            </Table>\r\n        </JumboScrollbar>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport const handleCreateHistory = async (requestId, partnerId, name, header) => {\r\n    try {\r\n        axios\r\n            .get(\r\n                `${BASE_URL}/Erpapp/Updaterecordsfilter/?Partner_Id=${partnerId}&Document_Id=${requestId}`,\r\n                header\r\n            )\r\n            .then((resp) => {\r\n                console.error(\"data\", resp?.data);\r\n                const filterlistIds = resp?.data?.map((opt) => opt?.id)\r\n                if (resp?.data?.length > 0) {\r\n                    commonServices.deletePreviousHistory({\r\n                        \"id\": filterlistIds\r\n                    }, header).then((res) => {\r\n                        console.log(res);\r\n\r\n                        // history of updated records\r\n                        let editUser = localStorage.getItem(\"Username\");\r\n                        axios\r\n                            .post(\r\n                                `${BASE_URL}/Erpapp/Updaterecordscrud/`,\r\n                                {\r\n                                    Document_Id: requestId,\r\n                                    Updated_Person: `${editUser} created this ${name}.`,\r\n                                    Updated_Time: `${new Date().getHours()}:${new Date().getMinutes()}:${new Date().getSeconds()}`,\r\n                                    Updated_Date: new Date().toJSON().slice(0, 10),\r\n                                    Is_Deleted: false,\r\n                                    Partner_Id: parseInt(localStorage.getItem(\"PartnerId\")),\r\n                                    Updated_By: parseInt(localStorage.getItem(\"UserId\")),\r\n                                },\r\n                                header\r\n                            )\r\n                            .then((res) => {\r\n                                console.log(\"Result\", res?.data);\r\n                            })\r\n                            .catch((res) => {\r\n                                console.log(res.message);\r\n                            });\r\n                    }).catch((error) => {\r\n                        console.log(error)\r\n                    });\r\n\r\n                } else {\r\n                    // history of updated records\r\n                    let editUser = localStorage.getItem(\"Username\");\r\n                    axios\r\n                        .post(\r\n                            `${BASE_URL}/Erpapp/Updaterecordscrud/`,\r\n                            {\r\n                                Document_Id: requestId,\r\n                                Updated_Person: `${editUser} created this ${name}.`,\r\n                                Updated_Time: `${new Date().getHours()}:${new Date().getMinutes()}:${new Date().getSeconds()}`,\r\n                                Updated_Date: new Date().toJSON().slice(0, 10),\r\n                                Is_Deleted: false,\r\n                                Partner_Id: parseInt(localStorage.getItem(\"PartnerId\")),\r\n                                Updated_By: parseInt(localStorage.getItem(\"UserId\")),\r\n                            },\r\n                            header\r\n                        )\r\n                        .then((res) => {\r\n                            console.log(\"Result\", res?.data);\r\n                        })\r\n                        .catch((res) => {\r\n                            console.log(res.message);\r\n                        });\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                console.log(\"ds\", error);\r\n            });\r\n    } catch (error) {\r\n        console.log(error)\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const SendNotificationToSettingMail = async (requestData, subject, body, companyId, header) => {\r\n    try {\r\n        await settingServices\r\n            .getItemSettings(companyId, header).then(async (res) => {\r\n\r\n                var payload = {\r\n                    Tomail: res?.Notifyto,\r\n                    mailsubject: subject,\r\n                    body: body,\r\n                }\r\n\r\n                const response = await axios.post(`${BASE_URL}/Erpapp/settingsdirectmailsend/`, payload, header);\r\n                console.log(\"response\", response)\r\n            }).catch((error) => {\r\n                console.log(error);\r\n            });\r\n    } catch (error) {\r\n        handleError(error)\r\n    }\r\n}\r\n\r\nconst deleteExistingDocumentApprovals = async (requestNo) => {\r\n    try {\r\n        const response = await axios.get(`${BASE_URL}/Erpapp/Documentapprovalgetwithrequestid/?Request_Id=${requestNo}`);\r\n        const filteredDocuments = response?.data;\r\n        const filterlistIds = filteredDocuments?.map(item => item?.id);\r\n\r\n        if (filterlistIds?.length > 0) {\r\n            await axios.post(`${BASE_URL}/Erpapp/Documentapprovaldelete/`, { id: filterlistIds });\r\n        }\r\n    } catch (error) {\r\n        console.error(\"Error deleting existing document approvals:\", error);\r\n    }\r\n};\r\n\r\nexport const handleCreateDocumentApproval = async (requestId, requestNo, userId, approvals, workflowAmountBased = [], name, header) => {\r\n\r\n    const headApproverId = parseInt(localStorage.getItem(\"ReportHead\"))\r\n    const HeadApproverName = localStorage.getItem(\"ReportHeadName\");\r\n    const HeadApproverRole = localStorage.getItem(\"ReportHeadRole\");\r\n\r\n    let listOfApprovers = []\r\n    let numberOfApproversCount = workflowAmountBased?.length > 0 ? workflowAmountBased?.length : approvals[0]?.Noof_Level\r\n\r\n    if (approvals[0]?.Head_Approval === true) {\r\n        const obj = {\r\n            id: headApproverId,\r\n            Approvername: HeadApproverName,\r\n            ApproverRole: HeadApproverRole,\r\n            comments: \"\",\r\n            approved_flg: \"\",\r\n            Approved_flg: false,\r\n            status: true,\r\n            time: \"\",\r\n        };\r\n        listOfApprovers.push(obj);\r\n    }\r\n    for (let i = 0; i < numberOfApproversCount; i++) {\r\n        const obj1 = {\r\n            id: approvals[0]?.Amountjosn[i]?.id,\r\n            Approvername: approvals[0]?.Amountjosn[i]?.approver_name,\r\n            ApproverRole: approvals[0]?.Amountjosn[i]?.role,\r\n            comments: \"\",\r\n            approved_flg: \"\",\r\n            Approved_flg: false,\r\n            status: true,\r\n            time: \"\",\r\n        };\r\n        listOfApprovers.push(obj1);\r\n    }\r\n    try {\r\n        if (Boolean(requestNo)) {\r\n            await deleteExistingDocumentApprovals(requestNo);\r\n            var payload = {\r\n                Request_Id: requestNo,\r\n                Created_By: userId,\r\n                Updated_By: userId,\r\n                Approval_Id: listOfApprovers,\r\n                Approve: listOfApprovers,\r\n                Request_Key: Number(requestId),\r\n                Request_Name: name,\r\n                Initiated_By: localStorage.getItem(\"Username\"),\r\n                Created_Date: todayDate\r\n            };\r\n            const response = await axios.post(`${BASE_URL}/Erpapp/DocumentapprovalCRUD/`, payload)\r\n            console.log(\"PD12\", response)\r\n            return response;\r\n        }\r\n    }\r\n    catch (error) {\r\n        console.log(error)\r\n    }\r\n}\r\n\r\n\r\nexport const handleSendNotificationToApprover = async (requestNo, initiatorName, approverId, userId, partnerId, companyId, header) => {\r\n    try {\r\n        const payload = {\r\n            Notification_Msg: `Request No. ${requestNo || \"\"} has been submitted by ${initiatorName || \"the initiator\"} for approval.`,\r\n            User_Id: parseInt(approverId),\r\n            Created_By: parseInt(userId),\r\n            Partner_Id: parseInt(partnerId),\r\n            Company_Id: parseInt(companyId),\r\n        };\r\n\r\n        const response = await axios.post(`${BASE_URL}/Erpapp/Notificationscrud/`, payload, header)\r\n        console.log(\"response\", response)\r\n\r\n    } catch (error) {\r\n        // handleError(error)\r\n        console.log(error)\r\n    }\r\n}\r\n\r\nexport const handleSendNotificationToInitiator = async (requestNo, approverName, employeeId, userId, partnerId, companyId, header) => {\r\n    try {\r\n        const payload = {\r\n            Notification_Msg: `Your Request No. ${requestNo || \"\"} has been submitted to ${approverName || \"the approver\"} for approval.`,\r\n            User_Id: parseInt(employeeId),\r\n            Created_By: parseInt(userId),\r\n            Partner_Id: parseInt(partnerId),\r\n            Company_Id: parseInt(companyId),\r\n        };\r\n\r\n        setTimeout(async () => {\r\n            const response = await axios.post(`${BASE_URL}/Erpapp/Notificationscrud/`, payload, header)\r\n            console.log(\"response\", response)\r\n        }, 1000)\r\n\r\n    } catch (error) {\r\n        // handleError(error)\r\n        console.log(error)\r\n    }\r\n}","import Div from \"@jumbo/shared/Div\";\nimport {\n  Button,\n  FormControl,\n  Grid,\n  Autocomplete,\n  TextField,\n  Typography,\n  ButtonGroup,\n  FormGroup,\n  FormControlLabel,\n  Checkbox,\n  InputAdornment,\n} from \"@mui/material\";\nimport React, { useContext, useEffect } from \"react\";\nimport { useState } from \"react\";\nimport axios from \"axios\";\nimport { BASE_URL } from \"app/services/auth-services\";\nimport { toast } from \"react-toastify\";\nimport { FaSave } from \"react-icons/fa\";\nimport { TiCancel } from \"react-icons/ti\";\nimport \"./partners.css\";\nimport itemServices from \"app/services/item-master-services\";\nimport { DataContext } from \"app/pages/settings/Organization/OrganizationStructure\";\nimport { handleCreateHistory } from \"app/shared/ReuseComponents/UpdatedHistoryRecords\";\nimport { handleError } from \"app/pages/auth-pages/login/AuthGuard\";\nimport { ErpDateField } from \"app/shared/ReuseComponents/ButtonComponent\";\nimport { todayDate } from \"app/shared/ReuseComponents/DateFormatter\";\n\n\n\nconst CreatePartner = ({\n  scrollHeight,\n  setCreateMaterial,\n  setListMaterial,\n}) => {\n\n\n  const {\n    entities,\n    countries,\n    regions,\n    states,\n    cities,\n    id,\n    id1,\n    id2,\n    id3,\n    name,\n    name1,\n    name2,\n    name3,\n    name4,\n    setName4,\n    checkId5,\n    setCheckId5,\n    getId,\n    getId1,\n    getId2,\n    getId3,\n    getId4,\n    setGetId4,\n    getCityDatas,\n    getStates,\n  } = useContext(DataContext);\n\n  const token = localStorage.getItem(\"accesstoken\");\n  const header = {\n    headers: {\n      Authorization: `Bearer ${token}`,\n      \"Content-Type\": \"application/json\",\n      Accept: \"application/json\",\n    },\n  };\n\n  let userDetails = localStorage.getItem(\"UserDetails\");\n  userDetails = JSON.parse(userDetails);\n\n  const partnerId = parseInt(localStorage.getItem(\"PartnerId\"));\n\n  // Get Users\n  const [OwnerNames, setOwnerNames] = useState([]);\n  const [HeadOperation, setHeadOperation] = useState(\"\");\n\n  const [values, setValues] = useState({\n    Bussiness_Unit: \"\",\n    Operated_By: \"\",\n    Contact: \"\",\n    Email: \"\",\n    Website: \"\",\n    Head_Of_Operation: \"\",\n    Address_1: \"\",\n    Address_2: \"\",\n    City: \"\",\n    State: \"\",\n    Country: \"\",\n    Pin_Code: \"\",\n    Pan_No: \"\",\n    GST_No: \"\",\n    Agreement_Ref: \"\",\n    Valid_Upto: \"\",\n    Corporate_BU: false,\n    Commision_Paid: \"\",\n  });\n\n\n  const getUsers = async () => {\n    try {\n      const response = await axios.get(`${BASE_URL}/Erpapp/Userlistwithoutpagination/`, header);\n      console.log(\"oji\", response?.data);\n      setOwnerNames(response?.data?.map((item) => `${item?.first_name} ${item?.last_name}`));\n    }\n    catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    const timer = setTimeout(async () => {\n      await getUsers();\n    }, 1000);\n\n    return () => clearTimeout(timer);\n  }, []);\n\n\n  const [selectedCountry, setSelectedCountry] = useState(name1);\n  const [selectedState, setSelectedState] = useState(name3);\n  const [selectedCity, setSelectedCity] = useState(name4);\n\n  const [managedByLists, setManagedByLists] = useState([]);\n  const [countryLists, setCountryLists] = useState([]);\n  const [stateLists, setStateLists] = useState([]);\n  const [cityLists, setCityLists] = useState([]);\n  const [countryId, setCountryId] = useState(getId1);\n  const [stateId, setStateId] = useState(getId3);\n  const [cityId, setcityId] = useState(getId4);\n\n\n  const getCountryLists = () => {\n    axios\n      .get(`https://countriesnow.space/api/v0.1/countries`, {\n        headers: {\n          //   Authorization: `Bearer ${token}`,\n          \"Content-Type\": \"application/json\",\n          Accept: \"application/json\",\n        },\n      })\n      .then((res) => {\n        console.log(res?.data?.data);\n        setCountryLists(res?.data?.data);\n      })\n      .catch((error) => {\n        console.log(\"ds\", error);\n      });\n  };\n\n  const getStateLists = () => {\n    axios.post(\n      `https://countriesnow.space/api/v0.1/countries/states`,\n      { country: selectedCountry },\n      {\n        headers: {\n          //   Authorization: `Bearer ${token}`,\n          \"Content-Type\": \"application/json\",\n          Accept: \"application/json\",\n        },\n      }\n    )\n      .then((res) => {\n        console.log(res?.data?.data);\n        var state = res?.data?.data;\n        setStateLists(state?.states);\n      })\n      .catch((error) => {\n        console.log(\"ds\", error);\n      });\n  };\n\n  const getCityLists = () => {\n    var payload = {\n      country: selectedCountry,\n      state: selectedState,\n    };\n\n    axios\n      .post(\n        `https://countriesnow.space/api/v0.1/countries/state/cities`,\n        payload,\n        {\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Accept: \"application/json\",\n          },\n        }\n      )\n      .then((res) => {\n        console.log(res?.data);\n        var city = res?.data?.data;\n        var citynames = city?.map((cityname) => {\n          const normalizedCity = cityname.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\n          if (normalizedCity === \"Naini Tal\") {\n            return normalizedCity.replace(\" \", \"\");\n          }\n          return normalizedCity;\n        });\n        setCityLists(citynames);\n      })\n      .catch((error) => {\n        console.log(\"ds\", error);\n      });\n  };\n\n  useEffect(() => {\n    getCountryLists();\n    getStateLists();\n    getCityLists();\n  }, [countryId, stateId, selectedCountry, selectedState, cityId]);\n\n\n  useEffect(() => {\n    // get managed by from lookup\n    const getManagedBy = () => {\n      var unitpayload = {\n        Search: \"Managed By\",\n      };\n      itemServices\n        .getUnits(unitpayload, header)\n        .then((res) => {\n          console.log(res[0].value);\n          setManagedByLists(res[0].value);\n        })\n        .catch((error) => {\n          console.log(error);\n        });\n    }\n\n    getManagedBy();\n  }, []);\n\n\n  const handleCreateBU = async (e) => {\n    e.preventDefault();\n    let itempayload = {\n      Partner_Name: values?.Bussiness_Unit,\n      Operated_By: values?.Operated_By,\n      HeadOf_Operation: HeadOperation,\n      BusinessUnit_Phone: values?.Contact,\n      BusinessUnit_EMail: values?.Email,\n      BusinessUnit_Web: values?.Website,\n      BusinessUnit_Addressline1: values?.Address_1,\n      BusinessUnit_City: selectedCity,\n      BusinessUnit_Country: selectedCountry,\n      BusinessUnit_State: selectedState,\n      BusinessUnit_Zone: \"\",\n      BusinessUnit_Pincode: values?.Pin_Code,\n      BusinessUnit_PanNo: values?.Pan_No,\n      BusinessUnit_GSTNo: values?.GST_No,\n      Agreement_RefNo: values?.Agreement_Ref,\n      Agreement_Validupto: values?.Valid_Upto ? values?.Valid_Upto : \"0001-01-01\",\n      Ofc_Starttime: values?.Ofc_Starttime,\n      Ofc_Endtime: values?.Ofc_Endtime,\n      Total_hours: values?.Total_hours,\n      Corporate_BU: values?.Corporate_BU,\n      Commision_Paid: values?.Commision_Paid || 0,\n      Company_Id: parseInt(localStorage.getItem(\"OrganizationId\")),\n      Created_By: parseInt(localStorage.getItem(\"UserId\")),\n      Updated_By: parseInt(localStorage.getItem(\"UserId\")),\n      Created_Date: todayDate,\n      Updated_Date: todayDate,\n    }\n\n    console.log(\"itempayload :\", itempayload);\n    try {\n      const res = await axios.post(`${BASE_URL}/Erpapp/PartnerCRUD/`, itempayload, header)\n      console.log(\"res\", res);\n\n      if (res?.data?.id) {\n        // reset values\n        setValues({\n          Operated_By: \"\",\n          Head_Of_Operation: \" \",\n          Contact: \"\",\n          Email: \"\",\n          Website: \"\",\n          Address_1: \"\",\n          Address_2: \"\",\n          City: \"\",\n          State: \"\",\n          Country: \"\",\n          Pin_Code: \"\",\n          Pan_No: \"\",\n          GST_No: \"\",\n          Agreement_Ref: \"\",\n          Valid_Upto: \"\",\n        })\n        setHeadOperation(\"\");\n\n        toast.success(`Business Unit Created Successfully`);\n        setCreateMaterial(false);\n        setListMaterial(true);\n\n        // history of updated records\n        handleCreateHistory(res?.data?.Partner_Id, res?.data?.id, \"Business Unit\", header)\n\n      }\n    }\n    catch (error) {\n      console.log(error);\n      handleError(error)\n      // toast.error(\"You do not have permission to perform this action.\");\n    }\n  }\n\n  const handleChangeItem = async (e) => {\n    if (e.target.name === \"Pin_Code\") {\n      // let API_KEY = '65afa4042e767571080003lgca37daa'\n      // await axios.get(`https://geocode.maps.co/search?q=${e.target.value}&api_key=${API_KEY}`).then((res) => {\n      //   console.log(\"PPPP...\", res)\n      //   let result = res.data.results || [];\n      //   if (result) {\n      //     console.log(\"result\", result)\n      //     toast.success(\"Pincode is valid\")\n      //   } else {\n      //     toast.error(\"Please enter a valid pincode\");\n      //   }\n      // }).catch((error) => {\n      //   console.log(error);\n      //   toast.error(error.message);\n      // })\n\n      const getValue = e.target.value\n\n      setValues({ ...values, [\"Pin_Code\"]: getValue });\n      try {\n        const response = await axios.get(`${BASE_URL}/Erpapp/PincodeCRUD/?pincode=${getValue}`, header);\n        const pincodeData = response?.data;\n        // const pincodeExists = pincodeData?.some((opt) => opt?.cityname?.toLowerCase() === selectedCity?.toLowerCase());\n\n        if (getValue?.length > 5) {\n          if (pincodeData?.length > 0) {\n            toast.success(\"Pincode is valid\");\n          } else {\n            toast.error(\"The provided pincode doesn't exist in the city.\");\n          }\n        }\n      } catch (error) {\n        console.error(error);\n        toast.error(\"Please enter a valid pincode\");\n      }\n\n\n    } else if (e.target.name === \"Commision_Paid\") {\n      const regex = /^(100(\\.0{1,2})?|[1-9]?\\d(\\.\\d{1,2})?)$/;\n      const getValue = e.target.value\n\n      if (regex.test(getValue)) {\n        setValues({ ...values, [\"Commision_Paid\"]: getValue });\n      } else {\n        setValues({ ...values, [\"Commision_Paid\"]: \"\" });\n      }\n    } else {\n      setValues({ ...values, [e.target.name]: e.target.value });\n    }\n  };\n\n\n  // get a total office hours\n  useEffect(() => {\n    // const fromTimeObject = new Date(`2022-01-01T${values?.Ofc_Starttime}`);\n    // const toTimeObject = new Date(`2022-01-01T${values?.Ofc_Endtime}`);\n    // const timediff = toTimeObject.getTime() - fromTimeObject.getTime();\n    // const totalhours = timediff / (1000 * 60 * 60);\n    // console.log(\"totalhours\",totalhours)\n    // setValues({ ...values, [\"Total_hours\"]: totalhours.toFixed(2) });\n    const yearB = new Date().getFullYear()\n    console.log(\"yearB\", yearB)\n    const fromTimeObject = new Date(`${yearB}-01-01T${values?.Ofc_Starttime}`);\n    const toTimeObject = new Date(`${yearB}-01-01T${values?.Ofc_Endtime}`);\n\n    const timeDiff = Math.abs(toTimeObject - fromTimeObject);\n    console.log(\"timeDiff\", timeDiff);\n    const hours = Math.floor(timeDiff / (1000 * 60 * 60));\n    const minutes = Math.floor((timeDiff / (1000 * 60)) % 60);\n    let totalhours = 0.0\n    if (values?.Ofc_Starttime && values?.Ofc_Endtime) {\n      totalhours = `${hours.toString().padStart(2, '0')}.${minutes.toString().padStart(2, '0')}`;\n    }\n    else {\n      totalhours = 0.0;\n    }\n    console.log(\"totalhours...\", totalhours)\n    setValues({ ...values, [\"Total_hours\"]: totalhours });\n  }, [values?.Ofc_Starttime, values?.Ofc_Endtime]);\n\n\n\n  const [open, setOpen] = useState(false);\n\n  const handleClickCancel = (newState) => {\n    // navigate(\"/purchase/purchase-request-list\");\n    setCreateMaterial(false);\n    setListMaterial(true);\n    setOpen(false);\n  };\n\n  return (\n    <>\n      <Div>\n        <Typography variant=\"h3\" sx={{ fontWeight: 500 }}>\n          Create Business Unit\n        </Typography>\n\n        <form onSubmit={handleCreateBU}>\n          <Div className=\"row\" sx={{ mt: 3 }}>\n            <Div className=\"col-12 col-md-6\">\n              <Grid container>\n                <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\n                  <Typography className=\"col-md-12 col-lg-7 col-xl-5 input-label\" sx={{ mt: 2 }}>\n                    Business Unit Name <span className=\"required\">*</span>\n                  </Typography>\n                  <FormControl className=\"col-md-12 col-lg-5 col-xl-6\">\n                    <TextField\n                      name=\"Bussiness_Unit\"\n                      value={values?.Bussiness_Unit}\n                      onChange={handleChangeItem}\n                      className=\"input-box\"\n                      id=\"outlined-basic\"\n                      placeholder=\"Business Unit Name\"\n                      variant=\"outlined\"\n                    />\n                    {/* <Div style={{ color: \"red\" }}> */}\n                    {/* {errors.supplierName?.message} */}\n                    {/* </Div> */}\n                  </FormControl>\n\n\n                </Grid>\n\n                <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\n                  <Typography className=\"col-md-12 col-lg-7 col-xl-5 input-label\" sx={{ mt: 2 }}>\n                    Head Of Operation <span className=\"required\">*</span>\n                  </Typography>\n                  <FormControl className=\"col-md-12 col-lg-5 col-xl-6\">\n                    <Autocomplete\n                      className=\"col-12 search-select\"\n                      id=\"combo-box-demo\"\n                      disablePortal\n                      name=\"Head_Of_Operation\"\n                      options={OwnerNames}\n                      getOptionLabel={(option) => option}\n                      onChange={(e, newValue) => {\n                        setHeadOperation(newValue);\n                        console.log(newValue);\n                      }}\n                      value={HeadOperation}\n                      renderInput={(params) => <TextField {...params} placeholder=\"Head Of Operation\" />}\n                    />\n                  </FormControl>\n\n                </Grid>\n\n                <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\n                  <Typography className=\"col-md-12 col-lg-7 col-xl-5 input-label\" sx={{ mt: 2 }}>\n                    Email Id <span className=\"required\">*</span>\n                  </Typography>\n                  <FormControl className=\"col-md-12 col-lg-5 col-xl-6\">\n                    <TextField\n                      name=\"Email\"\n                      value={values?.Email}\n                      onChange={handleChangeItem}\n                      className=\"col-12 input-box\"\n                      id=\"outlined-basic\"\n                      placeholder=\"Email Id\"\n                      variant=\"outlined\"\n                    />\n                  </FormControl>\n\n                </Grid>\n\n                <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\n                  <Typography className=\"col-md-12 col-lg-7 col-xl-5 input-label\" sx={{ mt: 2 }}>\n                    Address Line 1 <span className=\"required\">*</span>\n                  </Typography>\n                  <FormControl className=\"col-md-12 col-lg-5 col-xl-6\">\n                    <TextField\n                      name=\"Address_1\"\n                      value={values?.Address_1}\n                      onChange={handleChangeItem}\n                      className=\"col-12 input-box\"\n                      id=\"outlined-basic\"\n                      placeholder=\"Address Line 1\"\n                      variant=\"outlined\"\n                    />\n                  </FormControl>\n\n                </Grid>\n\n                <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\n                  <Typography className=\"col-md-12 col-lg-7 col-xl-5 input-label\" sx={{ mt: 2 }}>\n                    Country<span className=\"required\">*</span>\n                  </Typography>\n                  <FormControl className=\"col-md-12 col-lg-5 col-xl-6\">\n                    <Autocomplete\n                      className=\"search-select col-12\"\n                      name=\"selectedCountry\"\n                      options={countryLists}\n                      getOptionLabel={(option) => {\n                        if (typeof option === \"string\") {\n                          return option;\n                        }\n                        if (option && option?.country) {\n                          return option?.country;\n                        }\n                        return \"\";\n                      }}\n                      value={selectedCountry}\n                      onChange={(e, newValue) => {\n                        setSelectedCountry(newValue?.country);\n                        setCountryId(newValue?.id);\n                      }}\n                      renderInput={(params) => (\n                        <TextField\n                          {...params}\n                          placeholder=\"Choose a country\"\n                          autoComplete=\"off\"\n                        />\n                      )}\n                    />\n                  </FormControl>\n\n                </Grid>\n\n                <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\n                  <Typography className=\"col-md-12 col-lg-7 col-xl-5 input-label\" sx={{ mt: 2 }}>\n                    City<span className=\"required\">*</span>\n                  </Typography>\n                  <FormControl className=\"col-md-12 col-lg-5 col-xl-6\">\n                    <Autocomplete\n                      className=\"search-select col-12\"\n                      name=\"selectedCity\"\n                      options={cityLists}\n                      getOptionLabel={(option) => {\n                        if (typeof option === \"string\") {\n                          return option;\n                        }\n                        if (option && option) {\n                          return option;\n                        }\n                        return \"\";\n                      }}\n                      value={selectedCity}\n                      onChange={(e, newValue) => {\n                        setSelectedCity(newValue);\n                        setcityId(newValue?.id);\n                      }}\n                      renderInput={(params) => (\n                        <TextField\n                          {...params}\n                          placeholder=\"Choose a city\"\n                          autoComplete=\"off\"\n                        />\n                      )}\n                    />\n                  </FormControl>\n\n                </Grid>\n\n                <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\n                  <Typography className=\"col-md-12 col-lg-7 col-xl-5 input-label\" sx={{ mt: 2 }}>\n                    PAN No\n                  </Typography>\n                  <FormControl className=\"col-md-12 col-lg-5 col-xl-6\">\n                    <TextField\n                      name=\"Pan_No\"\n                      value={values?.Pan_No}\n                      onChange={handleChangeItem}\n                      className=\"col-12 input-box\"\n                      id=\"outlined-basic\"\n                      placeholder=\"PAN No\"\n                      variant=\"outlined\"\n                    />\n                  </FormControl>\n\n                </Grid>\n\n                <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\n                  <Typography className=\"col-md-12 col-lg-7 col-xl-5 input-label\" sx={{ mt: 2 }}>\n                    Agreement Ref No\n                  </Typography>\n                  <FormControl className=\"col-md-12 col-lg-5 col-xl-6\">\n                    <TextField\n                      className=\"col-12 input-box\"\n                      name=\"Agreement_Ref\"\n                      value={values?.Agreement_Ref}\n                      onChange={handleChangeItem}\n                      placeholder=\"Agreement Ref No\"\n                    />\n                  </FormControl>\n                </Grid>\n\n                <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\n                  <Typography className=\"col-md-12 col-lg-7 col-xl-5 input-label\" sx={{ mt: 2 }}>\n                    Office Timing From <span className=\"required\">*</span>\n                  </Typography>\n                  <FormControl className=\"col-md-12 col-lg-5 col-xl-6\">\n                    <TextField\n                      type=\"time\"\n                      name=\"Ofc_Starttime\"\n                      value={values?.Ofc_Starttime}\n                      onChange={handleChangeItem}\n                      className=\"col-12 input-box\"\n                      id=\"outlined-basic\"\n                      placeholder=\"From Time\"\n                      variant=\"outlined\"\n                    />\n                  </FormControl>\n                </Grid>\n\n                <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\n                  <Typography className=\"col-md-12 col-lg-7 col-xl-5 input-label\" sx={{ mt: 2 }}>\n                    Total Hours <span className=\"required\">*</span>\n                  </Typography>\n                  <FormControl className=\"col-md-12 col-lg-5 col-xl-6\">\n                    <TextField\n                      type=\"text\"\n                      name=\"Total_hours\"\n                      value={values?.Total_hours}\n                      // onChange={handleChangeItem}\n                      className=\"col-12 input-box\"\n                      id=\"outlined-basic\"\n                      placeholder=\"Total Hours\"\n                      variant=\"outlined\"\n                      disabled\n                    />\n                  </FormControl>\n                </Grid>\n\n                <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\n                  <Typography className=\"col-md-12 col-lg-7 col-xl-5 input-label\" sx={{ mt: 2 }}>\n                    Commision Paid\n                  </Typography>\n                  <FormControl className=\"col-md-12 col-lg-5 col-xl-6\">\n                    <TextField\n                      type=\"text\"\n                      name=\"Commision_Paid\"\n                      value={values?.Commision_Paid}\n                      onChange={handleChangeItem}\n                      className=\"col-12 input-box\"\n                      id=\"outlined-basic\"\n                      placeholder=\"Commision Paid\"\n                      variant=\"outlined\"\n                      InputProps={{\n                        endAdornment: <InputAdornment position=\"end\">%</InputAdornment>\n                      }}\n                    />\n                  </FormControl>\n                </Grid>\n\n                {/* <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\n                  <Typography className=\"col-md-12 col-lg-7 col-xl-5 input-label\" sx={{ mt: 2 }}>\n                    Corporate BU\n                  </Typography>\n                  <FormGroup className=\"col-md-12 col-lg-5 col-xl-6\">\n                    <FormControlLabel control={<Checkbox value={values?.Corporate_BU} onChange={(e) => {\n                      setValues({\n                        ...values,\n                        Corporate_BU: e.target.checked\n                      })\n                    }} />} label=\"\" />\n                  </FormGroup>\n                </Grid> */}\n\n              </Grid>\n            </Div>\n\n            <Div className=\"col-12 col-md-6\">\n              <Grid container>\n                <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\n                  <Typography className=\"col-md-12 col-lg-7 col-xl-5 input-label\" sx={{ mt: 2 }}>\n                    Managed By <span className=\"required\">*</span>\n                  </Typography>\n                  <FormControl className=\"col-md-12 col-lg-5 col-xl-6\">\n                    <Autocomplete\n                      className=\"search-select col-12\"\n                      name=\"Operated_By\"\n                      options={managedByLists}\n                      getOptionLabel={(option) => {\n                        if (typeof option === \"string\") {\n                          return option;\n                        }\n                        if (option && option?.value) {\n                          return option?.value;\n                        }\n                        return \"\";\n                      }}\n                      value={values?.Operated_By}\n                      onChange={(e, newValue) => {\n                        setValues({ ...values, [\"Operated_By\"]: newValue?.value });\n                      }}\n                      renderInput={(params) => (\n                        <TextField\n                          {...params}\n                          placeholder=\"Select Managed By\"\n                          autoComplete=\"off\"\n                        />\n                      )}\n                    />\n                    {/* <Select className=\"col-12 input-select\"\n                      onChange={handleChangeItem}\n                      name=\"Operated_By\"\n                      defaultValue=\"ManagedBy\"\n                    >\n                      <MenuItem value=\"ManagedBy\" style={{ display: \"none\", }}>Managed By</MenuItem>\n                      <MenuItem value=\"Partner\">Partner</MenuItem>\n                      <MenuItem value=\"Owner\">Owner</MenuItem>\n                    </Select> */}\n                  </FormControl>\n\n                </Grid>\n\n                <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\n                  <Typography className=\"col-md-12 col-lg-7 col-xl-5 input-label\" sx={{ mt: 2 }}>\n                    Contact No <span className=\"required\">*</span>\n                  </Typography>\n                  <FormControl className=\"col-md-12 col-lg-5 col-xl-6\">\n                    <TextField className=\"col-12 search-select\"\n                      name=\"Contact\"\n                      value={values?.Contact}\n                      onChange={handleChangeItem}\n                      variant=\"outlined\"\n                      placeholder=\"Contact No\"\n                    />\n                    {/* <Div style={{ color: \"red\" }}>{errors.poNumber?.message}</Div> */}\n                    {/*  */}\n                  </FormControl>\n\n                </Grid>\n\n                <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\n                  <Typography className=\"col-md-12 col-lg-7 col-xl-5 input-label\" sx={{ mt: 2 }}>\n                    Website\n                  </Typography>\n                  <FormControl className=\"col-md-12 col-lg-5 col-xl-6\">\n                    <TextField\n                      name=\"Website\"\n                      value={values?.Website}\n                      onChange={handleChangeItem}\n                      className=\"col-12 input-box\"\n                      id=\"outlined-basic\"\n                      placeholder=\"Website\"\n                      variant=\"outlined\"\n                    />\n                    {/* <Div style={{ color: \"red\" }}>{errors.poNumber?.message}</Div> */}\n                    {/*  */}\n                  </FormControl>\n\n                </Grid>\n\n                <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\n                  <Typography className=\"col-md-12 col-lg-7 col-xl-5 input-label\" sx={{ mt: 2 }}>\n                    Address Line 2 <span className=\"required\">*</span>\n                  </Typography>\n                  <FormControl className=\"col-md-12 col-lg-5 col-xl-6\">\n                    <TextField\n                      name=\"Address_2\"\n                      value={values?.Address_2}\n                      onChange={handleChangeItem}\n                      className=\"col-12 input-box\"\n                      id=\"outlined-basic\"\n                      placeholder=\"Address Line 2\"\n                      variant=\"outlined\"\n                    />\n                    {/* <Div style={{ color: \"red\" }}>{errors.poNumber?.message}</Div> */}\n                    {/*  */}\n                  </FormControl>\n\n                </Grid>\n\n                <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\n                  <Typography className=\"col-md-12 col-lg-7 col-xl-5 input-label\" sx={{ mt: 2 }}>\n                    State <span className=\"required\">*</span>\n                  </Typography>\n                  <FormControl className=\"col-md-12 col-lg-5 col-xl-6\">\n                    <Autocomplete\n                      className=\"search-select col-12\"\n                      name=\"selectedState\"\n                      options={stateLists}\n                      getOptionLabel={(option) => {\n                        if (typeof option === \"string\") {\n                          return option;\n                        }\n                        if (option && option?.name) {\n                          return option?.name;\n                        }\n                        return \"\";\n                      }}\n                      value={selectedState}\n                      onChange={(e, newValue) => {\n                        setSelectedState(newValue?.name);\n                        setStateId(newValue?.id);\n                      }}\n                      renderInput={(params) => (\n                        <TextField\n                          {...params}\n                          placeholder=\"Choose a state\"\n                          autoComplete=\"off\"\n                        />\n                      )}\n                    />\n\n                    {/* <TextField\n                    name=\"State\"\n                    value={values.State}\n                    onChange={handleChangeItem}\n                    className=\"col-12 input-box\"\n                    id=\"outlined-basic\"\n                    placeholder=\"State\"\n                    variant=\"outlined\"\n                  /> */}\n                    {/* <Div style={{ color: \"red\" }}>{errors.poNumber?.message}</Div> */}\n                    {/*  */}\n                  </FormControl>\n\n                </Grid>\n\n                <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\n                  <Typography className=\"col-md-12 col-lg-7 col-xl-5 input-label\" sx={{ mt: 2 }}>\n                    PIN Code <span className=\"required\">*</span>\n                  </Typography>\n                  <FormControl className=\"col-md-12 col-lg-5 col-xl-6\">\n                    <TextField\n                      name=\"Pin_Code\"\n                      value={values?.Pin_Code}\n                      onChange={handleChangeItem}\n                      className=\"col-12 input-box\"\n                      id=\"outlined-basic\"\n                      placeholder=\"PIN Code\"\n                      variant=\"outlined\"\n                    />\n                    {/* <Div style={{ color: \"red\" }}>{errors.poNumber?.message}</Div> */}\n                    {/*  */}\n                  </FormControl>\n\n                </Grid>\n\n                <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\n                  <Typography className=\"col-md-12 col-lg-7 col-xl-5 input-label\" sx={{ mt: 2 }}>\n                    GST No\n                  </Typography>\n                  <FormControl className=\"col-md-12 col-lg-5 col-xl-6\">\n                    <TextField\n                      name=\"GST_No\"\n                      value={values?.GST_No}\n                      onChange={handleChangeItem}\n                      className=\"col-12 input-box\"\n                      id=\"outlined-basic\"\n                      placeholder=\"GST No\"\n                      variant=\"outlined\"\n                    />\n                  </FormControl>\n\n                </Grid>\n\n                <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\n                  <Typography className=\"col-md-12 col-lg-7 col-xl-5 input-label\" sx={{ mt: 2 }}>\n                    Valid Upto\n                  </Typography>\n                  <FormControl className=\"col-md-12 col-lg-5 col-xl-6\">\n                    <ErpDateField\n                      id=\"Valid_Upto\"\n                      name=\"Valid_Upto\"\n                      inputValue={values?.Valid_Upto}\n                      handleInputChange={handleChangeItem}\n                      variant=\"outlined\"\n                    />\n                  </FormControl>\n                </Grid>\n\n                <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\n                  <Typography className=\"col-md-12 col-lg-7 col-xl-5 input-label\" sx={{ mt: 2 }}>\n                    Office Timing To <span className=\"required\">*</span>\n                  </Typography>\n                  <FormControl className=\"col-md-12 col-lg-5 col-xl-6\">\n                    <TextField\n                      type=\"time\"\n                      name=\"Ofc_Endtime\"\n                      value={values?.Ofc_Endtime}\n                      onChange={handleChangeItem}\n                      className=\"col-12 input-box\"\n                      id=\"outlined-basic\"\n                      placeholder=\"To Time\"\n                      variant=\"outlined\"\n                    />\n                  </FormControl>\n                </Grid>\n\n                <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\n                  <Typography className=\"col-md-12 col-lg-7 col-xl-5 input-label\" sx={{ mt: 2 }}>\n                    Corporate BU\n                  </Typography>\n                  <FormGroup className=\"col-md-12 col-lg-5 col-xl-6\">\n                    <FormControlLabel control={<Checkbox value={values?.Corporate_BU} onChange={(e) => {\n                      setValues({\n                        ...values,\n                        Corporate_BU: e.target.checked\n                      })\n                    }} />} label=\"\" />\n                  </FormGroup>\n                </Grid>\n\n                {/* <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\n                  <Typography className=\"col-md-12 col-lg-7 col-xl-5 input-label\" sx={{ mt: 2 }}>\n                    Working Days\n                  </Typography>\n                  <FormGroup className=\"col-md-12 col-lg-5 col-xl-6\" sx={{ display: \"flex\", flexDirection: \"row\", flexWrap: \"wrap\", columnGap: 3 }}>\n                    <FormControlLabel control={<Checkbox value={values?.Corporate_BU} onChange={(e) => {\n                      setValues({\n                        ...values,\n                        Corporate_BU: e.target.checked\n                      })\n                    }} />} label=\"Sunday\" />\n                    <FormControlLabel control={<Checkbox value={values?.Corporate_BU} onChange={(e) => {\n                      setValues({\n                        ...values,\n                        Corporate_BU: e.target.checked\n                      })\n                    }} />} label=\"Monday\" />\n                    <FormControlLabel control={<Checkbox value={values?.Corporate_BU} onChange={(e) => {\n                      setValues({\n                        ...values,\n                        Corporate_BU: e.target.checked\n                      })\n                    }} />} label=\"Tuesday\" />\n                    <FormControlLabel control={<Checkbox value={values?.Corporate_BU} onChange={(e) => {\n                      setValues({\n                        ...values,\n                        Corporate_BU: e.target.checked\n                      })\n                    }} />} label=\"Wednesday\" />\n                    <FormControlLabel control={<Checkbox value={values?.Corporate_BU} onChange={(e) => {\n                      setValues({\n                        ...values,\n                        Corporate_BU: e.target.checked\n                      })\n                    }} />} label=\"Thursday\" />\n                    <FormControlLabel control={<Checkbox value={values?.Corporate_BU} onChange={(e) => {\n                      setValues({\n                        ...values,\n                        Corporate_BU: e.target.checked\n                      })\n                    }} />} label=\"Friday\" />\n                    <FormControlLabel control={<Checkbox value={values?.Corporate_BU} onChange={(e) => {\n                      setValues({\n                        ...values,\n                        Corporate_BU: e.target.checked\n                      })\n                    }} />} label=\"Saturday\" />\n                  </FormGroup>\n                </Grid> */}\n\n              </Grid>\n            </Div>\n          </Div>\n\n          {/* code for purchase list table */}\n          <Div className=\"buttons\" sx={{ mt: 5, ml: 1, display: \"flex\", justifyContent: \"flex-start\" }}>\n            <ButtonGroup\n              type=\"submit\"\n              aria-label=\"split button\"\n              sx={{ mr: { sm: 0, md: 2 } }}\n            >\n              <Button type=\"submit\" className=\"plus-button\">\n                Save\n              </Button>\n              <Button variant=\"contained\" className=\"icon-button\">\n                <FaSave size={18} />\n              </Button>\n            </ButtonGroup>\n\n            <ButtonGroup aria-label=\"split button\" onClick={handleClickCancel}>\n              <Button className=\"plus-button\">Cancel</Button>\n              <Button variant=\"contained\" className=\"icon-button\">\n                <TiCancel size={24} />\n              </Button>\n            </ButtonGroup>\n\n          </Div>\n        </form>\n      </Div>\n    </>\n  );\n};\n\n\n\nexport default CreatePartner;","import Div from \"@jumbo/shared/Div\";\nimport {\n  Button,\n  FormControl,\n  Grid,\n  Autocomplete,\n  TextField,\n  Typography,\n  ButtonGroup,\n  FormControlLabel,\n  InputAdornment,\n  Checkbox,\n  FormGroup,\n} from \"@mui/material\";\nimport React, { useEffect } from \"react\";\nimport { useState } from \"react\";\nimport axios from \"axios\";\nimport { BASE_URL } from \"app/services/auth-services\";\nimport { toast } from \"react-toastify\";\nimport { FaSave } from \"react-icons/fa\";\nimport { TiCancel } from \"react-icons/ti\";\nimport \"./partners.css\";\nimport itemServices from \"app/services/item-master-services\";\nimport { ErpDateField } from \"app/shared/ReuseComponents/ButtonComponent\";\nimport { todayDate } from \"app/shared/ReuseComponents/DateFormatter\";\n\n\nconst EditPartnerList = ({\n  setEditPartnerList,\n  setListMaterial,\n  currentPart,\n  setcurenrtPart\n}) => {\n\n  const token = localStorage.getItem(\"accesstoken\");\n\n  const header = {\n    headers: {\n      Authorization: `Bearer ${token}`,\n      \"Content-Type\": \"application/json\",\n      Accept: \"application/json\",\n    },\n  };\n\n  let userDetails = localStorage.getItem(\"UserDetails\");\n  userDetails = JSON.parse(userDetails);\n\n  // Get Users\n  const [OwnerNames, setOwnerNames] = useState([]);\n\n  const [managedByLists, setManagedByLists] = useState([]);\n  const [countryLists, setCountryLists] = useState([]);\n  const [stateLists, setStateLists] = useState([]);\n  const [cityLists, setCityLists] = useState([]);\n  const [countryId, setCountryId] = useState(\"\");\n  const [stateId, setStateId] = useState(\"\");\n  const [cityId, setcityId] = useState(\"\");\n\n  const getCountryLists = () => {\n    axios\n      .get(`https://countriesnow.space/api/v0.1/countries`, {\n        headers: {\n          //   Authorization: `Bearer ${token}`,\n          \"Content-Type\": \"application/json\",\n          Accept: \"application/json\",\n        },\n      })\n      .then((res) => {\n        console.log(res.data.data);\n        setCountryLists(res.data.data);\n      })\n      .catch((error) => {\n        console.log(\"ds\", error);\n      });\n  };\n\n  const getStateLists = () => {\n    axios.post(\n      `https://countriesnow.space/api/v0.1/countries/states`,\n      { country: selectedCountry },\n      {\n        headers: {\n          //   Authorization: `Bearer ${token}`,\n          \"Content-Type\": \"application/json\",\n          Accept: \"application/json\",\n        },\n      }\n    )\n      .then((res) => {\n        console.log(res.data.data);\n        var state = res.data.data;\n        setStateLists(state.states);\n      })\n      .catch((error) => {\n        console.log(\"ds\", error);\n      });\n  };\n\n  const getCityLists = () => {\n    var payload = {\n      country: selectedCountry,\n      state: selectedState,\n    };\n\n    axios\n      .post(\n        `https://countriesnow.space/api/v0.1/countries/state/cities`,\n        payload,\n        {\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Accept: \"application/json\",\n          },\n        }\n      )\n      .then((res) => {\n        console.log(res.data);\n        var city = res.data.data;\n        var citynames = city?.map((cityname) => {\n          const normalizedCity = cityname.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\n          if (normalizedCity === \"Naini Tal\") {\n            return normalizedCity.replace(\" \", \"\");\n          }\n          return normalizedCity;\n        });\n        setCityLists(citynames);\n      })\n      .catch((error) => {\n        console.log(\"ds\", error);\n      });\n  };\n\n  React.useEffect(() => {\n    getCountryLists();\n    getStateLists();\n    getCityLists();\n  }, [countryId, stateId, cityId]);\n\n\n  const getUsers = async () => {\n    try {\n      const response = await axios.get(`${BASE_URL}/Erpapp/Userlistwithoutpagination/`, header);\n      console.log(\"oji\", response?.data);\n      setOwnerNames(response?.data?.map((item) => `${item?.first_name} ${item?.last_name}`));\n    }\n    catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    getUsers()\n  }, []);\n\n  useEffect(() => {\n    // get managed by from lookup\n    const getManagedBy = () => {\n      var unitpayload = {\n        Search: \"Managed By\",\n      };\n      itemServices\n        .getUnits(unitpayload, header)\n        .then((res) => {\n          console.log(res[0].value);\n          setManagedByLists(res[0].value);\n        })\n        .catch((error) => {\n          console.log(error);\n        });\n    }\n\n    getManagedBy();\n  }, [])\n\n\n  const handleClickBack = () => {\n    setEditPartnerList(false);\n    setListMaterial(true);\n  };\n\n  console.log(\"OwnerNames\", OwnerNames);\n\n  // Update States\n  const [PartnerName, setPartnerName] = useState(\"\");\n  const [OperatedBy, setOperatedBy] = useState(\"\");\n  const [HeadOfOperation, setHeadOfOperation] = useState(\"\");\n  const [BusinessUnitPhone, setBusinessUnitPhone] = useState(0);\n  const [BusinessUnitEMail, setBusinessUnitEMail] = useState(\"\");\n  const [BusinessUnitWeb, setBusinessUnitWeb] = useState(\"\");\n  const [BusinessUnitAddressline1, setBusinessUnitAddressline1] = useState(\"\");\n  const [BusinessUnitAddressline2, setBusinessUnitAddressline2] = useState(\"\");\n  const [BusinessUnitPincode, setBusinessUnitPincode] = useState(\"\");\n  const [BusinessUnitPanNo, setBusinessUnitPanNo] = useState(\"\");\n  const [BusinessUnitGSTNo, setBusinessUnitGSTNo] = useState(\"\");\n  const [AgreementRefNo, setAgreementRefNo] = useState(\"\");\n  const [AgreementValidupto, setAgreementValidupto] = useState(\"\");\n  const [PartnerId, setPartnerId] = useState(\"\");\n  const [id, setId] = useState(\"\");\n  const [selectedCountry, setSelectedCountry] = useState(\"\");\n  const [selectedState, setSelectedState] = useState(\"\");\n  const [selectedCity, setSelectedCity] = useState(\"\");\n  const [startTime, setStartTime] = useState(\"\");\n  const [endTime, setEndTime] = useState(\"\");\n  const [totalHours, setTotalHours] = useState(\"\");\n  const [commisionPaid, setCommisionPaid] = useState(\"\");\n  const [corporateBU, setCorporateBU] = useState(false);\n\n  // Update States\n  const [PartnerName1, setPartnerName1] = useState(\"\");\n  const [OperatedBy1, setOperatedBy1] = useState(\"\");\n  const [HeadOfOperation1, setHeadOfOperation1] = useState(\"\");\n  const [BusinessUnitPhone1, setBusinessUnitPhone1] = useState(0);\n  const [BusinessUnitEMail1, setBusinessUnitEMail1] = useState(\"\");\n  const [BusinessUnitWeb1, setBusinessUnitWeb1] = useState(\"\");\n  const [BusinessUnitAddressline11, setBusinessUnitAddressline11] = useState(\"\");\n  const [BusinessUnitAddressline21, setBusinessUnitAddressline21] = useState(\"\");\n  const [BusinessUnitPincode1, setBusinessUnitPincode1] = useState(\"\");\n  const [BusinessUnitPanNo1, setBusinessUnitPanNo1] = useState(\"\");\n  const [BusinessUnitGSTNo1, setBusinessUnitGSTNo1] = useState(\"\");\n  const [AgreementRefNo1, setAgreementRefNo1] = useState(\"\");\n  const [AgreementValidupto1, setAgreementValidupto1] = useState(\"\");\n  const [selectedCountry1, setSelectedCountry1] = useState(\"\");\n  const [selectedState1, setSelectedState1] = useState(\"\");\n  const [selectedCity1, setSelectedCity1] = useState(\"\");\n  const [startTime1, setStartTime1] = useState(\"\");\n  const [endTime1, setEndTime1] = useState(\"\");\n  const [totalHours1, setTotalHours1] = useState(\"\");\n  const [commisionPaid1, setCommisionPaid1] = useState(\"\");\n  const [corporateBU1, setCorporateBU1] = useState(false);\n\n\n  const HandleUpdate = async (e) => {\n    e.preventDefault();\n\n    let itempayload = {\n      id: id,\n      Partner_Id: PartnerId,\n      Partner_Name: PartnerName,\n      Operated_By: OperatedBy,\n      HeadOf_Operation: HeadOfOperation,\n      BusinessUnit_Phone: BusinessUnitPhone,\n      BusinessUnit_EMail: BusinessUnitEMail,\n      BusinessUnit_Web: BusinessUnitWeb,\n      BusinessUnit_Addressline1: BusinessUnitAddressline1,\n      BusinessUnit_City: selectedCity,\n      BusinessUnit_Country: selectedCountry,\n      BusinessUnit_State: selectedState,\n      BusinessUnit_Zone: \"\",\n      BusinessUnit_Pincode: BusinessUnitPincode,\n      BusinessUnit_PanNo: BusinessUnitPanNo,\n      BusinessUnit_GSTNo: BusinessUnitGSTNo,\n      Agreement_RefNo: AgreementRefNo,\n      Agreement_Validupto: AgreementValidupto ? AgreementValidupto : \"0001-01-01\",\n      Ofc_Starttime: startTime,\n      Ofc_Endtime: endTime,\n      Total_hours: parseFloat(totalHours),\n      Corporate_BU: corporateBU,\n      Commision_Paid: commisionPaid || 0,\n      Company_Id: parseInt(localStorage.getItem(\"OrganizationId\")),\n      Created_By: parseInt(localStorage.getItem(\"UserId\")),\n      Updated_By: parseInt(localStorage.getItem(\"UserId\")),\n      Updated_Date: todayDate,\n    }\n\n    console.log(\"itempayload :\", itempayload);\n\n    try {\n      const res = await axios.put(`${BASE_URL}/Erpapp/PartnerCRUD/`, itempayload, header);\n      console.log(res?.data);\n      if (res?.data?.id) {\n        toast.success(`${PartnerId} is Updated successfully`);\n        getUsers();\n        setListMaterial(true);\n        setEditPartnerList(false);\n\n        // For history Saving\n\n        // Edited Fields History\n\n        let EditedArr = [];\n\n        if (PartnerName !== PartnerName1) {\n          EditedArr.push(\"Partner Name\");\n        }\n        if (OperatedBy !== OperatedBy1) {\n          EditedArr.push(\"Operated By\");\n        }\n        if (HeadOfOperation !== HeadOfOperation1) {\n          EditedArr.push(\"HeadOfOperation\");\n        }\n        if (BusinessUnitPhone !== BusinessUnitPhone1) {\n          EditedArr.push(\"Contact No\");\n        }\n        if (BusinessUnitEMail !== BusinessUnitEMail1) {\n          EditedArr.push(\"Email\");\n        }\n        if (BusinessUnitWeb !== BusinessUnitWeb1) {\n          EditedArr.push(\"Website\");\n        }\n        if (BusinessUnitAddressline1 !== BusinessUnitAddressline11) {\n          EditedArr.push(\"Adress 1\");\n        }\n        if (BusinessUnitAddressline2 !== BusinessUnitAddressline21) {\n          EditedArr.push(\"Adress 2\");\n        }\n        if (BusinessUnitPincode !== BusinessUnitPincode1) {\n          EditedArr.push(\"pincode\");\n        }\n        if (BusinessUnitPanNo !== BusinessUnitPanNo1) {\n          EditedArr.push(\"Pancard No\");\n        }\n        if (BusinessUnitGSTNo !== BusinessUnitGSTNo1) {\n          EditedArr.push(\"GST No\");\n        }\n        if (AgreementRefNo !== AgreementRefNo1) {\n          EditedArr.push(\"Agreement No\");\n        }\n        if (AgreementValidupto !== AgreementValidupto1) {\n          EditedArr.push(\"Agreement Validupto\");\n        }\n        if (selectedCountry !== selectedCountry1) {\n          EditedArr.push(\"Country\");\n        }\n        if (selectedState !== selectedState1) {\n          EditedArr.push(\"State\");\n        }\n        if (selectedCity !== selectedCity1) {\n          EditedArr.push(\"City\");\n        }\n        if (startTime !== startTime1) {\n          EditedArr.push(\"Start Time\");\n        }\n        if (endTime !== endTime1) {\n          EditedArr.push(\"End Time\");\n        }\n        if (totalHours !== totalHours1) {\n          EditedArr.push(\"Total Hours\");\n        }\n        if (commisionPaid !== commisionPaid1) {\n          EditedArr.push(\"Commision Paid\");\n        }\n        if (corporateBU !== corporateBU1) {\n          EditedArr.push(\"Corporate BU\");\n        }\n\n        let editUser = localStorage.getItem(\"Username\");\n\n        console.log(\"EditedArr\", EditedArr);\n        if (EditedArr?.length > 0) {\n          axios\n            .post(\n              `${BASE_URL}/Erpapp/Updaterecordscrud/`,\n              {\n                Document_Id: PartnerId,\n                Updated_Person: `${editUser} edited this Bussiness Unit.`,\n                Is_Deleted: false,\n                Updated_Time: `${new Date().getHours()}:${new Date().getMinutes()}:${new Date().getSeconds()}`,\n                Updated_Field: EditedArr.join(\",\"),\n                Updated_Date: todayDate,\n                Partner_Id: parseInt(localStorage.getItem(\"PartnerId\")),\n                Updated_By: parseInt(localStorage.getItem(\"UserId\")),\n              },\n              {\n                headers: {\n                  Authorization: `Bearer ${token}`,\n                  \"Content-Type\": \"application/json\",\n                  Accept: \"application/json\",\n                },\n              }\n            )\n            .then((res) => {\n              console.log(\"Result\", res.data);\n              // alert(\"Success\")\n            })\n            .catch((res) => {\n              console.log(res.message);\n            });\n        }\n\n      } else {\n        toast.error(\"Please check your inputs\")\n      }\n    }\n    catch (error) {\n      console.log(error);\n      toast.error(\"You do not have permission to perform this action.\");\n    }\n  };\n\n  const getData = async () => {\n    try {\n      const response = await axios.get(`${BASE_URL}/Erpapp/PartnerCRUD/?Partner_Id=${currentPart?.Partner_Id}`, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n          'Content-Type': 'application/json',\n          Accept: 'application/json',\n        }\n      })\n      setPartnerId(response?.data?.Partner_Id);\n      setId(response?.data?.id);\n      setPartnerName(response?.data?.Partner_Name);\n      setOperatedBy(response?.data?.Operated_By);\n      setHeadOfOperation(response?.data?.HeadOf_Operation);\n      setBusinessUnitPhone(response?.data?.BusinessUnit_Phone);\n      setBusinessUnitEMail(response?.data?.BusinessUnit_EMail);\n      setBusinessUnitWeb(response?.data?.BusinessUnit_Web);\n      setBusinessUnitAddressline1(response?.data?.BusinessUnit_Addressline1);\n      setBusinessUnitAddressline2(response?.data?.Operated_By);\n      setSelectedCity(response?.data?.BusinessUnit_City);\n      setSelectedCountry(response?.data?.BusinessUnit_Country);\n      setSelectedState(response?.data?.BusinessUnit_State);\n      setBusinessUnitPincode(response?.data?.BusinessUnit_Pincode);\n      setBusinessUnitPanNo(response?.data?.BusinessUnit_PanNo);\n      setBusinessUnitGSTNo(response?.data?.BusinessUnit_GSTNo);\n      setAgreementRefNo(response?.data?.Agreement_RefNo);\n      setAgreementValidupto(response?.data?.Agreement_Validupto);\n      setStartTime(response?.data?.Ofc_Starttime);\n      setEndTime(response?.data?.Ofc_Endtime);\n      setTotalHours(response?.data?.Total_hours);\n      setCommisionPaid(response?.data?.Commision_Paid);\n      setCorporateBU(response?.data?.Corporate_BU);\n\n      //for History\n      setPartnerName1(response?.data?.Partner_Name);\n      setOperatedBy1(response?.data?.Operated_By);\n      setHeadOfOperation1(response?.data?.HeadOf_Operation);\n      setBusinessUnitPhone1(response?.data?.BusinessUnit_Phone);\n      setBusinessUnitEMail1(response?.data?.BusinessUnit_EMail);\n      setBusinessUnitWeb1(response?.data?.BusinessUnit_Web);\n      setBusinessUnitAddressline11(response?.data?.BusinessUnit_Addressline1);\n      setBusinessUnitAddressline21(response?.data?.Operated_By);\n      setSelectedCity1(response?.data?.BusinessUnit_City);\n      setSelectedCountry1(response?.data?.BusinessUnit_Country);\n      setSelectedState1(response?.data?.BusinessUnit_State);\n      setBusinessUnitPincode1(response?.data?.BusinessUnit_Pincode);\n      setBusinessUnitPanNo1(response?.data?.BusinessUnit_PanNo);\n      setBusinessUnitGSTNo1(response?.data?.BusinessUnit_GSTNo);\n      setAgreementRefNo1(response?.data?.Agreement_RefNo);\n      setAgreementValidupto1(response?.data?.Agreement_Validupto);\n      setStartTime1(response?.data?.Ofc_Starttime);\n      setEndTime1(response?.data?.Ofc_Endtime);\n      setTotalHours1(response?.data?.Total_hours);\n      setCommisionPaid1(response?.data?.Commision_Paid);\n      setCorporateBU1(response?.data?.Corporate_BU);\n\n    }\n    catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    const timer = setTimeout(async () => {\n      await getData();\n    }, 1000);\n\n    return () => clearTimeout(timer);\n  }, [currentPart]);\n\n\n  // get a total office hours\n  useEffect(() => {\n    console.log(\"totalhours\", startTime, endTime)\n    const fromTimeObject = new Date(`2024-01-01T${startTime}`);\n    const toTimeObject = new Date(`2024-01-01T${endTime}`);\n\n    const timeDiff = Math.abs(toTimeObject - fromTimeObject);\n    console.log(\"timeDiff\", timeDiff);\n    const hours = Math.floor(timeDiff / (1000 * 60 * 60));\n    const minutes = Math.floor((timeDiff / (1000 * 60)) % 60);\n    const totalhours = `${hours.toString().padStart(2, '0')}.${minutes.toString().padStart(2, '0')}`;\n    console.log(\"totalhours...\", totalhours)\n    setTotalHours(totalhours);\n  }, [startTime, endTime]);\n\n\n  return (\n    <>\n      <Div>\n        <Typography variant=\"h3\" sx={{ fontWeight: 500 }}>\n          Edit Business Unit\n        </Typography>\n\n        <Div className=\"row\" sx={{ mt: 3 }}>\n          <Div className=\"col-12 col-md-6\">\n            <Grid container>\n              <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\n                <Typography className=\"col-md-12 col-lg-7 col-xl-5 input-label\" sx={{ mt: 2 }}>\n                  Business Unit Name <span className=\"required\">*</span>\n                </Typography>\n                <FormControl className=\"col-md-12 col-lg-5 col-xl-6\">\n                  <TextField\n                    name=\"Bussiness_Unit\"\n                    value={PartnerName}\n                    onChange={(e) => setPartnerName(e.target.value)}\n                    className=\"input-box\"\n                    id=\"outlined-basic\"\n                    placeholder=\"Business Unit Name\"\n                    variant=\"outlined\"\n                  />\n                </FormControl>\n              </Grid>\n\n              <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\n                <Typography className=\"col-md-12 col-lg-7 col-xl-5 input-label\" sx={{ mt: 2 }}>\n                  Head Of Operation <span className=\"required\">*</span>\n                </Typography>\n                <FormControl className=\"col-md-12 col-lg-5 col-xl-6\">\n                  <Autocomplete\n                    className=\"col-12 search-select\"\n                    id=\"combo-box-demo\"\n                    disablePortal\n                    name=\"Head_Of_Operation\"\n                    options={OwnerNames}\n                    getOptionLabel={(option) => {\n                      if (typeof option === \"string\") {\n                        return option;\n                      }\n                      if (option && option?.first_name) {\n                        return `${option?.first_name} ${option?.last_name}`;\n                      }\n                      return \"\";\n                    }}\n                    value={HeadOfOperation}\n                    onChange={(e, newValue) => {\n                      setHeadOfOperation(`${newValue?.first_name} ${newValue?.last_name}`);\n                      console.log(newValue);\n                    }}\n                    renderInput={(params) => <TextField {...params} placeholder=\"Head Of Operation\" />}\n                  />\n                </FormControl>\n\n              </Grid>\n\n              <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\n                <Typography className=\"col-md-12 col-lg-7 col-xl-5 input-label\" sx={{ mt: 2 }}>\n                  Email Id <span className=\"required\">*</span>\n                </Typography>\n                <FormControl className=\"col-md-12 col-lg-5 col-xl-6\">\n                  <TextField\n                    name=\"Email\"\n                    value={BusinessUnitEMail}\n                    onChange={(e) => setBusinessUnitEMail(e.target.value)}\n                    className=\"col-12 input-box\"\n                    id=\"outlined-basic\"\n                    placeholder=\"Mail Id\"\n                    variant=\"outlined\"\n                  />\n                </FormControl>\n\n              </Grid>\n\n              <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\n                <Typography className=\"col-md-12 col-lg-7 col-xl-5 input-label\" sx={{ mt: 2 }}>\n                  Address Line 1 <span className=\"required\">*</span>\n                </Typography>\n                <FormControl className=\"col-md-12 col-lg-5 col-xl-6\">\n                  <TextField\n                    name=\"Address_1\"\n                    value={BusinessUnitAddressline1}\n                    onChange={(e) => setBusinessUnitAddressline1(e.target.value)}\n                    className=\"col-12 input-box\"\n                    id=\"outlined-basic\"\n                    placeholder=\"Address Line 1\"\n                    variant=\"outlined\"\n                  />\n                </FormControl>\n\n              </Grid>\n\n              <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\n                <Typography className=\"col-md-12 col-lg-7 col-xl-5 input-label\" sx={{ mt: 2 }}>\n                  Country <span className=\"required\">*</span>\n                </Typography>\n                <FormControl className=\"col-md-12 col-lg-5 col-xl-6\">\n                  <Autocomplete\n                    className=\"search-select col-12\"\n                    name=\"selectedCountry\"\n                    options={countryLists}\n                    getOptionLabel={(option) => {\n                      if (typeof option === \"string\") {\n                        return option;\n                      }\n                      if (option && option?.country) {\n                        return option?.country;\n                      }\n                      return \"\";\n                    }}\n                    value={selectedCountry}\n                    onChange={(e, newValue) => {\n                      setSelectedCountry(newValue?.country);\n                      setCountryId(newValue?.id);\n                    }}\n                    renderInput={(params) => (\n                      <TextField\n                        {...params}\n                        placeholder=\"Choose a country\"\n                        autoComplete=\"off\"\n                      />\n                    )}\n                  />\n                  {/* <TextField\n                    name=\"Country\"\n                    value={values.Country}\n                    onChange={handleChangeItem}\n                    className=\"col-12 input-box\"\n                    id=\"outlined-basic\"\n                    placeholder=\"Country\"\n                    variant=\"outlined\"\n                  /> */}\n                </FormControl>\n\n              </Grid>\n\n              <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\n                <Typography className=\"col-md-12 col-lg-7 col-xl-5 input-label\" sx={{ mt: 2 }}>\n                  City <span className=\"required\">*</span>\n                </Typography>\n                <FormControl className=\"col-md-12 col-lg-5 col-xl-6\">\n                  <Autocomplete\n                    className=\"search-select col-12\"\n                    name=\"selectedState\"\n                    options={cityLists}\n                    getOptionLabel={(option) => {\n                      if (typeof option === \"string\") {\n                        return option;\n                      }\n                      if (option && option) {\n                        return option;\n                      }\n                      return \"\";\n                    }}\n                    value={selectedCity}\n                    onChange={(e, newValue) => {\n                      setSelectedCity(newValue);\n                      setcityId(newValue?.id);\n                    }}\n                    renderInput={(params) => (\n                      <TextField\n                        {...params}\n                        placeholder=\"Choose a city\"\n                        autoComplete=\"off\"\n                      />\n                    )}\n                  />\n                  {/* <TextField\n                    name=\"City\"\n                    value={values.City}\n                    onChange={handleChangeItem}\n                    className=\"col-12 input-box\"\n                    id=\"outlined-basic\"\n                    placeholder=\"City\"\n                    variant=\"outlined\"\n                  /> */}\n                </FormControl>\n\n              </Grid>\n\n              <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\n                <Typography className=\"col-md-12 col-lg-7 col-xl-5 input-label\" sx={{ mt: 2 }}>\n                  PAN No\n                </Typography>\n                <FormControl className=\"col-md-12 col-lg-5 col-xl-6\">\n                  <TextField\n                    name=\"Pan_No\"\n                    value={BusinessUnitPanNo}\n                    onChange={(e) => setBusinessUnitPanNo(e.target.value)}\n                    className=\"col-12 input-box\"\n                    id=\"outlined-basic\"\n                    placeholder=\"PAN No\"\n                    variant=\"outlined\"\n                  />\n                </FormControl>\n\n              </Grid>\n\n              <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\n                <Typography className=\"col-md-12 col-lg-7 col-xl-5 input-label\" sx={{ mt: 2 }}>\n                  Agreement Ref No\n                </Typography>\n                <FormControl className=\"col-md-12 col-lg-5 col-xl-6\">\n                  <TextField\n                    name=\"Agreement_Ref\"\n                    value={AgreementRefNo}\n                    onChange={(e) => setAgreementRefNo(e.target.value)}\n                    className=\"col-12 input-box\"\n                    id=\"outlined-basic\"\n                    placeholder=\"Agreement Ref No\"\n                    variant=\"outlined\"\n                  />\n                </FormControl>\n              </Grid>\n\n              <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\n                <Typography className=\"col-md-12 col-lg-7 col-xl-5 input-label\" sx={{ mt: 2 }}>\n                  Office Timing From  <span className=\"required\">*</span>\n                </Typography>\n                <FormControl className=\"col-md-12 col-lg-5 col-xl-6\">\n                  <TextField\n                    type=\"time\"\n                    name=\"startTime\"\n                    value={startTime}\n                    onChange={(e) => setStartTime(e.target.value)}\n                    className=\"col-12 input-box\"\n                    id=\"outlined-basic\"\n                    placeholder=\"From Time\"\n                    variant=\"outlined\"\n                  />\n                </FormControl>\n              </Grid>\n\n              <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\n                <Typography className=\"col-md-12 col-lg-7 col-xl-5 input-label\" sx={{ mt: 2 }}>\n                  Total Hours  <span className=\"required\">*</span>\n                </Typography>\n                <FormControl className=\"col-md-12 col-lg-5 col-xl-6\">\n                  <TextField\n                    type=\"text\"\n                    name=\"totalHours\"\n                    value={totalHours}\n                    // onChange={handleChangeItem}\n                    className=\"col-12 input-box\"\n                    id=\"outlined-basic\"\n                    placeholder=\"Total Hours\"\n                    variant=\"outlined\"\n                    disabled\n                  />\n                </FormControl>\n              </Grid>\n\n              <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\n                <Typography className=\"col-md-12 col-lg-7 col-xl-5 input-label\" sx={{ mt: 2 }}>\n                  Commision Paid\n                </Typography>\n                <FormControl className=\"col-md-12 col-lg-5 col-xl-6\">\n                  <TextField\n                    type=\"text\"\n                    name=\"commisionPaid\"\n                    value={commisionPaid}\n                    onChange={(e) => {\n                      if (e.target.name === \"commisionPaid\") {\n                        const regex = /^(100(\\.0{1,2})?|[1-9]?\\d(\\.\\d{1,2})?)$/;\n                        const getValue = e.target.value\n                        console.log(\"regex.test(getValue)\", regex, getValue);\n                        if (regex.test(getValue)) {\n                          setCommisionPaid(getValue);\n                        } else {\n                          setCommisionPaid(\"\")\n                        }\n                      }\n                    }}\n                    className=\"col-12 input-box\"\n                    id=\"outlined-basic\"\n                    placeholder=\"Commision Paid\"\n                    variant=\"outlined\"\n                    InputProps={{\n                      endAdornment: <InputAdornment position=\"end\">%</InputAdornment>\n                    }}\n                  />\n                </FormControl>\n              </Grid>\n\n              {/* <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\n                <Typography className=\"col-md-12 col-lg-7 col-xl-5 input-label\" sx={{ mt: 2 }}>\n                  Corporate BU\n                </Typography>\n                <FormGroup className=\"col-md-12 col-lg-5 col-xl-6\">\n                  <FormControlLabel control={<Checkbox value={corporateBU} checked={corporateBU} onChange={(e) => setCorporateBU(e.target.checked)} />} label=\"\" />\n                </FormGroup>\n              </Grid> */}\n\n            </Grid>\n          </Div>\n\n          <Div className=\"col-12 col-md-6\">\n            <Grid container>\n\n              <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\n                <Typography className=\"col-md-12 col-lg-7 col-xl-5 input-label\" sx={{ mt: 2 }}>\n                  Operated By <span className=\"required\">*</span>\n                </Typography>\n                <FormControl className=\"col-md-12 col-lg-5 col-xl-6\">\n                  <Autocomplete\n                    className=\"search-select col-12\"\n                    name=\"Operated_By\"\n                    options={managedByLists}\n                    getOptionLabel={(option) => {\n                      if (typeof option === \"string\") {\n                        return option;\n                      }\n                      if (option && option?.value) {\n                        return option?.value;\n                      }\n                      return \"\";\n                    }}\n                    value={OperatedBy}\n                    onChange={(e, newValue) => {\n                      setOperatedBy(newValue?.value);\n                    }}\n                    renderInput={(params) => (\n                      <TextField\n                        {...params}\n                        placeholder=\"Select Managed By\"\n                        autoComplete=\"off\"\n                      />\n                    )}\n                  />\n                </FormControl>\n\n              </Grid>\n\n              <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\n                <Typography className=\"col-md-12 col-lg-7 col-xl-5 input-label\" sx={{ mt: 2 }}>\n                  Contact No <span className=\"required\">*</span>\n                </Typography>\n                <FormControl className=\"col-md-12 col-lg-5 col-xl-6\">\n                  <TextField className=\"col-12 search-select\"\n                    name=\"Contact\"\n                    value={BusinessUnitPhone}\n                    onChange={(e) => setBusinessUnitPhone(e.target.value)}\n                    variant=\"outlined\"\n                    placeholder=\"Contact No\"\n                  />\n                </FormControl>\n\n              </Grid>\n\n              <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\n                <Typography className=\"col-md-12 col-lg-7 col-xl-5 input-label\" sx={{ mt: 2 }}>\n                  Website\n                </Typography>\n                <FormControl className=\"col-md-12 col-lg-5 col-xl-6\">\n                  <TextField\n                    name=\"Website\"\n                    value={BusinessUnitWeb}\n                    onChange={(e) => setBusinessUnitWeb(e.target.value)}\n                    className=\"col-12 input-box\"\n                    id=\"outlined-basic\"\n                    placeholder=\"Website\"\n                    variant=\"outlined\"\n                  />\n                </FormControl>\n\n              </Grid>\n\n              <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\n                <Typography className=\"col-md-12 col-lg-7 col-xl-5 input-label\" sx={{ mt: 2 }}>\n                  Address Line 2 <span className=\"required\">*</span>\n                </Typography>\n                <FormControl className=\"col-md-12 col-lg-5 col-xl-6\">\n                  <TextField\n                    name=\"Address_2\"\n                    value={BusinessUnitAddressline2}\n                    onChange={(e) => setBusinessUnitAddressline2(e.target.value)}\n                    className=\"col-12 input-box\"\n                    id=\"outlined-basic\"\n                    placeholder=\"Address Line 2\"\n                    variant=\"outlined\"\n                  />\n                </FormControl>\n\n              </Grid>\n\n              <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\n                <Typography className=\"col-md-12 col-lg-7 col-xl-5 input-label\" sx={{ mt: 2 }}>\n                  State<span className=\"required\">*</span>\n                </Typography>\n                <FormControl className=\"col-md-12 col-lg-5 col-xl-6\">\n                  <Autocomplete\n                    className=\"search-select col-12\"\n                    name=\"selectedState\"\n                    options={stateLists}\n                    getOptionLabel={(option) => {\n                      if (typeof option === \"string\") {\n                        return option;\n                      }\n                      if (option && option?.name) {\n                        return option?.name;\n                      }\n                      return \"\";\n                    }}\n                    value={selectedState}\n                    onChange={(e, newValue) => {\n                      setSelectedState(newValue?.name);\n                      setStateId(newValue?.id);\n                    }}\n                    renderInput={(params) => (\n                      <TextField\n                        {...params}\n                        placeholder=\"Choose a state\"\n                        autoComplete=\"off\"\n                      />\n                    )}\n                  />\n\n                  {/* <TextField\n                    name=\"State\"\n                    value={values.State}\n                    onChange={handleChangeItem}\n                    className=\"col-12 input-box\"\n                    id=\"outlined-basic\"\n                    placeholder=\"State\"\n                    variant=\"outlined\"\n                  /> */}\n                  {/* <Div style={{ color: \"red\" }}>{errors.poNumber?.message}</Div> */}\n                  {/*  */}\n                </FormControl>\n\n              </Grid>\n\n              <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\n                <Typography className=\"col-md-12 col-lg-7 col-xl-5 input-label\" sx={{ mt: 2 }}>\n                  PIN Code <span className=\"required\">*</span>\n                </Typography>\n                <FormControl className=\"col-md-12 col-lg-5 col-xl-6\">\n                  <TextField\n                    name=\"Pin_Code\"\n                    value={BusinessUnitPincode}\n                    onChange={async (e) => {\n                      setBusinessUnitPincode(e.target.value);\n                      const getValue = e.target.value\n                      try {\n                        const response = await axios.get(`${BASE_URL}/Erpapp/PincodeCRUD/?pincode=${getValue}`, header);\n                        const pincodeData = response?.data;\n                        // const pincodeExists = pincodeData?.some((opt) => opt?.cityname?.toLowerCase() === selectedCity?.toLowerCase());\n                        if (getValue?.length > 5) {\n                          if (pincodeData?.length > 0) {\n                            toast.success(\"Pincode is valid\");\n                          } else {\n                            toast.error(\"The provided pincode doesn't exist in the city.\");\n                          }\n                        }\n                      } catch (error) {\n                        console.error(error);\n                        toast.error(\"Please enter a valid pincode\");\n                      }\n                    }}\n                    className=\"col-12 input-box\"\n                    id=\"outlined-basic\"\n                    placeholder=\"PIN Code\"\n                    variant=\"outlined\"\n                  />\n                </FormControl>\n\n              </Grid>\n\n              <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\n                <Typography className=\"col-md-12 col-lg-7 col-xl-5 input-label\" sx={{ mt: 2 }}>\n                  GST No\n                </Typography>\n                <FormControl className=\"col-md-12 col-lg-5 col-xl-6\">\n                  <TextField\n                    name=\"GST_No\"\n                    value={BusinessUnitGSTNo}\n                    onChange={(e) => setBusinessUnitGSTNo(e.target.value)}\n                    className=\"col-12 input-box\"\n                    id=\"outlined-basic\"\n                    placeholder=\"GST No\"\n                    variant=\"outlined\"\n                  />\n                </FormControl>\n\n              </Grid>\n\n              <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\n                <Typography className=\"col-md-12 col-lg-7 col-xl-5 input-label\" sx={{ mt: 2 }}>\n                  Valid Upto\n                </Typography>\n                <FormControl className=\"col-md-12 col-lg-5 col-xl-6\">\n                  <ErpDateField\n                    id=\"AgreementValidupto\"\n                    name=\"AgreementValidupto\"\n                    inputValue={AgreementValidupto === \"0001-01-01\" ? \"\" : AgreementValidupto}\n                    handleInputChange={(e) => setAgreementValidupto(e.target.value)}\n                    variant=\"outlined\"\n                  />\n                </FormControl>\n              </Grid>\n\n              <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\n                <Typography className=\"col-md-12 col-lg-7 col-xl-5 input-label\" sx={{ mt: 2 }}>\n                  Office Timing To  <span className=\"required\">*</span>\n                </Typography>\n                <FormControl className=\"col-md-12 col-lg-5 col-xl-6\">\n                  <TextField\n                    type=\"time\"\n                    name=\"endTime\"\n                    value={endTime}\n                    onChange={(e) => setEndTime(e.target.value)}\n                    className=\"col-12 input-box\"\n                    id=\"outlined-basic\"\n                    placeholder=\"To Time\"\n                    variant=\"outlined\"\n                  />\n                </FormControl>\n              </Grid>\n\n              {/* <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\n                <Typography className=\"col-md-12 col-lg-7 col-xl-5 input-label\" sx={{ mt: 2 }}>\n                  Working Days\n                </Typography>\n                <FormGroup className=\"col-md-12 col-lg-5 col-xl-6\" sx={{ display: \"flex\", flexDirection: \"row\", flexWrap: \"wrap\", columnGap: 3 }}>\n                  <FormControlLabel control={<Checkbox />} label=\"Sunday\" />\n                  <FormControlLabel control={<Checkbox />} label=\"Monday\" />\n                  <FormControlLabel control={<Checkbox />} label=\"Tuesday\" />\n                  <FormControlLabel control={<Checkbox />} label=\"Wednesday\" />\n                  <FormControlLabel control={<Checkbox />} label=\"Thursday\" />\n                  <FormControlLabel control={<Checkbox />} label=\"Friday\" />\n                  <FormControlLabel control={<Checkbox />} label=\"Saturday\" />\n                </FormGroup>\n              </Grid> */}\n\n\n              <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\n                <Typography className=\"col-md-12 col-lg-7 col-xl-5 input-label\" sx={{ mt: 2 }}>\n                  Corporate BU\n                </Typography>\n                <FormGroup className=\"col-md-12 col-lg-5 col-xl-6\">\n                  <FormControlLabel control={<Checkbox value={corporateBU} checked={corporateBU} onChange={(e) => setCorporateBU(e.target.checked)} />} label=\"\" />\n                </FormGroup>\n              </Grid>\n\n            </Grid>\n          </Div>\n        </Div>\n\n        {/* code for purchase list table */}\n        <Div\n          className=\"buttons\"\n          sx={{ mt: 5, ml: 1, display: \"flex\", justifyContent: \"flex-start\" }}\n        >\n          <ButtonGroup\n            type=\"submit\"\n            aria-label=\"split button\"\n            sx={{ mr: { md: 2 } }}\n            onClick={HandleUpdate}\n          >\n            <Button type=\"submit\" className=\"plus-button\">\n              Update\n            </Button>\n            <Button variant=\"contained\" className=\"icon-button\">\n              <FaSave size={18} />\n            </Button>\n          </ButtonGroup>\n\n          <ButtonGroup aria-label=\"split button\" onClick={handleClickBack}>\n            <Button className=\"plus-button\">Cancel</Button>\n            <Button variant=\"contained\" className=\"icon-button\">\n              <TiCancel size={24} />\n            </Button>\n          </ButtonGroup>\n\n        </Div>\n      </Div>\n    </>\n  );\n};\n\n\n\nexport default EditPartnerList;","import JumboScrollbar from '@jumbo/components/JumboScrollbar'\r\nimport { Table, TableBody, TableHead, TableRow, TableCell, Grow } from '@mui/material'\r\nimport React from 'react'\r\nimport { CellNoborder } from '../../pages/TableStyled'\r\nimport { DateFormatter } from './DateFormatter'\r\nimport Div from '@jumbo/shared/Div'\r\nimport useResponsive from 'app/pages/useResponsive'\r\n\r\nconst HistoryOverview = ({ updatedHistory, itemId = \"Item Id\" }) => {\r\n\r\n    let isMobile = useResponsive(\"down\", \"md\");\r\n\r\n    console.log(\"updatedHistory\", updatedHistory);\r\n    return (\r\n        <JumboScrollbar\r\n            autoHeight={true}\r\n            autoHideTimeout={4000}\r\n            autoHeightMin={300}\r\n            autoHide={true}\r\n            hideTracksWhenNotNeeded\r\n            id=\"no-more-tables\"\r\n        >\r\n            <Grow\r\n                in={true}\r\n                style={{ transformOrigin: '0 0 0' }}\r\n                {...(true ? { timeout: 500 } : {})}\r\n            >\r\n                <Table stickyHeader className=\"table\">\r\n                    <TableHead className=\"history-header\">\r\n                        <TableRow>\r\n                            <CellNoborder sx={{ fontWeight: 900, minWidth: { xs: \"auto\", md: \"200px !important\" } }}>Activity Date</CellNoborder>\r\n                            <CellNoborder sx={{ fontWeight: 900, minWidth: { xs: \"auto\", md: \"200px !important\" } }}>{itemId}</CellNoborder>\r\n                            <CellNoborder sx={{ fontWeight: 900, minWidth: { xs: \"auto\", md: \"200px !important\" } }}>History</CellNoborder>\r\n                            <CellNoborder sx={{ fontWeight: 900, minWidth: { xs: \"auto\", md: \"200px !important\" } }}>Updated Fields</CellNoborder>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {updatedHistory?.length > 0 ? (\r\n                            updatedHistory?.map((data1, index) => (\r\n                                <TableRow>\r\n                                    <CellNoborder sx={{ minWidth: { xs: \"auto\", md: \"200px !important\" } }} data-title=\"Activity Date\">\r\n                                        <DateFormatter date={data1?.Updated_Date} />\r\n                                        <span style={{ marginLeft: \"5px\" }}>\r\n                                            {data1?.Updated_Time ? data1?.Updated_Time?.slice(0, 8) : isMobile ? \"-\" : \"\"}\r\n                                        </span>\r\n                                    </CellNoborder>\r\n                                    <CellNoborder sx={{ minWidth: { xs: \"auto\", md: \"200px !important\" } }} data-title={itemId}>\r\n                                        {data1?.Document_Id ? data1?.Document_Id : isMobile ? \"-\" : \"\"}\r\n                                    </CellNoborder>\r\n                                    <CellNoborder sx={{ minWidth: { xs: \"auto\", md: \"200px !important\" } }} data-title=\"History\">\r\n                                        {data1?.Updated_Person ? data1?.Updated_Person : isMobile ? \"-\" : \"\"}\r\n                                    </CellNoborder>\r\n                                    <CellNoborder sx={{ minWidth: { xs: \"auto\", md: \"200px !important\" } }} data-title=\"Updated Fields\">\r\n                                        {data1?.Updated_Field ? data1?.Updated_Field : isMobile ? \"-\" : \"\"}\r\n                                        {Array.isArray(data1?.Histroy) ? data1?.Histroy?.map(item => (\r\n                                            <Div sx={{ display: \"flex\", alignItems: \"center\", flexWrap: \"wrap\" }}>\r\n                                                {item?.keys?.map((i, idx) => {\r\n                                                    return (\r\n                                                        <span style={{ color: idx == 0 ? \"#00BFFF\" : \"\", marginRight: idx == 0 ? \"8px\" : \"\" }}>{i} {idx == 0 ? \"-\" : idx == item?.keys.length - 1 ? \"\" : \",\"}</span>\r\n                                                    )\r\n                                                })}\r\n                                            </Div>\r\n                                        )) : \"\"}\r\n                                    </CellNoborder>\r\n                                </TableRow>\r\n                            )\r\n                            )) :\r\n                            <TableRow>\r\n                                <TableCell colSpan={4} sx={{ textAlign: \"center\" }}>\r\n                                    No Records\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        }\r\n                    </TableBody>\r\n                </Table>\r\n            </Grow>\r\n        </JumboScrollbar>\r\n    )\r\n}\r\n\r\nexport default HistoryOverview;","import Div from \"@jumbo/shared/Div\";\r\nimport {\r\n  Button,\r\n  Typography,\r\n  Box,\r\n  ButtonGroup,\r\n  Tab,\r\n  useTheme,\r\n  useMediaQuery,\r\n  Grid,\r\n} from \"@mui/material\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport {\r\n  TabContext,\r\n  TabList,\r\n  TabPanel\r\n} from \"@mui/lab\";\r\nimport { BASE_URL } from \"app/services/auth-services\";\r\nimport axios from \"axios\";\r\nimport { MdClose } from \"react-icons/md\";\r\nimport { format } from \"date-fns\";\r\nimport HistoryOverview from \"app/shared/ReuseComponents/HistoryOverview\";\r\n\r\n\r\nconst PartnerOverview = ({\r\n  setListOverview,\r\n  setListMaterial,\r\n  buid,\r\n  scrollHeight\r\n}) => {\r\n  const token = localStorage.getItem(\"accesstoken\");\r\n\r\n  const header = {\r\n    headers: {\r\n      Authorization: `Bearer ${token}`,\r\n      \"Content-Type\": \"application/json\",\r\n      Accept: \"application/json\",\r\n    },\r\n  };\r\n\r\n  //Date format \r\n  let userDetails = localStorage.getItem(\"UserDetails\");\r\n  userDetails = JSON.parse(userDetails);\r\n  let companyId = userDetails && userDetails.Organization_Id;\r\n  let id1 = userDetails && userDetails.id;\r\n  const Partner_Id = parseInt(localStorage.getItem(\"PartnerId\"));\r\n\r\n\r\n\r\n  const theme = useTheme();\r\n  const isMdUp = useMediaQuery(theme.breakpoints.up('md'));\r\n\r\n  const [updateHistory, setUpdateHistory] = useState([]);\r\n  const [dateFormat, setDateFormat] = useState(\"\");\r\n\r\n  const [value, setValue] = useState(\"1\");\r\n\r\n\r\n  const [Businessunitlist, setBusinessunitlist] = useState([])\r\n\r\n\r\n  const handleChange = (event, newValue) => {\r\n    setValue(newValue);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setListOverview(false);\r\n    setListMaterial(true);\r\n  };\r\n\r\n\r\n  // get date format from organization get api\r\n  useEffect(() => {\r\n    if (id1) {\r\n      axios\r\n        .get(`${BASE_URL}/Erpapp/CompanyCRUD/?id=${companyId}`, header)\r\n        .then((res) => {\r\n          console.log(\"D\", res?.data);\r\n          console.log(\"res.data?.DateFormat\", res?.data?.DateFormat);\r\n          setDateFormat(res?.data?.DateFormat);\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n        });\r\n    }\r\n  }, []);\r\n\r\n\r\n  const getList = async () => {\r\n    await axios.get(`${BASE_URL}/Erpapp/PartnerCRUD/?Partner_Id=${buid}`, header)\r\n      .then((res) => {\r\n        setBusinessunitlist(res?.data)\r\n        // for history\r\n        axios\r\n          .get(\r\n            `${BASE_URL}/Erpapp/Updaterecordsfilter/?Partner_Id=${Partner_Id}&Document_Id=${res?.data?.Partner_Id}`,\r\n            header\r\n          )\r\n          .then((res) => {\r\n            console.error(\"data\", res?.data);\r\n            setUpdateHistory(res?.data);\r\n          })\r\n          .catch((err) => {\r\n            console.log(\"ds\", err);\r\n          });\r\n\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      })\r\n  }\r\n\r\n  useEffect(() => {\r\n    getList();\r\n  }, [buid]);\r\n\r\n  return (\r\n\r\n    <>\r\n      <Div className=\"row\">\r\n\r\n        <Div className=\"col-sm-12 col-md-10\">\r\n          <Typography variant=\"h3\" sx={{ fontWeight: 500 }}>\r\n            Bussiness Unit Overview\r\n          </Typography>\r\n        </Div>\r\n\r\n\r\n        <Div>\r\n          <TabContext value={value}>\r\n            <Box sx={{ borderBottom: 0, borderColor: \"divider\" }}>\r\n              <TabList\r\n                onChange={handleChange}\r\n                aria-label=\"lab API tabs example\"\r\n              >\r\n                <Tab\r\n                  label=\"Overview\"\r\n                  value=\"1\"\r\n                  sx={{ fontSize: \"16px\", color: \"#000000\" }}\r\n                />\r\n\r\n                <Tab\r\n                  label=\"History\"\r\n                  value=\"3\"\r\n                  sx={{ fontSize: \"16px\", color: \"#000000\" }}\r\n                />\r\n              </TabList>\r\n            </Box>\r\n\r\n            <TabPanel value=\"1\" sx={{ p: { xs: 1, md: 2 } }}>\r\n              <Grid container>\r\n                <Grid item xs={5.5} md={4} lg={3} xl={2}>\r\n                  <Typography variant=\"h4\" sx={{ fontSize: isMdUp ? \"14px !important\" : \"12px !important\" }}>Date</Typography>\r\n                  <Typography variant=\"h4\" sx={{ fontSize: isMdUp ? \"14px !important\" : \"12px !important\" }}>BU Id</Typography>\r\n                  <Typography variant=\"h4\" sx={{ fontSize: isMdUp ? \"14px !important\" : \"12px !important\" }}>BU Name</Typography>\r\n                  <Typography variant=\"h4\" sx={{ fontSize: isMdUp ? \"14px !important\" : \"12px !important\" }}>Head of Operation</Typography>\r\n                  <Typography variant=\"h4\" sx={{ fontSize: isMdUp ? \"14px !important\" : \"12px !important\" }}>Contact No</Typography>\r\n                  <Typography variant=\"h4\" sx={{ fontSize: isMdUp ? \"14px !important\" : \"12px !important\" }}>Email Id</Typography>\r\n                  {/* <Typography variant=\"h4\" sx={{ fontSize: isMdUp ? \"14px !important\" : \"12px !important\" }}>Location</Typography> */}\r\n                  <Typography variant=\"h4\" sx={{ fontSize: isMdUp ? \"14px !important\" : \"12px !important\" }}>Web</Typography>\r\n                  <Typography variant=\"h4\" sx={{ fontSize: isMdUp ? \"14px !important\" : \"12px !important\" }}>Office From Time</Typography>\r\n                  <Typography variant=\"h4\" sx={{ fontSize: isMdUp ? \"14px !important\" : \"12px !important\" }}>Office End Time</Typography>\r\n                  <Typography variant=\"h4\" sx={{ fontSize: isMdUp ? \"14px !important\" : \"12px !important\" }}>Commision Paid</Typography>\r\n                  <Typography variant=\"h4\" sx={{ fontSize: isMdUp ? \"14px !important\" : \"12px !important\" }}>Address</Typography>\r\n                  <Typography variant=\"h4\" sx={{ fontSize: isMdUp ? \"14px !important\" : \"12px !important\" }}>Corporate BU</Typography>\r\n                </Grid>\r\n\r\n                <Grid item xs={6.5} md={8} lg={8}>\r\n                  <Typography variant=\"h4\" sx={{ fontSize: isMdUp ? \"14px !important\" : \"12px !important\" }}>: {dateFormat &&\r\n                    Businessunitlist?.Created_Date &&\r\n                    format(new Date(Businessunitlist?.Created_Date), dateFormat)\r\n                    || Businessunitlist?.Created_Date}</Typography>\r\n                  <Typography variant=\"h4\" sx={{ fontSize: isMdUp ? \"14px !important\" : \"12px !important\" }}>: {Businessunitlist?.Partner_Id} </Typography>\r\n                  <Typography variant=\"h4\" sx={{ fontSize: isMdUp ? \"14px !important\" : \"12px !important\" }}>: {Businessunitlist?.Partner_Name}</Typography>\r\n                  <Typography variant=\"h4\" sx={{ fontSize: isMdUp ? \"14px !important\" : \"12px !important\" }}>: {Businessunitlist?.HeadOf_Operation} </Typography>\r\n                  <Typography variant=\"h4\" sx={{ fontSize: isMdUp ? \"14px !important\" : \"12px !important\" }}>: {Businessunitlist?.BusinessUnit_Phone} </Typography>\r\n                  <Typography variant=\"h4\" sx={{ fontSize: isMdUp ? \"14px !important\" : \"12px !important\" }}>: {Businessunitlist?.BusinessUnit_EMail} </Typography>\r\n                  {/* <Typography variant=\"h4\" sx={{ fontSize: isMdUp ? \"14px !important\" : \"12px !important\" }}>: {Businessunitlist?.BusinessUnit_City} </Typography> */}\r\n                  <Typography variant=\"h4\" sx={{ fontSize: isMdUp ? \"14px !important\" : \"12px !important\" }}>: {Businessunitlist?.BusinessUnit_Web || \"-\"} </Typography>\r\n                  <Typography variant=\"h4\" sx={{ fontSize: isMdUp ? \"14px !important\" : \"12px !important\" }}>: {Businessunitlist?.Ofc_Starttime} </Typography>\r\n                  <Typography variant=\"h4\" sx={{ fontSize: isMdUp ? \"14px !important\" : \"12px !important\" }}>: {Businessunitlist?.Ofc_Endtime} </Typography>\r\n                  <Typography variant=\"h4\" sx={{ fontSize: isMdUp ? \"14px !important\" : \"12px !important\" }}>: {Businessunitlist?.Commision_Paid} % </Typography>\r\n                  <Typography variant=\"h4\" sx={{ fontSize: isMdUp ? \"14px !important\" : \"12px !important\" }}>: {Businessunitlist?.BusinessUnit_Addressline1},{Businessunitlist?.BusinessUnit_City}, {Businessunitlist?.BusinessUnit_State},\r\n                    {Businessunitlist?.BusinessUnit_Country} - {Businessunitlist?.BusinessUnit_Pincode}\r\n                  </Typography>\r\n                  <Typography variant=\"h4\" sx={{ fontSize: isMdUp ? \"14px !important\" : \"12px !important\" }}>: {Businessunitlist?.Corporate_BU ? \"Yes\" : \"No\"} </Typography>\r\n                </Grid>\r\n              </Grid>\r\n            </TabPanel>\r\n\r\n\r\n            <TabPanel value=\"3\" sx={{ p: 1.5 }}>\r\n              <HistoryOverview updatedHistory={updateHistory} itemId={\"Business Unit Id\"} />\r\n            </TabPanel>\r\n          </TabContext>\r\n        </Div>\r\n\r\n      </Div>\r\n      <Div sx={{ mt: { xs: 5, md: 20 } }}>\r\n        <ButtonGroup\r\n          aria-label=\"split button\"\r\n          sx={{\r\n            mt: { xs: 0.5, lg: 0 },\r\n            mr: { xs: 0, md: 1 }\r\n          }}\r\n          onClick={handleClose}>\r\n          <Button className=\"plus-button\" sx={{ width: \"99px !important\" }}>Close</Button>\r\n          <Button variant=\"contained\" className=\"icon-button\" sx={{ p: 1 }}>\r\n            <MdClose size={18} />\r\n          </Button>\r\n        </ButtonGroup>\r\n      </Div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PartnerOverview;\r\n","import JumboScrollbar from \"@jumbo/components/JumboScrollbar\";\nimport Div from \"@jumbo/shared/Div\";\nimport {\n  Checkbox,\n  FormControlLabel,\n  FormGroup,\n  IconButton,\n  Menu,\n  Radio,\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableRow,\n  Typography,\n} from \"@mui/material\";\nimport { BASE_URL } from \"app/services/auth-services\";\nimport axios from \"axios\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { toast } from \"react-toastify\";\nimport CreatePartner from \"./CreatePartner\";\nimport EditPartnerList from \"./EditPartnerList\";\nimport \"./partners.css\";\nimport { format } from \"date-fns\";\nimport { BsArrowDownUp, BsThreeDotsVertical } from \"react-icons/bs\";\nimport PartnerOverview from \"./partnerOverview\";\nimport { DataContext } from \"app/pages/settings/Organization/OrganizationStructure\";\nimport { ErpAlertViewDialogBox, ErpDeleteDialogBox } from \"app/shared/ReuseComponents/ErpDialogBoxes\";\nimport { ErpActionButton, ErpCreateButton } from \"app/shared/ReuseComponents/ButtonComponent\";\n\nconst PartnerList = ({ scrollHeight }) => {\n\n  const {\n    checkId6,\n    setCheckId6,\n    name4,\n    name5,\n    setName5,\n    getId5,\n    setGetId5,\n    userRolePermissions,\n  } = useContext(DataContext);\n\n  const [PartnerListData, setPartnerListData] = useState([])\n  const [openDelete, setOpenDelete] = useState(false);\n  const [currentDeleteId, setCurrentDeleteId] = useState(\"\");\n  const [currentDeleteAccountId, setCurrentDeleteAccountId] = useState(\"\");\n  const [deleteName, setDeleteName] = useState(\"\");\n\n\n  const [editPartnerList, setEditPartnerList] = useState(false);\n  const [showFilter, setShowFilter] = useState(false);\n  const [setValue] = useState(\"My Material Transfer\");\n  const [createMaterial, setCreateMaterial] = useState(false);\n  const [listMaterial, setListMaterial] = useState(true);\n  const [ListOverview, setListOverview] = useState(false);\n  const [overviewAlert, setOverviewAlert] = useState(false);\n\n  const [id, setId] = useState(\"\");\n\n  const handleOverView = (id) => {\n    if (Array.isArray(userRolePermissions) && userRolePermissions.includes(743)) {\n      setListMaterial(false);\n      setListOverview(true);\n      setId(id)\n    } else {\n      setOverviewAlert(true);\n      setListMaterial(true);\n      setListOverview(false);\n    }\n  };\n\n  const navigate = useNavigate();\n  const token = localStorage.getItem(\"accesstoken\");\n\n  // gear box icon states\n\n\n  const [anchorEl, setAnchorEl] = useState(null);\n  const [Date1, setDate] = useState(true)\n  const [BU_Id, setBU_Id] = useState(true);\n  const [BU_Name, setBU_Name] = useState(true);\n  const [Contact_No, setContact_No] = useState(false)\n  const [Email_Id, setEmail_Id] = useState(true);\n  const [Location, setLocation] = useState(true);\n  const [Web, setWeb] = useState(false);\n  const [fromTime, setFromTime] = useState(false);\n  const [toTime, setToTime] = useState(false);\n  const [commisionPaid, setCommisionPaid] = useState(false);\n\n\n  const handleClickOpen = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n\n  const handleClosegear = () => {\n    setAnchorEl(null);\n  };\n\n  const [sortConfig, setSortConfig] = useState({\n    key: null,\n    direction: \"ascending\",\n  });\n\n  //Date format \n  let userDetails = localStorage.getItem(\"UserDetails\");\n  userDetails = JSON.parse(userDetails);\n  let companyId = userDetails && userDetails.Organization_Id;\n  let dateid = userDetails && userDetails.id;\n\n\n  const [dateFormat, setDateFormat] = useState(\"\");\n\n  const header = {\n    headers: {\n      Authorization: `Bearer ${token}`,\n      \"Content-Type\": \"application/json\",\n      Accept: \"application/json\",\n    },\n  };\n  // get date format from organization get api\n  useEffect(() => {\n    if (companyId) {\n      axios\n        .get(`${BASE_URL}/Erpapp/CompanyCRUD/?id=${companyId}`, header)\n        .then((res) => {\n          console.log(\"D\", res?.data);\n          setDateFormat(res?.data?.DateFormat);\n        })\n        .catch((error) => {\n          console.log(error);\n        });\n    }\n  }, []);\n\n  // state for pagination\n  const [page, setPage] = useState(1);\n  const [count, setCount] = useState(0);\n  const [rowsPerPage, setRowsPerPage] = useState(10);\n  const [visitedPages, setVisitedPages] = useState(page - 1);\n  const rowsPerPageOptions = [10];\n  const totalRecords = count;\n  const totalPages = Math.ceil(totalRecords / rowsPerPage);\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(1);\n    setVisitedPages(visitedPages);\n  };\n\n  // get data\n  const getData = async () => {\n    await axios.get(`${BASE_URL}/Erpapp/PartnerListDropdown/`, header)\n      .then((response) => {\n        console.log(\"Partner Response\", response);\n        const list = response?.data?.filter((opt) => opt?.BusinessUnit_City === name4);\n        setPartnerListData(list)\n        setCount(list?.length)\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  }\n\n  useEffect(() => {\n    getData();\n  }, [listMaterial]);\n\n  console.log(PartnerListData);\n\n  // delete & edit States\n\n  const [setOpen] = React.useState(false);\n  const [setSelectedValue] = React.useState();\n  const [currentPart, setCurrentPart] = useState({\n    id: \"\",\n    Partner_Id: \"\"\n  });\n\n\n  const handleDeletePopup = async (item) => {\n    const previousRecordResponse = await handleGetAllServiceRelatedDatas(item);\n    if (previousRecordResponse?.length > 0) {\n      toast.warning(\"You cannot delete this record because it is being used somewhere.\")\n    } else {\n      setOpenDelete(true);\n      setCurrentDeleteId(item?.id);\n      setCurrentDeleteAccountId(item?.Partner_Id);\n      setDeleteName(item?.Partner_Name)\n    }\n  };\n\n  // delete\n  const handleDelete = async () => {\n    const data = await axios\n      .delete(`${BASE_URL}/Erpapp/PartnerCRUD/?Partner_Id=${currentDeleteAccountId}`, header)\n      .then((res) => {\n        console.log(res?.data);\n        toast.success(`${currentDeleteAccountId} Partner is deleted successfully`);\n        setOpenDelete(false);\n        getData();\n      })\n      .catch((error) => {\n        console.log(\"ds\", error);\n      });\n    return data;\n  };\n  // edit\n  const handleClickEdit = (item) => {\n    setEditPartnerList(true);\n    setListMaterial(false);\n    setCurrentPart({\n      id: item?.id,\n      Partner_Id: item?.Partner_Id,\n    });\n  }\n\n  //Search\n  const searchItems = (e) => {\n    console.log(e.target.value);\n    e.target.value !== \"\" ? handleSearch(e.target.value) : getData();\n  }\n\n  const handleSearch = (search) => {\n    axios.get(`${BASE_URL}/Erpapp/Partnersearch/?Search=${search}`, header)\n      .then((response) => {\n        setPartnerListData(response?.data)\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  };\n\n  const handleClose = (value) => {\n    setOpen(false);\n    setSelectedValue(value);\n  };\n\n  const CreateForm = () => {\n    setCreateMaterial(true);\n    setListMaterial(false);\n  };\n\n\n  //code for table sorting\n  const sortData = (key, direction) => {\n    const sortedData = [...PartnerListData];\n\n    sortedData.sort((a, b) => {\n      if (key === \"Created_By\") {\n        const valueA =\n          typeof a[key].Business_Unit === \"string\"\n            ? a[key].Business_Unit.toLowerCase()\n            : a[key].Business_Unit;\n        const valueB =\n          typeof b[key].Business_Unit === \"string\"\n            ? b[key].Business_Unit.toLowerCase()\n            : b[key].Business_Unit;\n        if (valueA < valueB) {\n          return direction === \"ascending\" ? -1 : 1;\n        }\n        if (valueA > valueB) {\n          return direction === \"ascending\" ? 1 : -1;\n        }\n      }\n      else {\n        const valueA =\n          typeof a[key] === \"string\" ? a[key].toLowerCase() : a[key];\n        const valueB =\n          typeof b[key] === \"string\" ? b[key].toLowerCase() : b[key];\n        if (valueA < valueB) {\n          return direction === \"ascending\" ? -1 : 1;\n        }\n        if (valueA > valueB) {\n          return direction === \"ascending\" ? 1 : -1;\n        }\n      }\n      return 0;\n    });\n    setPartnerListData(sortedData);\n  };\n\n  const handleSort = (key) => {\n    let direction = \"ascending\";\n    if (sortConfig.key === key && sortConfig.direction === \"ascending\") {\n      direction = \"descending\";\n    }\n    setSortConfig({ key, direction });\n    sortData(key, direction);\n  };\n\n  const handleGetAllServiceRelatedDatas = async (data) => {\n    try {\n      const response = await axios.get(`${BASE_URL}/Erpapp/Partnerslotlist/?Partner_Id=${data?.id}`, header);\n      const partnerResponse = await axios.get(`${BASE_URL}/Erpapp/HREmployeelistwithoutpagination/`, header);\n      const filterData = response?.data;\n      const partnerFilterData = partnerResponse?.data?.filter((opt) => opt?.Partner_Id?.id === data?.id)\n\n      return filterData?.length > 0 ? filterData : partnerFilterData;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n\n  return (\n    <>\n      <Div className=\"card\"\n        sx={{ p: 2, borderRadius: 0, m: 0 }}\n      >\n        <Div sx={{ display: listMaterial === true ? \"block\" : \"none\" }}>\n          <Div\n            sx={{\n              position: \"absolute\",\n              right: 15,\n              // width: \"100%\",\n              display: \"flex\",\n              justifyContent: \"flex-end\"\n            }}\n          >\n            {Array.isArray(userRolePermissions) && userRolePermissions.includes(741) && (\n              <ErpCreateButton handleClick={CreateForm} name={\"Create BU\"} />\n            )}\n          </Div>\n          <br />\n\n          <Div sx={{ mt: { lg: 3, md: 5, xs: 5 }, minHeight: \"300px\" }}>\n            <JumboScrollbar\n              autoHeight={true}\n              autoHideTimeout={4000}\n              autoHeightMin={scrollHeight ? scrollHeight : 300}\n              autoHide={true}\n              hideTracksWhenNotNeeded\n              id=\"no-more-tables\"\n            >\n              <Table stickyHeader className=\"table table-borderless\">\n                <TableHead className=\"table-head\">\n                  <TableRow>\n                    <TableCell sx={{ height: \"53px !important\" }}>\n\n                    </TableCell>\n                    {Date1 && (\n                      <TableCell onClick={() => handleSort(\"Created_Date\")} sx={{ height: \"53px !important\" }}>\n                        Date\n                        {sortConfig.key === \"Created_Date\" &&\n                          (sortConfig.direction === \"ascending\" ? (\n                            <IconButton size=\"small\">\n                              <BsArrowDownUp />\n                            </IconButton>\n                          ) : (\n                            <IconButton size=\"small\">\n                              <BsArrowDownUp />\n                            </IconButton>\n                          ))}\n                      </TableCell>)}\n                    {BU_Id && (\n                      <TableCell onClick={() => handleSort(\"Partner_Id\")} sx={{ height: \"53px !important\" }}>\n                        BU Id\n                        {sortConfig.key === \"Partner_Id\" &&\n                          (sortConfig.direction === \"ascending\" ? (\n                            <IconButton size=\"small\">\n                              <BsArrowDownUp />\n                            </IconButton>\n                          ) : (\n                            <IconButton size=\"small\">\n                              <BsArrowDownUp />\n                            </IconButton>\n                          ))}\n                      </TableCell>)}\n                    {BU_Name && (\n                      <TableCell onClick={() => handleSort(\"Partner_Name\")}>\n                        BU Name\n                        {sortConfig.key === \"Partner_Name\" &&\n                          (sortConfig.direction === \"ascending\" ? (\n                            <IconButton size=\"small\">\n                              <BsArrowDownUp />\n                            </IconButton>\n                          ) : (\n                            <IconButton size=\"small\">\n                              <BsArrowDownUp />\n                            </IconButton>\n                          ))}\n                      </TableCell>)}\n                    {Contact_No && (\n                      <TableCell onClick={() => handleSort(\"BusinessUnit_Phone\")}\n                        xl={2}\n                      >\n                        Contact No\n                        {sortConfig.key === \"BusinessUnit_Phone\" &&\n                          (sortConfig.direction === \"ascending\" ? (\n                            <IconButton size=\"small\">\n                              <BsArrowDownUp />\n                            </IconButton>\n                          ) : (\n                            <IconButton size=\"small\">\n                              <BsArrowDownUp />\n                            </IconButton>\n                          ))}\n                      </TableCell>)}\n                    {Email_Id && (\n                      <TableCell onClick={() => handleSort(\"BusinessUnit_EMail\")}\n                        xl={4}\n                      >\n                        Email Id\n                        {sortConfig.key === \"BusinessUnit_EMail\" &&\n                          (sortConfig.direction === \"ascending\" ? (\n                            <IconButton size=\"small\">\n                              <BsArrowDownUp />\n                            </IconButton>\n                          ) : (\n                            <IconButton size=\"small\">\n                              <BsArrowDownUp />\n                            </IconButton>\n                          ))}\n                      </TableCell>)}\n                    {fromTime && (\n                      <TableCell onClick={() => handleSort(\"Ofc_Starttime\")} xl={4}>\n                        Office Start Time\n                        {sortConfig.key === \"Ofc_Starttime\" &&\n                          (sortConfig.direction === \"ascending\" ? (\n                            <IconButton size=\"small\">\n                              <BsArrowDownUp />\n                            </IconButton>\n                          ) : (\n                            <IconButton size=\"small\">\n                              <BsArrowDownUp />\n                            </IconButton>\n                          ))}\n                      </TableCell>)}\n                    {toTime && (\n                      <TableCell onClick={() => handleSort(\"Ofc_Endtime\")} xl={4}>\n                        Office End Time\n                        {sortConfig.key === \"Ofc_Endtime\" &&\n                          (sortConfig.direction === \"ascending\" ? (\n                            <IconButton size=\"small\">\n                              <BsArrowDownUp />\n                            </IconButton>\n                          ) : (\n                            <IconButton size=\"small\">\n                              <BsArrowDownUp />\n                            </IconButton>\n                          ))}\n                      </TableCell>)}\n                    {commisionPaid && (\n                      <TableCell onClick={() => handleSort(\"Commision_Paid\")} xl={4}>\n                        Commision Paid\n                        {sortConfig.key === \"Commision_Paid\" &&\n                          (sortConfig.direction === \"ascending\" ? (\n                            <IconButton size=\"small\">\n                              <BsArrowDownUp />\n                            </IconButton>\n                          ) : (\n                            <IconButton size=\"small\">\n                              <BsArrowDownUp />\n                            </IconButton>\n                          ))}\n                      </TableCell>)}\n                    {Location && (\n                      <TableCell onClick={() => handleSort(\"BusinessUnit_City\")}\n                      >\n                        Location\n                        {sortConfig.key === \"BusinessUnit_City\" &&\n                          (sortConfig.direction === \"ascending\" ? (\n                            <IconButton size=\"small\">\n                              <BsArrowDownUp />\n                            </IconButton>\n                          ) : (\n                            <IconButton size=\"small\">\n                              <BsArrowDownUp />\n                            </IconButton>\n                          ))}\n                      </TableCell>)}\n                    {Web && (\n                      <TableCell onClick={() => handleSort(\"BusinessUnit_Web\")}\n                      >\n                        Web\n                        {sortConfig.key === \"BusinessUnit_Web\" &&\n                          (sortConfig.direction === \"ascending\" ? (\n                            <IconButton size=\"small\">\n                              <BsArrowDownUp />\n                            </IconButton>\n                          ) : (\n                            <IconButton size=\"small\">\n                              <BsArrowDownUp />\n                            </IconButton>\n                          ))}\n                      </TableCell>)}\n                    <TableCell\n                    >\n                      <Div\n                        sx={{\n                          display: \"flex\",\n                          justifyContent: \"space-between\",\n                          lineHeight: 2.5,\n                        }}\n                      >\n                        Action\n                        <span\n                          onClick={handleClickOpen}\n                          style={{ cursor: \"pointer\" }}\n                        >\n                          <IconButton>\n                            <BsThreeDotsVertical size={18} color=\"black\" />\n                          </IconButton>\n                        </span>\n                      </Div>\n                    </TableCell>\n\n\n                    <Menu\n                      id=\"menu-appbar\"\n                      anchorEl={anchorEl}\n                      anchorOrigin={{\n                        vertical: \"top\",\n                        horizontal: \"right\",\n                      }}\n                      keepMounted\n                      transformOrigin={{\n                        vertical: \"top\",\n                        horizontal: \"right\",\n                      }}\n                      open={Boolean(anchorEl)}\n                      onClose={handleClosegear}\n                      sx={{\n                        mt: 7,\n                        maxHeight: \"300px\",\n                        scrollBehavior: \"smooth\",\n                      }}\n                    >\n                      <Typography variant=\"h4\" sx={{ p: 2, mb: -2 }}>\n                        Choose Columns\n                      </Typography>\n                      <FormGroup sx={{ p: 2 }}>\n\n\n                        <FormControlLabel\n                          control={\n                            <Checkbox\n                              checked={Date1}\n                              onChange={(e) => setDate(e.target.checked)}\n                            />\n                          }\n                          label=\"Date\"\n                        />\n                        {/* <FormControlLabel\n                        control={\n                          <Checkbox\n                            checked={BU}\n                            onChange={(e) => setBU(e.target.checked)}\n                          />\n                        }\n                        label=\"Bussiness unit\"\n                      /> */}\n                        <FormControlLabel\n                          control={\n                            <Checkbox\n                              checked={BU_Id}\n                              onChange={(e) => setBU_Id(e.target.checked)}\n                            />\n                          }\n                          label=\"BU Id\"\n                        />\n                        <FormControlLabel\n                          control={\n                            <Checkbox\n                              checked={BU_Name}\n                              onChange={(e) => setBU_Name(e.target.checked)}\n                            />\n                          }\n                          label=\"BU Name\"\n                        />\n                        <FormControlLabel\n                          control={\n                            <Checkbox\n                              checked={Contact_No}\n                              onChange={(e) => setContact_No(e.target.checked)}\n                            />\n                          }\n                          label=\"Contact No\"\n                        />\n                        <FormControlLabel\n                          control={\n                            <Checkbox\n                              checked={Email_Id}\n                              onChange={(e) => setEmail_Id(e.target.checked)}\n                            />\n                          }\n                          label=\"Email Id\"\n                        />\n                        <FormControlLabel\n                          control={\n                            <Checkbox\n                              checked={fromTime}\n                              onChange={(e) => setFromTime(e.target.checked)}\n                            />\n                          }\n                          label=\"Office From Time\"\n                        />\n                        <FormControlLabel\n                          control={\n                            <Checkbox\n                              checked={toTime}\n                              onChange={(e) => setToTime(e.target.checked)}\n                            />\n                          }\n                          label=\"Office End Time\"\n                        />\n                        <FormControlLabel\n                          control={\n                            <Checkbox\n                              checked={commisionPaid}\n                              onChange={(e) => setCommisionPaid(e.target.checked)}\n                            />\n                          }\n                          label=\"Commision Paid\"\n                        />\n                        <FormControlLabel\n                          control={\n                            <Checkbox\n                              checked={Location}\n                              onChange={(e) => setLocation(e.target.checked)}\n                            />\n                          }\n                          label=\"Location\"\n                        />\n                        <FormControlLabel\n                          control={\n                            <Checkbox\n                              checked={Web}\n                              onChange={(e) => setWeb(e.target.checked)}\n                            />\n                          }\n                          label=\"Web\"\n                        />\n                      </FormGroup>\n                    </Menu>\n                  </TableRow>\n                </TableHead>\n\n                <TableBody>\n                  {PartnerListData?.length > 0 ? PartnerListData?.map((item, index) => {\n                    let formattedDate = \"\"\n                    if (dateFormat !== undefined && dateFormat !== null && dateFormat !== \"\") {\n                      const date = new Date(item?.Created_Date);\n                      formattedDate = dateFormat && item?.Created_Date && format(date, dateFormat);\n                    }\n                    return (\n                      <TableRow hover key={index}>\n                        <TableCell data-title=\"Status\" sx={{ textAlign: \"center\" }}>\n                          <FormControlLabel\n                            control={<Radio\n                              color=\"primary\"\n                              size=\"small\"\n                              value={item?.Partner_Id}\n                              checked={checkId6 === item?.Partner_Id}\n                              onChange={(e) => {\n                                setCheckId6(e.target.value);\n                                setGetId5(item?.id);\n                                setName5(item?.Partner_Name);\n                              }} />}\n                          />\n                        </TableCell>\n                        {\n                          Date1 && (\n                            <TableCell data-title=\"Date\">\n                              {formattedDate || item?.Created_Date}\n                            </TableCell>)\n                        }\n                        {\n                          BU_Id && (\n                            <TableCell\n                              sx={{ color: \"#00BFFF\", cursor: \"pointer\" }}\n                              onClick={() => { handleOverView(item?.Partner_Id) }} data-title=\"BU Id\">\n                              {item?.Partner_Id}\n                            </TableCell>)\n                        }\n                        {\n                          BU_Name && (\n                            <TableCell data-title=\"BU Name\">\n                              {item?.Partner_Name}\n                            </TableCell>)\n                        }\n                        {\n                          Contact_No && (\n                            <TableCell data-title=\"Contact No\">\n                              {item?.BusinessUnit_Phone}\n                            </TableCell>)\n                        }\n                        {\n                          Email_Id && (\n                            <TableCell data-title=\"Email Id\">\n                              {item?.BusinessUnit_EMail}\n                            </TableCell>)\n                        }\n                        {\n                          fromTime && (\n                            <TableCell data-title=\"Office Start Time\">\n                              {item?.Ofc_Starttime}\n                            </TableCell>)\n                        }\n                        {\n                          toTime && (\n                            <TableCell data-title=\"Office End Time\">\n                              {item?.Ofc_Endtime}\n                            </TableCell>)\n                        }\n                        {\n                          commisionPaid && (\n                            <TableCell data-title=\"Commision Paid\">\n                              {item?.Commision_Paid}\n                            </TableCell>)\n                        }\n                        {\n                          Location && (\n                            <TableCell data-title=\"Location\">\n                              {item?.BusinessUnit_City}\n                            </TableCell>)\n                        }\n                        {\n                          Web && (\n                            <TableCell data-title=\"Web\">\n                              {item?.BusinessUnit_Web}\n                            </TableCell>)\n                        }\n\n                        <TableCell data-title=\"Action\">\n                          <ErpActionButton userRolePermissions={userRolePermissions} editPermissionId={742} deletePermissionId={744} onClickEdit={() => handleClickEdit(item)} onClickDelete={() => handleDeletePopup(item)} align=\"left\" />\n                        </TableCell>\n                      </TableRow>\n                    )\n                  }) : (\n                    <TableRow>\n                      <TableCell colSpan={10} sx={{ textAlign: \"center\" }}>No Records</TableCell>\n                    </TableRow>\n                  )}\n                </TableBody>\n              </Table>\n            </JumboScrollbar>\n          </Div>\n\n        </Div>\n\n        {/* for delate popup */}\n        <ErpDeleteDialogBox flag={openDelete} setFlag={setOpenDelete} handleClick={handleDelete} content={\"Are you sure you want to delete the BU\"} id={deleteName} />\n\n\n        <Div sx={{ display: createMaterial === true ? \"block\" : \"none\" }}>\n          <CreatePartner\n            setCreateMaterial={setCreateMaterial}\n            setListMaterial={setListMaterial}\n          />\n        </Div>\n\n        <Div sx={{ display: editPartnerList === true ? \"block\" : \"none\" }}>\n          <EditPartnerList\n            setEditPartnerList={setEditPartnerList}\n            setListMaterial={setListMaterial}\n            setCurrentPart={setCurrentPart}\n            currentPart={currentPart}\n            getData1={getData}\n          />\n        </Div>\n\n        {ListOverview && Array.isArray(userRolePermissions) && userRolePermissions.includes(743) ? (\n          <PartnerOverview\n            setListOverview={setListOverview}\n            setListMaterial={setListMaterial}\n            buid={id}\n          />\n        ) : (\n          <>\n            <ErpAlertViewDialogBox flag={overviewAlert} setFlag={setOverviewAlert} />\n          </>\n        )}\n      </Div>\n    </>\n  );\n};\n\nexport default PartnerList;","import Div from \"@jumbo/shared/Div\";\r\nimport {\r\n    Autocomplete,\r\n    Button,\r\n    ButtonGroup,\r\n    Dialog,\r\n    DialogContent,\r\n    DialogTitle,\r\n    FormControl,\r\n    Grid,\r\n    TextField,\r\n    Typography,\r\n} from \"@mui/material\";\r\nimport React, { useCallback, useEffect, useState } from \"react\";\r\nimport { fetchTransactionSeries } from \"app/shared/ReuseComponents/DateFormatter\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\nimport axios from \"axios\";\r\nimport { storesValidationSchema } from \"app/schemas/SettingValidationSchemas\";\r\nimport { BASE_URL } from \"app/services/auth-services\";\r\nimport hrApiServices from \"app/services/hr-api-services\";\r\nimport { toast } from \"react-toastify\";\r\nimport { FaSave } from \"react-icons/fa\";\r\nimport { TiCancel } from \"react-icons/ti\";\r\nimport { handleError } from \"app/pages/auth-pages/login/AuthGuard\";\r\nimport { handleCreateHistory } from \"app/shared/ReuseComponents/UpdatedHistoryRecords\";\r\n\r\n\r\n\r\nconst CreateStore = ({ countries, states, cities, zones, name1, name3, name4, name5, name6, getId5, openCreateStore, setOpenCreateStore, getStores, fullScreen }) => {\r\n    const token = localStorage.getItem(\"accesstoken\");\r\n\r\n    const header = {\r\n        headers: {\r\n            Authorization: `Bearer ${token}`,\r\n            \"Content-Type\": \"application/json\",\r\n            Accept: \"application/json\",\r\n        },\r\n    };\r\n\r\n    let userDetails = localStorage.getItem(\"UserDetails\");\r\n    userDetails = JSON.parse(userDetails);\r\n\r\n\r\n    const [partnerId, setPartnerId] = useState(getId5);\r\n    const [partnerName, setPartnerName] = useState(name5);\r\n    const [storeId, setStoreId] = useState(\"\");\r\n    const [storeName, setStoreName] = useState(\"\");\r\n    const [storeIncharge, setStoreIncharge] = useState(\"\");\r\n    const [location, setLocation] = useState(name6);\r\n    const [longitude, setLongitude] = useState(\"\");\r\n    const [latitude, setLatitude] = useState(\"\");\r\n\r\n\r\n    const [employeeLists, setEmployeeLists] = useState([]);\r\n    const [businessUnitList, setBusinessUnitList] = useState([]);\r\n\r\n\r\n    const getPartnerLists = async () => {\r\n        await axios\r\n            .get(`${BASE_URL}/Erpapp/PartnerListreportDropdown/`, header)\r\n            .then((response) => {\r\n                if (response) {\r\n                    const list = response?.data?.filter((opt) => opt?.BusinessUnit_City === selectedCity)\r\n                    setBusinessUnitList(list);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                console.log(\"Error in retrieving business unit list===>\", error);\r\n            });\r\n    };\r\n\r\n\r\n    // get employee list\r\n    useEffect(() => {\r\n        const fetchEmployeeList = async () => {\r\n            try {\r\n                const res = await hrApiServices.listofDropdownEmployees(partnerId, header);\r\n                if (res) {\r\n                    console.log(\"RES\", res)\r\n                    setEmployeeLists(res);\r\n                }\r\n            } catch (error) {\r\n                console.error(error);\r\n            }\r\n        };\r\n\r\n        fetchEmployeeList();\r\n    }, [partnerId]);\r\n\r\n\r\n    useEffect(() => {\r\n        getPartnerLists();\r\n    }, []);\r\n\r\n    const [buildingName, setBuildingName] = useState(\"\");\r\n    const [selectedCountry, setSelectedCountry] = useState(name1);\r\n    const [selectedState, setSelectedState] = useState(name3);\r\n    const [selectedCity, setSelectedCity] = useState(name4);\r\n\r\n\r\n\r\n    const handleSearchLocation = useCallback(async () => {\r\n        try {\r\n            if (location !== undefined && location !== \"\") {\r\n                const response = await fetch(`https://nominatim.openstreetmap.org/search?q=${encodeURIComponent(location)}&format=json&limit=1`);\r\n                const data = await response.json();\r\n                console.log(\"dataaa\", data)\r\n                if (data?.length > 0) {\r\n                    setLatitude(data[0].lat);\r\n                    setLongitude(data[0].lon);\r\n                } else {\r\n                    setLatitude('');\r\n                    setLongitude('');\r\n                    toast.error('Location not found');\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.error('Error:', error);\r\n        }\r\n    }, [location]);\r\n\r\n\r\n    useEffect(() => {\r\n        handleSearchLocation()\r\n    }, [location])\r\n\r\n\r\n\r\n    const handleCloseCreateStore = () => {\r\n        setStoreName(\"\");\r\n        setBuildingName(\"\");\r\n        setLocation(\"\");\r\n        setPartnerName(\"\");\r\n        setStoreIncharge(\"\");\r\n        setSelectedCountry(\"\");\r\n        setSelectedState(\"\");\r\n        setSelectedCity(\"\");\r\n        setLongitude(\"\");\r\n        setLatitude(\"\");\r\n        reset();\r\n        setOpenCreateStore(false)\r\n    };\r\n\r\n\r\n\r\n    const {\r\n        reset,\r\n        register,\r\n        trigger,\r\n        handleSubmit,\r\n        formState: { errors },\r\n    } = useForm({\r\n        mode: \"onBlur\",\r\n        resolver: yupResolver(storesValidationSchema),\r\n    });\r\n\r\n\r\n    const [transactionSeriesType, setTransactionSeriesType] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n        const transactionSeries = fetchTransactionSeries(\"Stores\")\r\n\r\n        if (transactionSeries) {\r\n            transactionSeries\r\n                .then((result) => {\r\n                    console.log(\"result\", result);\r\n                    setTransactionSeriesType(result)\r\n                })\r\n                .catch((error) => {\r\n                    console.error(error);\r\n                });\r\n        }\r\n    }, [transactionSeriesType])\r\n\r\n\r\n\r\n    const handleCreateStore = () => {\r\n\r\n\r\n        var storepayload = {\r\n            Type: \"\",\r\n            Store_Name: storeName,\r\n            StoreBuilding_Name: buildingName,\r\n            Store_Street: \"\",\r\n            Store_Area: location,\r\n            Store_City: selectedCity,\r\n            Store_State: selectedState,\r\n            Store_Country: selectedCountry,\r\n            Store_Incharge: storeIncharge,\r\n            Own_Partner: partnerName,\r\n            Items: [{\r\n                id: \"\",\r\n                Upload_Image: \"\",\r\n                Category: \"\",\r\n                Item_Group: \"\",\r\n                Item_Code: \"\",\r\n                Item_Name: \"\",\r\n                UOM: \"\",\r\n                Unit_Price: 0,\r\n                Opening_Stock: 0,\r\n                ReOrder_Lvl: 0,\r\n                Min_Stock_Lvl: 0\r\n            }],\r\n            Longitude: longitude,\r\n            Lotitude: latitude,\r\n            Partner_OrganizationId: localStorage.getItem(\"OrganizationId\"),\r\n            Store_UserId: localStorage.getItem(\"UserId\"),\r\n            Partner_Id: parseInt(partnerId),\r\n            Company_Id: parseInt(localStorage.getItem(\"OrganizationId\")),\r\n            Created_Date: new Date().toJSON().slice(0, 10),\r\n            Created_By: parseInt(localStorage.getItem(\"UserId\")),\r\n            Updated_By: parseInt(localStorage.getItem(\"UserId\")),\r\n        };\r\n\r\n        axios\r\n            .post(`${BASE_URL}/Erpapp/StoremasterCRUD/`, storepayload, header)\r\n            .then((respon) => {\r\n                console.log(respon?.data);\r\n                if (respon?.data?.id) {\r\n                    toast.success(\"Store information created successfully!\");\r\n                    reset();\r\n\r\n                    setStoreName(\"\");\r\n                    setBuildingName(\"\");\r\n                    setLocation(\"\");\r\n                    setPartnerName(\"\");\r\n                    setStoreIncharge(\"\");\r\n                    setSelectedCountry(\"\");\r\n                    setSelectedState(\"\");\r\n                    setSelectedCity(\"\");\r\n                    setLongitude(\"\");\r\n                    setLatitude(\"\");\r\n\r\n                    setOpenCreateStore(false);\r\n                    getStores();\r\n\r\n                    // create a history\r\n                    handleCreateHistory(respon?.data?.Store_Id, partnerId, \"store\", header)\r\n\r\n                } else {\r\n                    toast.error(\"Error updating store information.\");\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                console.log(error);\r\n                handleError(error)\r\n            });\r\n    }\r\n\r\n\r\n    return (\r\n        <Dialog\r\n            fullScreen={fullScreen}\r\n            maxWidth=\"lg\"\r\n            open={openCreateStore}\r\n            aria-labelledby=\"responsive-dialog-title\"\r\n        >\r\n            <DialogTitle id=\"responsive-dialog-title\">\r\n                Create Store\r\n            </DialogTitle>\r\n            <DialogContent>\r\n                <form onSubmit={handleSubmit(handleCreateStore)}>\r\n                    <Div sx={{ minHeight: \"250px\" }}>\r\n                        <Grid container xs={12}>\r\n                            <Grid item xs={12} md={6}>\r\n                                <Grid container xs={12}>\r\n\r\n                                    <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\r\n                                        <Typography className=\"col-md-12 col-lg-6 col-xl-4 input-label\" sx={{ mt: 2 }}>\r\n                                            Store Id <span className=\"required\">*</span>\r\n                                        </Typography>\r\n                                        <Div className=\"col-md-12 col-lg-6 col-xl-8\">\r\n                                            <TextField\r\n                                                className=\"col-12 input-box\"\r\n                                                name=\"storeId\"\r\n                                                {...register(\"storeId\")}\r\n                                                value={storeId}\r\n                                                onChange={(e) => {\r\n                                                    setStoreId(e.target.value);\r\n                                                }}\r\n                                                placeholder={transactionSeriesType === \"Automatic\" ? \"Auto Generated\" : \"Store Id\"}\r\n                                                variant=\"outlined\"\r\n                                                autoComplete=\"off\"\r\n                                                disabled={transactionSeriesType === \"Automatic\" ? true : false}\r\n                                                inputProps={{\r\n                                                    maxLength: 11,\r\n                                                    title: 'Please enter a maximum of 11 digits',\r\n                                                }}\r\n                                            />\r\n                                        </Div>\r\n                                    </Grid>\r\n\r\n                                    <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\r\n                                        <Typography className=\"col-md-12 col-lg-6 col-xl-4 input-label\" sx={{ mt: 2 }}>\r\n                                            Store Name <span className=\"required\">*</span>\r\n                                        </Typography>\r\n                                        <Div className=\"col-md-12 col-lg-6 col-xl-8\">\r\n                                            <TextField\r\n                                                className={`col-12 input-box  ${errors.storeName ? \"is-invalid\" : \"\"\r\n                                                    }`}\r\n                                                name=\"storeName\"\r\n                                                {...register(\"storeName\")}\r\n                                                value={storeName}\r\n                                                onChange={(e) => {\r\n                                                    setStoreName(e.target.value);\r\n                                                    console.log(e.target.value);\r\n                                                }}\r\n                                                placeholder=\"Store Name\"\r\n                                                autoComplete=\"off\"\r\n                                            />\r\n                                            <Div style={{ color: \"red\" }}>\r\n                                                {!storeName && errors.storeName?.message}\r\n                                            </Div>\r\n                                        </Div>\r\n                                    </Grid>\r\n\r\n                                    <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\r\n                                        <Typography className=\"col-md-12 col-lg-6 col-xl-4 input-label\" sx={{ mt: 2 }}>\r\n                                            Building Name <span className=\"required\">*</span>\r\n                                        </Typography>\r\n                                        <Div className=\"col-md-12 col-lg-6 col-xl-8\">\r\n                                            <TextField\r\n                                                className={`col-12 input-box  ${errors.buildingName ? \"is-invalid\" : \"\"\r\n                                                    }`}\r\n                                                name=\"buildingName\"\r\n                                                {...register(\"buildingName\")}\r\n                                                value={buildingName}\r\n                                                onChange={(e) => setBuildingName(e.target.value)}\r\n                                                placeholder=\"Building Name\"\r\n                                                autoComplete=\"off\"\r\n                                            />\r\n                                            <Div style={{ color: \"red\" }}>\r\n                                                {!buildingName && errors.buildingName?.message}\r\n                                            </Div>\r\n                                        </Div>\r\n                                    </Grid>\r\n\r\n                                    <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\r\n                                        <Typography className=\"col-md-12 col-lg-6 col-xl-4 input-label\" sx={{ mt: 2 }}>\r\n                                            Country <span className=\"required\">*</span>\r\n                                        </Typography>\r\n                                        <Div className=\"col-md-12 col-lg-6 col-xl-8\">\r\n                                            <FormControl className=\"col-12\">\r\n                                                <Autocomplete\r\n                                                    className={`search-select col-12 ${errors.countryName ? \"is-invalid\" : \"\"\r\n                                                        }`}\r\n                                                    name=\"countryName\"\r\n                                                    options={countries}\r\n                                                    getOptionLabel={(option) => option ? option?.Country_Name : \"\"}\r\n                                                    value={countries?.find(\r\n                                                        (option) => option?.Country_Name === selectedCountry\r\n                                                    ) || null}\r\n                                                    onChange={(event, newValue) => {\r\n                                                        setSelectedCountry(newValue?.Country_Name);\r\n                                                        setSelectedState(null); // Reset selectedState\r\n                                                        setSelectedCity(null); // Reset selectedCity\r\n                                                        console.log(\"Selected Country:\", newValue);\r\n                                                    }}\r\n\r\n                                                    renderInput={(params) => (\r\n                                                        <TextField\r\n                                                            {...params}\r\n                                                            {...register(\"countryName\")}\r\n                                                            placeholder=\"Select Country\"\r\n                                                        />\r\n                                                    )}\r\n                                                    disabled\r\n                                                />\r\n                                                <Div style={{ color: \"red\" }}>\r\n                                                    {!selectedCountry && errors.countryName?.message}\r\n                                                </Div>\r\n                                            </FormControl>\r\n                                        </Div>\r\n                                    </Grid>\r\n\r\n                                    <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\r\n                                        <Typography className=\"col-md-12 col-lg-6 col-xl-4 input-label\" sx={{ mt: 2 }}>\r\n                                            State <span className=\"required\">*</span>\r\n                                        </Typography>\r\n                                        <Div className=\"col-md-12 col-lg-6 col-xl-8\">\r\n                                            <FormControl className=\"col-12\">\r\n                                                <Autocomplete\r\n                                                    className={`search-select col-12 ${errors.stateName ? \"is-invalid\" : \"\"\r\n                                                        }`}\r\n                                                    name=\"stateName\"\r\n                                                    options={states}\r\n                                                    getOptionLabel={(option) => option ? option?.State_Name : \"\"}\r\n                                                    value={states?.find(\r\n                                                        (option) => option?.State_Name === selectedState\r\n                                                    ) || null}\r\n                                                    onChange={(event, newValue) => {\r\n                                                        setSelectedState(newValue?.State_Name);\r\n                                                        setSelectedCity(null); // Reset selectedCity\r\n                                                        console.log(\"Selected State:\", newValue);\r\n                                                    }}\r\n\r\n                                                    renderInput={(params) => (\r\n                                                        <TextField\r\n                                                            {...params}\r\n                                                            {...register(\"stateName\")}\r\n                                                            placeholder=\"Select State\"\r\n                                                        />\r\n                                                    )}\r\n                                                    disabled\r\n                                                />\r\n                                                <Div style={{ color: \"red\" }}>\r\n                                                    {!selectedState && errors.stateName?.message}\r\n                                                </Div>\r\n                                            </FormControl>\r\n                                        </Div>\r\n                                    </Grid>\r\n\r\n                                    <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\r\n                                        <Typography className=\"col-md-12 col-lg-6 col-xl-4 input-label\" sx={{ mt: 2 }}>\r\n                                            City <span className=\"required\">*</span>\r\n                                        </Typography>\r\n                                        <Div className=\"col-md-12 col-lg-6 col-xl-8\">\r\n                                            <FormControl className=\"col-12\">\r\n                                                <Autocomplete\r\n                                                    className={`search-select col-12 ${errors.cityName ? \"is-invalid\" : \"\"\r\n                                                        }`}\r\n                                                    name=\"cityName\"\r\n                                                    options={cities}\r\n                                                    getOptionLabel={(option) => option ? option?.City_Name : \"\"}\r\n                                                    value={cities?.find(\r\n                                                        (option) => option?.City_Name === selectedCity\r\n                                                    ) || null}\r\n                                                    onChange={(event, newValue) => {\r\n                                                        setSelectedCity(newValue?.City_Name);\r\n                                                        console.log(\"Selected City:\", newValue);\r\n                                                    }}\r\n\r\n                                                    renderInput={(params) => (\r\n                                                        <TextField\r\n                                                            {...params}\r\n                                                            {...register(\"cityName\")}\r\n                                                            placeholder=\"Select City\"\r\n                                                        />\r\n                                                    )}\r\n                                                    disabled\r\n                                                />\r\n                                                <Div style={{ color: \"red\" }}>\r\n                                                    {!selectedCity && errors.cityName?.message}\r\n                                                </Div>\r\n                                            </FormControl>\r\n                                        </Div>\r\n                                    </Grid>\r\n\r\n                                </Grid>\r\n                            </Grid>\r\n\r\n                            <Grid item xs={12} md={6}>\r\n                                <Grid container xs={12}>\r\n\r\n                                    <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\r\n                                        <Typography className=\"col-sm-12 col-md-12 col-lg-6 col-xl-4 input-label\" sx={{ mt: 2 }}>\r\n                                            Choose a BU <span className=\"required\">*</span>\r\n                                        </Typography>\r\n                                        <Div className=\"col-sm-12 col-md-12 col-lg-6 col-xl-8\">\r\n                                            <FormControl className=\"col-12\">\r\n                                                <Autocomplete\r\n                                                    className={`search-select col-12 ${errors.partnerName ? \"is-invalid\" : \"\"\r\n                                                        }`}\r\n                                                    onFocus={getPartnerLists}\r\n                                                    name=\"partnerName\"\r\n                                                    options={businessUnitList?.map(\r\n                                                        (partnerlist) => partnerlist\r\n                                                    )}\r\n                                                    getOptionLabel={(option) => option?.Partner_Name}\r\n                                                    value={businessUnitList?.find(\r\n                                                        (option) => option?.Partner_Name === partnerName\r\n                                                    ) || null}\r\n                                                    onChange={(e, newValue) => {\r\n                                                        setPartnerName(newValue?.Partner_Name);\r\n                                                        setPartnerId(newValue?.id);\r\n                                                    }}\r\n                                                    renderInput={(params) => (\r\n                                                        <TextField\r\n                                                            {...params}\r\n                                                            {...register(\"partnerName\")}\r\n                                                            placeholder=\"Choose a business unit\"\r\n                                                            autoComplete=\"off\"\r\n                                                            variant=\"outlined\"\r\n                                                        />\r\n                                                    )}\r\n                                                    disabled\r\n                                                />\r\n                                            </FormControl>\r\n                                            <Div style={{ color: \"red\" }}>\r\n                                                {!partnerName && errors.partnerName?.message}\r\n                                            </Div>\r\n                                        </Div>\r\n                                    </Grid>\r\n\r\n                                    <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\r\n                                        <Typography className=\"col-md-12 col-lg-6 col-xl-4 input-label\" sx={{ mt: 2 }}>\r\n                                            Location <span className=\"required\">*</span>\r\n                                        </Typography>\r\n                                        <Div className=\"col-md-12 col-lg-6 col-xl-8\">\r\n                                            <FormControl className=\"col-12\">\r\n                                                <Autocomplete\r\n                                                    className={`search-select col-12 ${errors.Location ? \"is-invalid\" : \"\"}`}\r\n                                                    name=\"location\"\r\n                                                    options={zones}\r\n                                                    getOptionLabel={(option) => option?.Zone_Name}\r\n                                                    value={zones?.find(\r\n                                                        (option) => option?.Zone_Name === location\r\n                                                    ) || null}\r\n                                                    onChange={(e, newValue) => {\r\n                                                        setLocation(newValue?.Zone_Name);\r\n                                                        handleSearchLocation(newValue?.Zone_Name)\r\n                                                    }}\r\n                                                    renderInput={(params) => (\r\n                                                        <TextField\r\n                                                            {...params}\r\n                                                            {...register(\"location\")}\r\n                                                            placeholder=\"Location\"\r\n                                                            autoComplete=\"off\"\r\n                                                            variant=\"outlined\"\r\n                                                        />\r\n                                                    )}\r\n                                                    disabled\r\n                                                />\r\n                                            </FormControl>\r\n                                            <Div style={{ color: \"red\" }}>\r\n                                                {!location && errors.location?.message}\r\n                                            </Div>\r\n                                        </Div>\r\n                                    </Grid>\r\n\r\n                                    <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\r\n                                        <Typography className=\"col-md-12 col-lg-6 col-xl-4 input-label\" sx={{ mt: 2 }}>\r\n                                            Longitude <span className=\"required\">*</span>\r\n                                        </Typography>\r\n                                        <Div className=\"col-md-12 col-lg-6 col-xl-8\">\r\n                                            <TextField\r\n                                                className=\"col-12 input-box\"\r\n                                                name=\"longitude\"\r\n                                                value={longitude}\r\n                                                placeholder=\"Longitude\"\r\n                                                autoComplete=\"off\"\r\n                                                disabled\r\n                                            />\r\n                                        </Div>\r\n                                    </Grid>\r\n\r\n                                    <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\r\n                                        <Typography className=\"col-md-12 col-lg-6 col-xl-4 input-label\" sx={{ mt: 2 }}>\r\n                                            Latitude <span className=\"required\">*</span>\r\n                                        </Typography>\r\n                                        <Div className=\"col-md-12 col-lg-6 col-xl-8\">\r\n                                            <TextField\r\n                                                className=\"col-12 input-box\"\r\n                                                name=\"latitude\"\r\n                                                value={latitude}\r\n                                                placeholder=\"Latitude\"\r\n                                                autoComplete=\"off\"\r\n                                                disabled\r\n                                            />\r\n                                        </Div>\r\n                                    </Grid>\r\n\r\n                                    <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\r\n                                        <Typography className=\"col-md-12 col-lg-6 col-xl-4 input-label\" sx={{ mt: 2 }}>\r\n                                            Store Incharge\r\n                                        </Typography>\r\n                                        <Div className=\"col-md-12 col-lg-6 col-xl-8\">\r\n                                            <FormControl className=\"col-12\">\r\n                                                <Autocomplete\r\n                                                    className={`search-select col-12 ${errors.storeIncharge ? \"is-invalid\" : \"\"\r\n                                                        }`}\r\n                                                    name=\"storeIncharge\"\r\n                                                    options={employeeLists}\r\n                                                    getOptionLabel={(option) => `${option?.Employee_FirstName} ${option?.Employee_LasttName}`}\r\n                                                    value={employeeLists?.find(\r\n                                                        (option) => `${option?.Employee_FirstName} ${option?.Employee_LasttName}` === storeIncharge\r\n                                                    ) || null}\r\n                                                    onChange={(e, newValue) => {\r\n                                                        setStoreIncharge(`${newValue?.Employee_FirstName} ${newValue?.Employee_LasttName}`);\r\n                                                    }}\r\n                                                    renderInput={(params) => (\r\n                                                        <TextField\r\n                                                            {...params}\r\n                                                            {...register(\"storeIncharge\")}\r\n                                                            placeholder=\"Store Incharge\"\r\n                                                            autoComplete=\"off\"\r\n                                                            variant=\"outlined\"\r\n                                                        />\r\n                                                    )}\r\n                                                />\r\n                                            </FormControl>\r\n                                            {/* <Div style={{ color: \"red\" }}>\r\n                                                {!storeIncharge && errors.storeIncharge?.message}\r\n                                            </Div> */}\r\n                                        </Div>\r\n                                    </Grid>\r\n\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Div>\r\n\r\n                    {/* code for save and cancel button */}\r\n                    <Div\r\n                        className=\"buttons\"\r\n                        sx={{\r\n                            mt: 5, mb: 3, display: \"flex\",\r\n                            justifyContent: \"end\"\r\n                        }}\r\n                    >\r\n                        <ButtonGroup\r\n                            aria-label=\"split button\"\r\n                            type=\"submit\"\r\n                            color=\"primary\"\r\n                            sx={{\r\n                                mt: { xs: 0.5, lg: 0 },\r\n                                mr: { xs: 0, md: 1 },\r\n                            }}\r\n                        >\r\n                            <Button type=\"submit\" className=\"plus-button\" sx={{ width: { md: \"99px !important\" } }}>\r\n                                Save\r\n                            </Button>\r\n                            <Button variant=\"contained\" className=\"icon-button\">\r\n                                <FaSave size={18} />\r\n                            </Button>\r\n                        </ButtonGroup>\r\n\r\n                        <ButtonGroup\r\n                            aria-label=\"split button\"\r\n                            onClick={handleCloseCreateStore}\r\n                            sx={{\r\n                                mt: { xs: 0.5, lg: 0 },\r\n                                mr: { xs: 0, md: 1 }\r\n                            }}\r\n                        >\r\n                            <Button className=\"plus-button\" sx={{ width: { md: \"99px !important\" } }}>Cancel</Button>\r\n                            <Button variant=\"contained\" className=\"icon-button\">\r\n                                <TiCancel size={20} />\r\n                            </Button>\r\n                        </ButtonGroup>\r\n                    </Div>\r\n                </form>\r\n            </DialogContent>\r\n\r\n        </Dialog>\r\n    )\r\n}\r\n\r\nexport default CreateStore","import axios from \"axios\";\r\nimport { BASE_URL } from \"./auth-services\";\r\n\r\nconst dropdownApiServices = {};\r\n\r\n\r\ndropdownApiServices.getItemDropdownList = async (id1, id2, header) => {\r\n    const { data } = await axios.get(\r\n        `${BASE_URL}/Erpapp/Itemlistwithoutpagination/?Company_Id=${id1}&Partner_Id=${id2}&Is_Deleted=False`,\r\n        header\r\n    );\r\n    return data;\r\n};\r\n\r\ndropdownApiServices.getCostcenterDropdownList = async (id, header) => {\r\n    const { data } = await axios.get(\r\n        `${BASE_URL}/Erpapp/Costcenterlistwithoutpagination/?Partner_Id=${id}`,\r\n        header\r\n    );\r\n    return data;\r\n};\r\n\r\ndropdownApiServices.getSupplierDropdownList = async (partnerId, header) => {\r\n    const { data } = await axios.get(\r\n        `${BASE_URL}/Erpapp/supplierlistwithoutpagination/?Partner_Id=${partnerId}`,\r\n        header\r\n    );\r\n    return data;\r\n};\r\n\r\ndropdownApiServices.getStoreDropdownList = async (partnerId, header) => {\r\n    const { data } = await axios.get(\r\n        `${BASE_URL}/Erpapp/Storelistwithoutpagination/?Partner_Id=${partnerId}`,\r\n        header\r\n    );\r\n    return data;\r\n};\r\n\r\ndropdownApiServices.getAllStoreDropdownList = async (header) => {\r\n    const { data } = await axios.get(\r\n        `${BASE_URL}/Erpapp/Storelistwithoutpaginationforfront/`,\r\n        header\r\n    );\r\n    return data;\r\n};\r\n\r\ndropdownApiServices.getServiceDropdownList = async (header) => {\r\n    const { data } = await axios.get(\r\n        `${BASE_URL}/Erpapp/ServiceListWithoutPagination/`,\r\n        header\r\n    );\r\n    return data;\r\n};\r\n\r\ndropdownApiServices.getMaterialReceiptDropdownList = async (id1, id3, header) => {\r\n    const { data } = await axios.get(\r\n        `${BASE_URL}/Erpapp/GoodsReceiptwithoutpagination/?Company_Id=${id1}&Partner_Id=${id3}`,\r\n        header\r\n    );\r\n    return data;\r\n};\r\n\r\ndropdownApiServices.getMaterialRequestDropdownList = async (companyId, header) => {\r\n    const { data } = await axios.get(\r\n        `${BASE_URL}/Erpapp/Materialrequestwithoutpagination/?Company_Id=${companyId}`,\r\n        header\r\n    );\r\n    return data;\r\n};\r\n\r\n\r\ndropdownApiServices.getMaterialIssueDropdownList = async (companyId, header) => {\r\n    const { data } = await axios.get(\r\n        `${BASE_URL}/Erpapp/MaterialIssueWithoutPaginationAllList/?Company_Id=${companyId}`,\r\n        header\r\n    );\r\n    return data;\r\n};\r\n\r\ndropdownApiServices.getCatalogueDropdownList = async (companyId, header) => {\r\n    const { data } = await axios.get(\r\n        `${BASE_URL}/Erpapp/Cataloguewithoutpaginationlist/?Company_Id=${companyId}`,\r\n        header\r\n    );\r\n    return data;\r\n};\r\n\r\n\r\nexport default dropdownApiServices;\r\n","import JumboScrollbar from \"@jumbo/components/JumboScrollbar\";\r\nimport Div from \"@jumbo/shared/Div\";\r\nimport {\r\n    Box,\r\n    Button,\r\n    ButtonGroup,\r\n    Tab,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableHead,\r\n    TableRow,\r\n    Typography,\r\n    useMediaQuery,\r\n    useTheme,\r\n} from \"@mui/material\";\r\nimport { BASE_URL } from \"app/services/auth-services\";\r\nimport itemServices from \"app/services/item-master-services\";\r\nimport axios from \"axios\";\r\nimport React, { useEffect } from \"react\";\r\nimport { useState } from \"react\";\r\nimport { MdClose } from \"react-icons/md\";\r\nimport { TabContext, TabList, TabPanel } from \"@mui/lab\";\r\nimport { format } from \"date-fns\";\r\nimport { formatIndianNumber } from \"app/shared/ReuseComponents/DateFormatter\";\r\nimport HistoryOverview from \"app/shared/ReuseComponents/HistoryOverview\";\r\n\r\n\r\nconst ViewStoreSettings = ({\r\n    scrollHeight,\r\n    setListStore,\r\n    setEditOverviewItem,\r\n    currentData,\r\n    setCurrentData\r\n}) => {\r\n    const token = localStorage.getItem(\"accesstoken\");\r\n\r\n    const header = {\r\n        headers: {\r\n            Authorization: `Bearer ${token}`,\r\n            \"Content-Type\": \"application/json\",\r\n            Accept: \"application/json\",\r\n        },\r\n    };\r\n    const Partner_Id = parseInt(localStorage.getItem(\"PartnerId\"));\r\n\r\n\r\n    const theme = useTheme();\r\n    const isMdUp = useMediaQuery(theme.breakpoints.up('md'));\r\n\r\n\r\n\r\n    const [itemGroups, setItemGroups] = useState([]);\r\n    const [current, setCurrent] = useState(true);\r\n    const [value, setValue] = useState(\"1\");\r\n    const [transactionHistory, setTransactionHistory] = useState([]);\r\n    const [updateHistory, setUpdateHistory] = useState([]);\r\n    const [dateFormat, setDateFormat] = useState(\"\");\r\n\r\n    // created by vijay\r\n\r\n    const [itemList, setItemList] = useState([]);\r\n\r\n\r\n    let userDetails = localStorage.getItem(\"UserDetails\");\r\n    userDetails = JSON.parse(userDetails);\r\n    let companyId = userDetails && userDetails.Organization_Id;\r\n    let id = userDetails && userDetails.id;\r\n\r\n    const handleChange = (event, newValue) => {\r\n        setValue(newValue);\r\n    };\r\n\r\n    const handleClickBack = () => {\r\n        setListStore(true);\r\n        setEditOverviewItem(false);\r\n    };\r\n\r\n    const getItemCategory = () => {\r\n        var payload = {\r\n            Search: \"UOM\",\r\n        };\r\n        itemServices\r\n            .getUnits(payload, header)\r\n            .then((res) => {\r\n                console.log(\"res\", res[0].value);\r\n            })\r\n            .catch((error) => {\r\n                console.log(error);\r\n            });\r\n    };\r\n\r\n    // item group\r\n    const getActiveItemGroups = async () => {\r\n        var payload = {\r\n            page: 1,\r\n            Is_Active: true,\r\n            Is_Deleted: false,\r\n        };\r\n        // itemServices\r\n        //   .activeItemGroups(payload, header)\r\n        //   .then((res) => {\r\n        //     console.log(\"res\", res.results);\r\n        //     setItemGroups(res.results);\r\n        //   })\r\n        //   .catch((error) => {\r\n        //     console.log(error);\r\n        //   });\r\n        await axios.get(`${BASE_URL}/Erpapp/Itemgroupwithoutpagination/`, payload, header)\r\n            .then((res) => {\r\n                console.log(\"resssss\", res?.data);\r\n                setItemGroups(res?.data);\r\n            })\r\n            .catch((error) => {\r\n                console.log(error);\r\n            });\r\n    };\r\n\r\n    useEffect(() => {\r\n        getItemCategory();\r\n        getActiveItemGroups();\r\n    }, []);\r\n\r\n    const items = currentData?.Item?.map((opt) => opt);\r\n    useEffect(() => {\r\n        items?.forEach((item) => {\r\n            axios\r\n                .get(\r\n                    `${BASE_URL}/Erpapp/Itemtransactionfilter/?Partner_Id=${Partner_Id}&Item_Name=${item?.Item_Name}`,\r\n                    header\r\n                )\r\n                .then((res) => {\r\n                    console.error(\"data\", res?.data);\r\n                    setTransactionHistory(res?.data);\r\n                })\r\n                .catch((error) => {\r\n                    console.log(\"ds\", error);\r\n                });\r\n        });\r\n\r\n        // for history\r\n        axios\r\n            .get(\r\n                `${BASE_URL}/Erpapp/Updaterecordsfilter/?Partner_Id=${Partner_Id}&Document_Id=${currentData?.Store_Id}`,\r\n                header\r\n            )\r\n            .then((res) => {\r\n                setUpdateHistory(res?.data);\r\n            })\r\n            .catch((error) => {\r\n                console.log(\"ds\", error);\r\n            });\r\n    }, [currentData]);\r\n\r\n\r\n    let userId = parseInt(localStorage.getItem(\"UserId\"));\r\n    let partnerId = parseInt(localStorage.getItem(\"PartnerId\"));\r\n\r\n\r\n    useEffect(async () => {\r\n        try {\r\n            await axios\r\n                .get(\r\n                    `${BASE_URL}/Erpapp/Itemlistwithoutpagination/?Company_Id=${companyId}&Partner_Id=${partnerId}`, header\r\n                )\r\n                .then((res) => {\r\n                    console.log(\"res\", res);\r\n                    setItemList(res?.data);\r\n                })\r\n                .catch((error) => {\r\n                    console.log(\"Error in retrieving item master===>\", error);\r\n                });\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n\r\n    }, []);\r\n\r\n    // useEffect(async () => {\r\n    //   try {\r\n    //     const findImage = await currentData?.Items?.map((img, index) => img?.Item_Name)\r\n    //     console.log(\"findImage\", findImage);\r\n    //     // get a item image\r\n    //     for (const item of findImage) {\r\n    //       const matchingItem = itemList?.find((opt) => opt?.Item_Name === item);\r\n\r\n    //       if (matchingItem) { // looping the array\r\n    //         const itemsImage = matchingItem?.Upload_Image;\r\n    //         console.log(\"itemImage\", itemsImage);\r\n\r\n    //         const image = await fetch(`${BASE_URL}${itemsImage}`)\r\n    //           .then((response) => response.arrayBuffer())\r\n    //           .then((buffer) => {\r\n    //             const base64 = btoa(\r\n    //               new Uint8Array(buffer).reduce(\r\n    //                 (data, byte) => data + String.fromCharCode(byte),\r\n    //                 \"\"\r\n    //               )\r\n    //             );\r\n    //             return base64;\r\n    //           })\r\n    //           .catch((error) => {\r\n    //             console.log(\"Error in retriving the item image\", error);\r\n    //           });\r\n    //         setItemImage(image)\r\n    //       }\r\n    //     }\r\n    //   }\r\n    //   catch (err) {\r\n    //     console.log(err);\r\n    //   }\r\n    // }, [currentData])\r\n\r\n\r\n    // get date format from organization get api\r\n\r\n    useEffect(() => {\r\n        const fetchItemImages = async () => {\r\n            try {\r\n                if (!currentData || !currentData.Items || !itemList) {\r\n                    return;\r\n                }\r\n\r\n                const itemImages = await Promise.all(\r\n                    currentData?.Items?.map(async (item) => {\r\n                        const matchingItem = itemList?.find((opt) => opt?.Item_Name === item?.Item_Name);\r\n                        if (matchingItem) {\r\n                            const itemsImage = matchingItem?.Upload_Image;\r\n                            const response = await fetch(`${BASE_URL}${itemsImage}`);\r\n                            const buffer = await response.arrayBuffer();\r\n                            const base64 = btoa(\r\n                                new Uint8Array(buffer).reduce((data, byte) => data + String.fromCharCode(byte), \"\")\r\n                            );\r\n                            return base64;\r\n                        }\r\n                        return null;\r\n                    })\r\n                );\r\n\r\n                const updatedData = {\r\n                    ...currentData,\r\n                    Items: currentData?.Items?.map((item, index) => ({\r\n                        ...item,\r\n                        Image: itemImages[index]\r\n                    }))\r\n                };\r\n\r\n                // Set the updated data with item images\r\n                // setCurrentData(updatedData);\r\n\r\n            } catch (err) {\r\n                console.log(\"Error in fetching item images:\", err);\r\n            }\r\n        };\r\n\r\n        fetchItemImages();\r\n    }, []);\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        axios\r\n            .get(`${BASE_URL}/Erpapp/CompanyCRUD/?id=${companyId}`, header)\r\n            .then((res) => {\r\n                console.log(\"D\", res?.data);\r\n                setDateFormat(res?.data?.DateFormat);\r\n            })\r\n            .catch((error) => {\r\n                console.log(error);\r\n            });\r\n    }, []);\r\n\r\n\r\n    return (\r\n        <>\r\n            <Div style={{ display: current ? \"block\" : \"none\" }}>\r\n                <Typography variant=\"h3\" sx={{ fontWeight: 600 }}>\r\n                    Store Overview\r\n                </Typography>\r\n\r\n                <Div>\r\n                    <TabContext value={value}>\r\n                        <Box sx={{ borderBottom: 0, borderColor: \"divider\" }}>\r\n                            <TabList\r\n                                onChange={handleChange}\r\n                                aria-label=\"lab API tabs example\"\r\n                            >\r\n                                <Tab\r\n                                    label=\"Overview\"\r\n                                    value=\"1\"\r\n                                    sx={{ fontSize: \"16px\", color: \"#000000\" }}\r\n                                />\r\n                                <Tab\r\n                                    label=\"History\"\r\n                                    value=\"3\"\r\n                                    sx={{ fontSize: \"16px\", color: \"#000000\" }}\r\n                                />\r\n                            </TabList>\r\n                        </Box>\r\n\r\n                        <TabPanel value=\"1\" sx={{ p: 1.5, minHeight: \"350px\" }}>\r\n                            <Div className=\"row mt-2\">\r\n                                <Div className=\"col col-sm-2 col-md-4 col-lg-3 col-xl-2\">\r\n                                    <Typography variant=\"h4\" sx={{ fontSize: isMdUp ? \"14px !important\" : \"12px !important\" }}>Store Id</Typography>\r\n                                    <Typography variant=\"h4\" sx={{ fontSize: isMdUp ? \"14px !important\" : \"12px !important\" }}>Store Name</Typography>\r\n                                    <Typography variant=\"h4\" sx={{ fontSize: isMdUp ? \"14px !important\" : \"12px !important\" }}>Store Incharge</Typography>\r\n                                    <Typography variant=\"h4\" sx={{ fontSize: isMdUp ? \"14px !important\" : \"12px !important\" }}>Business Unit</Typography>\r\n                                    <Typography variant=\"h4\" sx={{ fontSize: isMdUp ? \"14px !important\" : \"12px !important\" }}>Created Date</Typography>\r\n                                    <Typography variant=\"h4\" sx={{ fontSize: isMdUp ? \"14px !important\" : \"12px !important\" }}>Longitude</Typography>\r\n                                    <Typography variant=\"h4\" sx={{ fontSize: isMdUp ? \"14px !important\" : \"12px !important\" }}>Latitude</Typography>\r\n                                    <Typography variant=\"h4\" sx={{ fontSize: isMdUp ? \"14px !important\" : \"12px !important\" }}>Store Address</Typography>\r\n                                </Div>\r\n\r\n                                <Div className=\"col col-sm-5 col-md-5 col-lg-5 col-xl-5\">\r\n                                    <Typography variant=\"h4\" sx={{ fontSize: isMdUp ? \"14px !important\" : \"12px !important\" }}>\r\n                                        : {currentData?.Store_Id || \"-\"}\r\n                                    </Typography>\r\n                                    <Typography variant=\"h4\" sx={{ fontSize: isMdUp ? \"14px !important\" : \"12px !important\" }}>\r\n                                        : {currentData?.Store_Name || \"-\"}\r\n                                    </Typography>\r\n                                    <Typography variant=\"h4\" sx={{ fontSize: isMdUp ? \"14px !important\" : \"12px !important\" }}>\r\n                                        : {currentData?.Store_Incharge || \"-\"}\r\n                                    </Typography>\r\n                                    <Typography variant=\"h4\" sx={{ fontSize: isMdUp ? \"14px !important\" : \"12px !important\" }}>\r\n                                        : {currentData?.Own_Partner || \"-\"}\r\n                                    </Typography>\r\n                                    <Typography variant=\"h4\" sx={{ fontSize: isMdUp ? \"14px !important\" : \"12px !important\" }}>\r\n                                        : {dateFormat &&\r\n                                            currentData &&\r\n                                            currentData?.Created_Date &&\r\n                                            format(new Date(currentData?.Created_Date), dateFormat) || currentData?.Created_Date\r\n                                        }\r\n                                    </Typography>\r\n                                    <Typography variant=\"h4\" sx={{ fontSize: isMdUp ? \"14px !important\" : \"12px !important\" }}>\r\n                                        : {currentData?.Longitude || \"-\"}\r\n                                    </Typography>\r\n                                    <Typography variant=\"h4\" sx={{ fontSize: isMdUp ? \"14px !important\" : \"12px !important\" }}>\r\n                                        : {currentData?.Lotitude || \"-\"}\r\n                                    </Typography>\r\n                                    <Typography variant=\"h4\" sx={{ fontSize: isMdUp ? \"14px !important\" : \"12px !important\" }}>\r\n                                        : {currentData?.StoreBuilding_Name},\r\n                                        {currentData?.Store_Area},\r\n                                        {currentData?.Store_City}, {currentData?.Store_State},\r\n                                        {currentData?.Store_Country}\r\n                                    </Typography>\r\n                                </Div>\r\n                            </Div>\r\n                            <br />\r\n                        </TabPanel>\r\n\r\n                        <TabPanel value=\"2\" sx={{ p: 1.5, minHeight: \"350px\" }}>\r\n                            <Div>\r\n                                <JumboScrollbar\r\n                                    autoHeight={true}\r\n                                    autoHideTimeout={4000}\r\n                                    autoHeightMin={scrollHeight ? scrollHeight : 250}\r\n                                    autoHide={true}\r\n                                    hideTracksWhenNotNeeded\r\n                                    id=\"no-more-tables\"\r\n                                >\r\n                                    <Table className=\"table table-bordered\">\r\n                                        <TableHead className=\"table-head\">\r\n                                            <TableRow>\r\n                                                <TableCell>Trn date</TableCell>\r\n                                                <TableCell>Trn Type</TableCell>\r\n                                                <TableCell>Store Id</TableCell>\r\n                                                <TableCell>Store Name</TableCell>\r\n                                                <TableCell\r\n\r\n                                                    sx={{\r\n                                                        minWidth: \"100px !important\",\r\n                                                        overflow: \"hidden\",\r\n                                                        textOverflow: \"ellipsis\",\r\n                                                    }}\r\n                                                >\r\n                                                    UOM\r\n                                                </TableCell>\r\n                                                <TableCell\r\n\r\n                                                    sx={{\r\n                                                        minWidth: \"130px !important\",\r\n                                                        overflow: \"hidden\",\r\n                                                        textOverflow: \"ellipsis\",\r\n                                                    }}\r\n                                                >\r\n                                                    Quantity\r\n                                                </TableCell>\r\n                                                <TableCell>Unit Price</TableCell>\r\n                                                <TableCell>Value</TableCell>\r\n                                            </TableRow>\r\n                                        </TableHead>\r\n                                        <TableBody>\r\n                                            {transactionHistory?.GoodsRecipt != [] ? (\r\n                                                <>\r\n                                                    {transactionHistory?.GoodsRecipt?.map(\r\n                                                        (receipt, index) => {\r\n                                                            console.log(\"receipt\", receipt);\r\n                                                            const itemForReceipt = receipt?.Item?.find(\r\n                                                                (item) =>\r\n                                                                    items?.some(\r\n                                                                        (opt) => opt?.Item_Name === item?.Item_Name\r\n                                                                    )\r\n                                                            );\r\n\r\n                                                            return (\r\n                                                                <TableRow key={index}>\r\n                                                                    <TableCell>{receipt?.Created_Date}</TableCell>\r\n                                                                    <TableCell>Material Receipt</TableCell>\r\n                                                                    <TableCell>{receipt?.TrfIn_Id}</TableCell>\r\n                                                                    <TableCell>\r\n                                                                        {itemForReceipt\r\n                                                                            ? itemForReceipt?.Item_Name\r\n                                                                            : \" \"}\r\n                                                                    </TableCell>\r\n                                                                    <TableCell>\r\n                                                                        {itemForReceipt ? itemForReceipt?.UOM : \"\"}\r\n                                                                    </TableCell>\r\n                                                                    <TableCell className=\"Amount_Fields\">\r\n                                                                        {itemForReceipt\r\n                                                                            ? `${itemForReceipt?.Quantity}`\r\n                                                                            : \"0\"}\r\n                                                                    </TableCell>\r\n                                                                    <TableCell className=\"Amount_Fields\">\r\n                                                                        {itemForReceipt\r\n                                                                            ? `${formatIndianNumber(itemForReceipt?.Unit_Price)}`\r\n                                                                            : \"0.00\"}\r\n                                                                    </TableCell>\r\n                                                                    <TableCell className=\"Amount_Fields\">\r\n                                                                        {itemForReceipt\r\n                                                                            ? `${formatIndianNumber(itemForReceipt?.Amount)}`\r\n                                                                            : \"0.00\"}\r\n                                                                    </TableCell>\r\n                                                                </TableRow>\r\n                                                            );\r\n                                                        }\r\n                                                    )}\r\n\r\n                                                    {transactionHistory?.Materialreturn?.map(\r\n                                                        (receipt, index) => {\r\n                                                            console.log(\"receipt\", receipt);\r\n                                                            const itemForReceipt = receipt?.Item?.find(\r\n                                                                (item) =>\r\n                                                                    items?.some(\r\n                                                                        (opt) => opt?.Item_Name === item?.Item_Name\r\n                                                                    )\r\n                                                            );\r\n\r\n                                                            return (\r\n                                                                <TableRow key={index}>\r\n                                                                    <TableCell>{receipt?.Created_Date}</TableCell>\r\n                                                                    <TableCell>Material Return</TableCell>\r\n                                                                    <TableCell>{receipt?.MatRet_Id}</TableCell>\r\n                                                                    <TableCell>\r\n                                                                        {itemForReceipt\r\n                                                                            ? itemForReceipt?.Item_Name\r\n                                                                            : \" \"}\r\n                                                                    </TableCell>\r\n                                                                    <TableCell>\r\n                                                                        {itemForReceipt ? itemForReceipt?.UOM : \"\"}\r\n                                                                    </TableCell>\r\n                                                                    <TableCell className=\"Amount_Fields\">\r\n                                                                        {itemForReceipt\r\n                                                                            ? `${itemForReceipt?.Quantity}`\r\n                                                                            : \"0\"}\r\n                                                                    </TableCell>\r\n                                                                    <TableCell className=\"Amount_Fields\">\r\n                                                                        {itemForReceipt\r\n                                                                            ? `${formatIndianNumber(itemForReceipt?.Unit_Price)}`\r\n                                                                            : \"0.00\"}\r\n                                                                    </TableCell>\r\n                                                                    <TableCell className=\"Amount_Fields\">\r\n                                                                        {itemForReceipt\r\n                                                                            ? `${formatIndianNumber(itemForReceipt?.Amount)}`\r\n                                                                            : \"0.00\"}\r\n                                                                    </TableCell>\r\n                                                                </TableRow>\r\n                                                            );\r\n                                                        }\r\n                                                    )}\r\n\r\n                                                    {transactionHistory?.Materialtransfer?.map(\r\n                                                        (receipt, index) => {\r\n                                                            console.log(\"receipt\", receipt);\r\n                                                            const itemForReceipt = receipt?.Item?.find(\r\n                                                                (item) =>\r\n                                                                    items?.some(\r\n                                                                        (opt) => opt?.Item_Name === item?.Item_Name\r\n                                                                    )\r\n                                                            );\r\n\r\n                                                            return (\r\n                                                                <TableRow key={index}>\r\n                                                                    <TableCell>{receipt?.Created_Date}</TableCell>\r\n                                                                    <TableCell>Material Transfer</TableCell>\r\n                                                                    <TableCell>{receipt?.MatTransf_Id}</TableCell>\r\n                                                                    <TableCell>\r\n                                                                        {itemForReceipt\r\n                                                                            ? itemForReceipt?.Item_Name\r\n                                                                            : \" \"}\r\n                                                                    </TableCell>\r\n                                                                    <TableCell>\r\n                                                                        {itemForReceipt ? itemForReceipt?.UOM : \"\"}\r\n                                                                    </TableCell>\r\n                                                                    <TableCell className=\"Amount_Fields\">\r\n                                                                        {itemForReceipt\r\n                                                                            ? `${itemForReceipt?.Quantity}`\r\n                                                                            : \"0\"}\r\n                                                                    </TableCell>\r\n                                                                    <TableCell className=\"Amount_Fields\">\r\n                                                                        {itemForReceipt\r\n                                                                            ? `${formatIndianNumber(itemForReceipt?.Unit_Price)}`\r\n                                                                            : \"0.00\"}\r\n                                                                    </TableCell>\r\n                                                                    <TableCell className=\"Amount_Fields\">\r\n                                                                        {itemForReceipt\r\n                                                                            ? `${formatIndianNumber(itemForReceipt?.Amount)}`\r\n                                                                            : \"0.00\"}\r\n                                                                    </TableCell>\r\n                                                                </TableRow>\r\n                                                            );\r\n                                                        }\r\n                                                    )}\r\n                                                    {transactionHistory?.MeterialRequest?.map(\r\n                                                        (receipt, index) => {\r\n                                                            console.log(\"receipt\", receipt);\r\n                                                            const itemForReceipt = receipt?.Item?.find(\r\n                                                                (item) =>\r\n                                                                    items?.some(\r\n                                                                        (opt) => opt?.Item_Name === item?.Item_Name\r\n                                                                    )\r\n                                                            );\r\n\r\n                                                            return (\r\n                                                                <TableRow key={index}>\r\n                                                                    <TableCell>{receipt?.Created_Date}</TableCell>\r\n                                                                    <TableCell>Material Request</TableCell>\r\n                                                                    <TableCell>{receipt?.MatReq_Id}</TableCell>\r\n                                                                    <TableCell>\r\n                                                                        {itemForReceipt\r\n                                                                            ? itemForReceipt?.Item_Name\r\n                                                                            : \" \"}\r\n                                                                    </TableCell>\r\n                                                                    <TableCell>\r\n                                                                        {itemForReceipt ? itemForReceipt?.UOM : \"\"}\r\n                                                                    </TableCell>\r\n                                                                    <TableCell className=\"Amount_Fields\">\r\n                                                                        {itemForReceipt\r\n                                                                            ? `${itemForReceipt?.Quantity}`\r\n                                                                            : \"0\"}\r\n                                                                    </TableCell>\r\n                                                                    <TableCell className=\"Amount_Fields\">\r\n                                                                        {itemForReceipt\r\n                                                                            ? `${formatIndianNumber(itemForReceipt?.Unit_Price)}`\r\n                                                                            : \"0.00\"}\r\n                                                                    </TableCell>\r\n                                                                    <TableCell className=\"Amount_Fields\">\r\n                                                                        {itemForReceipt\r\n                                                                            ? `${formatIndianNumber(itemForReceipt?.Amount)}`\r\n                                                                            : \"0.00\"}\r\n                                                                    </TableCell>\r\n                                                                </TableRow>\r\n                                                            );\r\n                                                        }\r\n                                                    )}\r\n                                                </>\r\n                                            ) : (\r\n                                                <TableRow>\r\n                                                    <TableCell colSpan={8} align=\"center\">\r\n                                                        No Records\r\n                                                    </TableCell>\r\n                                                </TableRow>\r\n                                            )}\r\n                                        </TableBody>\r\n                                    </Table>\r\n                                </JumboScrollbar>\r\n                            </Div>\r\n                        </TabPanel>\r\n\r\n                        <TabPanel value=\"3\" sx={{ p: 1.5, minHeight: \"350px\" }}>\r\n                            <HistoryOverview updatedHistory={updateHistory} itemId={\"Store Id\"} />\r\n                        </TabPanel>\r\n                    </TabContext>\r\n                </Div>\r\n            </Div>\r\n\r\n            {/* code for save and back buttons */}\r\n            <Div>\r\n                <ButtonGroup aria-label=\"split button\" onClick={handleClickBack}>\r\n                    <Button className=\"plus-button\">Close</Button>\r\n                    <Button variant=\"contained\" className=\"icon-button\">\r\n                        <MdClose size={18} />\r\n                    </Button>\r\n                </ButtonGroup>\r\n            </Div>\r\n\r\n            {/* <Div style={{ display: editItems ? \"block\" : \"none\" }}>\r\n        <EditOverviewItem setCurrent={setCurrent} setEditItems={setEditItems} />\r\n      </Div> */}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ViewStoreSettings\r\n","import Div from \"@jumbo/shared/Div\";\r\nimport {\r\n    Autocomplete,\r\n    Button,\r\n    ButtonGroup,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    FormControl,\r\n    FormControlLabel,\r\n    Grid,\r\n    Radio,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableHead,\r\n    TableRow,\r\n    TextField,\r\n    Typography,\r\n    useMediaQuery,\r\n    useTheme,\r\n} from \"@mui/material\";\r\nimport axios from \"axios\";\r\nimport React, { useCallback, useContext, useEffect, useState } from \"react\";\r\nimport { DataContext } from \"../OrganizationStructure\";\r\nimport { toast } from \"react-toastify\";\r\nimport { storesValidationSchema } from \"app/schemas/SettingValidationSchemas\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\nimport { BASE_URL } from \"app/services/auth-services\";\r\nimport JumboScrollbar from \"@jumbo/components/JumboScrollbar\";\r\nimport { FaSave } from \"react-icons/fa\";\r\nimport { TiCancel } from \"react-icons/ti\";\r\nimport { fetchTransactionSeries } from \"app/shared/ReuseComponents/DateFormatter\";\r\nimport { Country } from \"country-state-city\";\r\nimport CreateStore from \"./CreateStore\";\r\nimport hrApiServices from \"app/services/hr-api-services\";\r\nimport dropdownApiServices from \"app/services/dropdownapi-services\";\r\nimport ViewStoreSettings from \"./ViewStoreSettings\";\r\nimport { ErpAlertViewDialogBox, ErpDeleteDialogBox } from \"app/shared/ReuseComponents/ErpDialogBoxes\";\r\nimport { ErpActionButton, ErpCreateButton } from \"app/shared/ReuseComponents/ButtonComponent\";\r\n\r\n\r\nconst countryOptions = Country.getAllCountries();\r\n\r\nconst StoreList = (scrollHeight) => {\r\n    const { name1, name3, name4, name5, name6, countries, states, cities, zones, getId4, getId5, getId6, id4, userRolePermissions } =\r\n        useContext(DataContext);\r\n\r\n    const token = localStorage.getItem(\"accesstoken\");\r\n\r\n    const header = {\r\n        headers: {\r\n            Authorization: `Bearer ${token}`,\r\n            \"Content-Type\": \"application/json\",\r\n            Accept: \"application/json\",\r\n        },\r\n    };\r\n\r\n    const theme = useTheme();\r\n    const fullScreen = useMediaQuery(theme.breakpoints.down('lg'));\r\n\r\n    const [openListStore, setOpenListStore] = useState(true);\r\n    const [openCreateStore, setOpenCreateStore] = useState(false);\r\n    const [openEditStore, setOpenEditStore] = useState(false);\r\n    const [openViewStore, setOpenViewStore] = useState(false);\r\n    const [openDeleteStore, setOpenDeleteStore] = useState(false);\r\n    const [overviewAlert, setOverviewAlert] = useState(false);\r\n\r\n\r\n    const [cityName, setCityName] = useState({\r\n        City_Name: name4\r\n    });\r\n    const [zoneName, setZoneName] = useState();\r\n    const [pincode, setPincode] = useState(\"\");\r\n    const [cityId, setCityId] = useState(getId4);\r\n\r\n    const [currentData, setCurrentData] = useState({})\r\n\r\n\r\n    const [employeeName, setEmployeeName] = useState(\"\");\r\n    const [storeId, setStoreId] = useState(\"\");\r\n    const [storeName, setStoreName] = useState(\"\");\r\n    const [storeIncharge, setStoreIncharge] = useState(\"\");\r\n    const [buildingName, setBuildingName] = useState(\"\");\r\n    const [location, setLocation] = useState(\"\");\r\n\r\n    const [partners, setPartners] = useState([]);\r\n    const [employeeLists, setEmployeeLists] = useState([]);\r\n    const [businessUnitList, setBusinessUnitList] = useState([]);\r\n    const [storeLists, setStoreLists] = useState([]);\r\n\r\n\r\n    const [selectedCountry, setSelectedCountry] = useState(name1);\r\n    const [selectedState, setSelectedState] = useState(name3);\r\n    const [selectedCity, setSelectedCity] = useState(name4);\r\n    const [partnerId, setPartnerId] = useState(getId5);\r\n    const [partnerName, setPartnerName] = useState(name5);\r\n    const [longitude, setLongitude] = useState(\"\");\r\n    const [latitude, setLatitude] = useState(\"\");\r\n\r\n\r\n\r\n    const getPartnerLists = async () => {\r\n        await axios\r\n            .get(`${BASE_URL}/Erpapp/PartnerListreportDropdown/`, header)\r\n            .then((response) => {\r\n                if (response) console.log(response);\r\n                setBusinessUnitList(response?.data);\r\n            })\r\n            .catch((error) => {\r\n                console.log(\"Error in retrieving business unit list===>\", error);\r\n            });\r\n    };\r\n\r\n    useEffect(() => {\r\n        getPartnerLists();\r\n    }, []);\r\n\r\n    // get employee list\r\n    useEffect(() => {\r\n        const fetchEmployeeList = async () => {\r\n            try {\r\n                const res = await hrApiServices.listofDropdownEmployees(partnerId, header);\r\n                if (res) {\r\n                    console.log(\"RES\", res)\r\n                    setEmployeeLists(res);\r\n                }\r\n            } catch (error) {\r\n                console.error(error);\r\n            }\r\n        };\r\n\r\n        fetchEmployeeList();\r\n    }, [partnerId]);\r\n\r\n\r\n    const getStores = () => {\r\n        dropdownApiServices\r\n            .getStoreDropdownList(partnerId, header)\r\n            .then((res) => {\r\n                console.log(res);\r\n                setStoreLists(res);\r\n            })\r\n            .catch((error) => {\r\n                console.log(error);\r\n            });\r\n    }\r\n\r\n    useEffect(() => {\r\n        getStores()\r\n    }, [])\r\n\r\n\r\n\r\n    const handleAddZones = () => {\r\n        setOpenCreateStore(true);\r\n    };\r\n\r\n\r\n\r\n    const handleClose = () => {\r\n        setOpenEditStore(false);\r\n        reset()\r\n    };\r\n\r\n\r\n    const handleSearchLocation = useCallback(async () => {\r\n        try {\r\n            if (location !== undefined && location !== \"\") {\r\n                const response = await fetch(`https://nominatim.openstreetmap.org/search?q=${encodeURIComponent(location)}&format=json&limit=1`);\r\n                const data = await response.json();\r\n                console.log(\"dataaa\", data)\r\n                if (data?.length > 0) {\r\n                    setLatitude(data[0].lat);\r\n                    setLongitude(data[0].lon);\r\n                } else {\r\n                    setLatitude('');\r\n                    setLongitude('');\r\n                    toast.error('Location not found');\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.error('Error:', error);\r\n        }\r\n    }, [location]);\r\n\r\n\r\n\r\n    const {\r\n        reset,\r\n        register,\r\n        handleSubmit,\r\n        formState: { errors },\r\n    } = useForm({\r\n        mode: \"onBlur\",\r\n        resolver: yupResolver(storesValidationSchema),\r\n    });\r\n\r\n    const handleUpdateStore = (e) => {\r\n        e.preventDefault();\r\n\r\n        var payload = {\r\n            id: currentData?.id,\r\n            Store_Id: currentData?.Store_Id,\r\n            Store_Name: storeName,\r\n            StoreBuilding_Name: buildingName,\r\n            Store_Street: currentData?.Store_Street,\r\n            Store_Area: location,\r\n            Store_City: selectedCity,\r\n            Store_State: selectedState,\r\n            Store_Country: selectedCountry,\r\n            Store_Incharge: storeIncharge,\r\n            Own_Partner: partnerName,\r\n            Items: currentData?.Items,\r\n            Lotitude: latitude,\r\n            Longitude: longitude,\r\n            Partner_OrganizationId: localStorage.getItem(\"OrganizationId\"),\r\n            Store_UserId: localStorage.getItem(\"UserId\"),\r\n            Partner_Id: parseInt(partnerId),\r\n            Company_Id: parseInt(localStorage.getItem(\"OrganizationId\")),\r\n            Created_Date: new Date().toJSON().slice(0, 10),\r\n            Created_By: parseInt(localStorage.getItem(\"UserId\")),\r\n            Updated_By: parseInt(localStorage.getItem(\"UserId\")),\r\n        };\r\n        axios\r\n            .put(`${BASE_URL}/Erpapp/StoremasterCRUD/`, payload, header)\r\n            .then((res) => {\r\n                console.log(res?.data);\r\n                if (res?.data?.id) {\r\n                    toast.success(\"Updated Successfully\");\r\n                    getStores();\r\n                    setOpenEditStore(false);\r\n\r\n                    // Edited Fields History\r\n\r\n                    let EditedArr = [];\r\n\r\n                    if (storeName !== currentData?.Store_Name) {\r\n                        EditedArr.push(\"Store Name\");\r\n                    }\r\n                    if (buildingName !== currentData?.StoreBuilding_Name) {\r\n                        EditedArr.push(\"Building Name\");\r\n                    }\r\n                    if (location !== currentData?.Store_Area) {\r\n                        EditedArr.push(\"Location\");\r\n                    }\r\n                    if (selectedCity !== currentData?.Store_City) {\r\n                        EditedArr.push(\"City\");\r\n                    }\r\n                    if (selectedState !== currentData?.Store_State) {\r\n                        EditedArr.push(\"State\");\r\n                    }\r\n                    if (selectedCountry !== currentData?.Store_Country) {\r\n                        EditedArr.push(\"Country\");\r\n                    }\r\n                    if (storeIncharge !== currentData?.Store_Incharge) {\r\n                        EditedArr.push(\"Store Incharge\");\r\n                    }\r\n                    if (partnerName !== currentData?.Own_Partner) {\r\n                        EditedArr.push(\"Business Unit\");\r\n                    }\r\n                    if (latitude !== currentData?.Lotitude) {\r\n                        EditedArr.push(\"Latitude\");\r\n                    }\r\n                    if (longitude !== currentData?.Longitude) {\r\n                        EditedArr.push(\"Longitude\");\r\n                    }\r\n\r\n\r\n                    // history of updated records\r\n                    let editUser = localStorage.getItem(\"Username\");\r\n                    if (EditedArr?.length > 0) {\r\n                        axios\r\n                            .post(\r\n                                `${BASE_URL}/Erpapp/Updaterecordscrud/`,\r\n                                {\r\n                                    Document_Id: currentData?.Store_Id,\r\n                                    Updated_Person: `${editUser} edited this store.`,\r\n                                    Is_Deleted: false,\r\n                                    Updated_Time: `${new Date().getHours()}:${new Date().getMinutes()}:${new Date().getSeconds()}`,\r\n                                    Updated_Field: EditedArr.join(\",\"),\r\n                                    Partner_Id: parseInt(localStorage.getItem(\"PartnerId\")),\r\n                                    Updated_By: parseInt(localStorage.getItem(\"UserId\")),\r\n                                },\r\n                                header\r\n                            )\r\n                            .then((res) => {\r\n                                console.log(\"Result\", res.data);\r\n                            })\r\n                            .catch((res) => {\r\n                                console.log(res.message);\r\n                            });\r\n                    }\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                console.log(error);\r\n                toast.error(\"Store is already exists\");\r\n            });\r\n    };\r\n\r\n\r\n    // edit store\r\n    const editStoreById = async (data) => {\r\n        setOpenEditStore(true);\r\n        setCurrentData(data);\r\n\r\n        await axios\r\n            .get(`${BASE_URL}/Erpapp/StoremasterCRUD/?Store_Id=${data?.Store_Id}`, header)\r\n            .then((res) => {\r\n                console.log(res?.data);\r\n                if (res?.data?.id) {\r\n                    setStoreName(res?.data?.Store_Name);\r\n                    setBuildingName(res?.data?.StoreBuilding_Name);\r\n                    setLocation(res?.data?.Store_Area);\r\n                    setSelectedCity(res?.data?.Store_City);\r\n                    setSelectedState(res?.data?.Store_State);\r\n                    setSelectedCountry(res?.data?.Store_Country);\r\n                    setStoreIncharge(res?.data?.Store_Incharge);\r\n                    setPartnerName(res?.data?.Own_Partner);\r\n                    setPartnerId(res?.data?.Partner_Id?.id);\r\n                    setLatitude(res?.data?.Lotitude);\r\n                    setLongitude(res?.data?.Longitude);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                console.log(error);\r\n            });\r\n\r\n    }\r\n\r\n    // delete store\r\n    const deleteStoreById = async (data) => {\r\n        const previousRecordResponse = await handleGetAllServiceRelatedDatas(data);\r\n        if (previousRecordResponse?.length > 0) {\r\n            toast.warning(\"You cannot delete this record because it is being used somewhere.\")\r\n        } else {\r\n            setOpenDeleteStore(true);\r\n            setCurrentData(data);\r\n        }\r\n    }\r\n\r\n    const handleDeleteStore = async () => {\r\n        await axios\r\n            .delete(`${BASE_URL}/Erpapp/StoremasterCRUD/?Store_Id=${currentData?.Store_Id}`, header)\r\n            .then((res) => {\r\n                console.log(res?.data);\r\n                if (res?.data?.id) {\r\n                    toast.success(\"Store Deleted Successfully.\")\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                console.log(error);\r\n            });\r\n    }\r\n\r\n\r\n    // GetPartners\r\n    const getPartners = async () => {\r\n        await axios.get(`${BASE_URL}/Erpapp/PartnerListreportDropdown/`, header)\r\n            .then((response) => {\r\n                console.log(\"Partner Response\", response?.data);\r\n                const names = response?.data;\r\n                const filterPartners = names?.filter((opt) => opt?.BusinessUnit_City === cityName?.City_Name)\r\n                const uniqueNames = filterPartners?.filter(newName => !partners?.some(prevName => prevName.id === newName.id));\r\n                console.log(\"filterPartners\", uniqueNames, filterPartners)\r\n                setPartners(filterPartners);\r\n            }).catch((error) => {\r\n                console.log(error);\r\n            })\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        getPartners();\r\n    }, [cityName]);\r\n\r\n\r\n    const handleGetAllServiceRelatedDatas = async (data) => {\r\n        try {\r\n            const response = await axios.get(`${BASE_URL}/Erpapp/storeeditdropdownlist/?Partner_Id=${data?.Partner_Id}`, header);\r\n            const filterData = response?.data;\r\n            return filterData;\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n\r\n\r\n    const [transactionSeriesType, setTransactionSeriesType] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n        const transactionSeries = fetchTransactionSeries(\"Stores\")\r\n\r\n        if (transactionSeries) {\r\n            transactionSeries\r\n                .then((result) => {\r\n                    console.log(\"result\", result);\r\n                    setTransactionSeriesType(result)\r\n                })\r\n                .catch((error) => {\r\n                    console.error(error);\r\n                });\r\n        }\r\n    }, [transactionSeriesType])\r\n\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            <Div>\r\n                <Div\r\n                    className=\"card\"\r\n                    sx={{ p: 2, borderRadius: 0, m: 0 }}\r\n                >\r\n                    <Div sx={{ display: openListStore === true ? \"block\" : \"none\" }}>\r\n                        <Div\r\n                            sx={{\r\n                                position: \"absolute\",\r\n                                right: 15,\r\n                                // width: \"100%\",\r\n                                display: \"flex\",\r\n                                justifyContent: \"flex-end\"\r\n                            }}\r\n                        >\r\n                            {Array.isArray(userRolePermissions) && userRolePermissions.includes(301) && (\r\n                                <ErpCreateButton handleClick={handleAddZones} name={\"Add Store\"} />\r\n                            )}\r\n                        </Div>\r\n                        <br />\r\n\r\n                        <Div sx={{ mt: { lg: 3, md: 5, xs: 5 }, minHeight: \"300px\" }}>\r\n                            <JumboScrollbar\r\n                                autoHeight={true}\r\n                                autoHideTimeout={4000}\r\n                                autoHeightMin={scrollHeight ? scrollHeight : 300}\r\n                                autoHide={true}\r\n                                hideTracksWhenNotNeeded\r\n                                id=\"no-more-tables\"\r\n                            >\r\n                                <Table stickyHeader className=\"table table-borderless\">\r\n                                    <TableHead className=\"table-head\">\r\n                                        <TableRow>\r\n                                            <TableCell></TableCell>\r\n                                            <TableCell sx={{ fontWeight: 600 }}>Store Id</TableCell>\r\n                                            <TableCell sx={{ fontWeight: 600 }}>Store Name</TableCell>\r\n                                            <TableCell sx={{ fontWeight: 600 }}>Store Incharge</TableCell>\r\n                                            <TableCell sx={{ fontWeight: 600 }}>Zone Name</TableCell>\r\n                                            <TableCell sx={{ fontWeight: 600 }}>Action</TableCell>\r\n                                        </TableRow>\r\n                                    </TableHead>\r\n                                    <TableBody>\r\n                                        {storeLists?.filter((opt) => opt?.Store_Area === name6).length > 0 ? storeLists?.filter((opt) => opt.Store_Area === name6).map((store) => {\r\n                                            return (\r\n                                                <TableRow key={store.id}>\r\n                                                    <TableCell padding=\"checkbox\" data-title=\"Status\">\r\n                                                        <FormControlLabel\r\n                                                            control={<Radio color=\"primary\" size=\"small\" />}\r\n                                                        />\r\n                                                    </TableCell>\r\n                                                    <TableCell data-title=\"Store Id\"\r\n                                                        onClick={() => {\r\n                                                            if (Array.isArray(userRolePermissions) && userRolePermissions.includes(303)) {\r\n                                                                setOpenViewStore(true);\r\n                                                                setOpenListStore(false);\r\n                                                                setCurrentData(store);\r\n                                                            } else {\r\n                                                                setOverviewAlert(true);\r\n                                                                setOpenListStore(true);\r\n                                                                setOpenViewStore(false);\r\n                                                            }\r\n                                                        }}\r\n                                                        sx={{ color: \"#00BFFF\", cursor: \"pointer\" }}\r\n                                                    >\r\n                                                        {store?.Store_Id}\r\n                                                    </TableCell>\r\n                                                    <TableCell data-title=\"Store Name\">{store?.Store_Name}</TableCell>\r\n                                                    <TableCell data-title=\"Store Incharge\">{store?.Store_Incharge || \"-\"}</TableCell>\r\n                                                    <TableCell data-title=\"Zone Name\">{store?.Store_Area}</TableCell>\r\n                                                    <TableCell data-title=\"Action\">\r\n                                                        <ErpActionButton userRolePermissions={userRolePermissions} editPermissionId={302} deletePermissionId={304} onClickEdit={() => editStoreById(store)} onClickDelete={() => deleteStoreById(store)} align=\"left\" />\r\n                                                    </TableCell>\r\n                                                </TableRow>\r\n                                            );\r\n                                        }) : (\r\n                                            <TableRow>\r\n                                                <TableCell colSpan={10} sx={{ textAlign: \"center\" }}>No Records</TableCell>\r\n                                            </TableRow>\r\n                                        )}\r\n                                    </TableBody>\r\n                                </Table>\r\n                            </JumboScrollbar>\r\n                        </Div>\r\n                    </Div>\r\n\r\n                    {openViewStore && Array.isArray(userRolePermissions) && userRolePermissions.includes(303) ? (\r\n                        <ViewStoreSettings currentData={currentData} countries={countries} states={states} cities={cities} zones={zones} name1={name1} name3={name3} name4={name4} name5={name5} name6={name6} getId5={getId5} openViewStore={openViewStore} setEditOverviewItem={setOpenViewStore} openListStore={openListStore} setListStore={setOpenListStore} fullScreen={fullScreen} />\r\n\r\n                    ) : (\r\n                        <>\r\n                            <ErpAlertViewDialogBox flag={overviewAlert} setFlag={setOverviewAlert} />\r\n                        </>\r\n                    )}\r\n\r\n                </Div>\r\n\r\n                <Div>\r\n                    <Dialog\r\n                        fullWidth\r\n                        open={openEditStore}\r\n                        aria-labelledby=\"alert-dialog-title\"\r\n                        aria-describedby=\"alert-dialog-description\"\r\n                        maxWidth=\"lg\"\r\n                    >\r\n                        <form onSubmit={(handleUpdateStore)}>\r\n                            <DialogContent>\r\n                                <Div sx={{ mt: 2, minHeight: \"300px\" }}>\r\n                                    <Grid container xs={12}>\r\n                                        <Grid item xs={12} md={6}>\r\n                                            <Grid container xs={12}>\r\n                                                <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\r\n                                                    <Typography className=\"col-md-12 col-lg-6 col-xl-4 input-label\" sx={{ mt: 2 }}>\r\n                                                        Store Id <span className=\"required\">*</span>\r\n                                                    </Typography>\r\n                                                    <Div className=\"col-md-12 col-lg-6 col-xl-8\">\r\n                                                        <TextField\r\n                                                            className=\"col-12 input-box\"\r\n                                                            name=\"storeId\"\r\n                                                            {...register(\"storeId\")}\r\n                                                            value={currentData?.Store_Id}\r\n                                                            // onChange={(e) => {\r\n                                                            //     setStoreId(e.target.value);\r\n                                                            // }}\r\n                                                            placeholder={transactionSeriesType === \"Automatic\" ? \"Auto Generated\" : \"Store Id\"}\r\n                                                            variant=\"outlined\"\r\n                                                            autoComplete=\"off\"\r\n                                                            disabled={transactionSeriesType === \"Automatic\" ? true : false}\r\n                                                            inputProps={{\r\n                                                                maxLength: 11,\r\n                                                                title: 'Please enter a maximum of 11 digits',\r\n                                                            }}\r\n                                                        />\r\n                                                    </Div>\r\n                                                </Grid>\r\n\r\n                                                <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\r\n                                                    <Typography className=\"col-md-12 col-lg-6 col-xl-4 input-label\" sx={{ mt: 2 }}>\r\n                                                        Store Name <span className=\"required\">*</span>\r\n                                                    </Typography>\r\n                                                    <Div className=\"col-md-12 col-lg-6 col-xl-8\">\r\n                                                        <TextField\r\n                                                            className={`col-12 input-box  ${errors.storeName ? \"is-invalid\" : \"\"\r\n                                                                }`}\r\n                                                            name=\"storeName\"\r\n                                                            {...register(\"storeName\")}\r\n                                                            value={storeName}\r\n                                                            onChange={(e) => {\r\n                                                                setStoreName(e.target.value);\r\n                                                                console.log(e.target.value);\r\n                                                            }}\r\n                                                            placeholder=\"Store Name\"\r\n                                                            autoComplete=\"off\"\r\n                                                        />\r\n                                                        <Div style={{ color: \"red\" }}>\r\n                                                            {!storeName && errors.storeName?.message}\r\n                                                        </Div>\r\n                                                    </Div>\r\n                                                </Grid>\r\n\r\n                                                <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\r\n                                                    <Typography className=\"col-md-12 col-lg-6 col-xl-4 input-label\" sx={{ mt: 2 }}>\r\n                                                        Building Name <span className=\"required\">*</span>\r\n                                                    </Typography>\r\n                                                    <Div className=\"col-md-12 col-lg-6 col-xl-8\">\r\n                                                        <TextField\r\n                                                            className={`col-12 input-box  ${errors.buildingName ? \"is-invalid\" : \"\"\r\n                                                                }`}\r\n                                                            name=\"buildingName\"\r\n                                                            {...register(\"buildingName\")}\r\n                                                            value={buildingName}\r\n                                                            onChange={(e) => setBuildingName(e.target.value)}\r\n                                                            placeholder=\"Building Name\"\r\n                                                            autoComplete=\"off\"\r\n                                                        />\r\n                                                        <Div style={{ color: \"red\" }}>\r\n                                                            {!buildingName && errors.buildingName?.message}\r\n                                                        </Div>\r\n                                                    </Div>\r\n                                                </Grid>\r\n\r\n                                                <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\r\n                                                    <Typography className=\"col-md-12 col-lg-6 col-xl-4 input-label\" sx={{ mt: 2 }}>\r\n                                                        Country <span className=\"required\">*</span>\r\n                                                    </Typography>\r\n                                                    <Div className=\"col-md-12 col-lg-6 col-xl-8\">\r\n                                                        <FormControl className=\"col-12\">\r\n                                                            <Autocomplete\r\n                                                                className={`search-select col-12 ${errors.countryName ? \"is-invalid\" : \"\"\r\n                                                                    }`}\r\n                                                                name=\"countryName\"\r\n                                                                options={countries}\r\n                                                                getOptionLabel={(option) => option ? option?.Country_Name : \"\"}\r\n                                                                value={countries?.find(\r\n                                                                    (option) => option?.Country_Name === selectedCountry\r\n                                                                ) || null}\r\n                                                                onChange={(event, newValue) => {\r\n                                                                    setSelectedCountry(newValue?.Country_Name);\r\n                                                                    setSelectedState(null); // Reset selectedState\r\n                                                                    setSelectedCity(null); // Reset selectedCity\r\n                                                                    console.log(\"Selected Country:\", newValue);\r\n                                                                }}\r\n\r\n                                                                renderInput={(params) => (\r\n                                                                    <TextField\r\n                                                                        {...params}\r\n                                                                        {...register(\"countryName\")}\r\n                                                                        placeholder=\"Select Country\"\r\n                                                                    />\r\n                                                                )}\r\n                                                                disabled\r\n                                                            />\r\n                                                            <Div style={{ color: \"red\" }}>\r\n                                                                {!selectedCountry && errors.countryName?.message}\r\n                                                            </Div>\r\n                                                        </FormControl>\r\n                                                    </Div>\r\n                                                </Grid>\r\n\r\n                                                <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\r\n                                                    <Typography className=\"col-md-12 col-lg-6 col-xl-4 input-label\" sx={{ mt: 2 }}>\r\n                                                        State <span className=\"required\">*</span>\r\n                                                    </Typography>\r\n                                                    <Div className=\"col-md-12 col-lg-6 col-xl-8\">\r\n                                                        <FormControl className=\"col-12\">\r\n                                                            <Autocomplete\r\n                                                                className={`search-select col-12 ${errors.stateName ? \"is-invalid\" : \"\"\r\n                                                                    }`}\r\n                                                                name=\"stateName\"\r\n                                                                options={states}\r\n                                                                getOptionLabel={(option) => option ? option?.State_Name : \"\"}\r\n                                                                value={states?.find(\r\n                                                                    (option) => option?.State_Name === selectedState\r\n                                                                ) || null}\r\n                                                                onChange={(event, newValue) => {\r\n                                                                    setSelectedState(newValue?.State_Name);\r\n                                                                    setSelectedCity(null); // Reset selectedCity\r\n                                                                    console.log(\"Selected State:\", newValue);\r\n                                                                }}\r\n\r\n                                                                renderInput={(params) => (\r\n                                                                    <TextField\r\n                                                                        {...params}\r\n                                                                        {...register(\"stateName\")}\r\n                                                                        placeholder=\"Select State\"\r\n                                                                    />\r\n                                                                )}\r\n                                                                disabled\r\n                                                            />\r\n                                                            <Div style={{ color: \"red\" }}>\r\n                                                                {!selectedState && errors.stateName?.message}\r\n                                                            </Div>\r\n                                                        </FormControl>\r\n                                                    </Div>\r\n                                                </Grid>\r\n\r\n                                                <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\r\n                                                    <Typography className=\"col-md-12 col-lg-6 col-xl-4 input-label\" sx={{ mt: 2 }}>\r\n                                                        City <span className=\"required\">*</span>\r\n                                                    </Typography>\r\n                                                    <Div className=\"col-md-12 col-lg-6 col-xl-8\">\r\n                                                        <FormControl className=\"col-12\">\r\n                                                            <Autocomplete\r\n                                                                className={`search-select col-12 ${errors.cityName ? \"is-invalid\" : \"\"\r\n                                                                    }`}\r\n                                                                name=\"cityName\"\r\n                                                                options={cities}\r\n                                                                getOptionLabel={(option) => option ? option?.City_Name : \"\"}\r\n                                                                value={cities?.find(\r\n                                                                    (option) => option?.City_Name === selectedCity\r\n                                                                ) || null}\r\n                                                                onChange={(event, newValue) => {\r\n                                                                    setSelectedCity(newValue?.City_Name);\r\n                                                                    console.log(\"Selected City:\", newValue);\r\n                                                                }}\r\n\r\n                                                                renderInput={(params) => (\r\n                                                                    <TextField\r\n                                                                        {...params}\r\n                                                                        {...register(\"cityName\")}\r\n                                                                        placeholder=\"Select City\"\r\n                                                                    />\r\n                                                                )}\r\n                                                                disabled\r\n                                                            />\r\n                                                            <Div style={{ color: \"red\" }}>\r\n                                                                {!selectedCity && errors.cityName?.message}\r\n                                                            </Div>\r\n                                                        </FormControl>\r\n                                                    </Div>\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </Grid>\r\n\r\n                                        <Grid item xs={12} md={6}>\r\n                                            <Grid container xs={12}>\r\n\r\n                                                <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\r\n                                                    <Typography className=\"col-sm-12 col-md-12 col-lg-6 col-xl-4 input-label\" sx={{ mt: 2 }}>\r\n                                                        Choose a BU <span className=\"required\">*</span>\r\n                                                    </Typography>\r\n                                                    <Div className=\"col-sm-12 col-md-12 col-lg-6 col-xl-8\">\r\n                                                        <FormControl className=\"col-12\">\r\n                                                            <Autocomplete\r\n                                                                className={`search-select col-12 ${errors.partnerName ? \"is-invalid\" : \"\"\r\n                                                                    }`}\r\n                                                                onFocus={getPartnerLists}\r\n                                                                name=\"partnerName\"\r\n                                                                options={businessUnitList?.map(\r\n                                                                    (partnerlist) => partnerlist\r\n                                                                )}\r\n                                                                getOptionLabel={(option) => option?.Partner_Name}\r\n                                                                value={businessUnitList?.find(\r\n                                                                    (option) => option?.Partner_Name === partnerName\r\n                                                                ) || null}\r\n                                                                onChange={(e, newValue) => {\r\n                                                                    setPartnerName(newValue?.Partner_Name);\r\n                                                                    setPartnerId(newValue?.id);\r\n                                                                }}\r\n                                                                renderInput={(params) => (\r\n                                                                    <TextField\r\n                                                                        {...params}\r\n                                                                        {...register(\"partnerName\")}\r\n                                                                        placeholder=\"Choose a business unit\"\r\n                                                                        autoComplete=\"off\"\r\n                                                                        variant=\"outlined\"\r\n                                                                    />\r\n                                                                )}\r\n                                                                disabled\r\n                                                            />\r\n                                                        </FormControl>\r\n                                                        <Div style={{ color: \"red\" }}>\r\n                                                            {!partnerName && errors.partnerName?.message}\r\n                                                        </Div>\r\n                                                    </Div>\r\n                                                </Grid>\r\n\r\n                                                <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\r\n                                                    <Typography className=\"col-md-12 col-lg-6 col-xl-4 input-label\" sx={{ mt: 2 }}>\r\n                                                        Location <span className=\"required\">*</span>\r\n                                                    </Typography>\r\n                                                    <Div className=\"col-md-12 col-lg-6 col-xl-8\">\r\n                                                        <FormControl className=\"col-12\">\r\n                                                            <Autocomplete\r\n                                                                className={`search-select col-12 ${errors.Location ? \"is-invalid\" : \"\"}`}\r\n                                                                name=\"location\"\r\n                                                                options={zones}\r\n                                                                getOptionLabel={(option) => option?.Zone_Name}\r\n                                                                value={zones?.find(\r\n                                                                    (option) => option?.Zone_Name === location\r\n                                                                ) || null}\r\n                                                                onChange={(e, newValue) => {\r\n                                                                    setLocation(newValue?.Zone_Name);\r\n                                                                    handleSearchLocation(newValue?.Zone_Name)\r\n                                                                }}\r\n                                                                renderInput={(params) => (\r\n                                                                    <TextField\r\n                                                                        {...params}\r\n                                                                        {...register(\"location\")}\r\n                                                                        placeholder=\"Location\"\r\n                                                                        autoComplete=\"off\"\r\n                                                                        variant=\"outlined\"\r\n                                                                    />\r\n                                                                )}\r\n                                                                disabled\r\n                                                            />\r\n                                                        </FormControl>\r\n                                                        <Div style={{ color: \"red\" }}>\r\n                                                            {!location && errors.location?.message}\r\n                                                        </Div>\r\n                                                    </Div>\r\n                                                </Grid>\r\n\r\n                                                <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\r\n                                                    <Typography className=\"col-md-12 col-lg-6 col-xl-4 input-label\" sx={{ mt: 2 }}>\r\n                                                        Longitude <span className=\"required\">*</span>\r\n                                                    </Typography>\r\n                                                    <Div className=\"col-md-12 col-lg-6 col-xl-8\">\r\n                                                        <TextField\r\n                                                            className=\"col-12 input-box\"\r\n                                                            name=\"longitude\"\r\n                                                            value={longitude}\r\n                                                            placeholder=\"Longitude\"\r\n                                                            autoComplete=\"off\"\r\n                                                            disabled\r\n                                                        />\r\n                                                    </Div>\r\n                                                </Grid>\r\n\r\n                                                <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\r\n                                                    <Typography className=\"col-md-12 col-lg-6 col-xl-4 input-label\" sx={{ mt: 2 }}>\r\n                                                        Latitude <span className=\"required\">*</span>\r\n                                                    </Typography>\r\n                                                    <Div className=\"col-md-12 col-lg-6 col-xl-8\">\r\n                                                        <TextField\r\n                                                            className=\"col-12 input-box\"\r\n                                                            name=\"latitude\"\r\n                                                            value={latitude}\r\n                                                            placeholder=\"Latitude\"\r\n                                                            autoComplete=\"off\"\r\n                                                            disabled\r\n                                                        />\r\n                                                    </Div>\r\n                                                </Grid>\r\n\r\n                                                <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\r\n                                                    <Typography className=\"col-md-12 col-lg-6 col-xl-4 input-label\" sx={{ mt: 2 }}>\r\n                                                        Store Incharge <span className=\"required\">*</span>\r\n                                                    </Typography>\r\n                                                    <Div className=\"col-md-12 col-lg-6 col-xl-8\">\r\n                                                        <FormControl className=\"col-12\">\r\n                                                            <Autocomplete\r\n                                                                className={`search-select col-12 ${errors.storeIncharge ? \"is-invalid\" : \"\"\r\n                                                                    }`}\r\n                                                                name=\"storeIncharge\"\r\n                                                                options={employeeLists}\r\n                                                                getOptionLabel={(option) => `${option?.Employee_FirstName} ${option?.Employee_LasttName}`}\r\n                                                                value={employeeLists?.find(\r\n                                                                    (option) => `${option?.Employee_FirstName} ${option?.Employee_LasttName}` === storeIncharge\r\n                                                                ) || null}\r\n                                                                onChange={(e, newValue) => {\r\n                                                                    setStoreIncharge(`${newValue?.Employee_FirstName} ${newValue?.Employee_LasttName}`);\r\n                                                                }}\r\n                                                                renderInput={(params) => (\r\n                                                                    <TextField\r\n                                                                        {...params}\r\n                                                                        {...register(\"storeIncharge\")}\r\n                                                                        placeholder=\"Store Incharge\"\r\n                                                                        autoComplete=\"off\"\r\n                                                                        variant=\"outlined\"\r\n                                                                    />\r\n                                                                )}\r\n                                                            />\r\n                                                        </FormControl>\r\n                                                        <Div style={{ color: \"red\" }}>\r\n                                                            {!storeIncharge && errors.storeIncharge?.message}\r\n                                                        </Div>\r\n                                                    </Div>\r\n                                                </Grid>\r\n\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </Div>\r\n                            </DialogContent>\r\n\r\n                            {/* code for save and cancel button */}\r\n                            <DialogActions>\r\n                                <Div className=\"buttons\" sx={{\r\n                                    mb: 3, display: \"flex\",\r\n                                    justifyContent: \"end\"\r\n                                }}>\r\n                                    <ButtonGroup\r\n                                        aria-label=\"split button\"\r\n                                        type=\"submit\"\r\n                                        color=\"primary\"\r\n                                        sx={{\r\n                                            mt: { xs: 0.5, lg: 0 },\r\n                                            mr: { xs: 0, md: 1 },\r\n                                        }}\r\n                                    >\r\n                                        <Button type=\"submit\" className=\"plus-button\" sx={{ width: { md: \"99px !important\" } }}>\r\n                                            Update\r\n                                        </Button>\r\n                                        <Button variant=\"contained\" className=\"icon-button\">\r\n                                            <FaSave size={18} />\r\n                                        </Button>\r\n                                    </ButtonGroup>\r\n\r\n                                    <ButtonGroup\r\n                                        aria-label=\"split button\"\r\n                                        onClick={handleClose}\r\n                                        sx={{\r\n                                            mt: { xs: 0.5, lg: 0 },\r\n                                            mr: { xs: 0, md: 1 }\r\n                                        }}\r\n                                    >\r\n                                        <Button className=\"plus-button\" sx={{ width: { md: \"99px !important\" } }}>Cancel</Button>\r\n                                        <Button variant=\"contained\" className=\"icon-button\">\r\n                                            <TiCancel size={20} />\r\n                                        </Button>\r\n                                    </ButtonGroup>\r\n                                </Div>\r\n                            </DialogActions>\r\n                        </form>\r\n                    </Dialog>\r\n                </Div>\r\n\r\n                <Div>\r\n                    {openCreateStore &&\r\n                        <CreateStore countries={countries} states={states} cities={cities} zones={zones} name1={name1} name3={name3} name4={name4} name5={name5} name6={name6} getId5={getId5} openCreateStore={openCreateStore} setOpenCreateStore={setOpenCreateStore} getStores={getStores} fullScreen={fullScreen} />\r\n                    }\r\n\r\n\r\n                    {openDeleteStore &&\r\n                        <ErpDeleteDialogBox flag={openDeleteStore} setFlag={setOpenDeleteStore} handleClick={handleDeleteStore} content={\"Are you sure you want to delete the store\"} id={currentData?.Store_Name} />\r\n                    }\r\n                </Div>\r\n            </Div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default StoreList","import JumboContentLayoutMain from \"@jumbo/components/JumboContentLayout/JumboContentLayoutMain\";\nimport {\n  Autocomplete,\n  Typography,\n  Tab,\n  Box,\n  Button,\n  Dialog,\n  DialogContent,\n  FormControl,\n  FormControlLabel,\n  Grid,\n  Radio,\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableRow,\n  TextField,\n  ButtonGroup,\n  DialogActions,\n  Tooltip,\n  IconButton,\n} from \"@mui/material\";\nimport React, {\n  createContext,\n  useCallback,\n  useEffect,\n} from \"react\";\nimport Setting from \"../Setting\";\nimport Div from \"@jumbo/shared/Div\";\nimport { TabContext, TabList, TabPanel } from \"@mui/lab\";\nimport { useState } from \"react\";\nimport axios from \"axios\";\nimport ZoneLists from \"./ZoneLists\";\nimport { toast } from \"react-toastify\";\nimport CityLists from \"./CityLists\";\nimport { BASE_URL } from \"app/services/auth-services\";\nimport StateLists from \"./StateLists\";\nimport { FaSave } from \"react-icons/fa\";\nimport { TiCancel } from \"react-icons/ti\";\nimport ScrollToTop from \"app/pages/ScrollToTop\";\nimport PartnerList from \"app/pages/settings/Organization/Partner/PartnerList\";\nimport StoreList from \"./Store/StoreList\";\nimport JumboScrollbar from \"@jumbo/components/JumboScrollbar\";\nimport { handleError } from \"app/pages/auth-pages/login/AuthGuard\";\nimport useResponsive from \"app/pages/useResponsive\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { fetchUserRolePermissions, selectedUserRolePermissions } from \"app/redux/actions/fetchUserRolePermissions\";\nimport { ErpActionButton, ErpCreateButton } from \"app/shared/ReuseComponents/ButtonComponent\";\nimport { MdDelete } from \"react-icons/md\";\n\nexport const DataContext = createContext();\n\nexport default function OrganizationStructure({ scrollHeight }) {\n  const token = localStorage.getItem(\"accesstoken\");\n\n  const header = {\n    headers: {\n      Authorization: `Bearer ${token}`,\n      \"Content-Type\": \"application/json\",\n      Accept: \"application/json\",\n    },\n  };\n\n  const dispatch = useDispatch();\n  const { userRolePermissions, formPermissions, modulePermissions } = useSelector(selectedUserRolePermissions);\n\n  const [errors, setErrors] = useState({});\n\n\n  const [id, setId] = useState(\"\");\n  const [id1, setId1] = useState(\"\");\n  const [id2, setId2] = useState(\"\");\n  const [id3, setId3] = useState(\"\");\n  const [id4, setId4] = useState(\"\");\n\n  const [name, setName] = useState(\"\");\n  const [name1, setName1] = useState(\"\");\n  const [name2, setName2] = useState(\"\");\n  const [name3, setName3] = useState(\"\");\n  const [name4, setName4] = useState(\"\");\n  const [name5, setName5] = useState(\"\");\n  const [name6, setName6] = useState(\"\");\n\n  const [inputNumber, setInputNumber] = useState(\"1\");\n  const [entities, setEntities] = useState([]);\n  const [countries, setCountries] = useState([]);\n  const [regions, setRegions] = useState([]);\n  const [states, setStates] = useState([]);\n  const [cities, setCities] = useState([]);\n  const [zones, setZones] = useState([]);\n\n\n  const [entityId, setEntityId] = useState(\"\");\n  const [entityName, setEntityName] = useState(name);\n  const [entityDescription, setEntityDescription] = useState(\"\");\n  const [countryName, setCountryName] = useState(\"\");\n  const [countryId, setCountryId] = useState(\"\");\n  const [countryDescription, setCountryDescription] = useState(\"\");\n  const [regionId, setRegionId] = useState(\"\");\n  const [regionName, setRegionName] = useState(\"\");\n  const [regionDescription, setRegionDescription] = useState(\"\");\n\n  const [currentData, setCurrentData] = useState({});\n\n  let isMobile = useResponsive(\"down\", \"lg\");\n\n\n  const handleChange = (index, newValue) => {\n    console.log(\"newValuenewValue\", newValue, inputNumber)\n    // setInputNumber(newValue, index);\n    switch (inputNumber) {\n      case \"1\":\n        if (inputNumber < newValue) {\n          if (checkId1) {\n            setInputNumber(newValue, index);\n          } else {\n            toast.error(\"Choose Your Entity\");\n          }\n        } else {\n          setInputNumber(newValue, index);\n        }\n\n        break;\n      case \"2\":\n        if (inputNumber < newValue) {\n          if (checkId1 && checkId2) {\n            setInputNumber(newValue, index);\n          } else {\n            toast.error(\"Choose Your Country\");\n          }\n        } else {\n          setInputNumber(newValue, index);\n        }\n\n        break;\n      case \"3\":\n        if (inputNumber < newValue) {\n          if (checkId1 && checkId2 && checkId3) {\n            setInputNumber(newValue, index);\n          } else {\n            toast.error(\"Choose Your Region\");\n          }\n        } else {\n          setInputNumber(newValue, index);\n        }\n\n        break;\n      case \"4\":\n        if (inputNumber < newValue) {\n          if (checkId1 && checkId2 && checkId3 && checkId4) {\n            setInputNumber(newValue, index);\n          } else {\n            toast.error(\"Choose Your State\");\n          }\n        } else {\n          setInputNumber(newValue, index);\n        }\n\n        break;\n      case \"5\":\n        if (inputNumber < newValue) {\n          if (checkId1 && checkId2 && checkId3 && checkId4 && checkId5) {\n            setInputNumber(newValue, index);\n          } else {\n            toast.error(\"Choose Your City\");\n          }\n        } else {\n          setInputNumber(newValue, index);\n        }\n\n        break;\n\n      case \"6\":\n        if (inputNumber < newValue) {\n          if (checkId1 && checkId2 && checkId3 && checkId4 && checkId5 && checkId6) {\n            setInputNumber(newValue, index);\n          } else {\n            toast.error(\"Choose Your Business Unit\");\n          }\n        } else {\n          setInputNumber(newValue, index);\n        }\n\n        break;\n\n      case \"7\":\n        if (inputNumber < newValue) {\n          if (checkId1 && checkId2 && checkId3 && checkId4 && checkId5 && checkId6 && checkId7) {\n            setInputNumber(newValue, index);\n          } else {\n            toast.error(\"Choose Your Zone\");\n          }\n        } else {\n          setInputNumber(newValue, index);\n        }\n\n        break;\n      default:\n        setInputNumber(newValue, index);\n    }\n  };\n\n  const [openEntity, setOpenEntity] = useState(false);\n  const [openCountry, setOpenCountry] = useState(false);\n  const [openRegion, setOpenRegion] = useState(false);\n\n  const [checkId1, setCheckId1] = useState(false);\n  const [checkId2, setCheckId2] = useState(false);\n  const [checkId3, setCheckId3] = useState(false);\n  const [checkId4, setCheckId4] = useState(false);\n  const [checkId5, setCheckId5] = useState(false);\n  const [checkId6, setCheckId6] = useState(false);\n  const [checkId7, setCheckId7] = useState(false);\n\n  const [countryLists, setCountryLists] = useState([]);\n  const [stateLists, setStateLists] = useState([]);\n\n  const [getId, setGetId] = useState(\"\");\n  const [getId1, setGetId1] = useState(\"\");\n  const [getId2, setGetId2] = useState(\"\");\n  const [getId3, setGetId3] = useState(\"\");\n  const [getId4, setGetId4] = useState(\"\");\n  const [getId5, setGetId5] = useState(\"\");\n  const [getId6, setGetId6] = useState(\"\");\n\n\n  const handleClose = () => {\n    setOpenEntity(false);\n    setOpenCountry(false);\n    setOpenRegion(false);\n    setErrors({});\n\n    setEntityName(\"\");\n    setEntityDescription(\"\");\n\n    setCountryName(\"\");\n    setCountryDescription(\"\");\n\n    setRegionName(\"\");\n    setRegionDescription(\"\");\n  };\n\n  const handleAddLegalEntity = () => {\n    setOpenEntity(true);\n    setCurrentData({});\n  };\n\n  const handleAddCountry = () => {\n    setOpenCountry(true);\n    setCurrentData({});\n  };\n\n  const handleAddRegion = () => {\n    setOpenRegion(true);\n    setCurrentData({});\n  };\n\n  // const handleAddState = () => {\n  //   setOpen(true);\n  // };\n\n  // const handleAddCity = () => {\n  //   setOpen(true);\n  // };\n\n  const getEntityDatas = useCallback(async () => {\n    await axios\n      .get(`${BASE_URL}/Erpapp/EntityLists/`, header)\n      .then((res) => {\n        console.log(res?.data?.results);\n        setEntities(res?.data?.results);\n      })\n      .catch((error) => {\n        console.log(\"ds\", error);\n      });\n  }, [entities]);\n\n  const getEntity = async () => {\n    await axios\n      .get(`${BASE_URL}/Erpapp/EntityDetailsCRUD/?id=${getId}`, header)\n      .then((res) => {\n        console.log(\"entityid\", res?.data);\n        setId(res?.data?.Entity_Id);\n        setName(res?.data?.Entity_Name);\n        // setCountries(res.data);\n      })\n      .catch((error) => {\n        console.log(\"ds\", error);\n      });\n  };\n\n  const getCountryDatas = async () => {\n    await axios\n      .post(\n        `${BASE_URL}/Erpapp/CountryLists/`,\n        {\n          Entity_Id: getId,\n        },\n        header\n      )\n      .then((res) => {\n        console.log(res?.data);\n        setCountries(res?.data);\n      })\n      .catch((error) => {\n        console.log(\"ds\", error);\n      });\n  };\n\n  const getCountry = async () => {\n    await axios\n      .get(`${BASE_URL}/Erpapp/CountryDetailsCRUD/?id=${getId1}`, header)\n      .then((res) => {\n        console.log(\"countryid\", res?.data);\n        setId1(res?.data?.Country_Id);\n        setName1(res?.data?.Country_Name);\n        // setName(res.data.Entity_Name);\n      })\n      .catch((error) => {\n        console.log(\"ds\", error);\n      });\n  };\n\n  const getRegionDatas = async () => {\n    await axios\n      .post(\n        `${BASE_URL}/Erpapp/RegionLists/`,\n        {\n          Country_Id: getId1,\n        },\n        header\n      )\n      .then((res) => {\n        console.log(res?.data);\n        setRegions(res?.data);\n      })\n      .catch((error) => {\n        console.log(\"ds\", error);\n      });\n  };\n\n  const getRegion = async () => {\n    await axios\n      .get(`${BASE_URL}/Erpapp/RegionDetailsCRUD/?id=${getId2}`, header)\n      .then((res) => {\n        console.log(\"regionid\", res?.data);\n        setId2(res?.data?.Region_Id);\n        setName2(res?.data?.Region_Name);\n        // setName(res.data.Entity_Name);\n      })\n      .catch((error) => {\n        console.log(\"ds\", error);\n      });\n  };\n\n  const getStateDatas = async () => {\n    await axios\n      .post(\n        `${BASE_URL}/Erpapp/StateLists/`,\n        {\n          Entity_Id: getId,\n          Country_Id: getId1,\n          Region_Id: getId2,\n        },\n        header\n      )\n      .then((res) => {\n        console.log(\"res?.data\", res?.data);\n        const filterLists = res?.data?.filter((opt) => opt?.Entity_Id === getId && opt?.Country_Id === getId1 && opt?.Region_Id === getId2)\n        setStates(filterLists);\n      })\n      .catch((error) => {\n        console.log(\"ds\", error);\n      });\n  };\n\n  const getStates = async () => {\n    await axios\n      .get(`${BASE_URL}/Erpapp/StateDetailsCRUD/?id=${getId3}`, header)\n      .then((res) => {\n        console.log(\"stateid\", res?.data);\n        setId3(res?.data?.State_Id);\n        setName3(res?.data?.State_Name);\n      })\n      .catch((error) => {\n        console.log(\"ds\", error);\n      });\n  };\n\n  const getCityDatas = async () => {\n    await axios\n      .post(\n        `${BASE_URL}/Erpapp/CityLists/`,\n        {\n          State_Id: getId3,\n        },\n        header\n      )\n      .then((res) => {\n        console.log(res?.data);\n        setCities(res?.data);\n      })\n      .catch((error) => {\n        console.log(\"ds\", error);\n      });\n  };\n\n  const getCity = async () => {\n    await axios\n      .get(`${BASE_URL}/Erpapp/CityDetailsCRUD/?id=${getId4}`, header)\n      .then((res) => {\n        console.log(\"cityid\", res?.data);\n        setId4(res?.data?.City_Id);\n        setName4(res?.data?.City_Name);\n      })\n      .catch((error) => {\n        console.log(\"ds\", error);\n      });\n  };\n\n  const getZoneDatas = async () => {\n    await axios\n      .post(\n        `${BASE_URL}/Erpapp/ZoneLists/`,\n        {\n          City_Id: getId4,\n        },\n        header\n      )\n      .then((res) => {\n        console.log(res?.data);\n        setZones(res?.data);\n        // setCityName(res.data.City_Id)\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  };\n\n  useEffect(() => {\n    getEntity();\n    getCountry();\n    getRegion();\n    getStates();\n    getCity();\n    getEntityDatas();\n    getCountryDatas();\n    getRegionDatas();\n    getStateDatas();\n    getCityDatas();\n    getZoneDatas();\n    getCountryLists();\n    getStateLists();\n  }, []);\n\n\n\n  useEffect(() => {\n    const nextEntity = entities?.find((opt, index) => index + 1 === entities?.length);\n    if (nextEntity) {\n      const nextEntityId = nextEntity?.Entity_Id;\n      const numericPart = parseInt(nextEntityId, 10) + 1;\n      const paddedValue = numericPart.toString().padStart(nextEntityId?.length, '0');\n      setEntityId(paddedValue);\n      console.log(\"numericPart\", paddedValue)\n    }\n  }, [entityId]);\n\n\n  // Regular Expression\n  const validateEntity = () => {\n    let error = {};\n\n    if (entityName === \"\" || entityName === null || entityName === undefined) {\n      error.entityName = \"Entity Name is required\"\n    }\n    if (entityDescription === \"\" || entityDescription === null || entityDescription === undefined) {\n      error.entityDescription = \"Entity Description is required\"\n    }\n\n    return error;\n  };\n\n  const handleCreateEntity = async (e) => {\n    e.preventDefault();\n\n    let validForm = validateEntity();\n    setErrors(validForm);\n\n    if (Object.keys(validForm).length === 0) {\n      if (currentData?.id !== undefined) {\n        var entitypayload = {\n          ...currentData,\n          Entity_Name: entityName,\n          Entity_Description: entityDescription,\n          Entity_Type_Code: parseInt(entityId) || parseInt(entities?.length) + 1,\n          Company_Id: parseInt(localStorage.getItem(\"OrganizationId\")),\n          Created_By: parseInt(localStorage.getItem(\"UserId\")),\n          Updated_By: parseInt(localStorage.getItem(\"UserId\")),\n        };\n        axios\n          .put(`${BASE_URL}/Erpapp/EntityDetailsCRUD/`, entitypayload, header)\n          .then((res) => {\n            console.log(res?.data);\n            if (res?.data?.id) {\n              toast.success(\"Entity updated successfully\");\n              setOpenEntity(false);\n              getEntityDatas();\n            } else {\n              toast.error(\"Entity Matching Query Doesn't Exist.\")\n            }\n          })\n          .catch((error) => {\n            console.log(error);\n            handleError(error);\n          });\n      } else {\n        var entitypayload = {\n          Entity_Name: entityName,\n          Entity_Description: entityDescription,\n          Entity_Type_Code: parseInt(entityId) || parseInt(entities?.length) + 1,\n          Company_Id: parseInt(localStorage.getItem(\"OrganizationId\")),\n          Created_By: parseInt(localStorage.getItem(\"UserId\")),\n          Updated_By: parseInt(localStorage.getItem(\"UserId\")),\n        };\n        axios\n          .post(`${BASE_URL}/Erpapp/EntityDetailsCRUD/`, entitypayload, header)\n          .then((res) => {\n            console.log(res?.data);\n            if (res?.data?.id) {\n              toast.success(\"Entity created successfully\");\n              setOpenEntity(false);\n              getEntityDatas();\n              setEntityName(\"\");\n              setEntityDescription(\"\");\n            } else {\n              toast.error(\"Entity Matching Query Doesn't Exist.\")\n            }\n          })\n          .catch((error) => {\n            console.log(error);\n            handleError(error);\n            // toast.error(\"Entity name is already exists\");\n          });\n      }\n    }\n  };\n\n  // edit entity\n  const editEntityById = async (data) => {\n    console.log(\"datadata\", data);\n    setOpenEntity(true);\n    setCurrentData(data);\n\n    await axios.get(`${BASE_URL}/Erpapp/EntityDetailsCRUD/?id=${data?.id}`, header)\n      .then((res) => {\n        console.log(res.data);\n        if (res.status === 200) {\n          setEntityName(res?.data?.Entity_Name);\n          setEntityDescription(res?.data?.Entity_Description);\n        }\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  }\n\n  // delete a entity \n  const deleteEntityById = async (id) => {\n    await axios.delete(`${BASE_URL}/Erpapp/EntityDetailsCRUD/?id=${id}`, header)\n      .then((res) => {\n        console.log(res.data);\n        if (res?.status === 200 && res?.data?.id) {\n          toast.success(\"Entity deleted successfully\");\n          getEntityDatas();\n        } else {\n          toast.error(res.message)\n        }\n      })\n      .catch((error) => {\n        console.log(error);\n        toast.error(error.message);\n      });\n  }\n\n\n  useEffect(() => {\n    const nextCountry = countries?.filter((opt, index) => index + 1 === countries?.length);\n    if (nextCountry) {\n      const nextCountryId = nextCountry[0]?.Country_Id;\n      const numericPart = parseInt(nextCountryId, 10) + 1;\n      const paddedValue = numericPart.toString().padStart(nextCountryId?.length, '0');\n      setCountryId(paddedValue);\n    }\n  }, [countryName]);\n\n  // Regular Expression\n  const validateCountry = () => {\n    let error = {};\n\n    if (countryName === \"\" || countryName === null || countryName === undefined) {\n      error.countryName = \"Country Name is required\"\n    }\n    if (countryDescription === \"\" || countryDescription === null || countryDescription === undefined) {\n      error.countryDescription = \"Country Description is required\"\n    }\n\n    return error;\n  };\n\n  const handleCreateCountry = async (e) => {\n    e.preventDefault();\n\n    let validForm = validateCountry();\n    setErrors(validForm);\n\n    if (Object.keys(validForm).length === 0) {\n      if (currentData?.id !== undefined) {\n        var countrypayload = {\n          ...currentData,\n          Entity_Id: getId,\n          Country_Name: countryName,\n          Country_Description: countryDescription,\n          Country_Type_Code: parseInt(`${id}${countryId}`),\n          Company_Id: parseInt(localStorage.getItem(\"OrganizationId\")),\n          Created_By: parseInt(localStorage.getItem(\"UserId\")),\n          Updated_By: parseInt(localStorage.getItem(\"UserId\")),\n        };\n        axios\n          .put(`${BASE_URL}/Erpapp/CountryDetailsCRUD/`, countrypayload, header)\n          .then((res) => {\n            console.log(res?.data);\n            if (res?.data?.id) {\n              toast.success(\"Country updated successfully\");\n              setOpenCountry(false);\n              getCountryDatas();\n            }\n          })\n          .catch((error) => {\n            console.log(error);\n            handleError(error);\n          });\n      } else {\n        var countrypayload = {\n          Entity_Id: getId,\n          Country_Name: countryName,\n          Country_Description: countryDescription,\n          Country_Type_Code: parseInt(`${id}${countryId}`),\n          Company_Id: parseInt(localStorage.getItem(\"OrganizationId\")),\n          Created_By: parseInt(localStorage.getItem(\"UserId\")),\n          Updated_By: parseInt(localStorage.getItem(\"UserId\")),\n        };\n        axios\n          .post(`${BASE_URL}/Erpapp/CountryDetailsCRUD/`, countrypayload, header)\n          .then((res) => {\n            console.log(res?.data);\n            if (res?.status === 201 && res?.data?.id) {\n              toast.success(\"Country created successfully\");\n              setOpenCountry(false);\n              getCountryDatas();\n              setCountryName(\"\");\n              setCountryDescription(\"\");\n            }\n          })\n          .catch((error) => {\n            console.log(error);\n            handleError(error);\n            // toast.error(\"Country name is already exists\");\n          });\n      }\n    }\n  };\n\n  // edit country\n  const editCountryById = async (data) => {\n    setOpenCountry(true);\n    setCurrentData(data);\n\n    await axios.get(`${BASE_URL}/Erpapp/CountryDetailsCRUD/?id=${data?.id}`, header)\n      .then((res) => {\n        console.log(res.data);\n        if (res.status === 200) {\n          setCountryName(res?.data?.Country_Name);\n          setCountryDescription(res?.data?.Country_Description);\n        }\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  }\n\n  // delete a country \n  const deleteCountryById = async (id) => {\n    await axios.delete(`${BASE_URL}/Erpapp/CountryDetailsCRUD/?id=${id}`, header)\n      .then((res) => {\n        console.log(res?.data);\n        if (res?.status === 200 && res?.data?.id) {\n          toast.success(\"Country deleted successfully\");\n          getCountryDatas();\n        } else {\n          toast.error(res.message)\n        }\n      })\n      .catch((error) => {\n        console.log(error);\n        toast.error(error.message);\n      });\n  }\n\n\n  useEffect(() => {\n    const nextRegion = regions?.filter((opt, index) => index + 1 === regions?.length);\n    if (nextRegion) {\n      const nextRegionId = nextRegion[0]?.Region_Id;\n      const numericPart = parseInt(nextRegionId, 10) + 1;\n      const paddedValue = numericPart.toString().padStart(nextRegionId?.length, '0');\n      setRegionId(paddedValue);\n    }\n  }, [regionName]);\n\n\n  // Regular Expression\n  const validateRegion = () => {\n    let error = {};\n\n    if (regionName === \"\" || regionName === null || regionName === undefined) {\n      error.regionName = \"Region Name is required\"\n    }\n    if (regionDescription === \"\" || regionDescription === null || regionDescription === undefined) {\n      error.regionDescription = \"Region Description is required\"\n    }\n\n    return error;\n  };\n\n  const handleCreateRegion = async (e) => {\n    e.preventDefault();\n\n    let validForm = validateRegion();\n    setErrors(validForm);\n\n    if (Object.keys(validForm).length === 0) {\n      if (currentData?.id !== undefined) {\n        var regionpayload = {\n          ...currentData,\n          Entity_Id: getId,\n          Country_Id: getId1,\n          Region_Name: regionName,\n          Region_Description: regionDescription,\n          Region_Type_Code: parseInt(`${id}${id1}${regionId}`),\n          Company_Id: parseInt(localStorage.getItem(\"OrganizationId\")),\n          Created_By: parseInt(localStorage.getItem(\"UserId\")),\n          Updated_By: parseInt(localStorage.getItem(\"UserId\")),\n        };\n        await axios\n          .put(`${BASE_URL}/Erpapp/RegionDetailsCRUD/`, regionpayload, header)\n          .then((res) => {\n            console.log(res?.data);\n            if (res?.data?.id) {\n              toast.success(\"Region updated successfully\");\n              setOpenRegion(false);\n              getRegionDatas();\n            }\n          })\n          .catch((error) => {\n            console.log(error);\n            handleError(error);\n          });\n      } else {\n        const getRegionName = regions?.some((opt) => opt?.Region_Name === regionName)\n        if (getRegionName) {\n          toast.error(\"Region Name is already exists\")\n        } else {\n          var regionpayload = {\n            Entity_Id: getId,\n            Country_Id: getId1,\n            Region_Name: regionName,\n            Region_Description: regionDescription,\n            Region_Type_Code: parseInt(`${id}${id1}${regionId}`),\n            Company_Id: parseInt(localStorage.getItem(\"OrganizationId\")),\n            Created_By: parseInt(localStorage.getItem(\"UserId\")),\n            Updated_By: parseInt(localStorage.getItem(\"UserId\")),\n          };\n          await axios\n            .post(`${BASE_URL}/Erpapp/RegionDetailsCRUD/`, regionpayload, header)\n            .then((res) => {\n              console.log(res?.data);\n              if (res?.status === 201 && res?.data?.id) {\n                toast.success(\"Region created successfully\");\n                setOpenRegion(false);\n                getRegionDatas();\n                setRegionName(\"\");\n                setRegionDescription(\"\");\n              }\n            })\n            .catch((error) => {\n              console.log(error);\n              handleError(error);\n            });\n        }\n      }\n    }\n  };\n\n  // edit region\n  const editRegionById = async (data) => {\n    setOpenRegion(true);\n    setCurrentData(data);\n\n    await axios.get(`${BASE_URL}/Erpapp/RegionDetailsCRUD/?id=${data?.id}`, header)\n      .then((res) => {\n        console.log(res.data);\n        if (res.status === 200) {\n          setRegionName(res?.data?.Region_Name);\n          setRegionDescription(res?.data?.Region_Description);\n        }\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  }\n\n  // delete a region \n  const deleteRegionById = async (id) => {\n    await axios.delete(`${BASE_URL}/Erpapp/RegionDetailsCRUD/?id=${id}`, header)\n      .then((res) => {\n        console.log(res?.data);\n        if (res?.status === 200 && res?.data?.id) {\n          toast.success(\"Region deleted successfully\");\n          getRegionDatas();\n        } else {\n          toast.error(res.message)\n        }\n      })\n      .catch((error) => {\n        console.log(error);\n        toast.error(error.message);\n      });\n  }\n\n\n  const getCountryLists = () => {\n    axios\n      .get(`https://countriesnow.space/api/v0.1/countries`, {\n        headers: {\n          //   Authorization: `Bearer ${token}`,\n          \"Content-Type\": \"application/json\",\n          Accept: \"application/json\",\n        },\n      })\n      .then((res) => {\n        console.log(res?.data?.data);\n        setCountryLists(res?.data?.data);\n      })\n      .catch((error) => {\n        console.log(\"ds\", error);\n      });\n  };\n\n  const getStateLists = () => {\n    axios\n      .post(\n        `https://countriesnow.space/api/v0.1/countries/states`,\n        { country: countryName.country },\n        {\n          headers: {\n            //   Authorization: `Bearer ${token}`,\n            \"Content-Type\": \"application/json\",\n            Accept: \"application/json\",\n          },\n        }\n      )\n      .then((res) => {\n        console.log(res?.data?.data);\n        var state = res?.data?.data;\n        setStateLists(state?.states);\n      })\n      .catch((error) => {\n        console.log(\"ds\", error);\n      });\n  };\n\n\n  useEffect(() => {\n    dispatch(fetchUserRolePermissions(token))\n  }, []);\n\n\n  return (\n    <>\n      <JumboContentLayoutMain>\n        <Setting />\n        <Typography variant=\"h3\" sx={{ fontWeight: 600 }}>\n          Organization Structure\n        </Typography>\n        <Typography variant=\"h4\" sx={{ fontWeight: 500 }}>\n          Users shall use this form to set up the Organization structure for all\n          operational activities.\n        </Typography>\n\n        <Div>\n          <TabContext value={inputNumber}>\n            <Box\n              sx={{\n                borderBottom: 0,\n                borderColor: \"divider\",\n                overflow: \"auto\",\n                mb: -1,\n              }}\n            >\n              <TabList\n                onChange={handleChange}\n                aria-label=\"scrollable auto tabs example\"\n                variant=\"scrollable\"\n                scrollButtons={isMobile ? true : false}\n                allowScrollButtonsMobile\n              >\n                <Tab\n                  label=\"Legal Entity\"\n                  value=\"1\"\n                  sx={{ fontSize: \"16px\", color: \"#000000\" }}\n                />\n                <Tab\n                  label=\"Country\"\n                  value=\"2\"\n                  onClick={() => {\n                    getCountryDatas();\n                    getEntity();\n                  }}\n                  sx={{ fontSize: \"16px\", color: \"#000000\" }}\n                />\n                <Tab\n                  label=\"Region\"\n                  value=\"3\"\n                  onClick={() => {\n                    getRegionDatas();\n                    getCountry();\n                    getEntity();\n                    getRegion();\n                  }}\n                  sx={{ fontSize: \"16px\", color: \"#000000\" }}\n                />\n                <Tab\n                  label=\"State\"\n                  value=\"4\"\n                  onClick={() => {\n                    getStateDatas();\n                    getCountry();\n                    getEntity();\n                    getRegion();\n                  }}\n                  sx={{ fontSize: \"16px\", color: \"#000000\" }}\n                />\n                <Tab\n                  label=\"City\"\n                  value=\"5\"\n                  onClick={() => {\n                    getCountry();\n                    getEntity();\n                    getRegion();\n                    getStates();\n                    getCityDatas();\n                  }}\n                  sx={{ fontSize: \"16px\", color: \"#000000\" }}\n                />\n\n                <Tab\n                  label=\"Business Unit\"\n                  value=\"6\"\n                  onClick={() => {\n                    getCountry();\n                    getEntity();\n                    getRegion();\n                    getStates();\n                    getCityDatas();\n                  }}\n                  sx={{ fontSize: \"16px\", color: \"#000000\" }}\n                />\n\n                <Tab\n                  label=\"Zones\"\n                  value=\"7\"\n                  onClick={() => {\n                    getCity();\n                    getZoneDatas();\n                  }}\n                  sx={{ fontSize: \"16px\", color: \"#000000\" }}\n                />\n\n                <Tab\n                  label=\"Store\"\n                  value=\"8\"\n                  onClick={() => {\n                    getCity();\n                    getZoneDatas();\n                  }}\n                  sx={{ fontSize: \"16px\", color: \"#000000\" }}\n                />\n\n                {/* <Tab\n                  label=\"Hub\"\n                  value=\"8\"\n                  sx={{ fontSize: \"16px\", color: \"#000000\" }}\n                /> */}\n                {/* <Tab\n                  label=\"Location\"\n                  value=\"9\"\n                  sx={{ fontSize: \"16px\", color: \"#000000\" }}\n                /> */}\n              </TabList>\n\n            </Box>\n\n            <DataContext.Provider\n              value={{\n                entities,\n                countries,\n                regions,\n                states,\n                cities,\n                zones,\n                id,\n                id1,\n                id2,\n                id3,\n                id4,\n                name,\n                name1,\n                name2,\n                name3,\n                name4,\n                name5,\n                name6,\n                setName,\n                setName1,\n                setName2,\n                setName3,\n                setName4,\n                setName5,\n                setName6,\n                checkId1,\n                checkId2,\n                checkId3,\n                checkId4,\n                checkId5,\n                checkId6,\n                setCheckId1,\n                setCheckId2,\n                setCheckId3,\n                setCheckId4,\n                setCheckId5,\n                setCheckId6,\n                setCheckId7,\n                getId,\n                getId1,\n                getId2,\n                setGetId2,\n                getId3,\n                setGetId3,\n                getId4,\n                setGetId4,\n                getId5,\n                setGetId5,\n                getId6,\n                setGetId6,\n                getCityDatas,\n                getStates,\n                getZoneDatas,\n                getStateDatas,\n                userRolePermissions,\n                currentData,\n                setCurrentData\n              }}\n            >\n              <TabPanel value=\"1\" index=\"1\" sx={{ ml: -3 }}>\n                {/* <EntityLists getEntity={getEntity}/> */}\n                <Div>\n                  <Div\n                    className=\"card\"\n                    sx={{ p: 2, minHeight: \"390px\", borderRadius: 0, m: 0 }}\n                  >\n                    <Div\n                      sx={{\n                        position: \"absolute\",\n                        right: 15,\n                        // width: \"100%\",\n                        display: \"flex\",\n                        justifyContent: \"flex-end\"\n                      }}\n                    >\n                      {Array.isArray(userRolePermissions) && userRolePermissions.includes(121) && (\n                        <ErpCreateButton handleClick={handleAddLegalEntity} name={\"Add Legal Entity\"} />\n                      )}\n                    </Div>\n                    <br />\n\n                    <Div sx={{ mt: { lg: 3, md: 5, xs: 5 } }}>\n                      <JumboScrollbar\n                        autoHeight={true}\n                        autoHideTimeout={4000}\n                        autoHeightMin={scrollHeight ? scrollHeight : 349}\n                        autoHide={true}\n                        hideTracksWhenNotNeeded\n                        id=\"no-more-tables\"\n                      >\n                        <Table stickyHeader className=\"table table-borderless\">\n                          <TableHead className=\"table-head\">\n                            <TableRow>\n                              <TableCell></TableCell>\n                              <TableCell sx={{ fontWeight: 600 }}>Code</TableCell>\n                              <TableCell sx={{ fontWeight: 600 }}>Name</TableCell>\n                              <TableCell sx={{ fontWeight: 600 }}>Description</TableCell>\n                              <TableCell sx={{ fontWeight: 600 }}>Action</TableCell>\n                            </TableRow>\n                          </TableHead>\n\n                          <TableBody>\n                            {entities?.map((entity, index) => {\n                              return (\n                                <TableRow key={index}>\n                                  <TableCell padding=\"checkbox\" data-title=\"Status\">\n                                    <FormControlLabel\n                                      control={\n                                        <Radio\n                                          color=\"primary\"\n                                          size=\"small\"\n                                          name=\"id\"\n                                          value={entity?.Entity_Id}\n                                          checked={\n                                            checkId1 === entity?.Entity_Id\n                                          }\n                                          onChange={(e) => {\n                                            setCheckId1(e.target.value);\n                                            setGetId(entity?.id);\n                                            setName(entity?.Entity_Name);\n                                            getCountry();\n                                          }}\n                                        />\n                                      }\n                                    />\n                                  </TableCell>\n                                  <TableCell data-title=\"Code\">{entity?.Entity_Id}</TableCell>\n                                  <TableCell data-title=\"Name\">{entity?.Entity_Name}</TableCell>\n                                  <TableCell data-title=\"Description\">{entity?.Entity_Description}</TableCell>\n                                  <TableCell data-title=\"Action\">\n                                    <Div sx={{ textAlign: \"left\" }}>\n                                      <Tooltip title=\"Delete\">\n                                        <IconButton\n                                          size=\"small\"\n                                          className=\"delete-icon\"\n                                          onClick={() => deleteEntityById(entity?.id)}\n                                          disabled={Array.isArray(userRolePermissions) && (userRolePermissions || [])?.includes(124) ? false : true}\n                                        >\n                                          <MdDelete\n                                            color={Array.isArray(userRolePermissions) && (userRolePermissions || [])?.includes(124) ? \"\" : \"#C7C8CC\"}\n                                          />\n                                        </IconButton>\n                                      </Tooltip>\n                                    </Div>\n                                  </TableCell>\n                                </TableRow>\n                              );\n                            })}\n                          </TableBody>\n                        </Table>\n                      </JumboScrollbar>\n                    </Div>\n                  </Div>\n\n                  {/* create entity popup */}\n                  <Dialog\n                    open={openEntity}\n                    // onClose={handleClose}\n                    aria-labelledby=\"alert-dialog-title\"\n                    aria-describedby=\"alert-dialog-description\"\n                  >\n                    <form onSubmit={handleCreateEntity}>\n                      <DialogContent>\n                        <Grid container>\n                          <Grid item xs={12} sx={{ ml: { sm: 0, md: 1.5 } }}>\n                            <Typography className=\"col-12 input-label\">\n                              Legal Entity Name{\" \"}\n                              <span className=\"required\">*</span>\n                            </Typography>\n                          </Grid>\n                          <Grid item xs={12} sx={{ ml: { sm: 0, md: 1.5 } }}>\n                            <TextField\n                              className=\"col-12 input-box\"\n                              id=\"outlined-basic\"\n                              placeholder=\"Legal Entity Name\"\n                              variant=\"outlined\"\n                              name=\"entityName\"\n                              value={entityName}\n                              onChange={(e) =>\n                                setEntityName(e.target.value)\n                              }\n                              autoComplete=\"off\"\n                              sx={{\n                                minWidth: { xs: \"100%\" },\n                                maxWidth: \"1005px\",\n                              }}\n                            />\n                            <Div style={{ color: \"red\" }}>\n                              {errors.entityName}\n                            </Div>\n                          </Grid>\n\n                          <Grid item xs={12} sx={{ ml: { sm: 0, md: 1.5 } }}>\n                            <Typography className=\"col-12 input-label\">\n                              Description <span className=\"required\">*</span>\n                            </Typography>\n                          </Grid>\n                          <Grid item xs={12} sx={{ ml: { sm: 0, md: 1.5 } }}>\n                            <TextField\n                              className=\"col-12 multiline-box\"\n                              id=\"outlined-basic\"\n                              placeholder=\"Description\"\n                              multiline\n                              rows={3}\n                              variant=\"outlined\"\n                              name=\"entityDescription\"\n                              value={entityDescription}\n                              onChange={(e) =>\n                                setEntityDescription(e.target.value)\n                              }\n                              autoComplete=\"off\"\n                              sx={{\n                                minWidth: { xs: \"100%\" },\n                                maxWidth: \"1005px\",\n                              }}\n                            />\n                            <Div style={{ color: \"red\" }}>\n                              {errors.entityDescription}\n                            </Div>\n                          </Grid>\n                        </Grid>\n                      </DialogContent>\n\n                      {/* code for save and cancel button */}\n                      <DialogActions>\n                        <Div className=\"buttons\" sx={{\n                          mb: 3, display: \"flex\",\n                          justifyContent: { sm: \"center\", md: \"end\" }\n                        }}>\n                          <ButtonGroup\n                            aria-label=\"split button\"\n                            type=\"submit\"\n                            sx={{\n                              mt: { xs: 0.5, lg: 0 },\n                              mr: { xs: 0, md: 1 }\n                            }}\n                          >\n                            <Button type=\"submit\" className=\"plus-button\" sx={{ width: { md: { md: \"99px !important\" } } }}>\n                              {currentData?.id !== undefined ? \"Update\" : \"Save\"}\n                            </Button>\n                            <Button variant=\"contained\" className=\"icon-button\">\n                              <FaSave size={18} />\n                            </Button>\n                          </ButtonGroup>\n\n                          <ButtonGroup\n                            aria-label=\"split button\"\n                            onClick={handleClose}\n                            sx={{\n                              mt: { xs: 0.5, lg: 0 },\n                              mr: { xs: 0, md: 1 }\n                            }}\n                          >\n                            <Button className=\"plus-button\" sx={{ width: { md: { md: \"99px !important\" } } }}>Cancel</Button>\n                            <Button variant=\"contained\" className=\"icon-button\">\n                              <TiCancel size={20} />\n                            </Button>\n                          </ButtonGroup>\n                        </Div>\n                      </DialogActions>\n                    </form>\n                  </Dialog>\n                </Div>\n              </TabPanel>\n\n              <TabPanel value=\"2\" index=\"2\" sx={{ ml: -2 }}>\n                {/* <CountryLists countries={countries} getId={getId}/> */}\n                <Div\n                  className=\"card\"\n                  sx={{ p: 2, minHeight: \"390px\", borderRadius: 0, m: 0 }}\n                >\n                  <Div\n                    sx={{\n                      position: \"absolute\",\n                      right: 15,\n                      // width: \"100%\",\n                      display: \"flex\",\n                      justifyContent: \"flex-end\"\n                    }}\n                  >\n                    {Array.isArray(userRolePermissions) && userRolePermissions.includes(85) && (\n                      <ErpCreateButton handleClick={handleAddCountry} name={\"Add Country\"} />\n                    )}\n                  </Div>\n                  <br />\n\n                  <Div sx={{ mt: { lg: 3, md: 5, xs: 5 } }}>\n                    <JumboScrollbar\n                      autoHeight={true}\n                      autoHideTimeout={4000}\n                      autoHeightMin={scrollHeight ? scrollHeight : 300}\n                      autoHide={true}\n                      hideTracksWhenNotNeeded\n                      id=\"no-more-tables\"\n                    >\n                      <Table stickyHeader className=\"table table-borderless\">\n                        <TableHead className=\"table-head\">\n                          <TableRow>\n                            <TableCell></TableCell>\n                            <TableCell sx={{ fontWeight: 600 }}>Code</TableCell>\n                            <TableCell sx={{ fontWeight: 600 }}>Name</TableCell>\n                            <TableCell sx={{ fontWeight: 600 }}>Description</TableCell>\n                            <TableCell sx={{ fontWeight: 600 }}>Action</TableCell>\n                          </TableRow>\n                        </TableHead>\n                        <TableBody>\n                          {countries?.map((country) => {\n                            return (\n                              <TableRow>\n                                <TableCell padding=\"checkbox\" data-title=\"Status\">\n                                  <FormControlLabel\n                                    control={\n                                      <Radio\n                                        color=\"primary\"\n                                        size=\"small\"\n                                        checked={\n                                          checkId2 === country?.Country_Id\n                                        }\n                                        value={country?.Country_Id}\n                                        onChange={(e) => {\n                                          setCheckId2(e.target.value);\n                                          setGetId1(country?.id);\n                                          setName1(country?.Country_Name);\n                                          getRegion();\n                                        }}\n                                      />\n                                    }\n                                  />\n                                </TableCell>\n                                <TableCell data-title=\"Code\">\n                                  {id}\n                                  {country?.Country_Id}\n                                </TableCell>\n                                <TableCell data-title=\"Name\">{country?.Country_Name}</TableCell>\n                                <TableCell data-title=\"Description\">\n                                  {country?.Country_Description}\n                                </TableCell>\n                                <TableCell data-title=\"Action\">\n                                  <ErpActionButton userRolePermissions={userRolePermissions} editPermissionId={86} deletePermissionId={88} onClickEdit={() => editCountryById(country)} onClickDelete={() => deleteCountryById(country?.id)} align=\"left\" />\n                                </TableCell>\n                              </TableRow>\n                            );\n                          })}\n                        </TableBody>\n                      </Table>\n                    </JumboScrollbar>\n                  </Div>\n\n                </Div>\n\n                {/* create a country */}\n                <Dialog\n                  open={openCountry}\n                  aria-labelledby=\"alert-dialog-title\"\n                  aria-describedby=\"alert-dialog-description\"\n                >\n                  <form onSubmit={handleCreateCountry}>\n                    <DialogContent>\n                      <Grid container>\n                        <Grid item xs={12} sx={{ ml: { sm: 0, md: 1.5 } }}>\n                          <Typography className=\"col-12 input-label\">\n                            Entity Name <span className=\"required\">*</span>\n                          </Typography>\n                        </Grid>\n                        <Grid item xs={12} sx={{ ml: { sm: 0, md: 1.5 } }}>\n                          <FormControl className=\"col-12\">\n                            <Autocomplete\n                              className={`search-select col-12 ${errors.entityName ? \"is-invalid\" : \"\"\n                                }`}\n                              id=\"entityName\"\n                              name=\"entityName\"\n                              options={entities?.map((entity) => entity)}\n                              getOptionLabel={(option) => {\n                                if (typeof option === \"string\") {\n                                  return option;\n                                }\n                                if (option && option?.Entity_Name) {\n                                  return option?.Entity_Name;\n                                }\n                                return \"\";\n                              }}\n                              value={entities?.find(\n                                (option) =>\n                                  option?.Entity_Name === entityName\n                              )}\n                              onChange={(e, newValue) => {\n                                setEntityName(newValue);\n                                // setValue(\n                                //   \"entityName\",\n                                //   entities?.find(\n                                //     (option) =>\n                                //       option?.Entity_Name === entityName\n                                //   )\n                                // );\n                              }}\n                              defaultValue={entities?.find(\n                                (option) => option?.Entity_Name === name\n                              )}\n                              isOptionEqualToValue={(option, value) =>\n                                option?.Entity_Name === value\n                              }\n                              sx={{\n                                minWidth: { xs: \"100%\" },\n                                maxWidth: \"1005px\",\n                              }}\n                              renderInput={(params) => (\n                                <TextField\n                                  {...params}\n                                  placeholder=\"Entity Name\"\n                                  variant=\"outlined\"\n                                  autoComplete=\"off\"\n                                />\n                              )}\n                            />\n                          </FormControl>\n                          <Div style={{ color: \"red\" }}>\n                            {errors.entityName}\n                          </Div>\n                        </Grid>\n\n                        <Grid item xs={12} sx={{ ml: { sm: 0, md: 1.5 } }}>\n                          <Typography className=\"col-12 input-label\">\n                            Country Name <span className=\"required\">*</span>\n                          </Typography>\n                        </Grid>\n                        <Grid item xs={12} sx={{ ml: { sm: 0, md: 1.5 } }}>\n                          <Autocomplete\n                            // freeSolo\n                            className={`search-select col-12 ${errors.countryName ? \"is-invalid\" : \"\"\n                              }`}\n                            id=\"countryName\"\n                            name=\"countryName\"\n                            getOptionLabel={(option) => {\n                              if (typeof option === \"string\") {\n                                return option;\n                              }\n                              if (option && option?.country) {\n                                return option?.country;\n                              }\n                              return \"\";\n                            }}\n                            options={countryLists?.map(\n                              (countrylist) => countrylist\n                            )}\n                            value={currentData?.id !== undefined ? countryName : countryLists?.find(\n                              (option) => option?.country === countryName\n                            )}\n                            onChange={(e, newValue) => {\n                              setCountryName(newValue?.country);\n                            }}\n                            sx={{\n                              minWidth: { xs: \"100%\" },\n                              maxWidth: \"1005px\",\n                              fontSize: \"14px\",\n                            }}\n                            renderInput={(params) => (\n                              <TextField\n                                {...params}\n                                placeholder=\"Country Name\"\n                                variant=\"outlined\"\n                                autoComplete=\"off\"\n                              />\n                            )}\n                          />\n\n                          <Div style={{ color: \"red\" }}>\n                            {errors.countryName}\n                          </Div>\n                        </Grid>\n\n                        <Grid item xs={12} sx={{ ml: { sm: 0, md: 1.5 } }}>\n                          <Typography className=\"col-12 input-label\">\n                            Description\n                          </Typography>\n                        </Grid>\n                        <Grid item xs={12} sx={{ ml: { sm: 0, md: 1.5 } }}>\n                          <TextField\n                            className={`multiline-box col-12 ${errors.countryDescription ? \"is-invalid\" : \"\"\n                              }`}\n                            id=\"outlined-basic\"\n                            placeholder=\"Description\"\n                            multiline\n                            rows={3}\n                            variant=\"outlined\"\n                            name=\"countryDescription\"\n                            value={countryDescription}\n                            onChange={(e) =>\n                              setCountryDescription(e.target.value)\n                            }\n                            autoComplete=\"off\"\n                            sx={{\n                              minWidth: { xs: \"100%\" },\n                              maxWidth: \"1005px\",\n                            }}\n                          />\n                          <Div style={{ color: \"red\" }}>\n                            {errors.countryDescription}\n                          </Div>\n                        </Grid>\n                      </Grid>\n                    </DialogContent>\n\n                    {/* code for save and cancel button */}\n                    <DialogActions>\n                      <Div className=\"buttons\" sx={{\n                        mb: 3, display: \"flex\",\n                        justifyContent: \"end\"\n                      }}>\n                        <ButtonGroup\n                          aria-label=\"split button\"\n                          type=\"submit\"\n                          // loading={isSubmitting}\n                          sx={{\n                            mt: { xs: 0.5, lg: 0 },\n                            mr: { xs: 0, md: 1 }\n                          }}\n                        >\n                          <Button type=\"submit\" className=\"plus-button\" sx={{ width: { md: \"99px !important\" } }}>\n                            {currentData?.id !== undefined ? \"Update\" : \"Save\"}\n                          </Button>\n                          <Button variant=\"contained\" className=\"icon-button\">\n                            <FaSave size={18} />\n                          </Button>\n                        </ButtonGroup>\n\n                        <ButtonGroup\n                          aria-label=\"split button\"\n                          onClick={handleClose}\n                          sx={{\n                            mt: { xs: 0.5, lg: 0 },\n                            mr: { xs: 0, md: 1 }\n                          }}\n                        >\n                          <Button className=\"plus-button\" sx={{ width: { md: \"99px !important\" } }}>Cancel</Button>\n                          <Button variant=\"contained\" className=\"icon-button\">\n                            <TiCancel size={20} />\n                          </Button>\n                        </ButtonGroup>\n                      </Div>\n                    </DialogActions>\n                  </form>\n                  {/* //     </Form>\n                    //   )}\n                    // </Formik> */}\n                </Dialog>\n\n              </TabPanel>\n\n              <TabPanel value=\"3\" index=\"3\" sx={{ ml: -2 }}>\n                {/* <RegionLists /> */}\n                <Div\n                  className=\"card\"\n                  sx={{ p: 2, minHeight: \"380px\", borderRadius: 0, m: 0 }}\n                >\n                  <Div\n                    sx={{\n                      position: \"absolute\",\n                      right: 15,\n                      // width: \"100%\",\n                      display: \"flex\",\n                      justifyContent: \"flex-end\"\n                    }}\n                  >\n                    {Array.isArray(userRolePermissions) && userRolePermissions.includes(173) && (\n                      <ErpCreateButton handleClick={handleAddRegion} name={\"Add Region\"} />\n                    )}\n                  </Div>\n                  <br />\n\n                  <Div sx={{ mt: { lg: 3, md: 5, xs: 5 } }}>\n                    <JumboScrollbar\n                      autoHeight={true}\n                      autoHideTimeout={4000}\n                      autoHeightMin={scrollHeight ? scrollHeight : 300}\n                      autoHide={true}\n                      hideTracksWhenNotNeeded\n                      id=\"no-more-tables\"\n                    >\n                      <Table stickyHeader className=\"table table-borderless\">\n                        <TableHead className=\"table-head\">\n                          <TableRow>\n                            <TableCell></TableCell>\n                            <TableCell sx={{ fontWeight: 600 }}>Code</TableCell>\n                            <TableCell sx={{ fontWeight: 600 }}>Name</TableCell>\n                            <TableCell sx={{ fontWeight: 600 }}>Description</TableCell>\n                            <TableCell sx={{ fontWeight: 600 }}>Action</TableCell>\n                          </TableRow>\n                        </TableHead>\n                        <TableBody>\n                          {regions?.map((region) => {\n                            return (\n                              <TableRow>\n                                <TableCell padding=\"checkbox\" data-title=\"Status\">\n                                  <FormControlLabel\n                                    control={\n                                      <Radio\n                                        color=\"primary\"\n                                        size=\"small\"\n                                        checked={checkId3 === region?.Region_Id}\n                                        value={region?.Region_Id}\n                                        onChange={(e) => {\n                                          setCheckId3(e.target.value);\n                                          setGetId2(region?.id);\n                                          setName2(region?.Region_Name);\n                                          getStates();\n                                        }}\n                                      />\n                                    }\n                                  />\n                                </TableCell>\n                                <TableCell data-title=\"Code\">\n                                  {id}\n                                  {id1}\n                                  {region?.Region_Id}\n                                </TableCell>\n                                <TableCell data-title=\"Name\">{region?.Region_Name}</TableCell>\n                                <TableCell data-title=\"Description\">\n                                  {region?.Region_Description}\n                                </TableCell>\n                                <TableCell data-title=\"Action\">\n                                  <ErpActionButton userRolePermissions={userRolePermissions} editPermissionId={174} deletePermissionId={176} onClickEdit={() => editRegionById(region)} onClickDelete={() => deleteRegionById(region?.id)} align=\"left\" />\n                                </TableCell>\n                              </TableRow>\n                            );\n                          })}\n                        </TableBody>\n                      </Table>\n                    </JumboScrollbar>\n                  </Div>\n\n                </Div>\n\n                {/* create a region */}\n                <Dialog\n                  open={openRegion}\n                  // onClose={handleClose}\n                  aria-labelledby=\"alert-dialog-title\"\n                  aria-describedby=\"alert-dialog-description\"\n                >\n                  <form onSubmit={handleCreateRegion}>\n                    <DialogContent>\n                      <Grid container>\n                        <Grid item xs={12} sx={{ ml: { sm: 0, md: 1.5 } }}>\n                          <Typography className=\"col-12 input-label\">\n                            Entity Name <span className=\"required\">*</span>\n                          </Typography>\n                        </Grid>\n                        <Grid item xs={12} sx={{ ml: { sm: 0, md: 1.5 } }}>\n                          <Autocomplete\n                            // freeSolo\n                            className={`search-select col-12 ${errors.entityName ? \"is-invalid\" : \"\"\n                              }`}\n                            id=\"free-solo-demo\"\n                            placeholder=\"Entity Name\"\n                            name=\"entityName\"\n                            options={entities?.map((entity) => entity)}\n                            getOptionLabel={(option) => option?.Entity_Name}\n                            value={entities?.find(\n                              (option) => option?.Entity_Name === entityName\n                            )}\n                            onChange={(e, newValue) =>\n                              setEntityName(newValue)\n                            }\n                            defaultValue={entities?.find(\n                              (option) => option?.Entity_Name === name\n                            )}\n                            sx={{\n                              minWidth: { xs: \"100%\" },\n                              maxWidth: \"1005px\",\n                            }}\n                            renderInput={(params) => (\n                              <TextField\n                                {...params}\n                                placeholder=\"Entity Name\"\n                                variant=\"outlined\"\n                                autoComplete=\"off\"\n                              />\n                            )}\n                          />\n                          <Div style={{ color: \"red\" }}>\n                            {errors.entityName}\n                          </Div>\n                        </Grid>\n\n                        <Grid item xs={12} sx={{ ml: { sm: 0, md: 1.5 } }}>\n                          <Typography className=\"col-12 input-label\">\n                            Country Name <span className=\"required\">*</span>\n                          </Typography>\n                        </Grid>\n                        <Grid item xs={12} sx={{ ml: { sm: 0, md: 1.5 } }}>\n                          <Autocomplete\n                            // freeSolo\n                            className={`search-select col-12 ${errors.countryName ? \"is-invalid\" : \"\"\n                              }`}\n                            id=\"free-solo-demo\"\n                            placeholder=\"Country Name\"\n                            name=\"countryName\"\n                            options={countries?.map((country) => country)}\n                            getOptionLabel={(option) => option?.Country_Name}\n                            value={countries?.find(\n                              (option) =>\n                                option?.Country_Name === countryName\n                            )}\n                            onChange={(e, newValue) => {\n                              setCountryName(newValue);\n                            }}\n                            defaultValue={countries.find(\n                              (option) => option?.Country_Name === name1\n                            )}\n                            sx={{\n                              minWidth: { xs: \"100%\" },\n                              maxWidth: \"1005px\",\n                              fontSize: \"14px\",\n                            }}\n                            renderInput={(params) => (\n                              <TextField\n                                {...params}\n                                placeholder=\"Country Name\"\n                                variant=\"outlined\"\n                                autoComplete=\"off\"\n                              />\n                            )}\n                          />\n                          <Div style={{ color: \"red\" }}>\n                            {errors.countryName}\n                          </Div>\n                        </Grid>\n\n                        <Grid item xs={12} sx={{ ml: { sm: 0, md: 1.5 } }}>\n                          <Typography className=\"col-12 input-label\">\n                            Region Name <span className=\"required\">*</span>\n                          </Typography>\n                        </Grid>\n                        <Grid item xs={12} sx={{ ml: { sm: 0, md: 1.5 } }}>\n                          <TextField\n                            className={`input-box col-12 ${errors.regionName ? \"is-invalid\" : \"\"\n                              }`}\n                            id=\"outlined-basic\"\n                            placeholder=\"Region Name\"\n                            variant=\"outlined\"\n                            name=\"regionName\"\n                            value={regionName}\n                            onChange={(e) => setRegionName(e.target.value)}\n                            autoComplete=\"off\"\n                            sx={{\n                              minWidth: { xs: \"100%\" },\n                              maxWidth: \"1005px\",\n                            }}\n                          />\n                          <Div style={{ color: \"red\" }}>\n                            {errors.regionName}\n                          </Div>\n                        </Grid>\n\n                        <Grid item xs={12} sx={{ ml: { sm: 0, md: 1.5 } }}>\n                          <Typography className=\"col-12 input-label\">\n                            Description\n                          </Typography>\n                        </Grid>\n                        <Grid item xs={12} sx={{ ml: { sm: 0, md: 1.5 } }}>\n                          <TextField\n                            className={`multiline-box col-12 ${errors.regionDescription ? \"is-invalid\" : \"\"\n                              }`}\n                            id=\"outlined-basic\"\n                            placeholder=\"Description\"\n                            multiline\n                            rows={3}\n                            variant=\"outlined\"\n                            name=\"regionDescription\"\n                            value={regionDescription}\n                            onChange={(e) =>\n                              setRegionDescription(e.target.value)\n                            }\n                            autoComplete=\"off\"\n                            sx={{\n                              minWidth: { xs: \"100%\" },\n                              maxWidth: \"1005px\",\n                            }}\n                          />\n                          <Div style={{ color: \"red\" }}>\n                            {errors.regionDescription}\n                          </Div>\n                        </Grid>\n                      </Grid>\n                    </DialogContent>\n\n                    {/* code for save and cancel button */}\n                    <DialogActions>\n                      <Div className=\"buttons\" sx={{\n                        mb: 3, display: \"flex\",\n                        justifyContent: \"end\"\n                      }}>\n                        <ButtonGroup\n                          aria-label=\"split button\"\n                          type=\"submit\"\n                          // loading={isSubmitting}\n                          sx={{\n                            mt: { xs: 0.5, lg: 0 },\n                            mr: { xs: 0, md: 1 }\n                          }}\n                        >\n                          <Button type=\"submit\" className=\"plus-button\" sx={{ width: { md: \"99px !important\" } }}>\n                            {currentData?.id !== undefined ? \"Update\" : \"Save\"}\n                          </Button>\n                          <Button variant=\"contained\" className=\"icon-button\">\n                            <FaSave size={18} />\n                          </Button>\n                        </ButtonGroup>\n\n                        <ButtonGroup\n                          aria-label=\"split button\"\n                          onClick={handleClose}\n                          sx={{\n                            mt: { xs: 0.5, lg: 0 },\n                            mr: { xs: 0, md: 1 }\n                          }}\n                        >\n                          <Button className=\"plus-button\" sx={{ width: { md: \"99px !important\" } }}>Cancel</Button>\n                          <Button variant=\"contained\" className=\"icon-button\">\n                            <TiCancel size={20} />\n                          </Button>\n                        </ButtonGroup>\n                      </Div>\n                    </DialogActions>\n                  </form>\n                </Dialog>\n              </TabPanel>\n\n              <TabPanel value=\"4\" index=\"4\" sx={{ ml: -2 }}>\n                <StateLists />\n              </TabPanel>\n\n              <TabPanel value=\"5\" index=\"5\" sx={{ ml: -2 }}>\n                <CityLists />\n              </TabPanel>\n\n              <TabPanel value=\"6\" index=\"6\" sx={{ ml: -2 }}>\n                <PartnerList />\n              </TabPanel>\n\n              <TabPanel value=\"7\" index=\"7\" sx={{ ml: -2 }}>\n                <ZoneLists />\n              </TabPanel>\n\n              <TabPanel value=\"8\" index=\"8\" sx={{ ml: -2 }}>\n                <StoreList />\n              </TabPanel>\n            </DataContext.Provider>\n          </TabContext>\n        </Div>\n        <ScrollToTop Scrollheight={180} />\n      </JumboContentLayoutMain>\n    </>\n  );\n}","import React from \"react\";\r\nimport * as yup from \"yup\";\r\nimport * as Yup from \"yup\";\r\n\r\nexport const entityValidationSchema = yup.object({\r\n  entityName: yup\r\n    .string(\"Enter your entity name\")\r\n    .required(\"Entity name is required\"),\r\n  entityDescription: yup\r\n    .string(\"Enter your entity description\")\r\n    .required(\"Entity Description is required\")\r\n    .min(10, \"Entity Description must be at least 10 characters\")\r\n    .max(240, \"Entity Description must not exceed 240 characters\"),\r\n});\r\n\r\nexport const countryValidationSchema = Yup.object({\r\n  // entityName: Yup.string().required(\"Entity name is required\"),\r\n  countryName: Yup.string().required(\"Country name is required\"),\r\n  countryDescription: Yup.string()\r\n    .required(\"Country Description is required\")\r\n    .min(10, \"Country Description must be at least 10 characters\")\r\n    .max(240, \"Country Description must not exceed 240 characters\"),\r\n});\r\n\r\nexport const regionValidationSchema = yup.object({\r\n  // entityName: yup.string().required(\"Entity name is required\"),\r\n  // countryName: yup.string().required(\"Country name is required\"),\r\n  regionName: yup.string().required(\"Region name is required\"),\r\n  regionDescription: yup\r\n    .string()\r\n    .required(\"Region Description is required\")\r\n    .min(10, \"Region Description must be at least 10 characters\")\r\n    .max(240, \"Region Description must not exceed 240 characters\"),\r\n});\r\n\r\nexport const stateValidationSchema = yup.object({\r\n  // entityName: yup.string().required(\"Entity name is required\"),\r\n  // countryName: yup.string().required(\"Country name is required\"),\r\n  // regionName: yup.string().required(\"Region name is required\"),\r\n  stateName: yup.string().required(\"State name is required\"),\r\n  stateDescription: yup\r\n    .string()\r\n    .required(\"State Description is required\")\r\n    .min(10, \"State Description must be at least 10 characters\")\r\n    .max(240, \"State Description must not exceed 240 characters\"),\r\n});\r\n\r\nexport const cityValidationSchema = yup.object({\r\n  // entityName: yup.string().required(\"Entity name is required\"),\r\n  // countryName: yup.string().required(\"Country name is required\"),\r\n  // regionName: yup.string().required(\"Region name is required\"),\r\n  // stateName: yup.string().required(\"State name is required\"),\r\n  cityName: yup.string().required(\"City name is required\"),\r\n  cityDescription: yup\r\n    .string()\r\n    .required(\"City Description is required\")\r\n    .min(10, \"City Description must be at least 10 characters\")\r\n    .max(240, \"City Description must not exceed 240 characters\"),\r\n});\r\n\r\nexport const zoneValidationSchema = yup.object({\r\n  // cityName: yup\r\n  //   .string(\"Enter your city name\")\r\n  //   .required(\"City name is required\"),\r\n  pincode: yup.string(\"Enter the pincode\").required(\"Enter valid pincode\"),\r\n  zoneName: yup.string(\"Enter the zone name\").required(\"Zone name is required\"),\r\n});\r\n\r\nexport const itemMasterValidationSchema = yup.object({\r\n  itemName: yup.string().required(\"Item name is required\"),\r\n  uom: yup.string().required(\"Uom is required\"),\r\n  // imageName: yup.string().required(\"Item Image is required\"),\r\n  purchaseDescription: yup.string(),\r\n  inventoryDescription: yup.string(),\r\n  purchaseAccount: yup.string().required(\"Purchase account is required\"),\r\n  inventoryAccount: yup.string().required(\"Inventory account is required\"),\r\n});\r\n\r\n\r\nexport const lookupValidationSchema = yup.object({\r\n  itemName: yup.string().required(\"Lookup name is required\"),\r\n  // Lookupname: yup.string().required(\"Lookup Name is required\"),\r\n  // value: yup.string().required(\"Value is required\"),\r\n\r\n});\r\n\r\nexport const EditlookupValidationSchema = yup.object({\r\n  // Lookupname: yup.string().required(\"Lookup Name is required\"),\r\n  // value: yup.string().required(\"Value is required\"),\r\n});\r\n\r\n\r\nexport const storesValidationSchema = yup.object({\r\n  // storeId: yup.string().required(\"Store Id is required\"),\r\n  // partnerName: yup.string().required(\"Business Unit is required\"),\r\n  storeName: yup.string().required(\"Store Name is required\"),\r\n  // storeIncharge: yup.string().required(\"Store Incharge is required\"),\r\n  // buildingName: yup.string().required(\"Building Name is required\"),\r\n  // location: yup.string().required(\"Location is required\"),\r\n  // countryName: yup.string().required(\"Country is required\"),\r\n  // stateName: yup.string().required(\"State is required\"),\r\n  // cityName: yup.string().required(\"City is required\"),\r\n})\r\n\r\nexport const costcentreValidationSchema = yup.object({\r\n  // buName: yup.string().required(\"Business Unit is required\"),\r\n  costCentreName: yup.string().required(\"Cost Centre Name is required\"),\r\n})\r\n\r\nexport const mailConfigureValidationSchema = yup.object({\r\n  mailId: yup\r\n    .string()\r\n    .required(\"Mail Id is required\"),\r\n  mailPassword: yup\r\n    .string()\r\n    .required(\"Mail Password is required\")\r\n    .min(8, \"Mail Password must be at least 8 characters\"),\r\n});\r\n\r\n\r\nexport const workflowAssignValidationSchema = yup.object({\r\n  partnerName: yup\r\n    .string()\r\n    .required(\"Partner Name is required\"),\r\n  workflowName: yup\r\n    .string()\r\n    .required(\"Workflow Name is required\"),\r\n  basedOnWorkflow: yup\r\n    .string()\r\n    .required(\"Workflow Based On is required\"),\r\n  documentName: yup\r\n    .string()\r\n    .required(\"Document Name is required\"),\r\n  fieldName: yup\r\n    .string()\r\n    .required(\"Field Name is required\"),\r\n  noOfLevels: yup\r\n    .string()\r\n    .required(\"No of Level is required\"),\r\n});\r\n\r\n\r\n\r\nexport const workflowRuleValidationSchema = yup.object({\r\n  // partnerName: yup\r\n  //   .string()\r\n  //   .required(\"Partner Name is required\"),\r\n  ruleName1: yup\r\n    .string()\r\n    .required(\"Rule Name is required\"),\r\n  action: yup\r\n    .string()\r\n    .required(\"Action is required\"),\r\n});\r\n\r\n\r\n\r\nexport const workflowValidationSchema = yup.object({\r\n  partnerName: yup\r\n    .string()\r\n    .required(\"Partner Name is required\"),\r\n  workflowName: yup\r\n    .string()\r\n    .required(\"Workflow Name is required\"),\r\n  basedOnWorkflow: yup\r\n    .string()\r\n    .required(\"Workflow Based On is required\"),\r\n  ruleName: yup\r\n    .string()\r\n    .required(\"Rule Name is required\"),\r\n  noOfLevels: yup\r\n    .string()\r\n    .required(\"No of Level is required\"),\r\n});"],"names":["scrollHeight","name1","name3","name4","cities","zones","getId4","getId6","setGetId6","setName6","getZoneDatas","getId5","name5","checkId7","setCheckId7","userRolePermissions","currentData","setCurrentData","useContext","DataContext","token","localStorage","getItem","header","headers","Authorization","concat","Accept","partners","setPartners","useState","open","setOpen","showSave","setShowSave","cityName","setCityName","City_Name","businessUnit","setBusinessUnit","zoneLists","setZoneLists","zoneName","setZoneName","pincode","setPincode","cityId","setCityId","errors","setErrors","useEffect","async","axios","BASE_URL","then","response","console","log","data","names","catch","error","getPartners","_jsx","_Fragment","children","_jsxs","Div","className","sx","p","borderRadius","m","position","right","display","justifyContent","Array","isArray","includes","ErpCreateButton","handleClick","handleAddZones","name","mt","lg","md","xs","minHeight","JumboScrollbar","autoHeight","autoHideTimeout","autoHeightMin","autoHide","hideTracksWhenNotNeeded","id","Table","stickyHeader","TableHead","TableRow","TableCell","fontWeight","TableBody","filter","opt","Partner_Id","length","map","zone","padding","FormControlLabel","control","Radio","color","size","checked","value","onChange","e","target","Zone_Name","Pincode","ErpActionButton","editPermissionId","deletePermissionId","onClickEdit","res","_res$data3","_res$data4","status","toast","message","editZoneById","onClickDelete","_res$data5","success","deleteZoneById","align","colSpan","textAlign","Dialog","onSubmit","preventDefault","validForm","validate","undefined","Object","keys","zonepayload","_objectSpread","City_Id","Zone_Type_Code","Company_Id","parseInt","Created_By","Updated_By","_res$data","_res$data2","DialogContent","Grid","container","item","Typography","FormControl","Autocomplete","options","city","getOptionLabel","option","newValue","isOptionEqualToValue","minWidth","maxWidth","renderInput","params","TextField","placeholder","variant","autoComplete","style","Partner_Name","ml","Button","onClick","dataResponse","normalizeCityName","_normalized","normalized","toLowerCase","replace","normalize","isValidPincode","some","cityname","Zonename","mb","ButtonGroup","type","disabled","mr","width","FaSave","handleClose","TiCancel","_errors$regionName","entities","countries","regions","states","id1","id2","id3","name2","setName4","checkId5","setCheckId5","getId","getId1","getId2","getId3","setGetId4","getCityDatas","getStates","React","entityName","setEntityName","Entity_Name","countryName","setCountryName","Country_Name","regionName","setRegionName","Region_Name","stateName","setStateName","State_Name","cityDescription","setCityDescription","cityLists","setCityLists","getCityLists","payload","country","state","citynames","normalizedCity","_cities$filter$","currentValue","index","paddedValue","toString","padStart","handleAddCity","City_Description","editCityById","_res$data6","deleteCityById","citypayload","Entity_Id","Country_Id","Region_Id","State_Id","City_Type_Code","handleError","sm","find","onFocus","fontSize","region","onInputChange","height","lineHeight","multiline","rows","DialogActions","_errors$entityName","_errors$countryName","setName","setName1","setName2","setName3","checkId1","checkId2","checkId3","checkId4","setCheckId1","setCheckId2","setCheckId3","setCheckId4","setGetId3","getStateDatas","stateLists","setStateLists","stateId","setStateId","stateDescription","setStateDescription","getStateLists","nextState","_nextState$","nextStateId","numericPart","handleAddState","State_Description","editStateById","_res$data7","deleteStateById","statepayload","State_Type_Code","statelist","CellNoborder","styled","_ref","theme","border","_ref2","_ref3","commonServices","handleCreateHistory","requestId","partnerId","resp","_resp$data","_resp$data2","filterlistIds","deletePreviousHistory","editUser","Document_Id","Updated_Person","Updated_Time","Date","getHours","getMinutes","getSeconds","Updated_Date","toJSON","slice","Is_Deleted","setCreateMaterial","setListMaterial","userDetails","JSON","parse","OwnerNames","setOwnerNames","HeadOperation","setHeadOperation","values","setValues","Bussiness_Unit","Operated_By","Contact","Email","Website","Head_Of_Operation","Address_1","Address_2","City","State","Country","Pin_Code","Pan_No","GST_No","Agreement_Ref","Valid_Upto","Corporate_BU","Commision_Paid","timer","setTimeout","_response$data","first_name","last_name","getUsers","clearTimeout","selectedCountry","setSelectedCountry","selectedState","setSelectedState","selectedCity","setSelectedCity","managedByLists","setManagedByLists","countryLists","setCountryLists","countryId","setCountryId","setcityId","itemServices","getUnits","Search","handleChangeItem","getValue","pincodeData","regex","test","yearB","getFullYear","fromTimeObject","Ofc_Starttime","toTimeObject","Ofc_Endtime","timeDiff","Math","abs","hours","floor","minutes","totalhours","itempayload","HeadOf_Operation","BusinessUnit_Phone","BusinessUnit_EMail","BusinessUnit_Web","BusinessUnit_Addressline1","BusinessUnit_City","BusinessUnit_Country","BusinessUnit_State","BusinessUnit_Zone","BusinessUnit_Pincode","BusinessUnit_PanNo","BusinessUnit_GSTNo","Agreement_RefNo","Agreement_Validupto","Total_hours","Created_Date","todayDate","_res$data8","disablePortal","InputProps","endAdornment","InputAdornment","ErpDateField","inputValue","handleInputChange","FormGroup","Checkbox","label","newState","setEditPartnerList","currentPart","setcurenrtPart","PartnerName","setPartnerName","OperatedBy","setOperatedBy","HeadOfOperation","setHeadOfOperation","BusinessUnitPhone","setBusinessUnitPhone","BusinessUnitEMail","setBusinessUnitEMail","BusinessUnitWeb","setBusinessUnitWeb","BusinessUnitAddressline1","setBusinessUnitAddressline1","BusinessUnitAddressline2","setBusinessUnitAddressline2","BusinessUnitPincode","setBusinessUnitPincode","BusinessUnitPanNo","setBusinessUnitPanNo","BusinessUnitGSTNo","setBusinessUnitGSTNo","AgreementRefNo","setAgreementRefNo","AgreementValidupto","setAgreementValidupto","PartnerId","setPartnerId","setId","startTime","setStartTime","endTime","setEndTime","totalHours","setTotalHours","commisionPaid","setCommisionPaid","corporateBU","setCorporateBU","PartnerName1","setPartnerName1","OperatedBy1","setOperatedBy1","HeadOfOperation1","setHeadOfOperation1","BusinessUnitPhone1","setBusinessUnitPhone1","BusinessUnitEMail1","setBusinessUnitEMail1","BusinessUnitWeb1","setBusinessUnitWeb1","BusinessUnitAddressline11","setBusinessUnitAddressline11","BusinessUnitAddressline21","setBusinessUnitAddressline21","BusinessUnitPincode1","setBusinessUnitPincode1","BusinessUnitPanNo1","setBusinessUnitPanNo1","BusinessUnitGSTNo1","setBusinessUnitGSTNo1","AgreementRefNo1","setAgreementRefNo1","AgreementValidupto1","setAgreementValidupto1","selectedCountry1","setSelectedCountry1","selectedState1","setSelectedState1","selectedCity1","setSelectedCity1","startTime1","setStartTime1","endTime1","setEndTime1","totalHours1","setTotalHours1","commisionPaid1","setCommisionPaid1","corporateBU1","setCorporateBU1","_response$data2","_response$data3","_response$data4","_response$data5","_response$data6","_response$data7","_response$data8","_response$data9","_response$data10","_response$data11","_response$data12","_response$data13","_response$data14","_response$data15","_response$data16","_response$data17","_response$data18","_response$data19","_response$data20","_response$data21","_response$data22","_response$data23","_response$data24","_response$data25","_response$data26","_response$data27","_response$data28","_response$data29","_response$data30","_response$data31","_response$data32","_response$data33","_response$data34","_response$data35","_response$data36","_response$data37","_response$data38","_response$data39","_response$data40","_response$data41","_response$data42","_response$data43","_response$data44","_response$data45","getData","parseFloat","EditedArr","push","Updated_Field","join","handleClickBack","updatedHistory","itemId","isMobile","useResponsive","Grow","in","transformOrigin","timeout","data1","_data1$Updated_Time","_data1$Histroy","DateFormatter","date","marginLeft","Histroy","_item$keys","alignItems","flexWrap","i","idx","marginRight","setListOverview","buid","companyId","Organization_Id","useTheme","isMdUp","useMediaQuery","breakpoints","up","updateHistory","setUpdateHistory","dateFormat","setDateFormat","setValue","Businessunitlist","setBusinessunitlist","DateFormat","err","getList","TabContext","Box","borderBottom","borderColor","TabList","handleChange","event","Tab","TabPanel","xl","format","HistoryOverview","MdClose","checkId6","setCheckId6","setName5","setGetId5","PartnerListData","setPartnerListData","openDelete","setOpenDelete","currentDeleteId","setCurrentDeleteId","currentDeleteAccountId","setCurrentDeleteAccountId","deleteName","setDeleteName","editPartnerList","showFilter","setShowFilter","createMaterial","listMaterial","ListOverview","overviewAlert","setOverviewAlert","useNavigate","anchorEl","setAnchorEl","Date1","setDate","BU_Id","setBU_Id","BU_Name","setBU_Name","Contact_No","setContact_No","Email_Id","setEmail_Id","Location","setLocation","Web","setWeb","fromTime","setFromTime","toTime","setToTime","sortConfig","setSortConfig","key","direction","page","setPage","count","setCount","rowsPerPage","setRowsPerPage","visitedPages","setVisitedPages","totalRecords","ceil","list","setSelectedValue","setCurrentPart","handleSort","sortData","sortedData","sort","a","b","valueA","Business_Unit","valueB","handleGetAllServiceRelatedDatas","_partnerResponse$data","partnerResponse","filterData","partnerFilterData","_opt$Partner_Id","CreateForm","IconButton","BsArrowDownUp","currentTarget","cursor","BsThreeDotsVertical","Menu","anchorOrigin","vertical","horizontal","keepMounted","Boolean","onClose","handleClosegear","maxHeight","scrollBehavior","formattedDate","hover","handleOverView","handleClickEdit","previousRecordResponse","warning","handleDeletePopup","ErpDeleteDialogBox","flag","setFlag","content","CreatePartner","EditPartnerList","getData1","PartnerOverview","ErpAlertViewDialogBox","_errors$storeName","_errors$buildingName","_errors$stateName","_errors$cityName","_errors$partnerName","_errors$location","name6","openCreateStore","setOpenCreateStore","getStores","fullScreen","partnerName","storeId","setStoreId","storeName","setStoreName","storeIncharge","setStoreIncharge","location","longitude","setLongitude","latitude","setLatitude","employeeLists","setEmployeeLists","businessUnitList","setBusinessUnitList","getPartnerLists","hrApiServices","listofDropdownEmployees","fetchEmployeeList","buildingName","setBuildingName","handleSearchLocation","useCallback","fetch","encodeURIComponent","json","lat","lon","reset","register","trigger","handleSubmit","formState","useForm","mode","resolver","yupResolver","storesValidationSchema","transactionSeriesType","setTransactionSeriesType","transactionSeries","fetchTransactionSeries","result","DialogTitle","handleCreateStore","storepayload","Type","Store_Name","StoreBuilding_Name","Store_Street","Store_Area","Store_City","Store_State","Store_Country","Store_Incharge","Own_Partner","Items","Upload_Image","Category","Item_Group","Item_Code","Item_Name","UOM","Unit_Price","Opening_Stock","ReOrder_Lvl","Min_Stock_Lvl","Longitude","Lotitude","Partner_OrganizationId","Store_UserId","respon","_respon$data","_respon$data2","Store_Id","inputProps","maxLength","title","partnerlist","Employee_FirstName","Employee_LasttName","handleCloseCreateStore","dropdownApiServices","_currentData$Item","_transactionHistory$G","_transactionHistory$M","_transactionHistory$M2","_transactionHistory$M3","setListStore","setEditOverviewItem","itemGroups","setItemGroups","current","setCurrent","transactionHistory","setTransactionHistory","itemList","setItemList","Is_Active","getActiveItemGroups","items","Item","forEach","_currentData$Items","_currentData$Items2","itemImages","Promise","all","matchingItem","itemsImage","buffer","arrayBuffer","btoa","Uint8Array","reduce","byte","String","fromCharCode","Image","fetchItemImages","overflow","textOverflow","GoodsRecipt","receipt","_receipt$Item","itemForReceipt","TrfIn_Id","Quantity","formatIndianNumber","Amount","Materialreturn","_receipt$Item2","MatRet_Id","Materialtransfer","_receipt$Item3","MatTransf_Id","MeterialRequest","_receipt$Item4","MatReq_Id","getAllCountries","_errors$storeIncharge","id4","down","openListStore","setOpenListStore","openEditStore","setOpenEditStore","openViewStore","setOpenViewStore","openDeleteStore","setOpenDeleteStore","employeeName","setEmployeeName","storeLists","setStoreLists","getStoreDropdownList","filterPartners","uniqueNames","newName","prevName","store","_res$data9","_res$data10","_res$data11","_res$data11$Partner_I","_res$data12","_res$data13","editStoreById","deleteStoreById","ViewStoreSettings","fullWidth","CreateStore","_res$data14","createContext","OrganizationStructure","dispatch","useDispatch","formPermissions","modulePermissions","useSelector","selectedUserRolePermissions","setId1","setId2","setId3","setId4","inputNumber","setInputNumber","setEntities","setCountries","setRegions","setStates","setCities","setZones","entityId","setEntityId","entityDescription","setEntityDescription","countryDescription","setCountryDescription","regionId","setRegionId","regionDescription","setRegionDescription","openEntity","setOpenEntity","openCountry","setOpenCountry","openRegion","setOpenRegion","setGetId","setGetId1","setGetId2","getEntityDatas","results","getEntity","getCountryDatas","getCountry","getRegionDatas","getRegion","filterLists","getCity","getCountryLists","nextEntity","nextEntityId","nextCountry","_nextCountry$","nextCountryId","nextRegion","_nextRegion$","nextRegionId","_res$data29","_res$data30","_res$data31","_res$data32","fetchUserRolePermissions","JumboContentLayoutMain","Setting","scrollButtons","allowScrollButtonsMobile","Provider","handleAddLegalEntity","entity","Entity_Description","Tooltip","_res$data18","deleteEntityById","MdDelete","validateEntity","entitypayload","Entity_Type_Code","_res$data15","handleAddCountry","Country_Description","_res$data21","_res$data22","editCountryById","_res$data23","deleteCountryById","validateCountry","countrypayload","Country_Type_Code","_res$data19","_res$data20","defaultValue","countrylist","handleAddRegion","Region_Description","_res$data26","_res$data27","editRegionById","_res$data28","deleteRegionById","validateRegion","regionpayload","Region_Type_Code","_res$data24","_res$data25","StateLists","CityLists","PartnerList","ZoneLists","StoreList","ScrollToTop","Scrollheight","yup","required","min","max","Yup","itemName","uom","purchaseDescription","inventoryDescription","purchaseAccount","inventoryAccount","workflowRuleValidationSchema","costCentreName","mailId","mailPassword","workflowName","basedOnWorkflow","documentName","fieldName","noOfLevels","ruleName1","action","workflowValidationSchema","ruleName"],"sourceRoot":""}