{"version":3,"file":"static/js/577.9bde428d.chunk.js","mappings":"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","sources":["app/pages/settings/Setting.js","app/pages/settings/Workflow/WorkflowAssignment.js","app/schemas/SettingValidationSchemas.js"],"sourcesContent":["import React from 'react';\nimport { Typography } from '@mui/material';\nimport Div from \"@jumbo/shared/Div\";\nimport './Setting.css';\n\n\n\n\nconst Setting = () => {\n  return ( \n    <>\n      <Div>\n        {/* <img src='.\\images\\mainlogo-icon.jpg' width={30} height={30}></img> */}\n        <Typography variant='h1' sx={{ fontWeight: 800, mt: -2}}>Settings</Typography>\n      </Div>\n    </>\n    \n  )\n}\n\nexport default Setting;\n","import styled from \"@emotion/styled\";\nimport JumboContentLayoutMain from \"@jumbo/components/JumboContentLayout/JumboContentLayoutMain\";\nimport JumboScrollbar from \"@jumbo/components/JumboScrollbar\";\nimport {\n  Autocomplete,\n  Box,\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  FormControl,\n  Grid,\n  Table,\n  TableBody,\n  TableCell,\n  TableRow,\n  TextField,\n  Typography,\n} from \"@mui/material\";\nimport React, { useEffect } from \"react\";\nimport { useState } from \"react\";\nimport Setting from \"../Setting\";\nimport Div from \"@jumbo/shared/Div/Div\";\nimport axios from \"axios\";\nimport { BASE_URL } from \"app/services/auth-services\";\nimport { useForm } from \"react-hook-form\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport {\n  workflowRuleValidationSchema,\n  workflowValidationSchema,\n} from \"app/schemas/SettingValidationSchemas\";\nimport { toast } from \"react-toastify\";\n\n\n\nconst manufacturer = [\n  { id: 0, name: \"Rule Based\" },\n  { id: 1, name: \"Level Based\" },\n];\n\nconst actionNames = [\n  { id: 0, name: \"Create\" },\n  { id: 1, name: \"Create/Edit\" },\n  { id: 2, name: \"Delete\" },\n];\n\nconst WorkflowAssignment = ({ scrollHeight }) => {\n  const token = localStorage.getItem(\"accesstoken\");\n\n  const header = {\n    headers: {\n      Authorization: `Bearer ${token}`,\n      \"Content-Type\": \"application/json\",\n      Accept: \"application/json\",\n    },\n  };\n\n  const [value, setValue] = useState();\n  const [openForms, setOpenForms] = useState(false);\n\n  const [workflowName, setWorkflowName] = useState(\"\");\n  const [basedOnWorkflow, setBasedOnWorkflow] = useState(\"\");\n  const [ruleName, setRuleName] = useState(\"\");\n  const [ruleName1, setRuleName1] = useState(\"\");\n  const [action, setAction] = useState(null);\n  const [noOfLevels, setNoOfLevels] = useState(\"\");\n  const numbers = Array.from({ length: 100 }, (_, i) => i + 1);\n\n  const [listRules, setListRules] = useState([]);\n\n  const {\n    register: register1,\n    handleSubmit: handleSubmit1,\n    formState: { errors: errors1 },\n  } = useForm({\n    mode: \"onBlur\",\n    resolver: yupResolver(workflowRuleValidationSchema),\n  });\n\n  const handleSaveActions = (e) => {\n    e.preventDefault();\n    console.log(\"NEW\");\n    var payload = {\n      Partner_Id: 1,\n      Rule_Name: ruleName1,\n      Action: action,\n      Company_Id: parseInt(localStorage.getItem(\"OrganizationId\")),\n      Created_By: parseInt(localStorage.getItem(\"UserId\")),\n      Updated_By: parseInt(localStorage.getItem(\"UserId\")),\n    };\n    axios\n      .post(`${BASE_URL}/Erpapp/WorkflowRuleCRUD/`, payload, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n          \"Content-Type\": \"application/json\",\n          Accept: \"application/json\",\n        },\n      })\n      .then((res) => {\n        console.log(res);\n        toast.success(\"Created Successfully\");\n        setOpenForms(false);\n        listofWorkflowRules();\n      });\n  };\n\n  const listofWorkflowRules = () => {\n    axios\n      .get(`${BASE_URL}/Erpapp/WorkflowRulelist/`, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n          \"Content-Type\": \"application/json\",\n          Accept: \"application/json\",\n        },\n      })\n      .then((res) => {\n        console.log(res);\n        setListRules(res.data.results);\n      });\n  };\n\n  useEffect(() => {\n    listofWorkflowRules();\n  }, []);\n\n  const {\n    reset,\n    register,\n    handleSubmit,\n    formState: { errors },\n  } = useForm({\n    mode: \"onBlur\",\n    resolver: yupResolver(workflowValidationSchema),\n  });\n\n  const handleCreateWorkflow = (e) => {\n    e.preventDefault();\n    var payload = {\n      Partner_Id: 1,\n      WorkflowRule_Id: ruleName.id,\n      Rule_Name: ruleName.Rule_Name,\n      Workflow_Name: workflowName,\n      Workflow_Basedon: basedOnWorkflow,\n      Noof_Level: noOfLevels,\n      Company_Id: parseInt(localStorage.getItem(\"OrganizationId\")),\n      Created_By: parseInt(localStorage.getItem(\"UserId\")),\n      Updated_By: parseInt(localStorage.getItem(\"UserId\")),\n    };\n    axios\n      .post(`${BASE_URL}/Erpapp/WorkflowNameCRUD/`, payload, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n          \"Content-Type\": \"application/json\",\n          Accept: \"application/json\",\n        },\n      })\n      .then((res) => {\n        console.log(res);\n        toast.success(\"Created Successfully\");\n      });\n  };\n\n  return (\n    <>\n      {/* General settings code */}\n      <JumboContentLayoutMain>\n        <Setting />\n        <Typography variant=\"h3\" sx={{ fontWeight: 600 }}>\n          Workflow\n        </Typography>\n        <Typography variant=\"h4\" sx={{ fontWeight: 500 }}>\n          Users shall use this form to set up the approvers to approve various\n          documents\n        </Typography>\n\n        {/* code for inventory list table */}\n        <React.Fragment>\n          <form onSubmit={handleCreateWorkflow}>\n            <Div sx={{ mt: 3, ml: 15, width: \"800px\", minHeight: \"350px\" }}>\n              <Box>\n                <Div className=\"row\">\n                  <Div\n                    className=\"input-label col-md-4\"\n                    sx={{ pl: 3, fontWeight: 600 }}\n                  >\n                    Workflow Name\n                  </Div>\n                  <Div className=\"col-md-7\">\n                    <TextField\n                      className=\"input-box col-12\"\n                      variant=\"outlined\"\n                      {...register(\"workflowName\")}\n                      value={workflowName}\n                      onChange={(e) => setWorkflowName(e.target.value)}\n                      placeholder=\"Workflow Name\"\n                    />\n                    <Div style={{ color: \"red\" }}>\n                      {errors.workflowName?.message}\n                    </Div>\n                  </Div>\n                </Div>\n              </Box>\n              <br />\n              <Box>\n                <Div className=\"row\">\n                  <Div\n                    className=\"input-label col-md-4\"\n                    sx={{ pl: 3, fontWeight: 600 }}\n                  >\n                    Workflow Based On\n                  </Div>\n                  <Div className=\"col-md-7\">\n                    <FormControl className=\"col-md-12\">\n                      <Autocomplete\n                        className=\"search-select\"\n                        value={manufacturer.find(\n                          (option) => option.name === basedOnWorkflow\n                        )}\n                        onChange={(e) => setBasedOnWorkflow(e.target.value)}\n                        getOptionLabel={(option) => option.name}\n                        options={manufacturer}\n                        renderInput={(params) => (\n                          <TextField\n                            {...params}\n                            {...register(\"basedOnWorkflow\")}\n                            placeholder=\"Workflow Based On\"\n                          />\n                        )}\n                      />\n                      <Div style={{ color: \"red\" }}>\n                        {errors.basedOnWorkflow?.message}\n                      </Div>\n                    </FormControl>\n                  </Div>\n                </Div>\n              </Box>\n              <br />\n              <Box>\n                <Div className=\"row\">\n                  <Div\n                    className=\"input-label col-md-4\"\n                    sx={{ pl: 3, fontWeight: 600 }}\n                  >\n                    Rule Name\n                  </Div>\n                  <Div className=\"col-md-7\">\n                    <FormControl className=\"col-md-12\">\n                      <Autocomplete\n                        className=\"search-select\"\n                        getOptionLabel={(option) => {\n                          if (typeof option === \"string\") {\n                            return option;\n                          }\n                          if (option && option?.Rule_Name) {\n                            return option?.Rule_Name || \"\";\n                          }\n                          return \"\";\n                        }}\n                        options={listRules}\n                        value={listRules.find(\n                          (option) => option?.Rule_Name === ruleName\n                        )}\n                        onChange={(e, newValue) => {\n                          setRuleName(newValue);\n                        }}\n                        isOptionEqualToValue={(option, value) =>\n                          option?.Rule_Name === value || value === \"\"\n                        }\n                        renderInput={(params) => (\n                          <TextField\n                            {...params}\n                            {...register(\"ruleName\")}\n                            placeholder=\"Rule Name\"\n                          />\n                        )}\n                      />\n                      <Div style={{ color: \"red\" }}>\n                        {errors.ruleName?.message}\n                      </Div>\n                    </FormControl>\n                  </Div>\n                  <Div className=\"col-md-1\">\n                    <Button\n                      className=\"save-button col-md-12\"\n                      onClick={() => setOpenForms(true)}\n                      sx={{ width: \"130px\" }}\n                    >\n                      Add Rule\n                    </Button>\n                  </Div>\n                </Div>\n                <br />\n                <Div className=\"row\">\n                  <Div\n                    className=\"input-label col-md-4\"\n                    sx={{ pl: 3, fontWeight: 600 }}\n                  >\n                    No. of Levels\n                  </Div>\n                  <Div className=\"col-md-7\">\n                    <FormControl className=\"col-md-12\">\n                      <Autocomplete\n                        className=\"search-select\"\n                        name=\"noOfLevels\"\n                        getOptionLabel={(option) => {\n                          if (typeof option === \"number\") {\n                            return option.toString();\n                          }\n                          if (option && option) {\n                            return option;\n                          }\n                          return 0;\n                        }}\n                        options={numbers}\n                        value={numbers.find((option) => option === noOfLevels)}\n                        onChange={(e, newValue) => {\n                          console.log(newValue);\n                          setNoOfLevels(newValue);\n                        }}\n                        isOptionEqualToValue={(option, value) =>\n                          option === value || value === 0\n                        }\n                        renderInput={(params) => (\n                          <TextField\n                            {...params}\n                            {...register(\"noOfLevels\")}\n                            placeholder=\"No of Levels\"\n                            variant=\"outlined\"\n                            autoComplete=\"off\"\n                          />\n                        )}\n                      />\n                      <Div style={{ color: \"red\" }}>\n                        {errors.noOfLevels?.message}\n                      </Div>\n                    </FormControl>\n                  </Div>\n                </Div>\n              </Box>\n            </Div>\n\n            <Div sx={{ mt: 5, ml: 1 }}>\n              <Button\n                type=\"submit\"\n                className=\"save-button\"\n                sx={{\n                  mr: 3,\n                }}\n              >\n                Save\n              </Button>\n\n              <Button\n                className=\"cancel-button\"\n                onClick={() => {\n                  setRuleName(\"\");\n                  setWorkflowName(\"\");\n                  setNoOfLevels(\"\");\n                  setBasedOnWorkflow(\"\");\n                }}\n              >\n                Cancel\n              </Button>\n            </Div>\n          </form>\n        </React.Fragment>\n\n        <Dialog\n          open={openForms}\n          aria-labelledby=\"alert-dialog-title\"\n          aria-describedby=\"alert-dialog-description\"\n        >\n          <form onSubmit={handleSaveActions}>\n            <div>\n              <DialogContent>\n                <Typography variant=\"h3\">Create Rule Name </Typography>\n                <Grid container sx={{ mt: 2 }}>\n                  <Grid item xs={12} sx={{ ml: 2 }}>\n                    <Typography className=\"col-12 input-label\">\n                      Rule Name <span className=\"required\">*</span>\n                    </Typography>\n                  </Grid>\n                  <Grid item xs={12} sx={{ ml: 2 }}>\n                    <TextField\n                      className=\"input-box col-12\"\n                      name=\"ruleName1\"\n                      {...register1(\"ruleName1\")}\n                      value={ruleName1}\n                      onChange={(e) => setRuleName1(e.target.value)}\n                      placeholder=\"Rule Name\"\n                      sx={{ minWidth: \"280px\", maxWidth: \"1005px\" }}\n                    />\n                    <Div style={{ color: \"red\" }}>\n                      {errors1.ruleName1?.message}\n                    </Div>\n                  </Grid>\n\n                  <Grid item xs={12} sx={{ ml: 2 }}>\n                    <Typography className=\"col-12 input-label\">\n                      Action When <span className=\"required\">*</span>\n                    </Typography>\n                  </Grid>\n                  <Grid item xs={12} sx={{ ml: 2 }}>\n                    <FormControl className=\"col-12\">\n                      <Autocomplete\n                        className={`search-select col-12 ${\n                          errors1.action ? \"is-invalid\" : \"\"\n                        }`}\n                        name=\"action\"\n                        getOptionLabel={(option) => {\n                          if (typeof option === \"string\") {\n                            return option;\n                          }\n                          if (option && option?.name) {\n                            return option?.name;\n                          }\n                          return \"\";\n                        }}\n                        options={actionNames}\n                        value={actionNames.find(\n                          (option) => option?.name === action\n                        )}\n                        onChange={(e, newValue) => {\n                          console.log(newValue);\n                          setAction(newValue?.name);\n                        }}\n                        isOptionEqualToValue={(option, value) =>\n                          option?.id === value.id || value === \"\"\n                        }\n                        renderInput={(params) => (\n                          <TextField\n                            {...params}\n                            placeholder=\"Action Name\"\n                            {...register1(\"action\")}\n                            variant=\"outlined\"\n                            autoComplete=\"off\"\n                          />\n                        )}\n                        sx={{ minWidth: \"280px\", maxWidth: \"1005px\" }}\n                      />\n                      <Div style={{ color: \"red\" }}>\n                        {errors1.action?.message}\n                      </Div>\n                    </FormControl>\n                  </Grid>\n                </Grid>\n              </DialogContent>\n              <DialogActions>\n                <Button type=\"submit\" className=\"save-button\" sx={{ mr: 2 }}>\n                  Save\n                </Button>\n                <Button\n                  onClick={() => setOpenForms(false)}\n                  className=\"cancel-button\"\n                  autoFocus\n                >\n                  Cancel\n                </Button>\n              </DialogActions>\n            </div>\n          </form>\n        </Dialog>\n      </JumboContentLayoutMain>\n    </>\n  );\n};\n\nexport default WorkflowAssignment;\n","import React from \"react\";\r\nimport * as yup from \"yup\";\r\nimport * as Yup from \"yup\";\r\n\r\nexport const entityValidationSchema = yup.object({\r\n  entityName: yup\r\n    .string(\"Enter your entity name\")\r\n    .required(\"Entity name is required\"),\r\n  entityDescription: yup\r\n    .string(\"Enter your entity description\")\r\n    .required(\"Entity Description is required\")\r\n    .min(10, \"Entity Description must be at least 10 characters\")\r\n    .max(240, \"Entity Description must not exceed 240 characters\"),\r\n});\r\n\r\nexport const countryValidationSchema = Yup.object({\r\n  // entityName: Yup.string().required(\"Entity name is required\"),\r\n  countryName: Yup.string().required(\"Country name is required\"),\r\n  countryDescription: Yup.string()\r\n    .required(\"Country Description is required\")\r\n    .min(10, \"Country Description must be at least 10 characters\")\r\n    .max(240, \"Country Description must not exceed 240 characters\"),\r\n});\r\n\r\nexport const regionValidationSchema = yup.object({\r\n  // entityName: yup.string().required(\"Entity name is required\"),\r\n  // countryName: yup.string().required(\"Country name is required\"),\r\n  regionName: yup.string().required(\"Region name is required\"),\r\n  regionDescription: yup\r\n    .string()\r\n    .required(\"Region Description is required\")\r\n    .min(10, \"Region Description must be at least 10 characters\")\r\n    .max(240, \"Region Description must not exceed 240 characters\"),\r\n});\r\n\r\nexport const stateValidationSchema = yup.object({\r\n  // entityName: yup.string().required(\"Entity name is required\"),\r\n  // countryName: yup.string().required(\"Country name is required\"),\r\n  // regionName: yup.string().required(\"Region name is required\"),\r\n  stateName: yup.string().required(\"State name is required\"),\r\n  stateDescription: yup\r\n    .string()\r\n    .required(\"State Description is required\")\r\n    .min(10, \"State Description must be at least 10 characters\")\r\n    .max(240, \"State Description must not exceed 240 characters\"),\r\n});\r\n\r\nexport const cityValidationSchema = yup.object({\r\n  // entityName: yup.string().required(\"Entity name is required\"),\r\n  // countryName: yup.string().required(\"Country name is required\"),\r\n  // regionName: yup.string().required(\"Region name is required\"),\r\n  // stateName: yup.string().required(\"State name is required\"),\r\n  cityName: yup.string().required(\"City name is required\"),\r\n  cityDescription: yup\r\n    .string()\r\n    .required(\"City Description is required\")\r\n    .min(10, \"City Description must be at least 10 characters\")\r\n    .max(240, \"City Description must not exceed 240 characters\"),\r\n});\r\n\r\nexport const zoneValidationSchema = yup.object({\r\n  // cityName: yup\r\n  //   .string(\"Enter your city name\")\r\n  //   .required(\"City name is required\"),\r\n  pincode: yup.string(\"Enter the pincode\").required(\"Enter valid pincode\"),\r\n  zoneName: yup.string(\"Enter the zone name\").required(\"Zone name is required\"),\r\n});\r\n\r\nexport const itemMasterValidationSchema = yup.object({\r\n  itemName: yup.string().required(\"Item name is required\"),\r\n  uom: yup.string().required(\"Uom is required\"),\r\n  // imageName: yup.string().required(\"Item Image is required\"),\r\n  purchaseDescription: yup.string(),\r\n  inventoryDescription: yup.string(),\r\n  purchaseAccount: yup.string().required(\"Purchase account is required\"),\r\n  inventoryAccount: yup.string().required(\"Inventory account is required\"),\r\n});\r\n\r\n\r\nexport const lookupValidationSchema = yup.object({\r\n  itemName: yup.string().required(\"Lookup name is required\"),\r\n  // Lookupname: yup.string().required(\"Lookup Name is required\"),\r\n  // value: yup.string().required(\"Value is required\"),\r\n\r\n});\r\n\r\nexport const EditlookupValidationSchema = yup.object({\r\n  // Lookupname: yup.string().required(\"Lookup Name is required\"),\r\n  // value: yup.string().required(\"Value is required\"),\r\n});\r\n\r\n\r\nexport const storesValidationSchema = yup.object({\r\n  // storeId: yup.string().required(\"Store Id is required\"),\r\n  // partnerName: yup.string().required(\"Business Unit is required\"),\r\n  storeName: yup.string().required(\"Store Name is required\"),\r\n  // storeIncharge: yup.string().required(\"Store Incharge is required\"),\r\n  // buildingName: yup.string().required(\"Building Name is required\"),\r\n  // location: yup.string().required(\"Location is required\"),\r\n  // countryName: yup.string().required(\"Country is required\"),\r\n  // stateName: yup.string().required(\"State is required\"),\r\n  // cityName: yup.string().required(\"City is required\"),\r\n})\r\n\r\nexport const costcentreValidationSchema = yup.object({\r\n  // buName: yup.string().required(\"Business Unit is required\"),\r\n  costCentreName: yup.string().required(\"Cost Centre Name is required\"),\r\n})\r\n\r\nexport const mailConfigureValidationSchema = yup.object({\r\n  mailId: yup\r\n    .string()\r\n    .required(\"Mail Id is required\"),\r\n  mailPassword: yup\r\n    .string()\r\n    .required(\"Mail Password is required\")\r\n    .min(8, \"Mail Password must be at least 8 characters\"),\r\n});\r\n\r\n\r\nexport const workflowAssignValidationSchema = yup.object({\r\n  partnerName: yup\r\n    .string()\r\n    .required(\"Partner Name is required\"),\r\n  workflowName: yup\r\n    .string()\r\n    .required(\"Workflow Name is required\"),\r\n  basedOnWorkflow: yup\r\n    .string()\r\n    .required(\"Workflow Based On is required\"),\r\n  documentName: yup\r\n    .string()\r\n    .required(\"Document Name is required\"),\r\n  fieldName: yup\r\n    .string()\r\n    .required(\"Field Name is required\"),\r\n  noOfLevels: yup\r\n    .string()\r\n    .required(\"No of Level is required\"),\r\n});\r\n\r\n\r\n\r\nexport const workflowRuleValidationSchema = yup.object({\r\n  // partnerName: yup\r\n  //   .string()\r\n  //   .required(\"Partner Name is required\"),\r\n  ruleName1: yup\r\n    .string()\r\n    .required(\"Rule Name is required\"),\r\n  action: yup\r\n    .string()\r\n    .required(\"Action is required\"),\r\n});\r\n\r\n\r\n\r\nexport const workflowValidationSchema = yup.object({\r\n  partnerName: yup\r\n    .string()\r\n    .required(\"Partner Name is required\"),\r\n  workflowName: yup\r\n    .string()\r\n    .required(\"Workflow Name is required\"),\r\n  basedOnWorkflow: yup\r\n    .string()\r\n    .required(\"Workflow Based On is required\"),\r\n  ruleName: yup\r\n    .string()\r\n    .required(\"Rule Name is required\"),\r\n  noOfLevels: yup\r\n    .string()\r\n    .required(\"No of Level is required\"),\r\n});"],"names":["Setting","_jsx","_Fragment","children","Div","Typography","variant","sx","fontWeight","mt","manufacturer","id","name","actionNames","_ref","_errors$workflowName","_errors$basedOnWorkfl","_errors$ruleName","_errors$noOfLevels","_errors1$ruleName","_errors1$action","scrollHeight","token","localStorage","getItem","value","setValue","concat","useState","openForms","setOpenForms","workflowName","setWorkflowName","basedOnWorkflow","setBasedOnWorkflow","ruleName","setRuleName","ruleName1","setRuleName1","action","setAction","noOfLevels","setNoOfLevels","numbers","Array","from","length","_","i","listRules","setListRules","register","register1","handleSubmit","handleSubmit1","formState","errors","errors1","useForm","mode","resolver","yupResolver","workflowRuleValidationSchema","listofWorkflowRules","axios","BASE_URL","headers","Authorization","Accept","then","res","console","log","data","results","useEffect","reset","workflowValidationSchema","_jsxs","JumboContentLayoutMain","React","onSubmit","e","preventDefault","payload","Partner_Id","WorkflowRule_Id","Rule_Name","Workflow_Name","Workflow_Basedon","Noof_Level","Company_Id","parseInt","Created_By","Updated_By","toast","success","ml","width","minHeight","Box","className","pl","TextField","_objectSpread","onChange","target","placeholder","style","color","message","FormControl","Autocomplete","find","option","getOptionLabel","options","renderInput","params","newValue","isOptionEqualToValue","Button","onClick","toString","autoComplete","type","mr","Dialog","open","Action","DialogContent","Grid","container","item","xs","minWidth","maxWidth","DialogActions","autoFocus","yup","entityName","required","entityDescription","min","max","Yup","countryName","countryDescription","regionName","regionDescription","stateName","stateDescription","cityName","cityDescription","pincode","zoneName","itemName","uom","purchaseDescription","inventoryDescription","purchaseAccount","inventoryAccount","storesValidationSchema","storeName","costCentreName","mailId","mailPassword","partnerName","documentName","fieldName"],"sourceRoot":""}