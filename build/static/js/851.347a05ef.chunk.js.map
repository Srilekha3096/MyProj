{"version":3,"file":"static/js/851.347a05ef.chunk.js","mappings":"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","sources":["app/pages/analytics/Operations.js","../node_modules/recharts/es6/chart/BarChart.js"],"sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { GoogleMap, MarkerF, useJsApiLoader, InfoWindowF } from '@react-google-maps/api';\r\nimport { Typography, Box, TextField, ButtonGroup, Button, Grid, FormControl, Autocomplete } from '@mui/material';\r\nimport axios from 'axios';\r\nimport { BASE_URL } from 'app/services/auth-services';\r\nimport JumboContentLayoutMain from '@jumbo/components/JumboContentLayout/JumboContentLayoutMain';\r\nimport Div from '@jumbo/shared/Div';\r\nimport { FaSave } from 'react-icons/fa';\r\nimport { Bar, BarChart, CartesianGrid, Legend, ResponsiveContainer, Tooltip, XAxis, YAxis } from 'recharts';\r\nimport { MdClear } from 'react-icons/md';\r\nimport { FaSearch } from \"react-icons/fa\";\r\nimport { Country, State, City } from \"country-state-city\";\r\nimport Select from \"react-select\";\r\n\r\nconst data = [\r\n    { month: 'Jan', Rent: 4000, Travel: 2400, Entertainments: 2400, Gifts: 2800, OfficeSupplies: 2800, },\r\n    { month: 'Feb', Rent: 3000, Travel: 1398, Entertainments: 2210, Gifts: 2300, OfficeSupplies: 2300, },\r\n    { month: 'Mar', Rent: 2000, Travel: 9800, Entertainments: 2290, Gifts: 1400, OfficeSupplies: 1400, },\r\n    { month: 'Apr', Rent: 2780, Travel: 3908, Entertainments: 2000, Gifts: 1400, OfficeSupplies: 1400, },\r\n    { month: 'May', Rent: 1890, Travel: 4800, Entertainments: 2181, Gifts: 4400, OfficeSupplies: 4400, },\r\n    { month: 'Jun', Rent: 2390, Travel: 3800, Entertainments: 2500, Gifts: 5400, OfficeSupplies: 5400, },\r\n    { month: 'Jul', Rent: 3490, Travel: 4300, Entertainments: 2100, Gifts: 6400, OfficeSupplies: 6400, },\r\n    { month: 'Aug', Rent: 4000, Travel: 2400, Entertainments: 2400, Gifts: 2800, OfficeSupplies: 2800, },\r\n    { month: 'Sep', Rent: 3000, Travel: 1398, Entertainments: 2210, Gifts: 2300, OfficeSupplies: 2300, },\r\n    { month: 'Oct', Rent: 2000, Travel: 9800, Entertainments: 2290, Gifts: 1400, OfficeSupplies: 1400, },\r\n    { month: 'Nov', Rent: 2780, Travel: 3908, Entertainments: 2000, Gifts: 1400, OfficeSupplies: 1400, },\r\n    { month: 'Dec', Rent: 1890, Travel: 4800, Entertainments: 2181, Gifts: 4400, OfficeSupplies: 4400, },\r\n];\r\n\r\nconst Operations = () => {\r\n\r\n    const [selectedMarker, setSelectedMarker] = useState(null)\r\n    const [datas, setDatas] = useState()\r\n    const [latitude, setLatitude] = useState()\r\n    const [longitude, setLongitude] = useState()\r\n    const [locationData, setLocationData] = useState(null);\r\n    const [selectedCountry, setSelectedCountry] = useState(\"\");\r\n    const [selectedState, setSelectedState] = useState(\"\");\r\n    const [selectedCity, setSelectedCity] = useState(\"\");\r\n    const [zoomLevel, setZoomLevel] = useState(3);\r\n    \r\n    const [searchedDatas, setSearchedDatas] = useState(null);\r\n    const [getPartnerName, setgetPartnerName] = useState(\"\");\r\n    const [ownerNames, setOwnerNames] = useState([]);\r\n\r\n    const [stateOptions, setStateOptions] = useState([]);\r\n    const [cityOptions, setCityOptions] = useState([]);\r\n\r\n    const APIKKey = \"AIzaSyDl22ksIKq0yqXNjnrmy_PYRKcZVbLwAns\";\r\n    const token = localStorage.getItem(\"accesstoken\");\r\n\r\n    const header = {\r\n        headers: {\r\n            Authorization: `Bearer ${token}`,\r\n            \"Content-Type\": \"application/json\",\r\n            Accept: \"application/json\",\r\n        },\r\n    }\r\n\r\n    const handleClear = () => {\r\n        setSelectedCountry(null)\r\n        setSelectedState(\"\")\r\n        setSelectedCity(\"\")\r\n        setZoomLevel(3);\r\n    };\r\n\r\n    const mapStyles = {\r\n        height: '500px',\r\n        width: '100%',\r\n    };\r\n\r\n    const handleMarkerClick = (data) => {\r\n        console.log(\"info\")\r\n    }\r\n\r\n    const defaultCenter = {  //delhi\r\n        lat: 28.6139,\r\n        lng: 77.2090,\r\n    };\r\n\r\n    const { isLoaded } = useJsApiLoader({ googleMapsApiKey: APIKKey });\r\n\r\n    const getCoordinates = async (country, state, city) => {\r\n        try {\r\n            // if (getPartnerName.BusinessUnit_City !== \"\" && state !== \"\" && city !== \"\") {\r\n            const address = `${searchedDatas.BusinessUnit_City}, ${searchedDatas.BusinessUnit_State}, ${searchedDatas.BusinessUnit_Country}`;\r\n            const response = await axios.get(\r\n                `https://api.opencagedata.com/geocode/v1/json?q=${encodeURIComponent(\r\n                    address\r\n                )}&key=6c3e49178d1f4cca84a003096c7e1911`\r\n            );\r\n            setLocationData(response?.data?.results[0]?.geometry);\r\n            console.log(\"GeoLocation\", response?.data?.results[0]?.geometry);\r\n            // }\r\n            // else {\r\n            //     console.log(\"Please Select selectedCountry selectedState selectedCity\");\r\n            // }\r\n        } catch (error) {\r\n            console.error('Error fetching coordinates:', error);\r\n            console.error(error.response.data);\r\n        }\r\n    };\r\n\r\n    console.log(selectedCountry, selectedState, selectedCity);\r\n\r\n    const centerPosition = { lat: locationData?.lat || defaultCenter.lat, lng: locationData?.lng || defaultCenter.lng };\r\n\r\n    const determineZoomLevel = (country, state, city) => {\r\n        console.log(\"countryyyyy\", country, state, city);\r\n        if (city !== null && state !== null && country !== null && city !== \"\" && state !== \"\" && country !== \"\") {\r\n            setZoomLevel(11);\r\n        } else if (state !== null && country !== null && state !== \"\" && country !== \"\") {\r\n            setZoomLevel(7);\r\n        } else if (country !== null && country !== \"\") {\r\n            setZoomLevel(4);\r\n        } else {\r\n            setZoomLevel(3);\r\n        }\r\n    };\r\n\r\n\r\n    useEffect(() => {\r\n        const statesOfCountry = State.getStatesOfCountry(selectedCountry?.isoCode);\r\n        setStateOptions(statesOfCountry);\r\n    }, [selectedCountry]);\r\n\r\n    useEffect(() => {\r\n        if (selectedCountry && selectedState) {\r\n            const citiesOfState = City.getCitiesOfState(\r\n                selectedCountry.isoCode,\r\n                selectedState.isoCode\r\n            );\r\n            setCityOptions(citiesOfState);\r\n        } else {\r\n            setCityOptions([]);\r\n        }\r\n    }, [selectedCountry, selectedState]);\r\n\r\n    // PartnerList\r\n    const getPartnerData = () => {\r\n        axios.get(`${BASE_URL}/Erpapp/Partnerlist/`, header)\r\n            .then((response) => {\r\n                console.log(\"sevity\", response.data.results);\r\n                setOwnerNames(response.data.results);\r\n            })\r\n            .catch((error) => {\r\n                console.log(error);\r\n            });\r\n    }\r\n    useEffect(() => {\r\n        getPartnerData();\r\n    }, []);\r\n\r\n    console.log(\"ZoomLevel\", zoomLevel);\r\n    console.log(\"ownerNames\", ownerNames);\r\n    return (\r\n        <JumboContentLayoutMain>\r\n            <Typography variant='h1'>Operations</Typography>\r\n            <Grid container spacing={2} sx={{ mt: 2, mb: 2 }}>\r\n                <Grid item className='row' xs={4}>\r\n                    <Typography className=\"col-md-4 input-label\">\r\n                        Choose a BU\r\n                    </Typography>\r\n                    <FormControl className=\"col-6\">\r\n                        <Autocomplete\r\n                            options={ownerNames}\r\n                            getOptionLabel={(option) => option?.Partner_Name || \"\"}\r\n                            value={ownerNames.find((option) => option?.Partner_Name === getPartnerName) || null}\r\n                            onChange={(e, newValue) => {\r\n                                setgetPartnerName(newValue?.Partner_Name)\r\n                                setSearchedDatas(newValue)\r\n                            }}\r\n                            renderInput={(params) => <TextField {...params} placeholder=\"Choose a BU\" />}\r\n                            className=\"search-select\"\r\n                        />\r\n                    </FormControl>\r\n                </Grid>\r\n                <Grid item className='row' xs={3}>\r\n                    <ButtonGroup\r\n                        aria-label=\"split button\"\r\n                        className=\"col-12\"\r\n                        onClick={() => {\r\n                            getCoordinates(selectedCountry, selectedState, selectedCity);\r\n                            determineZoomLevel(selectedCountry, selectedState, selectedCity)\r\n                        }\r\n                        }\r\n                        sx={{\r\n                            mt: { xs: 0.5, lg: 0 },\r\n                            mr: { xs: 0, md: 1 }\r\n                        }}\r\n                    >\r\n                        <Button className=\"plus-button\">\r\n                            Search\r\n                        </Button>\r\n                        <Button variant=\"contained\" className=\"icon-button\">\r\n                            <FaSearch size={18} />\r\n                        </Button>\r\n                    </ButtonGroup>\r\n                </Grid>\r\n            </Grid>\r\n\r\n            <Grid container spacing={2} sx={{ mb: 3, alignItems: 'center' }}>\r\n                <Grid item xs={6}>\r\n                    {isLoaded ?\r\n                        <Div>\r\n                            <GoogleMap mapContainerStyle={mapStyles} zoom={11} center={centerPosition}>\r\n                                {/* {\r\n                                        (selectedCity !== \"\" && selectedState !== \"\" && selectedCountry !== \"\") ? */}\r\n                                (<MarkerF\r\n                                    position={{ lat: locationData?.lat, lng: locationData?.lng }}\r\n                                    title={\"ERP\"}\r\n                                    // icon={<FaMapMarkerAlt />}\r\n                                    onClick={() => { handleMarkerClick() }}\r\n                                >\r\n                                </MarkerF>)\r\n                                {/* :\r\n                                            \"\"\r\n                                    } */}\r\n                            </GoogleMap>\r\n                        </Div>\r\n                        :\r\n                        <Div>\r\n                            <Box sx={{ display: 'flex', justifyContent: 'center' }}>\r\n                                <div class=\"spinner-grow text-info\" role=\"status\">\r\n                                    <span class=\"visually-hidden\">Loading...</span>\r\n                                </div>\r\n                            </Box>\r\n                        </Div>\r\n                    }\r\n                </Grid>\r\n                <Grid item xs={6}>\r\n                    <ResponsiveContainer width=\"100%\" height={200}>\r\n                        <BarChart data={data} margin={{ top: 0, right: 0, left: 0, bottom: 0 }}>\r\n                            <XAxis dataKey=\"month\" />\r\n                            <YAxis />\r\n                            <CartesianGrid strokeDasharray=\"3 3\" />\r\n                            <Tooltip labelStyle={{ color: 'black' }} itemStyle={{ color: 'black' }} cursor={false} />\r\n                            <Legend />\r\n                            <defs>\r\n                                <linearGradient id=\"Rent\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\r\n                                    <stop offset=\"5%\" stopColor=\"#B819D2\" stopOpacity={1} />\r\n                                    <stop offset=\"95%\" stopColor=\"#6200EE\" stopOpacity={1} />\r\n                                </linearGradient>\r\n                            </defs>\r\n                            <defs>\r\n                                <linearGradient id=\"Travel\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\r\n                                    <stop offset=\"5%\" stopColor=\"#9AF5FC\" stopOpacity={1} />\r\n                                    <stop offset=\"95%\" stopColor=\"#067F88\" stopOpacity={1} />\r\n                                </linearGradient>\r\n                            </defs>\r\n                            <defs>\r\n                                <linearGradient id=\"Entertainments\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\r\n                                    <stop offset=\"5%\" stopColor=\"#FD7CBE\" stopOpacity={1} />\r\n                                    <stop offset=\"95%\" stopColor=\"#BB0663\" stopOpacity={1} />\r\n                                </linearGradient>\r\n                            </defs>\r\n                            <defs>\r\n                                <linearGradient id=\"Gifts\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\r\n                                    <stop offset=\"5%\" stopColor=\"greenyellow\" stopOpacity={1} />\r\n                                    <stop offset=\"95%\" stopColor=\"green\" stopOpacity={1} />\r\n                                </linearGradient>\r\n                            </defs>\r\n                            <defs>\r\n                                <linearGradient id=\"OfficeSupplies\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\r\n                                    <stop offset=\"5%\" stopColor=\"#EAEAEA\" stopOpacity={1} />\r\n                                    <stop offset=\"95%\" stopColor=\"#9A9D9D\" stopOpacity={1} />\r\n                                </linearGradient>\r\n                            </defs>\r\n                            <Bar dataKey=\"Rent\" stackId=\"a\" fill=\"url(#Rent)\" />\r\n                            <Bar dataKey=\"Travel\" stackId=\"a\" fill=\"url(#Travel)\" />\r\n                            <Bar dataKey=\"Entertainments\" stackId=\"a\" fill=\"url(#Entertainments)\" />\r\n                            <Bar dataKey=\"Gifts\" stackId=\"a\" fill=\"url(#Gifts)\" />\r\n                            <Bar dataKey=\"OfficeSupplies\" stackId=\"a\" fill=\"url(#OfficeSupplies)\" />\r\n                        </BarChart>\r\n                    </ResponsiveContainer>\r\n                </Grid>\r\n            </Grid>\r\n\r\n        </JumboContentLayoutMain>\r\n    );\r\n}\r\n\r\nexport default Operations;","/**\n * @fileOverview Bar Chart\n */\nimport { generateCategoricalChart } from './generateCategoricalChart';\nimport { Bar } from '../cartesian/Bar';\nimport { XAxis } from '../cartesian/XAxis';\nimport { YAxis } from '../cartesian/YAxis';\nimport { formatAxisMap } from '../util/CartesianUtils';\nexport var BarChart = generateCategoricalChart({\n  chartName: 'BarChart',\n  GraphicalChild: Bar,\n  defaultTooltipEventType: 'axis',\n  validateTooltipEventTypes: ['axis', 'item'],\n  axisComponents: [{\n    axisType: 'xAxis',\n    AxisComp: XAxis\n  }, {\n    axisType: 'yAxis',\n    AxisComp: YAxis\n  }],\n  formatAxisMap: formatAxisMap\n});"],"names":["data","month","Rent","Travel","Entertainments","Gifts","OfficeSupplies","Operations","selectedMarker","setSelectedMarker","useState","datas","setDatas","latitude","setLatitude","longitude","setLongitude","locationData","setLocationData","selectedCountry","setSelectedCountry","selectedState","setSelectedState","selectedCity","setSelectedCity","zoomLevel","setZoomLevel","searchedDatas","setSearchedDatas","getPartnerName","setgetPartnerName","ownerNames","setOwnerNames","stateOptions","setStateOptions","cityOptions","setCityOptions","token","localStorage","getItem","header","headers","Authorization","concat","Accept","defaultCenter","isLoaded","useJsApiLoader","googleMapsApiKey","console","log","centerPosition","lat","lng","useEffect","statesOfCountry","State","isoCode","citiesOfState","City","getCitiesOfState","axios","BASE_URL","then","response","results","catch","error","_jsxs","JumboContentLayoutMain","children","_jsx","Typography","variant","Grid","container","spacing","sx","mt","mb","item","className","xs","FormControl","Autocomplete","options","getOptionLabel","option","Partner_Name","value","find","onChange","e","newValue","renderInput","params","TextField","_objectSpread","placeholder","ButtonGroup","onClick","determineZoomLevel","country","state","city","async","_response$data","_response$data$result","_response$data2","_response$data2$resul","address","BusinessUnit_City","BusinessUnit_State","BusinessUnit_Country","encodeURIComponent","geometry","getCoordinates","lg","mr","md","Button","FaSearch","size","alignItems","Div","GoogleMap","mapContainerStyle","height","width","zoom","center","MarkerF","position","title","Box","display","justifyContent","class","role","ResponsiveContainer","BarChart","margin","top","right","left","bottom","XAxis","dataKey","YAxis","CartesianGrid","strokeDasharray","Tooltip","labelStyle","color","itemStyle","cursor","Legend","id","x1","y1","x2","y2","offset","stopColor","stopOpacity","Bar","stackId","fill","generateCategoricalChart","chartName","GraphicalChild","defaultTooltipEventType","validateTooltipEventTypes","axisComponents","axisType","AxisComp","formatAxisMap"],"sourceRoot":""}