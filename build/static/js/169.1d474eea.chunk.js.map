{"version":3,"file":"static/js/169.1d474eea.chunk.js","mappings":"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","sources":["app/pages/ScrollToTop.js","app/pages/settings/Organization/ZoneLists.js","app/pages/settings/Organization/CityLists.js","app/pages/settings/Organization/StateLists.js","app/pages/TableStyled.js","app/services/common-services.js","app/shared/ReuseComponents/UpdatedHistoryRecords.js","app/pages/settings/Organization/Partner/CreatePartner.js","app/pages/settings/Organization/Partner/EditPartnerList.js","app/shared/ReuseComponents/HistoryOverview.js","app/pages/settings/Organization/Partner/partnerOverview.js","app/pages/settings/Organization/Partner/PartnerList.js","app/pages/settings/Organization/Store/CreateStore.js","app/services/dropdownapi-services.js","app/pages/settings/Organization/Store/ViewStoreSettings.js","app/pages/settings/Organization/Store/StoreList.js","app/pages/settings/Organization/OrganizationStructure.js","app/pages/settings/Setting.js","app/pages/useResponsive.js","app/schemas/SettingValidationSchemas.js","app/shared/ReuseComponents/ErpDialogBoxes.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { FaArrowCircleUp } from 'react-icons/fa';\r\nimport useResponsive from './useResponsive';\r\n\r\nconst ScrollToTop = ({ Scrollheight }) => {\r\n  const [isVisible, setIsVisible] = useState(false);\r\n  const isAboveXl = useResponsive(\"up\", \"xl\");\r\n\r\n  const handleScroll = () => {\r\n    if (window.scrollY > Scrollheight) {\r\n      setIsVisible(true);\r\n    } else {\r\n      setIsVisible(false);\r\n    }\r\n  };\r\n\r\n  const scrollToTopHandler = () => {\r\n    window.scrollTo({\r\n      top: 0,\r\n      behavior: 'smooth',\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    window.addEventListener('scroll', handleScroll);\r\n\r\n    return () => {\r\n      window.removeEventListener('scroll', handleScroll);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        display: isVisible ? 'flex' : 'none',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        position: 'fixed',\r\n        bottom: isAboveXl ? \"10%\" : \"10.5%\",\r\n        right: '10px',\r\n        zIndex: 99999,\r\n        borderRadius: '50%',\r\n        boxShadow: '0px 2px 9px lightgray',\r\n        padding: 0.5,\r\n        width: '35px',\r\n        height: '35px',\r\n        backgroundColor: 'white',\r\n        color: '#00bfff',\r\n        transition: 'linear 1.5s ease-in-out',\r\n        cursor: 'pointer',\r\n      }}\r\n      onClick={scrollToTopHandler}\r\n      className=\"topToBottomAnimation\"\r\n    >\r\n      <FaArrowCircleUp size={22} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ScrollToTop;\r\n","import Div from \"@jumbo/shared/Div\";\r\nimport {\r\n  Autocomplete,\r\n  Button,\r\n  ButtonGroup,\r\n  Dialog,\r\n  DialogContent,\r\n  FormControl,\r\n  FormControlLabel,\r\n  Grid,\r\n  Radio,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TableRow,\r\n  TextField,\r\n  Typography,\r\n} from \"@mui/material\";\r\nimport axios from \"axios\";\r\nimport React, { useContext, useEffect, useState } from \"react\";\r\nimport { DataContext } from \"./OrganizationStructure\";\r\nimport { toast } from \"react-toastify\";\r\nimport { BASE_URL } from \"app/services/auth-services\";\r\nimport JumboScrollbar from \"@jumbo/components/JumboScrollbar\";\r\nimport { FaSave } from \"react-icons/fa\";\r\nimport { TiCancel } from \"react-icons/ti\";\r\nimport { ErpActionButton, ErpCreateButton } from \"app/shared/ReuseComponents/ButtonComponent\";\r\n\r\n\r\nconst ZoneLists = (scrollHeight) => {\r\n  const { name1, name3, name4, cities, zones, getId4, getId6, setGetId6, setName6, getZoneDatas, getId5, name5, checkId7, setCheckId7, userRolePermissions, currentData, setCurrentData } = useContext(DataContext);\r\n\r\n  const token = localStorage.getItem(\"accesstoken\");\r\n\r\n  const header = {\r\n    headers: {\r\n      Authorization: `Bearer ${token}`,\r\n      \"Content-Type\": \"application/json\",\r\n      Accept: \"application/json\",\r\n    },\r\n  };\r\n\r\n\r\n  const [partners, setPartners] = useState([]);\r\n\r\n\r\n  const [open, setOpen] = useState(false);\r\n  const [showSave, setShowSave] = useState(false);\r\n  const [cityName, setCityName] = useState({\r\n    City_Name: name4\r\n  });\r\n  const [businessUnit, setBusinessUnit] = useState(name5);\r\n  const [zoneLists, setZoneLists] = useState([]);\r\n  const [zoneName, setZoneName] = useState();\r\n  const [pincode, setPincode] = useState(\"\");\r\n  const [cityId, setCityId] = useState(getId4);\r\n  const [errors, setErrors] = useState({});\r\n\r\n\r\n  const handleAddZones = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n    setZoneName(\"\");\r\n    // setCityName(\"\");\r\n    // setBusinessUnit(\"\");\r\n    setPincode(\"\");\r\n    setErrors({});\r\n  };\r\n\r\n  const handleCheckZone = async () => {\r\n    try {\r\n      console.log(\"pin\", pincode);\r\n      const response = await axios.get(`${BASE_URL}/Erpapp/PincodeCRUD/?pincode=${pincode}`, header);\r\n      const dataResponse = response?.data;\r\n      console.log(\"PincodeCRUD\", response?.data);\r\n\r\n      const normalizeCityName = (cityName) => {\r\n        let normalized = cityName?.toLowerCase().replace(/\\s/g, '');\r\n        normalized = normalized?.normalize('NFD').replace(/[\\u0300-\\u036f]/g, '');\r\n\r\n        return normalized;\r\n      };\r\n\r\n      const isValidPincode = dataResponse?.some((opt) => {\r\n        const normalizedCityName = normalizeCityName(opt?.cityname);\r\n        const normalizedSearchName = normalizeCityName(cityName?.City_Name);\r\n\r\n        return normalizedCityName === normalizedSearchName;\r\n      });\r\n\r\n      console.log(\"isValidPincode\", isValidPincode, dataResponse);\r\n      if (dataResponse?.length > 0) {\r\n        toast.success(\"Pincode is valid\");\r\n        setZoneLists(dataResponse);\r\n        getZoneDatas();\r\n        setShowSave(true);\r\n      } else {\r\n        toast.error(\"The provided pincode doesn't exist in the city.\");\r\n        setZoneLists([]);\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n      setZoneName(\"\");\r\n      setCityName(\"\");\r\n      setBusinessUnit(\"\");\r\n      setPincode(\"\");\r\n      setErrors({});\r\n\r\n      // Show error message\r\n      toast.error(\"Please enter a valid pincode\");\r\n    }\r\n  };\r\n\r\n\r\n\r\n  // const handleCheckZone = async () => {\r\n  //   console.log(\"pin\", pincode);\r\n  //   axios\r\n  //     .get(`https://api.postalpincode.in/pincode/${pincode}`)\r\n  //     .then((res) => {\r\n  //       console.log(\"pinCodes\", res?.data);\r\n  //       if (res?.data) {\r\n  //         res?.data?.map((item) => {\r\n  //           let postOffice = item?.PostOffice\r\n  //           setZoneName(postOffice)\r\n  //         })\r\n  //       }\r\n  //       if (res.data.cityname.toLowerCase() === name4.toLowerCase()) {\r\n  //         toast.success(\"Pincode is valid\");\r\n  //       } else {\r\n  //         toast.error(\"Pincode is Already Exists\");\r\n  //       }\r\n  //     })\r\n  //     .catch((error) => {\r\n  //       console.log(error);\r\n  //       toast.error(\"Please enter a valid pincode\");\r\n  //     });\r\n  //   // let API_KEY = '65afa4042e767571080003lgca37daa'\r\n  //   // await axios.get(`https://app.zipcodebase.com/landing_demo/?codes=${pincode}&country=&api_key=${API_KEY}`).then((res) => {\r\n  //   //   console.log(\"PPPP...\", res)\r\n  //   //   let result = res.data.results[pincode]?.filter((opt) => opt.province === cityName?.City_Name) || [];\r\n  //   //   if (result) {\r\n  //   //     console.log(\"result\", result)\r\n  //   //     setZoneLists(result);\r\n  //   //     getZoneDatas();\r\n  //   //     setShowSave(true);\r\n  //   //     toast.success(\"Pincode is valid\")\r\n  //   //   }else{\r\n  //   //     toast.error(\"Please enter a valid pincode\");\r\n  //   //   }\r\n  //   // }).catch((error) => {\r\n  //   //   console.log(error);\r\n  //   //   toast.error(error.message);\r\n  //   // })\r\n  // };\r\n\r\n  // Regular Expression\r\n  const validate = () => {\r\n    let error = {};\r\n\r\n    if (pincode === \"\" || pincode === null || pincode === undefined) {\r\n      error.pincode = \"Pin Code is required\"\r\n    }\r\n    if (zoneName === \"\" || zoneName === null || zoneName === undefined) {\r\n      error.zoneName = \"Zone Name is required\"\r\n    }\r\n\r\n    return error;\r\n  };\r\n\r\n  const handleCreateZone = (e) => {\r\n    e.preventDefault();\r\n\r\n    let validForm = validate();\r\n    setErrors(validForm);\r\n\r\n    if (Object.keys(validForm).length === 0) {\r\n      if (currentData?.id !== undefined) {\r\n        var zonepayload = {\r\n          ...currentData,\r\n          Zone_Name: zoneName,\r\n          Pincode: pincode,\r\n          City_Id: cityId,\r\n          Zone_Type_Code: 6,\r\n          Partner_Id: getId5,\r\n          Company_Id: parseInt(localStorage.getItem(\"OrganizationId\")),\r\n          Created_By: parseInt(localStorage.getItem(\"UserId\")),\r\n          Updated_By: parseInt(localStorage.getItem(\"UserId\")),\r\n        };\r\n        axios\r\n          .put(`${BASE_URL}/Erpapp/ZoneDetailsCRUD/`, zonepayload, header)\r\n          .then((res) => {\r\n            console.log(res?.data);\r\n            if (res?.data?.id) {\r\n              toast.success(\"Zone updated successfully\");\r\n              getZoneDatas();\r\n              setOpen(false);\r\n            }\r\n          })\r\n          .catch((error) => {\r\n            console.log(error);\r\n          });\r\n      } else {\r\n        var zonepayload = {\r\n          Zone_Name: zoneName,\r\n          Pincode: pincode,\r\n          City_Id: cityId,\r\n          Zone_Type_Code: 6,\r\n          Partner_Id: getId5,\r\n          Company_Id: parseInt(localStorage.getItem(\"OrganizationId\")),\r\n          Created_By: parseInt(localStorage.getItem(\"UserId\")),\r\n          Updated_By: parseInt(localStorage.getItem(\"UserId\")),\r\n        };\r\n        axios\r\n          .post(`${BASE_URL}/Erpapp/ZoneDetailsCRUD/`, zonepayload, header)\r\n          .then((res) => {\r\n            console.log(res?.data);\r\n            if (res?.data?.id) {\r\n              toast.success(\"Zone created successfully\");\r\n              getZoneDatas();\r\n              setZoneName(\"\");\r\n              setPincode(\"\");\r\n              setBusinessUnit(\"\");\r\n              setCityName(\"\");\r\n              setErrors({});\r\n              setOpen(false);\r\n            }\r\n          })\r\n          .catch((error) => {\r\n            console.log(error);\r\n            toast.error(\"Zone name is already exists\");\r\n          });\r\n      }\r\n    }\r\n  };\r\n\r\n\r\n  // GetPartners\r\n  const getPartners = async () => {\r\n    await axios.get(`${BASE_URL}/Erpapp/citywisepartner/?BusinessUnit_City=${cityName?.City_Name}`, header)\r\n      .then((response) => {\r\n        console.log(\"Partner Response\", response?.data);\r\n        const names = response?.data;\r\n        setPartners(names);\r\n      }).catch((error) => {\r\n        console.log(error);\r\n      })\r\n  }\r\n\r\n\r\n  useEffect(() => {\r\n    getPartners();\r\n  }, [cityName]);\r\n\r\n\r\n  // edit a zone\r\n  const editZoneById = async (id) => {\r\n    setCurrentData(id);\r\n    await axios.get(`${BASE_URL}/Erpapp/ZoneDetailsCRUD/?id=${id?.id}`, header)\r\n      .then((res) => {\r\n        console.log(res.data);\r\n        if (res?.status === 200) {\r\n          setPincode(res?.data?.Pincode);\r\n          setZoneName(res?.data?.Zone_Name);\r\n          setShowSave(true);\r\n        } else {\r\n          toast.error(res.message)\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n    setOpen(true);\r\n  }\r\n\r\n\r\n  // delete a zone \r\n  const deleteZoneById = async (id) => {\r\n    await axios.delete(`${BASE_URL}/Erpapp/ZoneDetailsCRUD/?id=${id}`, header)\r\n      .then((res) => {\r\n        console.log(res?.data);\r\n        if (res?.status === 200 && res?.data?.id) {\r\n          toast.success(\"Zone deleted successfully\");\r\n          getZoneDatas();\r\n        } else {\r\n          toast.error(res.message)\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n        toast.error(error.message);\r\n      });\r\n  }\r\n\r\n\r\n\r\n\r\n  return (\r\n    <>\r\n      <Div>\r\n        <Div\r\n          className=\"card\"\r\n          sx={{ p: 2, borderRadius: 0, m: 0 }}\r\n        >\r\n          <Div\r\n            sx={{\r\n              position: \"absolute\",\r\n              right: 15,\r\n              // width: \"100%\",\r\n              display: \"flex\",\r\n              justifyContent: \"flex-end\"\r\n            }}\r\n          >\r\n            {Array.isArray(userRolePermissions) && userRolePermissions.includes(201) && (\r\n              <ErpCreateButton handleClick={handleAddZones} name={\"Add Zone\"} />\r\n            )}\r\n          </Div>\r\n          <br />\r\n\r\n          <Div sx={{ mt: { lg: 3, md: 5, xs: 5 }, minHeight: \"300px\" }}>\r\n            <JumboScrollbar\r\n              autoHeight={true}\r\n              autoHideTimeout={4000}\r\n              autoHeightMin={scrollHeight ? scrollHeight : 300}\r\n              autoHide={true}\r\n              hideTracksWhenNotNeeded\r\n              id=\"no-more-tables\"\r\n            >\r\n              <Table stickyHeader className=\"table table-borderless\">\r\n                <TableHead className=\"table-head\">\r\n                  <TableRow>\r\n                    <TableCell></TableCell>\r\n                    <TableCell sx={{ fontWeight: 600 }}>Pincode</TableCell>\r\n                    <TableCell sx={{ fontWeight: 600 }}>Zone Name</TableCell>\r\n                    <TableCell sx={{ fontWeight: 600 }}>City Name</TableCell>\r\n                    <TableCell sx={{ fontWeight: 600 }}>Action</TableCell>\r\n                  </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                  {zones?.filter((opt) => opt?.Partner_Id === getId5).length > 0 ? zones?.filter((opt) => opt.Partner_Id === getId5).map((zone) => {\r\n                    return (\r\n                      <TableRow key={zone?.id}>\r\n                        <TableCell padding=\"checkbox\" data-title=\"Status\">\r\n                          <FormControlLabel\r\n                            control={\r\n                              <Radio\r\n                                color=\"primary\"\r\n                                size=\"small\"\r\n                                checked={getId6 === zone?.id}\r\n                                value={zone?.id}\r\n                                onChange={(e) => {\r\n                                  console.log(\"e.target.value\", e.target.value, getId6)\r\n                                  setCheckId7(e.target.value);\r\n                                  setGetId6(zone?.id);\r\n                                  setName6(zone?.Zone_Name);\r\n                                }}\r\n                              />\r\n                            }\r\n                          />\r\n                        </TableCell>\r\n                        <TableCell data-title=\"Pincode\">{zone?.Pincode}</TableCell>\r\n                        <TableCell data-title=\"Zone Name\">{zone?.Zone_Name}</TableCell>\r\n                        <TableCell data-title=\"City Name\">{name4}</TableCell>\r\n                        <TableCell data-title=\"Action\">\r\n                          <ErpActionButton userRolePermissions={userRolePermissions} editPermissionId={202} deletePermissionId={204} onClickEdit={() => editZoneById(zone)} onClickDelete={() => deleteZoneById(zone?.id)} align=\"left\" />\r\n                        </TableCell>\r\n                      </TableRow>\r\n                    );\r\n                  }) : (\r\n                    <TableRow>\r\n                      <TableCell colSpan={10} sx={{ textAlign: \"center\" }}>No Records</TableCell>\r\n                    </TableRow>\r\n                  )}\r\n                </TableBody>\r\n              </Table>\r\n            </JumboScrollbar>\r\n          </Div>\r\n        </Div>\r\n\r\n        {/* create a zone */}\r\n        <Dialog\r\n          open={open}\r\n          aria-labelledby=\"alert-dialog-title\"\r\n          aria-describedby=\"alert-dialog-description\"\r\n        >\r\n          <form onSubmit={handleCreateZone}>\r\n            <DialogContent>\r\n              <Grid container>\r\n                <Grid item xs={12}>\r\n                  <Typography className=\"col-12 input-label\">\r\n                    City Name <span className=\"required\">*</span>\r\n                  </Typography>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                  <FormControl className=\"col-12\">\r\n                    <Autocomplete\r\n                      className={`search-select col-12 ${errors.cityName ? \"is-invalid\" : \"\"\r\n                        }`}\r\n                      id=\"free-solo-demo\"\r\n                      name=\"cityName\"\r\n                      options={cities?.map((city) => city)}\r\n                      getOptionLabel={(option) => {\r\n                        if (typeof option === \"string\") {\r\n                          return option;\r\n                        }\r\n                        if (option && option?.City_Name) {\r\n                          return option?.City_Name;\r\n                        }\r\n                        return \"\";\r\n                      }}\r\n                      value={cityName?.City_Name}\r\n                      onChange={(e, newValue) => {\r\n                        setCityName(newValue);\r\n                        setCityId(newValue?.id);\r\n                      }}\r\n                      isOptionEqualToValue={(option, value) => option?.City_Name === value}\r\n                      sx={{\r\n                        minWidth: { xs: \"100%\" },\r\n                        maxWidth: \"1005px\",\r\n                      }}\r\n                      renderInput={(params) => (\r\n                        <TextField\r\n                          {...params}\r\n                          placeholder=\"City Name\"\r\n                          variant=\"outlined\"\r\n                          autoComplete=\"off\"\r\n                        />\r\n                      )}\r\n                    />\r\n                  </FormControl>\r\n                  <Div style={{ color: \"red\" }}>\r\n                    {errors.cityName}\r\n                  </Div>\r\n                </Grid>\r\n\r\n                <Grid item xs={12}>\r\n                  <Typography className=\"col-12 input-label\">\r\n                    Business Unit <span className=\"required\">*</span>\r\n                  </Typography>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                  <FormControl className=\"col-12\">\r\n                    <Autocomplete\r\n                      className=\"search-select col-12\"\r\n                      id=\"free-solo-demo\"\r\n                      name=\"businessUnit\"\r\n                      options={partners}\r\n                      getOptionLabel={(option) => {\r\n                        if (typeof option === \"string\") {\r\n                          return option;\r\n                        }\r\n                        if (option && option?.Partner_Name) {\r\n                          return option?.Partner_Name;\r\n                        }\r\n                        return \"\";\r\n                      }}\r\n                      value={businessUnit}\r\n                      onChange={(e, newValue) => {\r\n                        setBusinessUnit(newValue);\r\n                      }}\r\n                      isOptionEqualToValue={(option, value) => option?.Partner_Name === value}\r\n                      sx={{\r\n                        minWidth: { xs: \"100%\" },\r\n                        maxWidth: \"1005px\",\r\n                      }}\r\n                      renderInput={(params) => (\r\n                        <TextField\r\n                          {...params}\r\n                          placeholder=\"Business Unit\"\r\n                          variant=\"outlined\"\r\n                          autoComplete=\"off\"\r\n                        />\r\n                      )}\r\n                    />\r\n                  </FormControl>\r\n                </Grid>\r\n\r\n                <Grid item xs={12}>\r\n                  <Typography className=\"col-12 input-label\">\r\n                    Pincode <span className=\"required\">*</span>\r\n                  </Typography>\r\n                </Grid>\r\n                <Grid item xs={12} md={9}>\r\n                  <TextField\r\n                    className={`input-box col-10 ${errors.pincode ? \"is-invalid\" : \"\"\r\n                      }`}\r\n                    id=\"outlined-basic\"\r\n                    placeholder=\"Enter the pincode\"\r\n                    variant=\"outlined\"\r\n                    name=\"pincode\"\r\n                    value={pincode}\r\n                    onChange={(e) => {\r\n                      console.log(\"outlined\", e.target.value)\r\n                      setPincode(e.target.value);\r\n                    }}\r\n                    autoComplete=\"off\"\r\n                    sx={{\r\n                      minWidth: { xs: \"100%\" },\r\n                      maxWidth: \"1005px\",\r\n                    }}\r\n                  />\r\n                  <Div style={{ color: \"red\" }}>\r\n                    {errors.pincode}\r\n                  </Div>\r\n                </Grid>\r\n                <Grid\r\n                  item\r\n                  xs={12}\r\n                  md={2}\r\n                  sx={{ ml: { md: 4 }, mt: { xs: 2, md: 0 } }}\r\n                >\r\n                  <Button className=\"save-button\" onClick={handleCheckZone}>\r\n                    Check\r\n                  </Button>\r\n                </Grid>\r\n\r\n                <Grid item xs={12}>\r\n                  <Typography className=\"col-12 input-label\">\r\n                    Zone Name <span className=\"required\">*</span>\r\n                  </Typography>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                  {/* <TextField\r\n                      className={`input-box col-12 ${errors.zoneName ? \"is-invalid\" : \"\"\r\n                        }`}\r\n                      id=\"outlined-basic\"\r\n                      placeholder=\"Enter the zone name\"\r\n                      variant=\"outlined\"\r\n                      {...register(\"zoneName\")}\r\n                      name=\"zoneName\"\r\n                      value={zoneName}\r\n                      onChange={(e) => setZoneName(e.target.value)}\r\n                      autoComplete=\"off\"\r\n                      sx={{\r\n                        minWidth: { xs: \"100%\" },\r\n                        maxWidth: \"1005px\",\r\n                      }}\r\n                    /> */}\r\n                  <FormControl className=\"col-12\">\r\n                    <Autocomplete\r\n                      className={`search-select col-12 ${errors.zoneName ? \"is-invalid\" : \"\"\r\n                        }`}\r\n                      id=\"free-solo-demo\"\r\n                      name=\"zoneName\"\r\n                      options={zoneLists?.map((zone) => zone)}\r\n                      getOptionLabel={(option) => {\r\n                        if (typeof option === \"string\") {\r\n                          return option;\r\n                        }\r\n                        if (option && option?.Zonename) {\r\n                          return option?.Zonename;\r\n                        }\r\n                        return \"\";\r\n                      }}\r\n                      value={zoneName}\r\n                      onChange={(e, newValue) => {\r\n                        setZoneName(newValue?.Zonename);\r\n                      }}\r\n                      isOptionEqualToValue={(option, value) => option?.Zonename === value}\r\n                      sx={{\r\n                        minWidth: { xs: \"100%\" },\r\n                        maxWidth: \"1005px\",\r\n                      }}\r\n                      renderInput={(params) => (\r\n                        <TextField\r\n                          {...params}\r\n                          placeholder=\"Enter the zone name\"\r\n                          variant=\"outlined\"\r\n                          autoComplete=\"off\"\r\n                        />\r\n                      )}\r\n                    />\r\n                  </FormControl>\r\n                  <Div style={{ color: \"red\" }}>\r\n                    {errors.zoneName}\r\n                  </Div>\r\n                </Grid>\r\n              </Grid>\r\n            </DialogContent>\r\n            {/* code for save and cancel button */}\r\n            <Div className=\"buttons\" sx={{\r\n              mt: 5, mb: 3, display: \"flex\",\r\n              justifyContent: \"center\"\r\n            }}>\r\n              <ButtonGroup\r\n                aria-label=\"split button\"\r\n                type=\"submit\"\r\n                color=\"primary\"\r\n                // loading={isSubmitting}\r\n                disabled={showSave ? false : true}\r\n                sx={{\r\n                  mt: { xs: 0.5, lg: 0 },\r\n                  mr: { xs: 0, md: 1 },\r\n                }}\r\n              >\r\n                <Button type=\"submit\" className=\"plus-button\" sx={{ width: { md: \"99px !important\" } }}>\r\n                  {currentData?.id !== undefined ? \"Update\" : \"Save\"}\r\n                </Button>\r\n                <Button variant=\"contained\" className=\"icon-button\">\r\n                  <FaSave size={18} />\r\n                </Button>\r\n              </ButtonGroup>\r\n\r\n              <ButtonGroup\r\n                aria-label=\"split button\"\r\n                onClick={handleClose}\r\n                sx={{\r\n                  mt: { xs: 0.5, lg: 0 },\r\n                  mr: { xs: 0, md: 1 }\r\n                }}\r\n              >\r\n                <Button className=\"plus-button\" sx={{ width: { md: \"99px !important\" } }}>Cancel</Button>\r\n                <Button variant=\"contained\" className=\"icon-button\">\r\n                  <TiCancel size={20} />\r\n                </Button>\r\n              </ButtonGroup>\r\n            </Div>\r\n          </form>\r\n        </Dialog>\r\n      </Div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ZoneLists;","import Div from \"@jumbo/shared/Div\";\r\nimport {\r\n  Autocomplete,\r\n  Button,\r\n  ButtonGroup,\r\n  Dialog,\r\n  DialogActions,\r\n  DialogContent,\r\n  FormControl,\r\n  FormControlLabel,\r\n  Grid,\r\n  Radio,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TableRow,\r\n  TextField,\r\n  Typography,\r\n} from \"@mui/material\";\r\nimport axios from \"axios\";\r\nimport React, { useContext, useEffect, useState } from \"react\";\r\nimport { DataContext } from \"./OrganizationStructure\";\r\nimport { toast } from \"react-toastify\";\r\nimport { BASE_URL } from \"app/services/auth-services\";\r\nimport JumboScrollbar from \"@jumbo/components/JumboScrollbar\";\r\nimport { FaSave } from \"react-icons/fa\";\r\nimport { TiCancel } from \"react-icons/ti\";\r\nimport { handleError } from \"app/pages/auth-pages/login/AuthGuard\";\r\nimport { ErpActionButton, ErpCreateButton } from \"app/shared/ReuseComponents/ButtonComponent\";\r\n\r\n\r\n\r\nconst CityLists = (scrollHeight) => {\r\n  const {\r\n    entities,\r\n    countries,\r\n    regions,\r\n    states,\r\n    cities,\r\n    id,\r\n    id1,\r\n    id2,\r\n    id3,\r\n    name,\r\n    name1,\r\n    name2,\r\n    name3,\r\n    setName4,\r\n    checkId5,\r\n    setCheckId5,\r\n    getId,\r\n    getId1,\r\n    getId2,\r\n    getId3,\r\n    setGetId4,\r\n    getCityDatas,\r\n    getStates,\r\n    userRolePermissions,\r\n    currentData,\r\n    setCurrentData\r\n  } = useContext(DataContext);\r\n\r\n\r\n  const token = localStorage.getItem(\"accesstoken\");\r\n\r\n  const header = {\r\n    headers: {\r\n      Authorization: `Bearer ${token}`,\r\n      \"Content-Type\": \"application/json\",\r\n      Accept: \"application/json\",\r\n    },\r\n  };\r\n\r\n\r\n  const [open, setOpen] = React.useState(false);\r\n  const [entityName, setEntityName] = useState({\r\n    id: getId,\r\n    Entity_Name: name,\r\n  });\r\n  const [countryName, setCountryName] = useState({\r\n    id: getId1,\r\n    Country_Name: name1,\r\n  });\r\n  const [regionName, setRegionName] = useState({\r\n    id: getId2,\r\n    Region_Name: name2,\r\n  });\r\n  const [stateName, setStateName] = useState({\r\n    id: getId3,\r\n    State_Name: name3,\r\n  });\r\n  const [cityId, setCityId] = useState();\r\n  const [cityName, setCityName] = useState(\"\");\r\n  const [cityDescription, setCityDescription] = useState(\"\");\r\n  const [errors, setErrors] = useState({});\r\n\r\n  const [cityLists, setCityLists] = useState([]);\r\n\r\n  const handleAddCity = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n    setCityName(\"\");\r\n    setCityDescription(\"\");\r\n    setErrors({});\r\n  };\r\n\r\n  const getCityLists = () => {\r\n    var payload = {\r\n      country: countryName?.Country_Name,\r\n      state: stateName?.State_Name,\r\n    };\r\n\r\n    axios\r\n      .post(\r\n        `https://countriesnow.space/api/v0.1/countries/state/cities`,\r\n        payload,\r\n        {\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            Accept: \"application/json\",\r\n          },\r\n        }\r\n      )\r\n      .then((res) => {\r\n        console.log(res?.data);\r\n        var city = res?.data?.data;\r\n        var citynames = city?.map((cityname) => {\r\n          const normalizedCity = cityname.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\r\n          if (normalizedCity === \"Naini Tal\") {\r\n            return normalizedCity.replace(\" \", \"\");\r\n          }\r\n          return normalizedCity;\r\n        });\r\n        setCityLists(citynames);\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"ds\", error);\r\n      });\r\n  };\r\n\r\n\r\n  useEffect(() => {\r\n    const currentValue = cities?.filter((opt, index) => index + 1 === cities?.length)[0]?.City_Id\r\n    const numericPart = parseInt(currentValue, 10) + 1;\r\n    const paddedValue = numericPart.toString().padStart(currentValue?.length, '0');\r\n    console.log(\"data\", paddedValue)\r\n    setCityId(paddedValue);\r\n  }, [cityName]);\r\n\r\n\r\n  // Regular Expression\r\n  const validate = () => {\r\n    let error = {};\r\n\r\n    if (cityName === \"\" || cityName === null || cityName === undefined) {\r\n      error.cityName = \"City Name is required\"\r\n    }\r\n    if (cityDescription === \"\" || cityDescription === null || cityDescription === undefined) {\r\n      error.cityDescription = \"City Description is required\"\r\n    }\r\n\r\n    return error;\r\n  };\r\n\r\n  const handleCreateCity = (e) => {\r\n    e.preventDefault();\r\n    let validForm = validate();\r\n    setErrors(validForm);\r\n\r\n    if (Object.keys(validForm).length === 0) {\r\n      if (currentData?.id !== undefined) {\r\n        var citypayload = {\r\n          ...currentData,\r\n          Entity_Id: parseInt(entityName?.id),\r\n          Country_Id: parseInt(countryName?.id),\r\n          Region_Id: parseInt(regionName?.id),\r\n          State_Id: parseInt(stateName?.id),\r\n          City_Name: cityName,\r\n          City_Description: cityDescription,\r\n          // City_Type_Code: parseInt(`${id}${id1}${id2}${id3}${cityId}`),\r\n          City_Type_Code: parseInt(`${id}${id1}${id2}${id3}`),\r\n          Company_Id: parseInt(localStorage.getItem(\"OrganizationId\")),\r\n          Created_By: parseInt(localStorage.getItem(\"UserId\")),\r\n          Updated_By: parseInt(localStorage.getItem(\"UserId\")),\r\n        };\r\n        axios\r\n          .put(`${BASE_URL}/Erpapp/CityDetailsCRUD/`, citypayload, header)\r\n          .then((res) => {\r\n            console.log(res?.data);\r\n            if (res?.data?.id) {\r\n              toast.success(\"City updated successfully\");\r\n              setOpen(false);\r\n              getCityDatas();\r\n            } else {\r\n              toast.error(res.message);\r\n            }\r\n          })\r\n          .catch((error) => {\r\n            console.log(error);\r\n            handleError(error);\r\n            // toast.error(\"City name is already exists\");\r\n          });\r\n      } else {\r\n        var citypayload = {\r\n          Entity_Id: parseInt(entityName?.id),\r\n          Country_Id: parseInt(countryName?.id),\r\n          Region_Id: parseInt(regionName?.id),\r\n          State_Id: parseInt(stateName?.id),\r\n          City_Name: cityName,\r\n          City_Description: cityDescription,\r\n          // City_Type_Code: parseInt(`${id}${id1}${id2}${id3}${cityId}`),\r\n          City_Type_Code: parseInt(`${id}${id1}${id2}${id3}`),\r\n          Company_Id: parseInt(localStorage.getItem(\"OrganizationId\")),\r\n          Created_By: parseInt(localStorage.getItem(\"UserId\")),\r\n          Updated_By: parseInt(localStorage.getItem(\"UserId\")),\r\n        };\r\n        axios\r\n          .post(`${BASE_URL}/Erpapp/CityDetailsCRUD/`, citypayload, header)\r\n          .then((res) => {\r\n            console.log(res?.data);\r\n            if (res?.status === 201 && res?.data?.id) {\r\n              toast.success(\"City created successfully\");\r\n              setOpen(false);\r\n              getCityDatas();\r\n              setCityName(\"\");\r\n              setCityDescription(\"\");\r\n              setErrors({});\r\n            } else {\r\n              toast.error(res.message);\r\n            }\r\n          })\r\n          .catch((error) => {\r\n            console.log(error);\r\n            handleError(error);\r\n            // toast.error(\"City name is already exists\");\r\n          });\r\n      }\r\n    }\r\n  };\r\n\r\n\r\n  // edit a city\r\n  const editCityById = async (id) => {\r\n    setCurrentData(id);\r\n    setOpen(true);\r\n\r\n    await axios.get(`${BASE_URL}/Erpapp/CityDetailsCRUD/?id=${id?.id}`, header)\r\n      .then((res) => {\r\n        console.log(res?.data);\r\n        if (res?.status === 200) {\r\n          setCityName(res?.data?.City_Name);\r\n          setCityDescription(res?.data?.City_Description);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  }\r\n\r\n\r\n\r\n  // delete a city \r\n  const deleteCityById = async (id) => {\r\n    await axios.delete(`${BASE_URL}/Erpapp/CityDetailsCRUD/?id=${id}`, header)\r\n      .then((res) => {\r\n        console.log(res?.data);\r\n        if (res?.status === 200 && res?.data?.id) {\r\n          toast.success(\"City deleted successfully\");\r\n          getCityDatas();\r\n        } else {\r\n          toast.error(res.message)\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n        toast.error(error.message);\r\n      });\r\n  }\r\n\r\n\r\n  return (\r\n    <>\r\n      <Div\r\n        className=\"card\"\r\n        sx={{ p: 2, borderRadius: 0, m: 0 }}\r\n      >\r\n        <Div\r\n          sx={{\r\n            position: \"absolute\",\r\n            right: 15,\r\n            // width: \"100%\",\r\n            display: \"flex\",\r\n            justifyContent: \"flex-end\"\r\n          }}\r\n        >\r\n          {Array.isArray(userRolePermissions) && userRolePermissions.includes(69) && (\r\n            <ErpCreateButton handleClick={handleAddCity} name={\"Add City\"} />\r\n          )}\r\n        </Div>\r\n        <br />\r\n\r\n        <Div sx={{ mt: { lg: 3, md: 5, xs: 5 }, minHeight: \"300px\" }}>\r\n          <JumboScrollbar\r\n            autoHeight={true}\r\n            autoHideTimeout={4000}\r\n            autoHeightMin={scrollHeight ? scrollHeight : 300}\r\n            autoHide={true}\r\n            hideTracksWhenNotNeeded\r\n            id=\"no-more-tables\"\r\n          >\r\n            <Table stickyHeader className=\"table table-borderless\">\r\n              <TableHead className=\"table-head\">\r\n                <TableRow>\r\n                  <TableCell></TableCell>\r\n                  <TableCell sx={{ fontWeight: 600 }}>Code</TableCell>\r\n                  <TableCell sx={{ fontWeight: 600 }}>Name</TableCell>\r\n                  <TableCell sx={{ fontWeight: 600 }}>Description</TableCell>\r\n                  <TableCell sx={{ fontWeight: 600 }}>Action</TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {cities?.map((city) => {\r\n                  return (\r\n                    <TableRow>\r\n                      <TableCell padding=\"checkbox\" data-title=\"Status\">\r\n                        <FormControlLabel\r\n                          control={\r\n                            <Radio\r\n                              color=\"primary\"\r\n                              size=\"small\"\r\n                              checked={checkId5 === city?.City_Id}\r\n                              value={city?.City_Id}\r\n                              onChange={(e) => {\r\n                                setCheckId5(e.target.value);\r\n                                setGetId4(city?.id);\r\n                                setName4(city?.City_Name);\r\n                              }}\r\n                            />\r\n                          }\r\n                        />\r\n                      </TableCell>\r\n                      <TableCell data-title=\"Code\">\r\n                        {id}\r\n                        {id1}\r\n                        {id2}\r\n                        {id3}\r\n                        {city?.City_Id}\r\n                      </TableCell>\r\n                      <TableCell data-title=\"Name\">{city?.City_Name}</TableCell>\r\n                      <TableCell data-title=\"Description\">{city?.City_Description}</TableCell>\r\n                      <TableCell data-title=\"Action\">\r\n                        <ErpActionButton userRolePermissions={userRolePermissions} editPermissionId={70} deletePermissionId={72} onClickEdit={() => editCityById(city)} onClickDelete={() => deleteCityById(city?.id)} align=\"left\" />\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  );\r\n                })}\r\n              </TableBody>\r\n            </Table>\r\n          </JumboScrollbar>\r\n        </Div>\r\n\r\n      </Div>\r\n\r\n      <Dialog\r\n        open={open}\r\n        aria-labelledby=\"alert-dialog-title\"\r\n        aria-describedby=\"alert-dialog-description\"\r\n      >\r\n        <form onSubmit={handleCreateCity}>\r\n          <DialogContent>\r\n            <Grid container>\r\n              <Grid item xs={12} sx={{ ml: { sm: 0, md: 1.5 } }}>\r\n                <Typography className=\"col-12 input-label\">\r\n                  Entity Name <span className=\"required\">*</span>\r\n                </Typography>\r\n              </Grid>\r\n              <Grid item xs={12} sx={{ ml: { sm: 0, md: 1.5 } }}>\r\n                <Autocomplete\r\n                  // freeSolo\r\n                  className={`search-select col-12 ${errors.entityName ? \"is-invalid\" : \"\"\r\n                    }`}\r\n                  id=\"free-solo-demo\"\r\n                  placeholder=\"Entity Name\"\r\n                  variant=\"outlined\"\r\n                  options={entities}\r\n                  getOptionLabel={(option) => option?.Entity_Name}\r\n                  value={entities?.find(\r\n                    (option) =>\r\n                      option?.Entity_Name === entityName?.Entity_Name\r\n                  )}\r\n                  onChange={(e, newValue) => setEntityName(newValue)}\r\n                  sx={{\r\n                    minWidth: { xs: \"100%\" },\r\n                    maxWidth: \"1005px\",\r\n                  }}\r\n                  renderInput={(params) => (\r\n                    <TextField\r\n                      {...params}\r\n                      placeholder=\"Entity Name\"\r\n                      variant=\"outlined\"\r\n                      autoComplete=\"off\"\r\n                    />\r\n                  )}\r\n                />\r\n                <Div style={{ color: \"red\" }}>\r\n                  {errors.entityName}\r\n                </Div>\r\n              </Grid>\r\n\r\n              <Grid item xs={12} sx={{ ml: { sm: 0, md: 1.5 } }}>\r\n                <Typography className=\"col-12 input-label\">\r\n                  Country Name <span className=\"required\">*</span>\r\n                </Typography>\r\n              </Grid>\r\n              <Grid item xs={12} sx={{ ml: { sm: 0, md: 1.5 } }}>\r\n                <Autocomplete\r\n                  // freeSolo\r\n                  className={`search-select col-12 ${errors.countryName ? \"is-invalid\" : \"\"\r\n                    }`}\r\n                  id=\"free-solo-demo\"\r\n                  placeholder=\"Country Name\"\r\n                  variant=\"outlined\"\r\n                  options={countries}\r\n                  getOptionLabel={(option) => option?.Country_Name}\r\n                  value={countries?.find(\r\n                    (option) =>\r\n                      option?.Country_Name === countryName?.Country_Name\r\n                  )}\r\n                  onChange={(e, newValue) => {\r\n                    setCountryName(newValue);\r\n                  }}\r\n                  onFocus={() => getStates()}\r\n                  sx={{\r\n                    minWidth: { xs: \"100%\" },\r\n                    maxWidth: \"1005px\",\r\n                    fontSize: \"14px\",\r\n                  }}\r\n                  renderInput={(params) => (\r\n                    <TextField\r\n                      {...params}\r\n                      placeholder=\"Country Name\"\r\n                      variant=\"outlined\"\r\n                      autoComplete=\"off\"\r\n                    />\r\n                  )}\r\n                />\r\n                <Div style={{ color: \"red\" }}>\r\n                  {errors.countryName}\r\n                </Div>\r\n              </Grid>\r\n\r\n              <Grid item xs={12} sx={{ ml: { sm: 0, md: 1.5 } }}>\r\n                <Typography className=\"col-12 input-label\">\r\n                  Region Name <span className=\"required\">*</span>\r\n                </Typography>\r\n              </Grid>\r\n              <Grid item xs={12} sx={{ ml: { sm: 0, md: 1.5 } }}>\r\n                <Autocomplete\r\n                  // freeSolo\r\n                  className={`search-select col-12 ${errors.regionName ? \"is-invalid\" : \"\"\r\n                    }`}\r\n                  id=\"free-solo-demo\"\r\n                  placeholder=\"Region Name\"\r\n                  options={regions?.map((region) => region)}\r\n                  getOptionLabel={(option) => option?.Region_Name}\r\n                  value={regions?.find(\r\n                    (option) =>\r\n                      option?.Region_Name === regionName?.Region_Name\r\n                  )}\r\n                  onChange={(e, newValue) => {\r\n                    setRegionName(newValue);\r\n                  }}\r\n                  autoComplete=\"off\"\r\n                  sx={{\r\n                    minWidth: { xs: \"100%\" },\r\n                    maxWidth: \"1005px\",\r\n                  }}\r\n                  renderInput={(params) => (\r\n                    <TextField\r\n                      {...params}\r\n                      placeholder=\"Region Name\"\r\n                      variant=\"outlined\"\r\n                      autoComplete=\"off\"\r\n                    />\r\n                  )}\r\n                />\r\n                <Div style={{ color: \"red\" }}>\r\n                  {errors.regionName?.message}\r\n                </Div>\r\n              </Grid>\r\n\r\n              <Grid item xs={12} sx={{ ml: { sm: 0, md: 1.5 } }}>\r\n                <Typography className=\"col-12 input-label\">\r\n                  State Name <span className=\"required\">*</span>\r\n                </Typography>\r\n              </Grid>\r\n              <Grid item xs={12} sx={{ ml: { sm: 0, md: 1.5 } }}>\r\n                <Autocomplete\r\n                  // freeSolo\r\n                  className={`search-select col-12 ${errors.stateName ? \"is-invalid\" : \"\"\r\n                    }`}\r\n                  id=\"free-solo-demo\"\r\n                  placeholder=\"State Name\"\r\n                  options={states?.map((state) => state)}\r\n                  getOptionLabel={(option) => option?.State_Name}\r\n                  value={states?.find(\r\n                    (option) => option?.State_Name === stateName?.State_Name\r\n                  )}\r\n                  onChange={(e, newValue) => {\r\n                    setStateName(newValue);\r\n                  }}\r\n                  onInputChange={() => getCityLists()}\r\n                  sx={{\r\n                    minWidth: { xs: \"100%\" },\r\n                    maxWidth: \"1005px\",\r\n                  }}\r\n                  renderInput={(params) => (\r\n                    <TextField\r\n                      {...params}\r\n                      placeholder=\"State Name\"\r\n                      variant=\"outlined\"\r\n                      autoComplete=\"off\"\r\n                    />\r\n                  )}\r\n                />\r\n                <Div style={{ color: \"red\" }}>\r\n                  {errors.stateName}\r\n                </Div>\r\n              </Grid>\r\n              <Grid item xs={12} sx={{ ml: { sm: 0, md: 1.5 } }}>\r\n                <Typography className=\"col-12 input-label\">\r\n                  City Name <span className=\"required\">*</span>\r\n                </Typography>\r\n              </Grid>\r\n              <Grid item xs={12} sx={{ ml: { sm: 0, md: 1.5 } }}>\r\n                <FormControl className=\"col-12\">\r\n                  <Autocomplete\r\n                    // freeSolo\r\n                    id=\"free-solo-demo\"\r\n                    className={`search-select col-12 ${errors.cityName ? \"is-invalid\" : \"\"\r\n                      }`}\r\n                    type=\"search\"\r\n                    placeholder=\"Select City \"\r\n                    options={cityLists?.map((city) => city)}\r\n                    getOptionLabel={(option) => option}\r\n                    value={cityName}\r\n                    onChange={(e, newValue) => {\r\n                      setCityName(newValue);\r\n                    }}\r\n                    onFocus={() => getCityLists()}\r\n                    autoComplete=\"off\"\r\n                    renderInput={(params) => (\r\n                      <TextField\r\n                        {...params}\r\n                        placeholder=\"City Name\"\r\n                        variant=\"outlined\"\r\n                        autoComplete=\"off\"\r\n                      />\r\n                    )}\r\n                    sx={{\r\n                      height: \"38px\",\r\n                      lineHeight: 1,\r\n                      borderRadius: \"3px\",\r\n                      fontSize: \"14px\",\r\n                    }}\r\n                  />\r\n                </FormControl>\r\n                <Div style={{ color: \"red\" }}>\r\n                  {errors.cityName}\r\n                </Div>\r\n              </Grid>\r\n\r\n              <Grid item xs={12} sx={{ ml: { sm: 0, md: 1.5 } }}>\r\n                <Typography className=\"col-12 input-label\">\r\n                  Description\r\n                </Typography>\r\n              </Grid>\r\n              <Grid item xs={12} sx={{ ml: { sm: 0, md: 1.5 } }}>\r\n                <TextField\r\n                  className={`multiline-box col-12 ${errors.cityDescription ? \"is-invalid\" : \"\"\r\n                    }`}\r\n                  id=\"outlined-basic\"\r\n                  placeholder=\"Description\"\r\n                  multiline\r\n                  rows={3}\r\n                  variant=\"outlined\"\r\n                  autoComplete=\"off\"\r\n                  value={cityDescription}\r\n                  onChange={(e) => setCityDescription(e.target.value)}\r\n                  sx={{\r\n                    minWidth: { xs: \"100%\" },\r\n                    maxWidth: \"1005px\",\r\n                  }}\r\n                />\r\n                <Div style={{ color: \"red\" }}>\r\n                  {errors.cityDescription}\r\n                </Div>\r\n              </Grid>\r\n            </Grid>\r\n          </DialogContent>\r\n\r\n          {/* code for save and cancel button */}\r\n          <DialogActions>\r\n            <Div className=\"buttons\" sx={{\r\n              mt: 5, mb: 3, display: \"flex\",\r\n              justifyContent: \"center\"\r\n            }}>\r\n              <ButtonGroup\r\n                aria-label=\"split button\"\r\n                type=\"submit\"\r\n                // loading={isSubmitting}\r\n                sx={{\r\n                  mt: { xs: 0.5, lg: 0 },\r\n                  mr: { xs: 0, md: 1 }\r\n                }}\r\n              >\r\n                <Button type=\"submit\" className=\"plus-button\" sx={{ width: { md: \"99px !important\" } }}>\r\n                  {currentData?.id !== undefined ? \"Update\" : \"Save\"}\r\n                </Button>\r\n                <Button variant=\"contained\" className=\"icon-button\">\r\n                  <FaSave size={18} />\r\n                </Button>\r\n              </ButtonGroup>\r\n\r\n              <ButtonGroup\r\n                aria-label=\"split button\"\r\n                onClick={handleClose}\r\n                sx={{\r\n                  mt: { xs: 0.5, lg: 0 },\r\n                  mr: { xs: 0, md: 1 }\r\n                }}\r\n              >\r\n                <Button className=\"plus-button\" sx={{ width: { md: \"99px !important\" } }}>Cancel</Button>\r\n                <Button variant=\"contained\" className=\"icon-button\">\r\n                  <TiCancel size={20} />\r\n                </Button>\r\n              </ButtonGroup>\r\n            </Div>\r\n          </DialogActions>\r\n        </form>\r\n      </Dialog>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CityLists;","import Div from \"@jumbo/shared/Div\";\r\nimport {\r\n  Button,\r\n  Dialog,\r\n  DialogContent,\r\n  FormControlLabel,\r\n  Grid,\r\n  Radio,\r\n  Table,\r\n  TextField,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TableRow,\r\n  Typography,\r\n  Autocomplete,\r\n  ButtonGroup,\r\n} from \"@mui/material\";\r\nimport { BASE_URL } from \"app/services/auth-services\";\r\nimport axios from \"axios\";\r\nimport React, { useContext, useEffect, useState } from \"react\";\r\nimport { DataContext } from \"./OrganizationStructure\";\r\nimport { toast } from \"react-toastify\";\r\nimport JumboScrollbar from \"@jumbo/components/JumboScrollbar\";\r\nimport { FaSave } from \"react-icons/fa\";\r\nimport { TiCancel } from \"react-icons/ti\";\r\nimport { handleError } from \"app/pages/auth-pages/login/AuthGuard\";\r\nimport { ErpActionButton, ErpCreateButton } from \"app/shared/ReuseComponents/ButtonComponent\";\r\n\r\nconst StateLists = (scrollHeight) => {\r\n  const {\r\n    entities,\r\n    countries,\r\n    regions,\r\n    states,\r\n    id,\r\n    id1,\r\n    id2,\r\n    name,\r\n    name1,\r\n    name2,\r\n    name3,\r\n    name4,\r\n    setName,\r\n    setName1,\r\n    setName2,\r\n    setName3,\r\n    setName4,\r\n    checkId1,\r\n    checkId2,\r\n    checkId3,\r\n    checkId4,\r\n    checkId5,\r\n    setCheckId1,\r\n    setCheckId2,\r\n    setCheckId3,\r\n    setCheckId4,\r\n    setCheckId5,\r\n    zones,\r\n    getId,\r\n    getId1,\r\n    getId2,\r\n    getId3,\r\n    setGetId3,\r\n    getId4,\r\n    setGetId4,\r\n    getCityDatas,\r\n    getStateDatas,\r\n    getStates,\r\n    userRolePermissions,\r\n    currentData,\r\n    setCurrentData\r\n  } = useContext(DataContext);\r\n\r\n\r\n  const token = localStorage.getItem(\"accesstoken\");\r\n  const header = {\r\n    headers: {\r\n      Authorization: `Bearer ${token}`,\r\n      \"Content-Type\": \"application/json\",\r\n      Accept: \"application/json\",\r\n    },\r\n  };\r\n\r\n  const [open, setOpen] = useState(false);\r\n  const [stateLists, setStateLists] = useState([]);\r\n  const [entityName, setEntityName] = useState({\r\n    id: getId,\r\n    Entity_Name: name,\r\n  });\r\n  const [countryName, setCountryName] = useState({\r\n    id: getId1,\r\n    Country_Name: name1,\r\n  });\r\n  const [regionName, setRegionName] = useState({\r\n    id: getId2,\r\n    Region_Name: name2,\r\n  });\r\n  const [stateId, setStateId] = useState();\r\n  const [stateName, setStateName] = useState(\"\");\r\n  const [stateDescription, setStateDescription] = useState(\"\");\r\n  const [errors, setErrors] = useState({});\r\n\r\n  const handleAddState = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n    setStateName(\"\");\r\n    setStateDescription(\"\");\r\n    setErrors({})\r\n  };\r\n\r\n\r\n  const getStateLists = () => {\r\n    axios\r\n      .post(\r\n        `https://countriesnow.space/api/v0.1/countries/states`,\r\n        { country: countryName?.Country_Name },\r\n        {\r\n          headers: {\r\n            //   Authorization: `Bearer ${token}`,\r\n            \"Content-Type\": \"application/json\",\r\n            Accept: \"application/json\",\r\n          },\r\n        }\r\n      )\r\n      .then((res) => {\r\n        console.log(res?.data?.data);\r\n        var state = res?.data?.data;\r\n        setStateLists(state?.states);\r\n      })\r\n      .catch((error) => {\r\n        console.log(\"ds\", error);\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    getStateDatas();\r\n    getStateLists();\r\n  }, []);\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    const nextState = states?.filter((opt, index) => index + 1 === states?.length);\r\n    if (nextState) {\r\n      const nextStateId = nextState[0]?.State_Id;\r\n      const numericPart = parseInt(nextStateId, 10) + 1;\r\n      const paddedValue = numericPart.toString().padStart(nextStateId?.length, '0');\r\n      console.log(\"nextState\", states, nextState, numericPart, paddedValue)\r\n      setStateId(paddedValue);\r\n    }\r\n  }, [stateName]);\r\n\r\n\r\n\r\n  // Regular Expression\r\n  const validate = () => {\r\n    let error = {};\r\n\r\n    if (stateName === \"\" || stateName === null || stateName === undefined) {\r\n      error.stateName = \"State Name is required\"\r\n    }\r\n    if (stateDescription === \"\" || stateDescription === null || stateDescription === undefined) {\r\n      error.stateDescription = \"State Description is required\"\r\n    }\r\n\r\n    return error;\r\n  };\r\n\r\n\r\n\r\n  const handleCreateState = (e) => {\r\n    e.preventDefault();\r\n    let validForm = validate();\r\n    setErrors(validForm);\r\n\r\n    if (Object.keys(validForm).length === 0) {\r\n      if (currentData?.id !== undefined) {\r\n        var statepayload = {\r\n          ...currentData,\r\n          Entity_Id: parseInt(entityName?.id),\r\n          Country_Id: parseInt(countryName?.id),\r\n          Region_Id: parseInt(regionName?.id),\r\n          State_Name: stateName,\r\n          State_Description: stateDescription,\r\n          State_Type_Code: parseInt(`${id}${id1}${id2}${stateId}`),\r\n          Company_Id: parseInt(localStorage.getItem(\"OrganizationId\")),\r\n          Created_By: parseInt(localStorage.getItem(\"UserId\")),\r\n          Updated_By: parseInt(localStorage.getItem(\"UserId\")),\r\n        };\r\n        axios\r\n          .put(`${BASE_URL}/Erpapp/StateDetailsCRUD/`, statepayload, header)\r\n          .then((res) => {\r\n            console.log(res?.data);\r\n            if (res?.data?.id) {\r\n              toast.success(\"State updated successfully\");\r\n              setOpen(false);\r\n              getStateDatas();\r\n            } else {\r\n              toast.error(res.message)\r\n            }\r\n          })\r\n          .catch((error) => {\r\n            console.log(error);\r\n            handleError(error);\r\n            // toast.error(\"State name is already exists\");\r\n          });\r\n      } else {\r\n        var statepayload = {\r\n          Entity_Id: parseInt(entityName?.id),\r\n          Country_Id: parseInt(countryName?.id),\r\n          Region_Id: parseInt(regionName?.id),\r\n          State_Name: stateName,\r\n          State_Description: stateDescription,\r\n          State_Type_Code: parseInt(`${id}${id1}${id2}${stateId}`),\r\n          Company_Id: parseInt(localStorage.getItem(\"OrganizationId\")),\r\n          Created_By: parseInt(localStorage.getItem(\"UserId\")),\r\n          Updated_By: parseInt(localStorage.getItem(\"UserId\")),\r\n        };\r\n        axios\r\n          .post(`${BASE_URL}/Erpapp/StateDetailsCRUD/`, statepayload, header)\r\n          .then((res) => {\r\n            console.log(res.data);\r\n            if (res?.status === 201 && res?.data?.id) {\r\n              toast.success(\"State created successfully\");\r\n              setOpen(false);\r\n              getStateDatas();\r\n              setStateName(\"\");\r\n              setStateDescription(\"\");\r\n            } else {\r\n              toast.error(res.message)\r\n            }\r\n          })\r\n          .catch((error) => {\r\n            console.log(error);\r\n            handleError(error);\r\n            // toast.error(\"State name is already exists\");\r\n          });\r\n      }\r\n    }\r\n  };\r\n\r\n\r\n  // edit a state\r\n  const editStateById = async (id) => {\r\n    setCurrentData(id);\r\n    setOpen(true);\r\n\r\n    await axios.get(`${BASE_URL}/Erpapp/StateDetailsCRUD/?id=${id?.id}`, header)\r\n      .then((res) => {\r\n        console.log(res?.data);\r\n        if (res?.status === 200) {\r\n          setStateName(res?.data?.State_Name);\r\n          setStateDescription(res?.data?.State_Description);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  }\r\n\r\n  // delete a state \r\n  const deleteStateById = async (id) => {\r\n    await axios.delete(`${BASE_URL}/Erpapp/StateDetailsCRUD/?id=${id}`, header)\r\n      .then((res) => {\r\n        console.log(res?.data);\r\n        if (res?.status === 200 && res?.data?.id) {\r\n          toast.success(\"State deleted successfully\");\r\n          getStateDatas();\r\n        } else {\r\n          toast.error(res.message)\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n        toast.error(error.message);\r\n      });\r\n  }\r\n\r\n\r\n\r\n  return (\r\n    <>\r\n      <Div\r\n        className=\"card\"\r\n        sx={{ p: 2, minHeight: \"390px\", borderRadius: 0, m: 0 }}\r\n      >\r\n        <Div\r\n          sx={{\r\n            position: \"absolute\",\r\n            right: 15,\r\n            // width: \"100%\",\r\n            display: \"flex\",\r\n            justifyContent: \"flex-end\"\r\n          }}\r\n        >\r\n          {Array.isArray(userRolePermissions) && userRolePermissions.includes(313) && (\r\n            <ErpCreateButton handleClick={handleAddState} name={\"Add State\"} />\r\n          )}\r\n        </Div>\r\n        <br />\r\n\r\n        <Div sx={{ mt: { lg: 3, md: 5, xs: 5 } }}>\r\n          <JumboScrollbar\r\n            autoHeight={true}\r\n            autoHideTimeout={4000}\r\n            autoHeightMin={scrollHeight ? scrollHeight : 300}\r\n            autoHide={true}\r\n            hideTracksWhenNotNeeded\r\n            id=\"no-more-tables\"\r\n          >\r\n            <Table stickyHeader className=\"table table-borderless\">\r\n              <TableHead className=\"table-head\">\r\n                <TableRow>\r\n                  <TableCell></TableCell>\r\n                  <TableCell sx={{ fontWeight: 600 }}>Code</TableCell>\r\n                  <TableCell sx={{ fontWeight: 600 }}>Name</TableCell>\r\n                  <TableCell sx={{ fontWeight: 600 }}>Description</TableCell>\r\n                  <TableCell sx={{ fontWeight: 600 }}>Action</TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {states?.map((state) => {\r\n                  return (\r\n                    <TableRow>\r\n                      <TableCell padding=\"checkbox\" data-title=\"Status\">\r\n                        <FormControlLabel\r\n                          control={\r\n                            <Radio\r\n                              color=\"primary\"\r\n                              size=\"small\"\r\n                              checked={checkId4 === state?.State_Id}\r\n                              value={state?.State_Id}\r\n                              onChange={(e) => {\r\n                                setCheckId4(\r\n                                  e.target.value,\r\n                                );\r\n                                setGetId3(state?.id);\r\n                                setName3(state?.State_Name);\r\n                              }}\r\n                            />\r\n                          }\r\n                        />\r\n                      </TableCell>\r\n                      <TableCell data-title=\"Code\">\r\n                        {id}\r\n                        {id1}\r\n                        {id2}\r\n                        {state?.State_Id}\r\n                      </TableCell>\r\n                      <TableCell data-title=\"Name\">{state?.State_Name}</TableCell>\r\n                      <TableCell data-title=\"Description\">{state?.State_Description}</TableCell>\r\n                      <TableCell data-title=\"Action\">\r\n                        <ErpActionButton userRolePermissions={userRolePermissions} editPermissionId={314} deletePermissionId={316} onClickEdit={() => editStateById(state)} onClickDelete={() => deleteStateById(state?.id)} align=\"left\" />\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  );\r\n                })}\r\n              </TableBody>\r\n            </Table>\r\n          </JumboScrollbar>\r\n        </Div>\r\n      </Div>\r\n\r\n      {/* dialog box */}\r\n      <Dialog\r\n        open={open}\r\n        // onClose={handleClose}\r\n        aria-labelledby=\"alert-dialog-title\"\r\n        aria-describedby=\"alert-dialog-description\"\r\n      >\r\n        <form onSubmit={handleCreateState}>\r\n          <div>\r\n            <DialogContent>\r\n              <Grid container>\r\n                <Grid item xs={12} sx={{ ml: { sm: 0, md: 1.5 } }}>\r\n                  <Typography className=\"col-12 input-label\">\r\n                    Entity Name <span className=\"required\">*</span>\r\n                  </Typography>\r\n                </Grid>\r\n                <Grid item xs={12} sx={{ ml: { sm: 0, md: 1.5 } }}>\r\n                  <Autocomplete\r\n                    // freeSolo\r\n                    className={`search-select col-12 ${errors.entityName ? \"is-invalid\" : \"\"\r\n                      }`}\r\n                    id=\"free-solo-demo\"\r\n                    placeholder=\"Entity Name\"\r\n                    variant=\"outlined\"\r\n                    options={entities}\r\n                    getOptionLabel={(option) => {\r\n                      if (typeof option === \"string\") {\r\n                        return option;\r\n                      }\r\n                      if (option && option?.Entity_Name) {\r\n                        return option?.Entity_Name;\r\n                      }\r\n                      // else{\r\n                      //   return option.Entity_Name === null;\r\n                      // }\r\n                      return \"\";\r\n                    }}\r\n                    value={entities?.find((option) => {\r\n                      if (option && option?.Entity_Name) {\r\n                        return entityName?.Entity_Name;\r\n                      } else {\r\n                        return null;\r\n                      }\r\n                    })}\r\n                    onChange={(e, newValue) => setEntityName(newValue)}\r\n                    isOptionEqualToValue={(option, value) =>\r\n                      option?.Entity_Name === value\r\n                    }\r\n                    sx={{\r\n                      minWidth: { xs: \"100%\" },\r\n                      maxWidth: \"1005px\",\r\n                    }}\r\n                    renderInput={(params) => (\r\n                      <TextField\r\n                        {...params}\r\n                        placeholder=\"Entity Name\"\r\n                        variant=\"outlined\"\r\n                        autoComplete=\"off\"\r\n                      />\r\n                    )}\r\n                  />\r\n                  <Div style={{ color: \"red\" }}>\r\n                    {errors.entityName?.message}\r\n                  </Div>\r\n                </Grid>\r\n\r\n                <Grid item xs={12} sx={{ ml: { sm: 0, md: 1.5 } }}>\r\n                  <Typography className=\"col-12 input-label\">\r\n                    Country Name <span className=\"required\">*</span>\r\n                  </Typography>\r\n                </Grid>\r\n                <Grid item xs={12} sx={{ ml: { sm: 0, md: 1.5 } }}>\r\n                  <Autocomplete\r\n                    className={`search-select col-12 ${errors.countryName ? \"is-invalid\" : \"\"\r\n                      }`}\r\n                    id=\"free-solo-demo\"\r\n                    placeholder=\"Country Name\"\r\n                    variant=\"outlined\"\r\n                    options={countries}\r\n                    getOptionLabel={(option) => {\r\n                      if (typeof option === \"string\") {\r\n                        return option;\r\n                      }\r\n                      if (option && option?.Country_Name) {\r\n                        return option?.Country_Name;\r\n                      }\r\n                      return \"\";\r\n                    }}\r\n                    value={countries?.find(\r\n                      (option) =>\r\n                        option?.Country_Name === countryName?.Country_Name\r\n                    )}\r\n                    onChange={(e, newValue) => {\r\n                      setCountryName(newValue);\r\n                    }}\r\n                    onFocus={() => getStateLists()}\r\n                    isOptionEqualToValue={(option, value) =>\r\n                      option?.Country_Name === value\r\n                    }\r\n                    sx={{\r\n                      minWidth: { xs: \"100%\" },\r\n                      maxWidth: \"1005px\",\r\n                      fontSize: \"14px\",\r\n                    }}\r\n                    renderInput={(params) => (\r\n                      <TextField\r\n                        {...params}\r\n                        placeholder=\"Country Name\"\r\n                        variant=\"outlined\"\r\n                        autoComplete=\"off\"\r\n                      />\r\n                    )}\r\n                  />\r\n                  <Div style={{ color: \"red\" }}>\r\n                    {errors.countryName?.message}\r\n                  </Div>\r\n                </Grid>\r\n\r\n                <Grid item xs={12} sx={{ ml: { sm: 0, md: 1.5 } }}>\r\n                  <Typography className=\"col-12 input-label\">\r\n                    Region Name <span className=\"required\">*</span>\r\n                  </Typography>\r\n                </Grid>\r\n                <Grid item xs={12} sx={{ ml: { sm: 0, md: 1.5 } }}>\r\n                  <Autocomplete\r\n                    // freeSolo\r\n                    className={`search-select col-12 ${errors.regionName ? \"is-invalid\" : \"\"\r\n                      }`}\r\n                    id=\"free-solo-demo\"\r\n                    placeholder=\"Region Name\"\r\n                    options={regions?.map((region) => region)}\r\n                    getOptionLabel={(option) => {\r\n                      if (typeof option === \"string\") {\r\n                        return option;\r\n                      }\r\n                      if (option && option?.Region_Name) {\r\n                        return option?.Region_Name;\r\n                      }\r\n                      return \"\";\r\n                    }}\r\n                    value={regions?.find(\r\n                      (option) =>\r\n                        option?.Region_Name === regionName?.Region_Name\r\n                    )}\r\n                    onChange={(e, newValue) => {\r\n                      setRegionName(newValue);\r\n                    }}\r\n                    autoComplete=\"off\"\r\n                    isOptionEqualToValue={(option, value) =>\r\n                      option?.Region_Name === value\r\n                    }\r\n                    sx={{\r\n                      minWidth: { xs: \"100%\" },\r\n                      maxWidth: \"1005px\",\r\n                    }}\r\n                    renderInput={(params) => (\r\n                      <TextField\r\n                        {...params}\r\n                        placeholder=\"Region Name\"\r\n                        variant=\"outlined\"\r\n                        autoComplete=\"off\"\r\n                      />\r\n                    )}\r\n                  />\r\n                  <Div style={{ color: \"red\" }}>\r\n                    {errors.regionName?.message}\r\n                  </Div>\r\n                </Grid>\r\n\r\n                <Grid item xs={12} sx={{ ml: { sm: 0, md: 1.5 } }}>\r\n                  <Typography className=\"col-12 input-label\">\r\n                    State Name <span className=\"required\">*</span>\r\n                  </Typography>\r\n                </Grid>\r\n                <Grid item xs={12} sx={{ ml: { sm: 0, md: 1.5 } }}>\r\n                  <Autocomplete\r\n                    // freeSolo\r\n                    className={`search-select col-12 ${errors.stateName ? \"is-invalid\" : \"\"\r\n                      }`}\r\n                    id=\"free-solo-demo\"\r\n                    getOptionLabel={(option) => {\r\n                      if (typeof option === \"string\") {\r\n                        return option;\r\n                      }\r\n                      if (option && option?.name) {\r\n                        return option?.name;\r\n                      }\r\n                      return \"\";\r\n                    }}\r\n                    options={stateLists?.map((statelist) => statelist)}\r\n                    value={currentData?.id !== undefined ? stateName : stateLists?.find(\r\n                      (option) => option?.name === stateName\r\n                    )}\r\n                    onChange={(e, newValue) => {\r\n                      setStateName(newValue?.name);\r\n                    }}\r\n                    onFocus={() => getStateLists()}\r\n                    autoComplete=\"off\"\r\n                    sx={{\r\n                      minWidth: { xs: \"100%\" },\r\n                      maxWidth: \"1005px\",\r\n                    }}\r\n                    renderInput={(params) => (\r\n                      <TextField\r\n                        {...params}\r\n                        placeholder=\"State Name\"\r\n                        variant=\"outlined\"\r\n                        autoComplete=\"off\"\r\n                      />\r\n                    )}\r\n                  />\r\n                  <Div style={{ color: \"red\" }}>\r\n                    {errors.stateName}\r\n                  </Div>\r\n                </Grid>\r\n\r\n                <Grid item xs={12} sx={{ ml: { sm: 0, md: 1.5 } }}>\r\n                  <Typography className=\"col-12 input-label\">\r\n                    Description\r\n                  </Typography>\r\n                </Grid>\r\n                <Grid item xs={12} sx={{ ml: { sm: 0, md: 1.5 } }}>\r\n                  <TextField\r\n                    className={`multiline-box col-12 ${errors.stateDescription ? \"is-invalid\" : \"\"\r\n                      }`}\r\n                    id=\"outlined-basic\"\r\n                    placeholder=\"Description\"\r\n                    multiline\r\n                    rows={3}\r\n                    variant=\"outlined\"\r\n                    autoComplete=\"off\"\r\n                    value={stateDescription}\r\n                    onChange={(e) => setStateDescription(e.target.value)}\r\n                    sx={{\r\n                      minWidth: { xs: \"100%\" },\r\n                      maxWidth: \"1005px\",\r\n                    }}\r\n                  />\r\n                  <Div style={{ color: \"red\" }}>\r\n                    {!stateDescription && <span style={{ color: \"red\", fontSize: \"13px\" }}>{errors?.stateDescription}</span>}\r\n                  </Div>\r\n                </Grid>\r\n              </Grid>\r\n            </DialogContent>\r\n\r\n            {/* code for save and cancel button */}\r\n            <Div className=\"buttons\" sx={{\r\n              mt: 5, mb: 3, display: \"flex\",\r\n              justifyContent: \"center\"\r\n            }}>\r\n              <ButtonGroup\r\n                aria-label=\"split button\"\r\n                type=\"submit\"\r\n                // loading={isSubmitting}\r\n                sx={{\r\n                  mt: { xs: 0.5, lg: 0 },\r\n                  mr: { xs: 0, md: 1 }\r\n                }}\r\n              >\r\n                <Button type=\"submit\" className=\"plus-button\" sx={{ width: { md: \"99px !important\" } }}>\r\n                  {currentData?.id !== undefined ? \"Update\" : \"Save\"}\r\n                </Button>\r\n                <Button variant=\"contained\" className=\"icon-button\">\r\n                  <FaSave size={18} />\r\n                </Button>\r\n              </ButtonGroup>\r\n\r\n              <ButtonGroup\r\n                aria-label=\"split button\"\r\n                onClick={handleClose}\r\n                sx={{\r\n                  mt: { xs: 0.5, lg: 0 },\r\n                  mr: { xs: 0, md: 1 }\r\n                }}\r\n              >\r\n                <Button className=\"plus-button\" sx={{ width: { md: \"99px !important\" } }}>Cancel</Button>\r\n                <Button variant=\"contained\" className=\"icon-button\">\r\n                  <TiCancel size={20} />\r\n                </Button>\r\n              </ButtonGroup>\r\n            </Div>\r\n          </div>\r\n        </form>\r\n      </Dialog>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default StateLists;","import styled from '@emotion/styled';\r\nimport { Table, TableCell, TableRow } from '@mui/material';\r\n\r\nexport const CellNoborder = styled(TableCell)(({ theme }) => ({\r\n    border: \"none !important\"\r\n}))\r\nexport const TableNoborder = styled(Table)(({ theme }) => ({\r\n    border: \"none !important\"\r\n}))\r\nexport const TableRowNoborder = styled(TableRow)(({ theme }) => ({\r\n    border: \"none !important\"\r\n}))","import axios from \"axios\";\r\nimport { BASE_URL } from \"./auth-services\";\r\n\r\nconst token = localStorage.getItem(\"accesstoken\");\r\n\r\nconst header = {\r\n    headers: {\r\n        Authorization: `Bearer ${token}`,\r\n        \"Content-Type\": \"application/json\",\r\n        Accept: \"application/json\",\r\n    },\r\n};\r\n\r\n\r\nconst commonServices = {};\r\n\r\n\r\ncommonServices.deletePreviousHistory = async (payload, header) => {\r\n    const { data } = await axios.post(\r\n        `${BASE_URL}/Erpapp/updaterecorddelete/`, payload,\r\n        header\r\n    );\r\n    return data;\r\n};\r\n\r\nexport default commonServices;","import React, { useEffect, useState } from 'react'\r\nimport { useCompanyData } from './CompanyDataProvider';\r\nimport JumboScrollbar from '@jumbo/components/JumboScrollbar';\r\nimport { Table, TableBody, TableHead, TableRow } from '@mui/material';\r\nimport { CellNoborder } from '../../pages/TableStyled';\r\nimport commonServices from 'app/services/common-services';\r\nimport axios from 'axios';\r\nimport { BASE_URL } from 'app/services/auth-services';\r\nimport { format } from 'date-fns';\r\nimport { handleError } from 'app/pages/auth-pages/login/AuthGuard';\r\nimport settingServices from 'app/services/setting-api-services';\r\nimport { todayDate } from './DateFormatter';\r\n\r\n\r\nexport const UpdatedHistoryRecords = ({ documentId, scrollHeight }) => {\r\n    const { dateFormat, updatedHistory, fetchHistoryData } = useCompanyData();\r\n\r\n    useEffect(() => {\r\n        fetchHistoryData(documentId);\r\n    }, [documentId]);\r\n\r\n    return (\r\n        <JumboScrollbar\r\n            autoHeight={true}\r\n            autoHideTimeout={4000}\r\n            autoHeightMin={scrollHeight ? scrollHeight : 340}\r\n            autoHide={true}\r\n            hideTracksWhenNotNeeded\r\n            id=\"no-more-tables\"\r\n        >\r\n            <Table stickyHeader className=\"table\">\r\n                <TableHead className=\"history-header\">\r\n                    <TableRow>\r\n                        <CellNoborder sx={{ fontWeight: 600, minWidth: { xs: \"auto\", md: \"200px !important\" } }}>Activity Date</CellNoborder>\r\n                        <CellNoborder sx={{ fontWeight: 600, minWidth: { xs: \"auto\", md: \"200px !important\" } }}>PR No</CellNoborder>\r\n                        <CellNoborder sx={{ fontWeight: 600, minWidth: { xs: \"auto\", md: \"200px !important\" } }}>History</CellNoborder>\r\n                        <CellNoborder sx={{ fontWeight: 600, minWidth: { xs: \"auto\", md: \"200px !important\" } }}>Updated Fields</CellNoborder>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {updatedHistory?.length > 0 ? (\r\n                        updatedHistory?.map((data, index) => {\r\n                            console.log(\"datadata\", data)\r\n                            return (\r\n                                <TableRow>\r\n                                    <CellNoborder sx={{ minWidth: { xs: \"auto\", md: \"200px !important\" } }} data-title=\"Activity Date\">\r\n                                        {dateFormat && data?.Updated_Date && format(\r\n                                            new Date(data?.Updated_Date),\r\n                                            dateFormat\r\n                                        ) || data?.Updated_Date}\r\n                                        <span style={{ marginLeft: \"5px\" }}>\r\n                                            {data?.Updated_Time?.slice(0, 8)}\r\n                                        </span>\r\n                                    </CellNoborder>\r\n                                    <CellNoborder sx={{ minWidth: { xs: \"auto\", md: \"200px !important\" } }} data-title=\"PR No\">\r\n                                        {data?.Document_Id ? data?.Document_Id : \"\"}\r\n                                    </CellNoborder>\r\n                                    <CellNoborder sx={{ minWidth: { xs: \"auto\", md: \"200px !important\" } }} data-title=\"History\">\r\n                                        {data?.Updated_Person ? data?.Updated_Person : \"\"}\r\n                                    </CellNoborder>\r\n                                    <CellNoborder sx={{ minWidth: { xs: \"auto\", md: \"200px !important\" } }} data-title=\"Updated Fields\">\r\n                                        {data?.Updated_Field ? data?.Updated_Field : \"\"}\r\n                                    </CellNoborder>\r\n                                </TableRow>\r\n                            )\r\n                        }\r\n                        )) :\r\n                        <TableRow>\r\n                            <CellNoborder colSpan={8} sx={{ textAlign: \"center\" }}>\r\n                                No Records\r\n                            </CellNoborder>\r\n                        </TableRow>\r\n                    }\r\n                </TableBody>\r\n            </Table>\r\n        </JumboScrollbar>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport const handleCreateHistory = async (requestId, partnerId, name, header) => {\r\n    try {\r\n        axios\r\n            .get(\r\n                `${BASE_URL}/Erpapp/Updaterecordsfilter/?Partner_Id=${partnerId}&Document_Id=${requestId}`,\r\n                header\r\n            )\r\n            .then((resp) => {\r\n                console.error(\"data\", resp?.data);\r\n                const filterlistIds = resp?.data?.map((opt) => opt?.id)\r\n                if (resp?.data?.length > 0) {\r\n                    commonServices.deletePreviousHistory({\r\n                        \"id\": filterlistIds\r\n                    }, header).then((res) => {\r\n                        console.log(res);\r\n\r\n                        // history of updated records\r\n                        let editUser = localStorage.getItem(\"Username\");\r\n                        axios\r\n                            .post(\r\n                                `${BASE_URL}/Erpapp/Updaterecordscrud/`,\r\n                                {\r\n                                    Document_Id: requestId,\r\n                                    Updated_Person: `${editUser} created this ${name}.`,\r\n                                    Updated_Time: `${new Date().getHours()}:${new Date().getMinutes()}:${new Date().getSeconds()}`,\r\n                                    Updated_Date: new Date().toJSON().slice(0, 10),\r\n                                    Is_Deleted: false,\r\n                                    Partner_Id: parseInt(localStorage.getItem(\"PartnerId\")),\r\n                                    Updated_By: parseInt(localStorage.getItem(\"UserId\")),\r\n                                },\r\n                                header\r\n                            )\r\n                            .then((res) => {\r\n                                console.log(\"Result\", res?.data);\r\n                            })\r\n                            .catch((res) => {\r\n                                console.log(res.message);\r\n                            });\r\n                    }).catch((error) => {\r\n                        console.log(error)\r\n                    });\r\n\r\n                } else {\r\n                    // history of updated records\r\n                    let editUser = localStorage.getItem(\"Username\");\r\n                    axios\r\n                        .post(\r\n                            `${BASE_URL}/Erpapp/Updaterecordscrud/`,\r\n                            {\r\n                                Document_Id: requestId,\r\n                                Updated_Person: `${editUser} created this ${name}.`,\r\n                                Updated_Time: `${new Date().getHours()}:${new Date().getMinutes()}:${new Date().getSeconds()}`,\r\n                                Updated_Date: new Date().toJSON().slice(0, 10),\r\n                                Is_Deleted: false,\r\n                                Partner_Id: parseInt(localStorage.getItem(\"PartnerId\")),\r\n                                Updated_By: parseInt(localStorage.getItem(\"UserId\")),\r\n                            },\r\n                            header\r\n                        )\r\n                        .then((res) => {\r\n                            console.log(\"Result\", res?.data);\r\n                        })\r\n                        .catch((res) => {\r\n                            console.log(res.message);\r\n                        });\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                console.log(\"ds\", error);\r\n            });\r\n    } catch (error) {\r\n        console.log(error)\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const SendNotificationToSettingMail = async (requestData, subject, body, companyId, header) => {\r\n    try {\r\n        await settingServices\r\n            .getItemSettings(companyId, header).then(async (res) => {\r\n\r\n                var payload = {\r\n                    Tomail: res?.Notifyto,\r\n                    mailsubject: subject,\r\n                    body: body,\r\n                }\r\n\r\n                const response = await axios.post(`${BASE_URL}/Erpapp/settingsdirectmailsend/`, payload, header);\r\n                console.log(\"response\", response)\r\n            }).catch((error) => {\r\n                console.log(error);\r\n            });\r\n    } catch (error) {\r\n        handleError(error)\r\n    }\r\n}\r\n\r\nconst deleteExistingDocumentApprovals = async (requestNo) => {\r\n    try {\r\n        const response = await axios.get(`${BASE_URL}/Erpapp/Documentapprovalgetwithrequestid/?Request_Id=${requestNo}`);\r\n        const filteredDocuments = response?.data;\r\n        const filterlistIds = filteredDocuments?.map(item => item?.id);\r\n\r\n        if (filterlistIds?.length > 0) {\r\n            await axios.post(`${BASE_URL}/Erpapp/Documentapprovaldelete/`, { id: filterlistIds });\r\n        }\r\n    } catch (error) {\r\n        console.error(\"Error deleting existing document approvals:\", error);\r\n    }\r\n};\r\n\r\nexport const handleCreateDocumentApproval = async (requestId, requestNo, userId, approvals, workflowAmountBased = [], name, header) => {\r\n\r\n    const headApproverId = parseInt(localStorage.getItem(\"ReportHead\"))\r\n    const HeadApproverName = localStorage.getItem(\"ReportHeadName\");\r\n    const HeadApproverRole = localStorage.getItem(\"ReportHeadRole\");\r\n\r\n    let listOfApprovers = []\r\n    let numberOfApproversCount = workflowAmountBased?.length > 0 ? workflowAmountBased?.length : approvals[0]?.Noof_Level\r\n\r\n    if (approvals[0]?.Head_Approval === true) {\r\n        const obj = {\r\n            id: headApproverId,\r\n            Approvername: HeadApproverName,\r\n            ApproverRole: HeadApproverRole,\r\n            comments: \"\",\r\n            approved_flg: \"\",\r\n            Approved_flg: false,\r\n            status: true,\r\n            time: \"\",\r\n        };\r\n        listOfApprovers.push(obj);\r\n    }\r\n    for (let i = 0; i < numberOfApproversCount; i++) {\r\n        const obj1 = {\r\n            id: approvals[0]?.Amountjosn[i]?.id,\r\n            Approvername: approvals[0]?.Amountjosn[i]?.approver_name,\r\n            ApproverRole: approvals[0]?.Amountjosn[i]?.role,\r\n            comments: \"\",\r\n            approved_flg: \"\",\r\n            Approved_flg: false,\r\n            status: true,\r\n            time: \"\",\r\n        };\r\n        listOfApprovers.push(obj1);\r\n    }\r\n    try {\r\n        if (Boolean(requestNo)) {\r\n            await deleteExistingDocumentApprovals(requestNo);\r\n            var payload = {\r\n                Request_Id: requestNo,\r\n                Created_By: userId,\r\n                Updated_By: userId,\r\n                Approval_Id: listOfApprovers,\r\n                Approve: listOfApprovers,\r\n                Request_Key: Number(requestId),\r\n                Request_Name: name,\r\n                Initiated_By: localStorage.getItem(\"Username\"),\r\n                Created_Date: todayDate\r\n            };\r\n            const response = await axios.post(`${BASE_URL}/Erpapp/DocumentapprovalCRUD/`, payload)\r\n            console.log(\"PD12\", response)\r\n            return response;\r\n        }\r\n    }\r\n    catch (error) {\r\n        console.log(error)\r\n    }\r\n}\r\n\r\n\r\nexport const handleSendNotificationToApprover = async (requestNo, initiatorName, approverId, userId, partnerId, companyId, header) => {\r\n    try {\r\n        const payload = {\r\n            Notification_Msg: `Request No. ${requestNo || \"\"} has been submitted by ${initiatorName || \"the initiator\"} for approval.`,\r\n            User_Id: parseInt(approverId),\r\n            Created_By: parseInt(userId),\r\n            Partner_Id: parseInt(partnerId),\r\n            Company_Id: parseInt(companyId),\r\n        };\r\n\r\n        const response = await axios.post(`${BASE_URL}/Erpapp/Notificationscrud/`, payload, header)\r\n        console.log(\"response\", response)\r\n\r\n    } catch (error) {\r\n        // handleError(error)\r\n        console.log(error)\r\n    }\r\n}\r\n\r\nexport const handleSendNotificationToInitiator = async (requestNo, approverName, employeeId, userId, partnerId, companyId, header) => {\r\n    try {\r\n        const payload = {\r\n            Notification_Msg: `Your Request No. ${requestNo || \"\"} has been submitted to ${approverName || \"the approver\"} for approval.`,\r\n            User_Id: parseInt(employeeId),\r\n            Created_By: parseInt(userId),\r\n            Partner_Id: parseInt(partnerId),\r\n            Company_Id: parseInt(companyId),\r\n        };\r\n\r\n        setTimeout(async () => {\r\n            const response = await axios.post(`${BASE_URL}/Erpapp/Notificationscrud/`, payload, header)\r\n            console.log(\"response\", response)\r\n        }, 1000)\r\n\r\n    } catch (error) {\r\n        // handleError(error)\r\n        console.log(error)\r\n    }\r\n}","import Div from \"@jumbo/shared/Div\";\nimport {\n  Button,\n  FormControl,\n  Grid,\n  Autocomplete,\n  TextField,\n  Typography,\n  ButtonGroup,\n  FormGroup,\n  FormControlLabel,\n  Checkbox,\n  InputAdornment,\n} from \"@mui/material\";\nimport React, { useContext, useEffect } from \"react\";\nimport { useState } from \"react\";\nimport axios from \"axios\";\nimport { BASE_URL } from \"app/services/auth-services\";\nimport { toast } from \"react-toastify\";\nimport { FaSave } from \"react-icons/fa\";\nimport { TiCancel } from \"react-icons/ti\";\nimport \"./partners.css\";\nimport itemServices from \"app/services/item-master-services\";\nimport { DataContext } from \"app/pages/settings/Organization/OrganizationStructure\";\nimport { handleCreateHistory } from \"app/shared/ReuseComponents/UpdatedHistoryRecords\";\nimport { handleError } from \"app/pages/auth-pages/login/AuthGuard\";\nimport { ErpDateField } from \"app/shared/ReuseComponents/ButtonComponent\";\nimport { todayDate } from \"app/shared/ReuseComponents/DateFormatter\";\n\n\n\nconst CreatePartner = ({\n  scrollHeight,\n  setCreateMaterial,\n  setListMaterial,\n}) => {\n\n\n  const {\n    entities,\n    countries,\n    regions,\n    states,\n    cities,\n    id,\n    id1,\n    id2,\n    id3,\n    name,\n    name1,\n    name2,\n    name3,\n    name4,\n    setName4,\n    checkId5,\n    setCheckId5,\n    getId,\n    getId1,\n    getId2,\n    getId3,\n    getId4,\n    setGetId4,\n    getCityDatas,\n    getStates,\n  } = useContext(DataContext);\n\n  const token = localStorage.getItem(\"accesstoken\");\n  const header = {\n    headers: {\n      Authorization: `Bearer ${token}`,\n      \"Content-Type\": \"application/json\",\n      Accept: \"application/json\",\n    },\n  };\n\n  let userDetails = localStorage.getItem(\"UserDetails\");\n  userDetails = JSON.parse(userDetails);\n\n  const partnerId = parseInt(localStorage.getItem(\"PartnerId\"));\n\n  // Get Users\n  const [OwnerNames, setOwnerNames] = useState([]);\n  const [HeadOperation, setHeadOperation] = useState(\"\");\n\n  const [values, setValues] = useState({\n    Bussiness_Unit: \"\",\n    Operated_By: \"\",\n    Contact: \"\",\n    Email: \"\",\n    Website: \"\",\n    Head_Of_Operation: \"\",\n    Address_1: \"\",\n    Address_2: \"\",\n    City: \"\",\n    State: \"\",\n    Country: \"\",\n    Pin_Code: \"\",\n    Pan_No: \"\",\n    GST_No: \"\",\n    Agreement_Ref: \"\",\n    Valid_Upto: \"\",\n    Corporate_BU: false,\n    Commision_Paid: \"\",\n  });\n\n\n  const getUsers = async () => {\n    try {\n      const response = await axios.get(`${BASE_URL}/Erpapp/Userlistwithoutpagination/`, header);\n      console.log(\"oji\", response?.data);\n      setOwnerNames(response?.data?.map((item) => `${item?.first_name} ${item?.last_name}`));\n    }\n    catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    const timer = setTimeout(async () => {\n      await getUsers();\n    }, 1000);\n\n    return () => clearTimeout(timer);\n  }, []);\n\n\n  const [selectedCountry, setSelectedCountry] = useState(name1);\n  const [selectedState, setSelectedState] = useState(name3);\n  const [selectedCity, setSelectedCity] = useState(name4);\n\n  const [managedByLists, setManagedByLists] = useState([]);\n  const [countryLists, setCountryLists] = useState([]);\n  const [stateLists, setStateLists] = useState([]);\n  const [cityLists, setCityLists] = useState([]);\n  const [countryId, setCountryId] = useState(getId1);\n  const [stateId, setStateId] = useState(getId3);\n  const [cityId, setcityId] = useState(getId4);\n\n\n  const getCountryLists = () => {\n    axios\n      .get(`https://countriesnow.space/api/v0.1/countries`, {\n        headers: {\n          //   Authorization: `Bearer ${token}`,\n          \"Content-Type\": \"application/json\",\n          Accept: \"application/json\",\n        },\n      })\n      .then((res) => {\n        console.log(res?.data?.data);\n        setCountryLists(res?.data?.data);\n      })\n      .catch((error) => {\n        console.log(\"ds\", error);\n      });\n  };\n\n  const getStateLists = () => {\n    axios.post(\n      `https://countriesnow.space/api/v0.1/countries/states`,\n      { country: selectedCountry },\n      {\n        headers: {\n          //   Authorization: `Bearer ${token}`,\n          \"Content-Type\": \"application/json\",\n          Accept: \"application/json\",\n        },\n      }\n    )\n      .then((res) => {\n        console.log(res?.data?.data);\n        var state = res?.data?.data;\n        setStateLists(state?.states);\n      })\n      .catch((error) => {\n        console.log(\"ds\", error);\n      });\n  };\n\n  const getCityLists = () => {\n    var payload = {\n      country: selectedCountry,\n      state: selectedState,\n    };\n\n    axios\n      .post(\n        `https://countriesnow.space/api/v0.1/countries/state/cities`,\n        payload,\n        {\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Accept: \"application/json\",\n          },\n        }\n      )\n      .then((res) => {\n        console.log(res?.data);\n        var city = res?.data?.data;\n        var citynames = city?.map((cityname) => {\n          const normalizedCity = cityname.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\n          if (normalizedCity === \"Naini Tal\") {\n            return normalizedCity.replace(\" \", \"\");\n          }\n          return normalizedCity;\n        });\n        setCityLists(citynames);\n      })\n      .catch((error) => {\n        console.log(\"ds\", error);\n      });\n  };\n\n  useEffect(() => {\n    getCountryLists();\n    getStateLists();\n    getCityLists();\n  }, [countryId, stateId, selectedCountry, selectedState, cityId]);\n\n\n  useEffect(() => {\n    // get managed by from lookup\n    const getManagedBy = () => {\n      var unitpayload = {\n        Search: \"Managed By\",\n      };\n      itemServices\n        .getUnits(unitpayload, header)\n        .then((res) => {\n          console.log(res[0].value);\n          setManagedByLists(res[0].value);\n        })\n        .catch((error) => {\n          console.log(error);\n        });\n    }\n\n    getManagedBy();\n  }, []);\n\n\n  const handleCreateBU = async (e) => {\n    e.preventDefault();\n    let itempayload = {\n      Partner_Name: values?.Bussiness_Unit,\n      Operated_By: values?.Operated_By,\n      HeadOf_Operation: HeadOperation,\n      BusinessUnit_Phone: values?.Contact,\n      BusinessUnit_EMail: values?.Email,\n      BusinessUnit_Web: values?.Website,\n      BusinessUnit_Addressline1: values?.Address_1,\n      BusinessUnit_City: selectedCity,\n      BusinessUnit_Country: selectedCountry,\n      BusinessUnit_State: selectedState,\n      BusinessUnit_Zone: \"\",\n      BusinessUnit_Pincode: values?.Pin_Code,\n      BusinessUnit_PanNo: values?.Pan_No,\n      BusinessUnit_GSTNo: values?.GST_No,\n      Agreement_RefNo: values?.Agreement_Ref,\n      Agreement_Validupto: values?.Valid_Upto ? values?.Valid_Upto : \"0001-01-01\",\n      Ofc_Starttime: values?.Ofc_Starttime,\n      Ofc_Endtime: values?.Ofc_Endtime,\n      Total_hours: values?.Total_hours,\n      Corporate_BU: values?.Corporate_BU,\n      Commision_Paid: values?.Commision_Paid || 0,\n      Company_Id: parseInt(localStorage.getItem(\"OrganizationId\")),\n      Created_By: parseInt(localStorage.getItem(\"UserId\")),\n      Updated_By: parseInt(localStorage.getItem(\"UserId\")),\n      Created_Date: todayDate,\n      Updated_Date: todayDate,\n    }\n\n    console.log(\"itempayload :\", itempayload);\n    try {\n      const res = await axios.post(`${BASE_URL}/Erpapp/PartnerCRUD/`, itempayload, header)\n      console.log(\"res\", res);\n\n      if (res?.data?.id) {\n        // reset values\n        setValues({\n          Operated_By: \"\",\n          Head_Of_Operation: \" \",\n          Contact: \"\",\n          Email: \"\",\n          Website: \"\",\n          Address_1: \"\",\n          Address_2: \"\",\n          City: \"\",\n          State: \"\",\n          Country: \"\",\n          Pin_Code: \"\",\n          Pan_No: \"\",\n          GST_No: \"\",\n          Agreement_Ref: \"\",\n          Valid_Upto: \"\",\n        })\n        setHeadOperation(\"\");\n\n        toast.success(`Business Unit Created Successfully`);\n        setCreateMaterial(false);\n        setListMaterial(true);\n\n        // history of updated records\n        handleCreateHistory(res?.data?.Partner_Id, res?.data?.id, \"Business Unit\", header)\n\n      }\n    }\n    catch (error) {\n      console.log(error);\n      handleError(error)\n      // toast.error(\"You do not have permission to perform this action.\");\n    }\n  }\n\n  const handleChangeItem = async (e) => {\n    if (e.target.name === \"Pin_Code\") {\n      // let API_KEY = '65afa4042e767571080003lgca37daa'\n      // await axios.get(`https://geocode.maps.co/search?q=${e.target.value}&api_key=${API_KEY}`).then((res) => {\n      //   console.log(\"PPPP...\", res)\n      //   let result = res.data.results || [];\n      //   if (result) {\n      //     console.log(\"result\", result)\n      //     toast.success(\"Pincode is valid\")\n      //   } else {\n      //     toast.error(\"Please enter a valid pincode\");\n      //   }\n      // }).catch((error) => {\n      //   console.log(error);\n      //   toast.error(error.message);\n      // })\n\n      const getValue = e.target.value\n\n      setValues({ ...values, [\"Pin_Code\"]: getValue });\n      try {\n        const response = await axios.get(`${BASE_URL}/Erpapp/PincodeCRUD/?pincode=${getValue}`, header);\n        const pincodeData = response?.data;\n        // const pincodeExists = pincodeData?.some((opt) => opt?.cityname?.toLowerCase() === selectedCity?.toLowerCase());\n\n        if (getValue?.length > 5) {\n          if (pincodeData?.length > 0) {\n            toast.success(\"Pincode is valid\");\n          } else {\n            toast.error(\"The provided pincode doesn't exist in the city.\");\n          }\n        }\n      } catch (error) {\n        console.error(error);\n        toast.error(\"Please enter a valid pincode\");\n      }\n\n\n    } else if (e.target.name === \"Commision_Paid\") {\n      const regex = /^(100(\\.0{1,2})?|[1-9]?\\d(\\.\\d{1,2})?)$/;\n      const getValue = e.target.value\n\n      if (regex.test(getValue)) {\n        setValues({ ...values, [\"Commision_Paid\"]: getValue });\n      } else {\n        setValues({ ...values, [\"Commision_Paid\"]: \"\" });\n      }\n    } else {\n      setValues({ ...values, [e.target.name]: e.target.value });\n    }\n  };\n\n\n  // get a total office hours\n  useEffect(() => {\n    // const fromTimeObject = new Date(`2022-01-01T${values?.Ofc_Starttime}`);\n    // const toTimeObject = new Date(`2022-01-01T${values?.Ofc_Endtime}`);\n    // const timediff = toTimeObject.getTime() - fromTimeObject.getTime();\n    // const totalhours = timediff / (1000 * 60 * 60);\n    // console.log(\"totalhours\",totalhours)\n    // setValues({ ...values, [\"Total_hours\"]: totalhours.toFixed(2) });\n    const yearB = new Date().getFullYear()\n    console.log(\"yearB\", yearB)\n    const fromTimeObject = new Date(`${yearB}-01-01T${values?.Ofc_Starttime}`);\n    const toTimeObject = new Date(`${yearB}-01-01T${values?.Ofc_Endtime}`);\n\n    const timeDiff = Math.abs(toTimeObject - fromTimeObject);\n    console.log(\"timeDiff\", timeDiff);\n    const hours = Math.floor(timeDiff / (1000 * 60 * 60));\n    const minutes = Math.floor((timeDiff / (1000 * 60)) % 60);\n    let totalhours = 0.0\n    if (values?.Ofc_Starttime && values?.Ofc_Endtime) {\n      totalhours = `${hours.toString().padStart(2, '0')}.${minutes.toString().padStart(2, '0')}`;\n    }\n    else {\n      totalhours = 0.0;\n    }\n    console.log(\"totalhours...\", totalhours)\n    setValues({ ...values, [\"Total_hours\"]: totalhours });\n  }, [values?.Ofc_Starttime, values?.Ofc_Endtime]);\n\n\n\n  const [open, setOpen] = useState(false);\n\n  const handleClickCancel = (newState) => {\n    // navigate(\"/purchase/purchase-request-list\");\n    setCreateMaterial(false);\n    setListMaterial(true);\n    setOpen(false);\n  };\n\n  return (\n    <>\n      <Div>\n        <Typography variant=\"h3\" sx={{ fontWeight: 500 }}>\n          Create Business Unit\n        </Typography>\n\n        <form onSubmit={handleCreateBU}>\n          <Div className=\"row\" sx={{ mt: 3 }}>\n            <Div className=\"col-12 col-md-6\">\n              <Grid container>\n                <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\n                  <Typography className=\"col-md-12 col-lg-7 col-xl-5 input-label\" sx={{ mt: 2 }}>\n                    Business Unit Name <span className=\"required\">*</span>\n                  </Typography>\n                  <FormControl className=\"col-md-12 col-lg-5 col-xl-6\">\n                    <TextField\n                      name=\"Bussiness_Unit\"\n                      value={values?.Bussiness_Unit}\n                      onChange={handleChangeItem}\n                      className=\"input-box\"\n                      id=\"outlined-basic\"\n                      placeholder=\"Business Unit Name\"\n                      variant=\"outlined\"\n                    />\n                    {/* <Div style={{ color: \"red\" }}> */}\n                    {/* {errors.supplierName?.message} */}\n                    {/* </Div> */}\n                  </FormControl>\n\n\n                </Grid>\n\n                <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\n                  <Typography className=\"col-md-12 col-lg-7 col-xl-5 input-label\" sx={{ mt: 2 }}>\n                    Head Of Operation <span className=\"required\">*</span>\n                  </Typography>\n                  <FormControl className=\"col-md-12 col-lg-5 col-xl-6\">\n                    <Autocomplete\n                      className=\"col-12 search-select\"\n                      id=\"combo-box-demo\"\n                      disablePortal\n                      name=\"Head_Of_Operation\"\n                      options={OwnerNames}\n                      getOptionLabel={(option) => option}\n                      onChange={(e, newValue) => {\n                        setHeadOperation(newValue);\n                        console.log(newValue);\n                      }}\n                      value={HeadOperation}\n                      renderInput={(params) => <TextField {...params} placeholder=\"Head Of Operation\" />}\n                    />\n                  </FormControl>\n\n                </Grid>\n\n                <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\n                  <Typography className=\"col-md-12 col-lg-7 col-xl-5 input-label\" sx={{ mt: 2 }}>\n                    Email Id <span className=\"required\">*</span>\n                  </Typography>\n                  <FormControl className=\"col-md-12 col-lg-5 col-xl-6\">\n                    <TextField\n                      name=\"Email\"\n                      value={values?.Email}\n                      onChange={handleChangeItem}\n                      className=\"col-12 input-box\"\n                      id=\"outlined-basic\"\n                      placeholder=\"Email Id\"\n                      variant=\"outlined\"\n                    />\n                  </FormControl>\n\n                </Grid>\n\n                <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\n                  <Typography className=\"col-md-12 col-lg-7 col-xl-5 input-label\" sx={{ mt: 2 }}>\n                    Address Line 1 <span className=\"required\">*</span>\n                  </Typography>\n                  <FormControl className=\"col-md-12 col-lg-5 col-xl-6\">\n                    <TextField\n                      name=\"Address_1\"\n                      value={values?.Address_1}\n                      onChange={handleChangeItem}\n                      className=\"col-12 input-box\"\n                      id=\"outlined-basic\"\n                      placeholder=\"Address Line 1\"\n                      variant=\"outlined\"\n                    />\n                  </FormControl>\n\n                </Grid>\n\n                <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\n                  <Typography className=\"col-md-12 col-lg-7 col-xl-5 input-label\" sx={{ mt: 2 }}>\n                    Country<span className=\"required\">*</span>\n                  </Typography>\n                  <FormControl className=\"col-md-12 col-lg-5 col-xl-6\">\n                    <Autocomplete\n                      className=\"search-select col-12\"\n                      name=\"selectedCountry\"\n                      options={countryLists}\n                      getOptionLabel={(option) => {\n                        if (typeof option === \"string\") {\n                          return option;\n                        }\n                        if (option && option?.country) {\n                          return option?.country;\n                        }\n                        return \"\";\n                      }}\n                      value={selectedCountry}\n                      onChange={(e, newValue) => {\n                        setSelectedCountry(newValue?.country);\n                        setCountryId(newValue?.id);\n                      }}\n                      renderInput={(params) => (\n                        <TextField\n                          {...params}\n                          placeholder=\"Choose a country\"\n                          autoComplete=\"off\"\n                        />\n                      )}\n                    />\n                  </FormControl>\n\n                </Grid>\n\n                <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\n                  <Typography className=\"col-md-12 col-lg-7 col-xl-5 input-label\" sx={{ mt: 2 }}>\n                    City<span className=\"required\">*</span>\n                  </Typography>\n                  <FormControl className=\"col-md-12 col-lg-5 col-xl-6\">\n                    <Autocomplete\n                      className=\"search-select col-12\"\n                      name=\"selectedCity\"\n                      options={cityLists}\n                      getOptionLabel={(option) => {\n                        if (typeof option === \"string\") {\n                          return option;\n                        }\n                        if (option && option) {\n                          return option;\n                        }\n                        return \"\";\n                      }}\n                      value={selectedCity}\n                      onChange={(e, newValue) => {\n                        setSelectedCity(newValue);\n                        setcityId(newValue?.id);\n                      }}\n                      renderInput={(params) => (\n                        <TextField\n                          {...params}\n                          placeholder=\"Choose a city\"\n                          autoComplete=\"off\"\n                        />\n                      )}\n                    />\n                  </FormControl>\n\n                </Grid>\n\n                <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\n                  <Typography className=\"col-md-12 col-lg-7 col-xl-5 input-label\" sx={{ mt: 2 }}>\n                    PAN No\n                  </Typography>\n                  <FormControl className=\"col-md-12 col-lg-5 col-xl-6\">\n                    <TextField\n                      name=\"Pan_No\"\n                      value={values?.Pan_No}\n                      onChange={handleChangeItem}\n                      className=\"col-12 input-box\"\n                      id=\"outlined-basic\"\n                      placeholder=\"PAN No\"\n                      variant=\"outlined\"\n                    />\n                  </FormControl>\n\n                </Grid>\n\n                <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\n                  <Typography className=\"col-md-12 col-lg-7 col-xl-5 input-label\" sx={{ mt: 2 }}>\n                    Agreement Ref No\n                  </Typography>\n                  <FormControl className=\"col-md-12 col-lg-5 col-xl-6\">\n                    <TextField\n                      className=\"col-12 input-box\"\n                      name=\"Agreement_Ref\"\n                      value={values?.Agreement_Ref}\n                      onChange={handleChangeItem}\n                      placeholder=\"Agreement Ref No\"\n                    />\n                  </FormControl>\n                </Grid>\n\n                <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\n                  <Typography className=\"col-md-12 col-lg-7 col-xl-5 input-label\" sx={{ mt: 2 }}>\n                    Office Timing From <span className=\"required\">*</span>\n                  </Typography>\n                  <FormControl className=\"col-md-12 col-lg-5 col-xl-6\">\n                    <TextField\n                      type=\"time\"\n                      name=\"Ofc_Starttime\"\n                      value={values?.Ofc_Starttime}\n                      onChange={handleChangeItem}\n                      className=\"col-12 input-box\"\n                      id=\"outlined-basic\"\n                      placeholder=\"From Time\"\n                      variant=\"outlined\"\n                    />\n                  </FormControl>\n                </Grid>\n\n                <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\n                  <Typography className=\"col-md-12 col-lg-7 col-xl-5 input-label\" sx={{ mt: 2 }}>\n                    Total Hours <span className=\"required\">*</span>\n                  </Typography>\n                  <FormControl className=\"col-md-12 col-lg-5 col-xl-6\">\n                    <TextField\n                      type=\"text\"\n                      name=\"Total_hours\"\n                      value={values?.Total_hours}\n                      // onChange={handleChangeItem}\n                      className=\"col-12 input-box\"\n                      id=\"outlined-basic\"\n                      placeholder=\"Total Hours\"\n                      variant=\"outlined\"\n                      disabled\n                    />\n                  </FormControl>\n                </Grid>\n\n                <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\n                  <Typography className=\"col-md-12 col-lg-7 col-xl-5 input-label\" sx={{ mt: 2 }}>\n                    Commision Paid\n                  </Typography>\n                  <FormControl className=\"col-md-12 col-lg-5 col-xl-6\">\n                    <TextField\n                      type=\"text\"\n                      name=\"Commision_Paid\"\n                      value={values?.Commision_Paid}\n                      onChange={handleChangeItem}\n                      className=\"col-12 input-box\"\n                      id=\"outlined-basic\"\n                      placeholder=\"Commision Paid\"\n                      variant=\"outlined\"\n                      InputProps={{\n                        endAdornment: <InputAdornment position=\"end\">%</InputAdornment>\n                      }}\n                    />\n                  </FormControl>\n                </Grid>\n\n                {/* <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\n                  <Typography className=\"col-md-12 col-lg-7 col-xl-5 input-label\" sx={{ mt: 2 }}>\n                    Corporate BU\n                  </Typography>\n                  <FormGroup className=\"col-md-12 col-lg-5 col-xl-6\">\n                    <FormControlLabel control={<Checkbox value={values?.Corporate_BU} onChange={(e) => {\n                      setValues({\n                        ...values,\n                        Corporate_BU: e.target.checked\n                      })\n                    }} />} label=\"\" />\n                  </FormGroup>\n                </Grid> */}\n\n              </Grid>\n            </Div>\n\n            <Div className=\"col-12 col-md-6\">\n              <Grid container>\n                <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\n                  <Typography className=\"col-md-12 col-lg-7 col-xl-5 input-label\" sx={{ mt: 2 }}>\n                    Managed By <span className=\"required\">*</span>\n                  </Typography>\n                  <FormControl className=\"col-md-12 col-lg-5 col-xl-6\">\n                    <Autocomplete\n                      className=\"search-select col-12\"\n                      name=\"Operated_By\"\n                      options={managedByLists}\n                      getOptionLabel={(option) => {\n                        if (typeof option === \"string\") {\n                          return option;\n                        }\n                        if (option && option?.value) {\n                          return option?.value;\n                        }\n                        return \"\";\n                      }}\n                      value={values?.Operated_By}\n                      onChange={(e, newValue) => {\n                        setValues({ ...values, [\"Operated_By\"]: newValue?.value });\n                      }}\n                      renderInput={(params) => (\n                        <TextField\n                          {...params}\n                          placeholder=\"Select Managed By\"\n                          autoComplete=\"off\"\n                        />\n                      )}\n                    />\n                    {/* <Select className=\"col-12 input-select\"\n                      onChange={handleChangeItem}\n                      name=\"Operated_By\"\n                      defaultValue=\"ManagedBy\"\n                    >\n                      <MenuItem value=\"ManagedBy\" style={{ display: \"none\", }}>Managed By</MenuItem>\n                      <MenuItem value=\"Partner\">Partner</MenuItem>\n                      <MenuItem value=\"Owner\">Owner</MenuItem>\n                    </Select> */}\n                  </FormControl>\n\n                </Grid>\n\n                <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\n                  <Typography className=\"col-md-12 col-lg-7 col-xl-5 input-label\" sx={{ mt: 2 }}>\n                    Contact No <span className=\"required\">*</span>\n                  </Typography>\n                  <FormControl className=\"col-md-12 col-lg-5 col-xl-6\">\n                    <TextField className=\"col-12 search-select\"\n                      name=\"Contact\"\n                      value={values?.Contact}\n                      onChange={handleChangeItem}\n                      variant=\"outlined\"\n                      placeholder=\"Contact No\"\n                    />\n                    {/* <Div style={{ color: \"red\" }}>{errors.poNumber?.message}</Div> */}\n                    {/*  */}\n                  </FormControl>\n\n                </Grid>\n\n                <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\n                  <Typography className=\"col-md-12 col-lg-7 col-xl-5 input-label\" sx={{ mt: 2 }}>\n                    Website\n                  </Typography>\n                  <FormControl className=\"col-md-12 col-lg-5 col-xl-6\">\n                    <TextField\n                      name=\"Website\"\n                      value={values?.Website}\n                      onChange={handleChangeItem}\n                      className=\"col-12 input-box\"\n                      id=\"outlined-basic\"\n                      placeholder=\"Website\"\n                      variant=\"outlined\"\n                    />\n                    {/* <Div style={{ color: \"red\" }}>{errors.poNumber?.message}</Div> */}\n                    {/*  */}\n                  </FormControl>\n\n                </Grid>\n\n                <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\n                  <Typography className=\"col-md-12 col-lg-7 col-xl-5 input-label\" sx={{ mt: 2 }}>\n                    Address Line 2 <span className=\"required\">*</span>\n                  </Typography>\n                  <FormControl className=\"col-md-12 col-lg-5 col-xl-6\">\n                    <TextField\n                      name=\"Address_2\"\n                      value={values?.Address_2}\n                      onChange={handleChangeItem}\n                      className=\"col-12 input-box\"\n                      id=\"outlined-basic\"\n                      placeholder=\"Address Line 2\"\n                      variant=\"outlined\"\n                    />\n                    {/* <Div style={{ color: \"red\" }}>{errors.poNumber?.message}</Div> */}\n                    {/*  */}\n                  </FormControl>\n\n                </Grid>\n\n                <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\n                  <Typography className=\"col-md-12 col-lg-7 col-xl-5 input-label\" sx={{ mt: 2 }}>\n                    State <span className=\"required\">*</span>\n                  </Typography>\n                  <FormControl className=\"col-md-12 col-lg-5 col-xl-6\">\n                    <Autocomplete\n                      className=\"search-select col-12\"\n                      name=\"selectedState\"\n                      options={stateLists}\n                      getOptionLabel={(option) => {\n                        if (typeof option === \"string\") {\n                          return option;\n                        }\n                        if (option && option?.name) {\n                          return option?.name;\n                        }\n                        return \"\";\n                      }}\n                      value={selectedState}\n                      onChange={(e, newValue) => {\n                        setSelectedState(newValue?.name);\n                        setStateId(newValue?.id);\n                      }}\n                      renderInput={(params) => (\n                        <TextField\n                          {...params}\n                          placeholder=\"Choose a state\"\n                          autoComplete=\"off\"\n                        />\n                      )}\n                    />\n\n                    {/* <TextField\n                    name=\"State\"\n                    value={values.State}\n                    onChange={handleChangeItem}\n                    className=\"col-12 input-box\"\n                    id=\"outlined-basic\"\n                    placeholder=\"State\"\n                    variant=\"outlined\"\n                  /> */}\n                    {/* <Div style={{ color: \"red\" }}>{errors.poNumber?.message}</Div> */}\n                    {/*  */}\n                  </FormControl>\n\n                </Grid>\n\n                <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\n                  <Typography className=\"col-md-12 col-lg-7 col-xl-5 input-label\" sx={{ mt: 2 }}>\n                    PIN Code <span className=\"required\">*</span>\n                  </Typography>\n                  <FormControl className=\"col-md-12 col-lg-5 col-xl-6\">\n                    <TextField\n                      name=\"Pin_Code\"\n                      value={values?.Pin_Code}\n                      onChange={handleChangeItem}\n                      className=\"col-12 input-box\"\n                      id=\"outlined-basic\"\n                      placeholder=\"PIN Code\"\n                      variant=\"outlined\"\n                    />\n                    {/* <Div style={{ color: \"red\" }}>{errors.poNumber?.message}</Div> */}\n                    {/*  */}\n                  </FormControl>\n\n                </Grid>\n\n                <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\n                  <Typography className=\"col-md-12 col-lg-7 col-xl-5 input-label\" sx={{ mt: 2 }}>\n                    GST No\n                  </Typography>\n                  <FormControl className=\"col-md-12 col-lg-5 col-xl-6\">\n                    <TextField\n                      name=\"GST_No\"\n                      value={values?.GST_No}\n                      onChange={handleChangeItem}\n                      className=\"col-12 input-box\"\n                      id=\"outlined-basic\"\n                      placeholder=\"GST No\"\n                      variant=\"outlined\"\n                    />\n                  </FormControl>\n\n                </Grid>\n\n                <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\n                  <Typography className=\"col-md-12 col-lg-7 col-xl-5 input-label\" sx={{ mt: 2 }}>\n                    Valid Upto\n                  </Typography>\n                  <FormControl className=\"col-md-12 col-lg-5 col-xl-6\">\n                    <ErpDateField\n                      id=\"Valid_Upto\"\n                      name=\"Valid_Upto\"\n                      inputValue={values?.Valid_Upto}\n                      handleInputChange={handleChangeItem}\n                      variant=\"outlined\"\n                    />\n                  </FormControl>\n                </Grid>\n\n                <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\n                  <Typography className=\"col-md-12 col-lg-7 col-xl-5 input-label\" sx={{ mt: 2 }}>\n                    Office Timing To <span className=\"required\">*</span>\n                  </Typography>\n                  <FormControl className=\"col-md-12 col-lg-5 col-xl-6\">\n                    <TextField\n                      type=\"time\"\n                      name=\"Ofc_Endtime\"\n                      value={values?.Ofc_Endtime}\n                      onChange={handleChangeItem}\n                      className=\"col-12 input-box\"\n                      id=\"outlined-basic\"\n                      placeholder=\"To Time\"\n                      variant=\"outlined\"\n                    />\n                  </FormControl>\n                </Grid>\n\n                <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\n                  <Typography className=\"col-md-12 col-lg-7 col-xl-5 input-label\" sx={{ mt: 2 }}>\n                    Corporate BU\n                  </Typography>\n                  <FormGroup className=\"col-md-12 col-lg-5 col-xl-6\">\n                    <FormControlLabel control={<Checkbox value={values?.Corporate_BU} onChange={(e) => {\n                      setValues({\n                        ...values,\n                        Corporate_BU: e.target.checked\n                      })\n                    }} />} label=\"\" />\n                  </FormGroup>\n                </Grid>\n\n                {/* <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\n                  <Typography className=\"col-md-12 col-lg-7 col-xl-5 input-label\" sx={{ mt: 2 }}>\n                    Working Days\n                  </Typography>\n                  <FormGroup className=\"col-md-12 col-lg-5 col-xl-6\" sx={{ display: \"flex\", flexDirection: \"row\", flexWrap: \"wrap\", columnGap: 3 }}>\n                    <FormControlLabel control={<Checkbox value={values?.Corporate_BU} onChange={(e) => {\n                      setValues({\n                        ...values,\n                        Corporate_BU: e.target.checked\n                      })\n                    }} />} label=\"Sunday\" />\n                    <FormControlLabel control={<Checkbox value={values?.Corporate_BU} onChange={(e) => {\n                      setValues({\n                        ...values,\n                        Corporate_BU: e.target.checked\n                      })\n                    }} />} label=\"Monday\" />\n                    <FormControlLabel control={<Checkbox value={values?.Corporate_BU} onChange={(e) => {\n                      setValues({\n                        ...values,\n                        Corporate_BU: e.target.checked\n                      })\n                    }} />} label=\"Tuesday\" />\n                    <FormControlLabel control={<Checkbox value={values?.Corporate_BU} onChange={(e) => {\n                      setValues({\n                        ...values,\n                        Corporate_BU: e.target.checked\n                      })\n                    }} />} label=\"Wednesday\" />\n                    <FormControlLabel control={<Checkbox value={values?.Corporate_BU} onChange={(e) => {\n                      setValues({\n                        ...values,\n                        Corporate_BU: e.target.checked\n                      })\n                    }} />} label=\"Thursday\" />\n                    <FormControlLabel control={<Checkbox value={values?.Corporate_BU} onChange={(e) => {\n                      setValues({\n                        ...values,\n                        Corporate_BU: e.target.checked\n                      })\n                    }} />} label=\"Friday\" />\n                    <FormControlLabel control={<Checkbox value={values?.Corporate_BU} onChange={(e) => {\n                      setValues({\n                        ...values,\n                        Corporate_BU: e.target.checked\n                      })\n                    }} />} label=\"Saturday\" />\n                  </FormGroup>\n                </Grid> */}\n\n              </Grid>\n            </Div>\n          </Div>\n\n          {/* code for purchase list table */}\n          <Div className=\"buttons\" sx={{ mt: 5, ml: 1, display: \"flex\", justifyContent: \"flex-start\" }}>\n            <ButtonGroup\n              type=\"submit\"\n              aria-label=\"split button\"\n              sx={{ mr: { sm: 0, md: 2 } }}\n            >\n              <Button type=\"submit\" className=\"plus-button\">\n                Save\n              </Button>\n              <Button variant=\"contained\" className=\"icon-button\">\n                <FaSave size={18} />\n              </Button>\n            </ButtonGroup>\n\n            <ButtonGroup aria-label=\"split button\" onClick={handleClickCancel}>\n              <Button className=\"plus-button\">Cancel</Button>\n              <Button variant=\"contained\" className=\"icon-button\">\n                <TiCancel size={24} />\n              </Button>\n            </ButtonGroup>\n\n          </Div>\n        </form>\n      </Div>\n    </>\n  );\n};\n\n\n\nexport default CreatePartner;","import Div from \"@jumbo/shared/Div\";\nimport {\n  Button,\n  FormControl,\n  Grid,\n  Autocomplete,\n  TextField,\n  Typography,\n  ButtonGroup,\n  FormControlLabel,\n  InputAdornment,\n  Checkbox,\n  FormGroup,\n} from \"@mui/material\";\nimport React, { useEffect } from \"react\";\nimport { useState } from \"react\";\nimport axios from \"axios\";\nimport { BASE_URL } from \"app/services/auth-services\";\nimport { toast } from \"react-toastify\";\nimport { FaSave } from \"react-icons/fa\";\nimport { TiCancel } from \"react-icons/ti\";\nimport \"./partners.css\";\nimport itemServices from \"app/services/item-master-services\";\nimport { ErpDateField } from \"app/shared/ReuseComponents/ButtonComponent\";\nimport { todayDate } from \"app/shared/ReuseComponents/DateFormatter\";\n\n\nconst EditPartnerList = ({\n  setEditPartnerList,\n  setListMaterial,\n  currentPart,\n  setcurenrtPart\n}) => {\n\n  const token = localStorage.getItem(\"accesstoken\");\n\n  const header = {\n    headers: {\n      Authorization: `Bearer ${token}`,\n      \"Content-Type\": \"application/json\",\n      Accept: \"application/json\",\n    },\n  };\n\n  let userDetails = localStorage.getItem(\"UserDetails\");\n  userDetails = JSON.parse(userDetails);\n\n  // Get Users\n  const [OwnerNames, setOwnerNames] = useState([]);\n\n  const [managedByLists, setManagedByLists] = useState([]);\n  const [countryLists, setCountryLists] = useState([]);\n  const [stateLists, setStateLists] = useState([]);\n  const [cityLists, setCityLists] = useState([]);\n  const [countryId, setCountryId] = useState(\"\");\n  const [stateId, setStateId] = useState(\"\");\n  const [cityId, setcityId] = useState(\"\");\n\n  const getCountryLists = () => {\n    axios\n      .get(`https://countriesnow.space/api/v0.1/countries`, {\n        headers: {\n          //   Authorization: `Bearer ${token}`,\n          \"Content-Type\": \"application/json\",\n          Accept: \"application/json\",\n        },\n      })\n      .then((res) => {\n        console.log(res.data.data);\n        setCountryLists(res.data.data);\n      })\n      .catch((error) => {\n        console.log(\"ds\", error);\n      });\n  };\n\n  const getStateLists = () => {\n    axios.post(\n      `https://countriesnow.space/api/v0.1/countries/states`,\n      { country: selectedCountry },\n      {\n        headers: {\n          //   Authorization: `Bearer ${token}`,\n          \"Content-Type\": \"application/json\",\n          Accept: \"application/json\",\n        },\n      }\n    )\n      .then((res) => {\n        console.log(res.data.data);\n        var state = res.data.data;\n        setStateLists(state.states);\n      })\n      .catch((error) => {\n        console.log(\"ds\", error);\n      });\n  };\n\n  const getCityLists = () => {\n    var payload = {\n      country: selectedCountry,\n      state: selectedState,\n    };\n\n    axios\n      .post(\n        `https://countriesnow.space/api/v0.1/countries/state/cities`,\n        payload,\n        {\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Accept: \"application/json\",\n          },\n        }\n      )\n      .then((res) => {\n        console.log(res.data);\n        var city = res.data.data;\n        var citynames = city?.map((cityname) => {\n          const normalizedCity = cityname.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\n          if (normalizedCity === \"Naini Tal\") {\n            return normalizedCity.replace(\" \", \"\");\n          }\n          return normalizedCity;\n        });\n        setCityLists(citynames);\n      })\n      .catch((error) => {\n        console.log(\"ds\", error);\n      });\n  };\n\n  React.useEffect(() => {\n    getCountryLists();\n    getStateLists();\n    getCityLists();\n  }, [countryId, stateId, cityId]);\n\n\n  const getUsers = async () => {\n    try {\n      const response = await axios.get(`${BASE_URL}/Erpapp/Userlistwithoutpagination/`, header);\n      console.log(\"oji\", response?.data);\n      setOwnerNames(response?.data?.map((item) => `${item?.first_name} ${item?.last_name}`));\n    }\n    catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    getUsers()\n  }, []);\n\n  useEffect(() => {\n    // get managed by from lookup\n    const getManagedBy = () => {\n      var unitpayload = {\n        Search: \"Managed By\",\n      };\n      itemServices\n        .getUnits(unitpayload, header)\n        .then((res) => {\n          console.log(res[0].value);\n          setManagedByLists(res[0].value);\n        })\n        .catch((error) => {\n          console.log(error);\n        });\n    }\n\n    getManagedBy();\n  }, [])\n\n\n  const handleClickBack = () => {\n    setEditPartnerList(false);\n    setListMaterial(true);\n  };\n\n  console.log(\"OwnerNames\", OwnerNames);\n\n  // Update States\n  const [PartnerName, setPartnerName] = useState(\"\");\n  const [OperatedBy, setOperatedBy] = useState(\"\");\n  const [HeadOfOperation, setHeadOfOperation] = useState(\"\");\n  const [BusinessUnitPhone, setBusinessUnitPhone] = useState(0);\n  const [BusinessUnitEMail, setBusinessUnitEMail] = useState(\"\");\n  const [BusinessUnitWeb, setBusinessUnitWeb] = useState(\"\");\n  const [BusinessUnitAddressline1, setBusinessUnitAddressline1] = useState(\"\");\n  const [BusinessUnitAddressline2, setBusinessUnitAddressline2] = useState(\"\");\n  const [BusinessUnitPincode, setBusinessUnitPincode] = useState(\"\");\n  const [BusinessUnitPanNo, setBusinessUnitPanNo] = useState(\"\");\n  const [BusinessUnitGSTNo, setBusinessUnitGSTNo] = useState(\"\");\n  const [AgreementRefNo, setAgreementRefNo] = useState(\"\");\n  const [AgreementValidupto, setAgreementValidupto] = useState(\"\");\n  const [PartnerId, setPartnerId] = useState(\"\");\n  const [id, setId] = useState(\"\");\n  const [selectedCountry, setSelectedCountry] = useState(\"\");\n  const [selectedState, setSelectedState] = useState(\"\");\n  const [selectedCity, setSelectedCity] = useState(\"\");\n  const [startTime, setStartTime] = useState(\"\");\n  const [endTime, setEndTime] = useState(\"\");\n  const [totalHours, setTotalHours] = useState(\"\");\n  const [commisionPaid, setCommisionPaid] = useState(\"\");\n  const [corporateBU, setCorporateBU] = useState(false);\n\n  // Update States\n  const [PartnerName1, setPartnerName1] = useState(\"\");\n  const [OperatedBy1, setOperatedBy1] = useState(\"\");\n  const [HeadOfOperation1, setHeadOfOperation1] = useState(\"\");\n  const [BusinessUnitPhone1, setBusinessUnitPhone1] = useState(0);\n  const [BusinessUnitEMail1, setBusinessUnitEMail1] = useState(\"\");\n  const [BusinessUnitWeb1, setBusinessUnitWeb1] = useState(\"\");\n  const [BusinessUnitAddressline11, setBusinessUnitAddressline11] = useState(\"\");\n  const [BusinessUnitAddressline21, setBusinessUnitAddressline21] = useState(\"\");\n  const [BusinessUnitPincode1, setBusinessUnitPincode1] = useState(\"\");\n  const [BusinessUnitPanNo1, setBusinessUnitPanNo1] = useState(\"\");\n  const [BusinessUnitGSTNo1, setBusinessUnitGSTNo1] = useState(\"\");\n  const [AgreementRefNo1, setAgreementRefNo1] = useState(\"\");\n  const [AgreementValidupto1, setAgreementValidupto1] = useState(\"\");\n  const [selectedCountry1, setSelectedCountry1] = useState(\"\");\n  const [selectedState1, setSelectedState1] = useState(\"\");\n  const [selectedCity1, setSelectedCity1] = useState(\"\");\n  const [startTime1, setStartTime1] = useState(\"\");\n  const [endTime1, setEndTime1] = useState(\"\");\n  const [totalHours1, setTotalHours1] = useState(\"\");\n  const [commisionPaid1, setCommisionPaid1] = useState(\"\");\n  const [corporateBU1, setCorporateBU1] = useState(false);\n\n\n  const HandleUpdate = async (e) => {\n    e.preventDefault();\n\n    let itempayload = {\n      id: id,\n      Partner_Id: PartnerId,\n      Partner_Name: PartnerName,\n      Operated_By: OperatedBy,\n      HeadOf_Operation: HeadOfOperation,\n      BusinessUnit_Phone: BusinessUnitPhone,\n      BusinessUnit_EMail: BusinessUnitEMail,\n      BusinessUnit_Web: BusinessUnitWeb,\n      BusinessUnit_Addressline1: BusinessUnitAddressline1,\n      BusinessUnit_City: selectedCity,\n      BusinessUnit_Country: selectedCountry,\n      BusinessUnit_State: selectedState,\n      BusinessUnit_Zone: \"\",\n      BusinessUnit_Pincode: BusinessUnitPincode,\n      BusinessUnit_PanNo: BusinessUnitPanNo,\n      BusinessUnit_GSTNo: BusinessUnitGSTNo,\n      Agreement_RefNo: AgreementRefNo,\n      Agreement_Validupto: AgreementValidupto ? AgreementValidupto : \"0001-01-01\",\n      Ofc_Starttime: startTime,\n      Ofc_Endtime: endTime,\n      Total_hours: parseFloat(totalHours),\n      Corporate_BU: corporateBU,\n      Commision_Paid: commisionPaid || 0,\n      Company_Id: parseInt(localStorage.getItem(\"OrganizationId\")),\n      Created_By: parseInt(localStorage.getItem(\"UserId\")),\n      Updated_By: parseInt(localStorage.getItem(\"UserId\")),\n      Updated_Date: todayDate,\n    }\n\n    console.log(\"itempayload :\", itempayload);\n\n    try {\n      const res = await axios.put(`${BASE_URL}/Erpapp/PartnerCRUD/`, itempayload, header);\n      console.log(res?.data);\n      if (res?.data?.id) {\n        toast.success(`${PartnerId} is Updated successfully`);\n        getUsers();\n        setListMaterial(true);\n        setEditPartnerList(false);\n\n        // For history Saving\n\n        // Edited Fields History\n\n        let EditedArr = [];\n\n        if (PartnerName !== PartnerName1) {\n          EditedArr.push(\"Partner Name\");\n        }\n        if (OperatedBy !== OperatedBy1) {\n          EditedArr.push(\"Operated By\");\n        }\n        if (HeadOfOperation !== HeadOfOperation1) {\n          EditedArr.push(\"HeadOfOperation\");\n        }\n        if (BusinessUnitPhone !== BusinessUnitPhone1) {\n          EditedArr.push(\"Contact No\");\n        }\n        if (BusinessUnitEMail !== BusinessUnitEMail1) {\n          EditedArr.push(\"Email\");\n        }\n        if (BusinessUnitWeb !== BusinessUnitWeb1) {\n          EditedArr.push(\"Website\");\n        }\n        if (BusinessUnitAddressline1 !== BusinessUnitAddressline11) {\n          EditedArr.push(\"Adress 1\");\n        }\n        if (BusinessUnitAddressline2 !== BusinessUnitAddressline21) {\n          EditedArr.push(\"Adress 2\");\n        }\n        if (BusinessUnitPincode !== BusinessUnitPincode1) {\n          EditedArr.push(\"pincode\");\n        }\n        if (BusinessUnitPanNo !== BusinessUnitPanNo1) {\n          EditedArr.push(\"Pancard No\");\n        }\n        if (BusinessUnitGSTNo !== BusinessUnitGSTNo1) {\n          EditedArr.push(\"GST No\");\n        }\n        if (AgreementRefNo !== AgreementRefNo1) {\n          EditedArr.push(\"Agreement No\");\n        }\n        if (AgreementValidupto !== AgreementValidupto1) {\n          EditedArr.push(\"Agreement Validupto\");\n        }\n        if (selectedCountry !== selectedCountry1) {\n          EditedArr.push(\"Country\");\n        }\n        if (selectedState !== selectedState1) {\n          EditedArr.push(\"State\");\n        }\n        if (selectedCity !== selectedCity1) {\n          EditedArr.push(\"City\");\n        }\n        if (startTime !== startTime1) {\n          EditedArr.push(\"Start Time\");\n        }\n        if (endTime !== endTime1) {\n          EditedArr.push(\"End Time\");\n        }\n        if (totalHours !== totalHours1) {\n          EditedArr.push(\"Total Hours\");\n        }\n        if (commisionPaid !== commisionPaid1) {\n          EditedArr.push(\"Commision Paid\");\n        }\n        if (corporateBU !== corporateBU1) {\n          EditedArr.push(\"Corporate BU\");\n        }\n\n        let editUser = localStorage.getItem(\"Username\");\n\n        console.log(\"EditedArr\", EditedArr);\n        if (EditedArr?.length > 0) {\n          axios\n            .post(\n              `${BASE_URL}/Erpapp/Updaterecordscrud/`,\n              {\n                Document_Id: PartnerId,\n                Updated_Person: `${editUser} edited this Bussiness Unit.`,\n                Is_Deleted: false,\n                Updated_Time: `${new Date().getHours()}:${new Date().getMinutes()}:${new Date().getSeconds()}`,\n                Updated_Field: EditedArr.join(\",\"),\n                Updated_Date: todayDate,\n                Partner_Id: parseInt(localStorage.getItem(\"PartnerId\")),\n                Updated_By: parseInt(localStorage.getItem(\"UserId\")),\n              },\n              {\n                headers: {\n                  Authorization: `Bearer ${token}`,\n                  \"Content-Type\": \"application/json\",\n                  Accept: \"application/json\",\n                },\n              }\n            )\n            .then((res) => {\n              console.log(\"Result\", res.data);\n              // alert(\"Success\")\n            })\n            .catch((res) => {\n              console.log(res.message);\n            });\n        }\n\n      } else {\n        toast.error(\"Please check your inputs\")\n      }\n    }\n    catch (error) {\n      console.log(error);\n      toast.error(\"You do not have permission to perform this action.\");\n    }\n  };\n\n  const getData = async () => {\n    try {\n      const response = await axios.get(`${BASE_URL}/Erpapp/PartnerCRUD/?Partner_Id=${currentPart?.Partner_Id}`, {\n        headers: {\n          Authorization: `Bearer ${token}`,\n          'Content-Type': 'application/json',\n          Accept: 'application/json',\n        }\n      })\n      setPartnerId(response?.data?.Partner_Id);\n      setId(response?.data?.id);\n      setPartnerName(response?.data?.Partner_Name);\n      setOperatedBy(response?.data?.Operated_By);\n      setHeadOfOperation(response?.data?.HeadOf_Operation);\n      setBusinessUnitPhone(response?.data?.BusinessUnit_Phone);\n      setBusinessUnitEMail(response?.data?.BusinessUnit_EMail);\n      setBusinessUnitWeb(response?.data?.BusinessUnit_Web);\n      setBusinessUnitAddressline1(response?.data?.BusinessUnit_Addressline1);\n      setBusinessUnitAddressline2(response?.data?.Operated_By);\n      setSelectedCity(response?.data?.BusinessUnit_City);\n      setSelectedCountry(response?.data?.BusinessUnit_Country);\n      setSelectedState(response?.data?.BusinessUnit_State);\n      setBusinessUnitPincode(response?.data?.BusinessUnit_Pincode);\n      setBusinessUnitPanNo(response?.data?.BusinessUnit_PanNo);\n      setBusinessUnitGSTNo(response?.data?.BusinessUnit_GSTNo);\n      setAgreementRefNo(response?.data?.Agreement_RefNo);\n      setAgreementValidupto(response?.data?.Agreement_Validupto);\n      setStartTime(response?.data?.Ofc_Starttime);\n      setEndTime(response?.data?.Ofc_Endtime);\n      setTotalHours(response?.data?.Total_hours);\n      setCommisionPaid(response?.data?.Commision_Paid);\n      setCorporateBU(response?.data?.Corporate_BU);\n\n      //for History\n      setPartnerName1(response?.data?.Partner_Name);\n      setOperatedBy1(response?.data?.Operated_By);\n      setHeadOfOperation1(response?.data?.HeadOf_Operation);\n      setBusinessUnitPhone1(response?.data?.BusinessUnit_Phone);\n      setBusinessUnitEMail1(response?.data?.BusinessUnit_EMail);\n      setBusinessUnitWeb1(response?.data?.BusinessUnit_Web);\n      setBusinessUnitAddressline11(response?.data?.BusinessUnit_Addressline1);\n      setBusinessUnitAddressline21(response?.data?.Operated_By);\n      setSelectedCity1(response?.data?.BusinessUnit_City);\n      setSelectedCountry1(response?.data?.BusinessUnit_Country);\n      setSelectedState1(response?.data?.BusinessUnit_State);\n      setBusinessUnitPincode1(response?.data?.BusinessUnit_Pincode);\n      setBusinessUnitPanNo1(response?.data?.BusinessUnit_PanNo);\n      setBusinessUnitGSTNo1(response?.data?.BusinessUnit_GSTNo);\n      setAgreementRefNo1(response?.data?.Agreement_RefNo);\n      setAgreementValidupto1(response?.data?.Agreement_Validupto);\n      setStartTime1(response?.data?.Ofc_Starttime);\n      setEndTime1(response?.data?.Ofc_Endtime);\n      setTotalHours1(response?.data?.Total_hours);\n      setCommisionPaid1(response?.data?.Commision_Paid);\n      setCorporateBU1(response?.data?.Corporate_BU);\n\n    }\n    catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    const timer = setTimeout(async () => {\n      await getData();\n    }, 1000);\n\n    return () => clearTimeout(timer);\n  }, [currentPart]);\n\n\n  // get a total office hours\n  useEffect(() => {\n    console.log(\"totalhours\", startTime, endTime)\n    const fromTimeObject = new Date(`2024-01-01T${startTime}`);\n    const toTimeObject = new Date(`2024-01-01T${endTime}`);\n\n    const timeDiff = Math.abs(toTimeObject - fromTimeObject);\n    console.log(\"timeDiff\", timeDiff);\n    const hours = Math.floor(timeDiff / (1000 * 60 * 60));\n    const minutes = Math.floor((timeDiff / (1000 * 60)) % 60);\n    const totalhours = `${hours.toString().padStart(2, '0')}.${minutes.toString().padStart(2, '0')}`;\n    console.log(\"totalhours...\", totalhours)\n    setTotalHours(totalhours);\n  }, [startTime, endTime]);\n\n\n  return (\n    <>\n      <Div>\n        <Typography variant=\"h3\" sx={{ fontWeight: 500 }}>\n          Edit Business Unit\n        </Typography>\n\n        <Div className=\"row\" sx={{ mt: 3 }}>\n          <Div className=\"col-12 col-md-6\">\n            <Grid container>\n              <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\n                <Typography className=\"col-md-12 col-lg-7 col-xl-5 input-label\" sx={{ mt: 2 }}>\n                  Business Unit Name <span className=\"required\">*</span>\n                </Typography>\n                <FormControl className=\"col-md-12 col-lg-5 col-xl-6\">\n                  <TextField\n                    name=\"Bussiness_Unit\"\n                    value={PartnerName}\n                    onChange={(e) => setPartnerName(e.target.value)}\n                    className=\"input-box\"\n                    id=\"outlined-basic\"\n                    placeholder=\"Business Unit Name\"\n                    variant=\"outlined\"\n                  />\n                </FormControl>\n              </Grid>\n\n              <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\n                <Typography className=\"col-md-12 col-lg-7 col-xl-5 input-label\" sx={{ mt: 2 }}>\n                  Head Of Operation <span className=\"required\">*</span>\n                </Typography>\n                <FormControl className=\"col-md-12 col-lg-5 col-xl-6\">\n                  <Autocomplete\n                    className=\"col-12 search-select\"\n                    id=\"combo-box-demo\"\n                    disablePortal\n                    name=\"Head_Of_Operation\"\n                    options={OwnerNames}\n                    getOptionLabel={(option) => {\n                      if (typeof option === \"string\") {\n                        return option;\n                      }\n                      if (option && option?.first_name) {\n                        return `${option?.first_name} ${option?.last_name}`;\n                      }\n                      return \"\";\n                    }}\n                    value={HeadOfOperation}\n                    onChange={(e, newValue) => {\n                      setHeadOfOperation(`${newValue?.first_name} ${newValue?.last_name}`);\n                      console.log(newValue);\n                    }}\n                    renderInput={(params) => <TextField {...params} placeholder=\"Head Of Operation\" />}\n                  />\n                </FormControl>\n\n              </Grid>\n\n              <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\n                <Typography className=\"col-md-12 col-lg-7 col-xl-5 input-label\" sx={{ mt: 2 }}>\n                  Email Id <span className=\"required\">*</span>\n                </Typography>\n                <FormControl className=\"col-md-12 col-lg-5 col-xl-6\">\n                  <TextField\n                    name=\"Email\"\n                    value={BusinessUnitEMail}\n                    onChange={(e) => setBusinessUnitEMail(e.target.value)}\n                    className=\"col-12 input-box\"\n                    id=\"outlined-basic\"\n                    placeholder=\"Mail Id\"\n                    variant=\"outlined\"\n                  />\n                </FormControl>\n\n              </Grid>\n\n              <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\n                <Typography className=\"col-md-12 col-lg-7 col-xl-5 input-label\" sx={{ mt: 2 }}>\n                  Address Line 1 <span className=\"required\">*</span>\n                </Typography>\n                <FormControl className=\"col-md-12 col-lg-5 col-xl-6\">\n                  <TextField\n                    name=\"Address_1\"\n                    value={BusinessUnitAddressline1}\n                    onChange={(e) => setBusinessUnitAddressline1(e.target.value)}\n                    className=\"col-12 input-box\"\n                    id=\"outlined-basic\"\n                    placeholder=\"Address Line 1\"\n                    variant=\"outlined\"\n                  />\n                </FormControl>\n\n              </Grid>\n\n              <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\n                <Typography className=\"col-md-12 col-lg-7 col-xl-5 input-label\" sx={{ mt: 2 }}>\n                  Country <span className=\"required\">*</span>\n                </Typography>\n                <FormControl className=\"col-md-12 col-lg-5 col-xl-6\">\n                  <Autocomplete\n                    className=\"search-select col-12\"\n                    name=\"selectedCountry\"\n                    options={countryLists}\n                    getOptionLabel={(option) => {\n                      if (typeof option === \"string\") {\n                        return option;\n                      }\n                      if (option && option?.country) {\n                        return option?.country;\n                      }\n                      return \"\";\n                    }}\n                    value={selectedCountry}\n                    onChange={(e, newValue) => {\n                      setSelectedCountry(newValue?.country);\n                      setCountryId(newValue?.id);\n                    }}\n                    renderInput={(params) => (\n                      <TextField\n                        {...params}\n                        placeholder=\"Choose a country\"\n                        autoComplete=\"off\"\n                      />\n                    )}\n                  />\n                  {/* <TextField\n                    name=\"Country\"\n                    value={values.Country}\n                    onChange={handleChangeItem}\n                    className=\"col-12 input-box\"\n                    id=\"outlined-basic\"\n                    placeholder=\"Country\"\n                    variant=\"outlined\"\n                  /> */}\n                </FormControl>\n\n              </Grid>\n\n              <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\n                <Typography className=\"col-md-12 col-lg-7 col-xl-5 input-label\" sx={{ mt: 2 }}>\n                  City <span className=\"required\">*</span>\n                </Typography>\n                <FormControl className=\"col-md-12 col-lg-5 col-xl-6\">\n                  <Autocomplete\n                    className=\"search-select col-12\"\n                    name=\"selectedState\"\n                    options={cityLists}\n                    getOptionLabel={(option) => {\n                      if (typeof option === \"string\") {\n                        return option;\n                      }\n                      if (option && option) {\n                        return option;\n                      }\n                      return \"\";\n                    }}\n                    value={selectedCity}\n                    onChange={(e, newValue) => {\n                      setSelectedCity(newValue);\n                      setcityId(newValue?.id);\n                    }}\n                    renderInput={(params) => (\n                      <TextField\n                        {...params}\n                        placeholder=\"Choose a city\"\n                        autoComplete=\"off\"\n                      />\n                    )}\n                  />\n                  {/* <TextField\n                    name=\"City\"\n                    value={values.City}\n                    onChange={handleChangeItem}\n                    className=\"col-12 input-box\"\n                    id=\"outlined-basic\"\n                    placeholder=\"City\"\n                    variant=\"outlined\"\n                  /> */}\n                </FormControl>\n\n              </Grid>\n\n              <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\n                <Typography className=\"col-md-12 col-lg-7 col-xl-5 input-label\" sx={{ mt: 2 }}>\n                  PAN No\n                </Typography>\n                <FormControl className=\"col-md-12 col-lg-5 col-xl-6\">\n                  <TextField\n                    name=\"Pan_No\"\n                    value={BusinessUnitPanNo}\n                    onChange={(e) => setBusinessUnitPanNo(e.target.value)}\n                    className=\"col-12 input-box\"\n                    id=\"outlined-basic\"\n                    placeholder=\"PAN No\"\n                    variant=\"outlined\"\n                  />\n                </FormControl>\n\n              </Grid>\n\n              <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\n                <Typography className=\"col-md-12 col-lg-7 col-xl-5 input-label\" sx={{ mt: 2 }}>\n                  Agreement Ref No\n                </Typography>\n                <FormControl className=\"col-md-12 col-lg-5 col-xl-6\">\n                  <TextField\n                    name=\"Agreement_Ref\"\n                    value={AgreementRefNo}\n                    onChange={(e) => setAgreementRefNo(e.target.value)}\n                    className=\"col-12 input-box\"\n                    id=\"outlined-basic\"\n                    placeholder=\"Agreement Ref No\"\n                    variant=\"outlined\"\n                  />\n                </FormControl>\n              </Grid>\n\n              <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\n                <Typography className=\"col-md-12 col-lg-7 col-xl-5 input-label\" sx={{ mt: 2 }}>\n                  Office Timing From  <span className=\"required\">*</span>\n                </Typography>\n                <FormControl className=\"col-md-12 col-lg-5 col-xl-6\">\n                  <TextField\n                    type=\"time\"\n                    name=\"startTime\"\n                    value={startTime}\n                    onChange={(e) => setStartTime(e.target.value)}\n                    className=\"col-12 input-box\"\n                    id=\"outlined-basic\"\n                    placeholder=\"From Time\"\n                    variant=\"outlined\"\n                  />\n                </FormControl>\n              </Grid>\n\n              <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\n                <Typography className=\"col-md-12 col-lg-7 col-xl-5 input-label\" sx={{ mt: 2 }}>\n                  Total Hours  <span className=\"required\">*</span>\n                </Typography>\n                <FormControl className=\"col-md-12 col-lg-5 col-xl-6\">\n                  <TextField\n                    type=\"text\"\n                    name=\"totalHours\"\n                    value={totalHours}\n                    // onChange={handleChangeItem}\n                    className=\"col-12 input-box\"\n                    id=\"outlined-basic\"\n                    placeholder=\"Total Hours\"\n                    variant=\"outlined\"\n                    disabled\n                  />\n                </FormControl>\n              </Grid>\n\n              <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\n                <Typography className=\"col-md-12 col-lg-7 col-xl-5 input-label\" sx={{ mt: 2 }}>\n                  Commision Paid\n                </Typography>\n                <FormControl className=\"col-md-12 col-lg-5 col-xl-6\">\n                  <TextField\n                    type=\"text\"\n                    name=\"commisionPaid\"\n                    value={commisionPaid}\n                    onChange={(e) => {\n                      if (e.target.name === \"commisionPaid\") {\n                        const regex = /^(100(\\.0{1,2})?|[1-9]?\\d(\\.\\d{1,2})?)$/;\n                        const getValue = e.target.value\n                        console.log(\"regex.test(getValue)\", regex, getValue);\n                        if (regex.test(getValue)) {\n                          setCommisionPaid(getValue);\n                        } else {\n                          setCommisionPaid(\"\")\n                        }\n                      }\n                    }}\n                    className=\"col-12 input-box\"\n                    id=\"outlined-basic\"\n                    placeholder=\"Commision Paid\"\n                    variant=\"outlined\"\n                    InputProps={{\n                      endAdornment: <InputAdornment position=\"end\">%</InputAdornment>\n                    }}\n                  />\n                </FormControl>\n              </Grid>\n\n              {/* <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\n                <Typography className=\"col-md-12 col-lg-7 col-xl-5 input-label\" sx={{ mt: 2 }}>\n                  Corporate BU\n                </Typography>\n                <FormGroup className=\"col-md-12 col-lg-5 col-xl-6\">\n                  <FormControlLabel control={<Checkbox value={corporateBU} checked={corporateBU} onChange={(e) => setCorporateBU(e.target.checked)} />} label=\"\" />\n                </FormGroup>\n              </Grid> */}\n\n            </Grid>\n          </Div>\n\n          <Div className=\"col-12 col-md-6\">\n            <Grid container>\n\n              <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\n                <Typography className=\"col-md-12 col-lg-7 col-xl-5 input-label\" sx={{ mt: 2 }}>\n                  Operated By <span className=\"required\">*</span>\n                </Typography>\n                <FormControl className=\"col-md-12 col-lg-5 col-xl-6\">\n                  <Autocomplete\n                    className=\"search-select col-12\"\n                    name=\"Operated_By\"\n                    options={managedByLists}\n                    getOptionLabel={(option) => {\n                      if (typeof option === \"string\") {\n                        return option;\n                      }\n                      if (option && option?.value) {\n                        return option?.value;\n                      }\n                      return \"\";\n                    }}\n                    value={OperatedBy}\n                    onChange={(e, newValue) => {\n                      setOperatedBy(newValue?.value);\n                    }}\n                    renderInput={(params) => (\n                      <TextField\n                        {...params}\n                        placeholder=\"Select Managed By\"\n                        autoComplete=\"off\"\n                      />\n                    )}\n                  />\n                </FormControl>\n\n              </Grid>\n\n              <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\n                <Typography className=\"col-md-12 col-lg-7 col-xl-5 input-label\" sx={{ mt: 2 }}>\n                  Contact No <span className=\"required\">*</span>\n                </Typography>\n                <FormControl className=\"col-md-12 col-lg-5 col-xl-6\">\n                  <TextField className=\"col-12 search-select\"\n                    name=\"Contact\"\n                    value={BusinessUnitPhone}\n                    onChange={(e) => setBusinessUnitPhone(e.target.value)}\n                    variant=\"outlined\"\n                    placeholder=\"Contact No\"\n                  />\n                </FormControl>\n\n              </Grid>\n\n              <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\n                <Typography className=\"col-md-12 col-lg-7 col-xl-5 input-label\" sx={{ mt: 2 }}>\n                  Website\n                </Typography>\n                <FormControl className=\"col-md-12 col-lg-5 col-xl-6\">\n                  <TextField\n                    name=\"Website\"\n                    value={BusinessUnitWeb}\n                    onChange={(e) => setBusinessUnitWeb(e.target.value)}\n                    className=\"col-12 input-box\"\n                    id=\"outlined-basic\"\n                    placeholder=\"Website\"\n                    variant=\"outlined\"\n                  />\n                </FormControl>\n\n              </Grid>\n\n              <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\n                <Typography className=\"col-md-12 col-lg-7 col-xl-5 input-label\" sx={{ mt: 2 }}>\n                  Address Line 2 <span className=\"required\">*</span>\n                </Typography>\n                <FormControl className=\"col-md-12 col-lg-5 col-xl-6\">\n                  <TextField\n                    name=\"Address_2\"\n                    value={BusinessUnitAddressline2}\n                    onChange={(e) => setBusinessUnitAddressline2(e.target.value)}\n                    className=\"col-12 input-box\"\n                    id=\"outlined-basic\"\n                    placeholder=\"Address Line 2\"\n                    variant=\"outlined\"\n                  />\n                </FormControl>\n\n              </Grid>\n\n              <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\n                <Typography className=\"col-md-12 col-lg-7 col-xl-5 input-label\" sx={{ mt: 2 }}>\n                  State<span className=\"required\">*</span>\n                </Typography>\n                <FormControl className=\"col-md-12 col-lg-5 col-xl-6\">\n                  <Autocomplete\n                    className=\"search-select col-12\"\n                    name=\"selectedState\"\n                    options={stateLists}\n                    getOptionLabel={(option) => {\n                      if (typeof option === \"string\") {\n                        return option;\n                      }\n                      if (option && option?.name) {\n                        return option?.name;\n                      }\n                      return \"\";\n                    }}\n                    value={selectedState}\n                    onChange={(e, newValue) => {\n                      setSelectedState(newValue?.name);\n                      setStateId(newValue?.id);\n                    }}\n                    renderInput={(params) => (\n                      <TextField\n                        {...params}\n                        placeholder=\"Choose a state\"\n                        autoComplete=\"off\"\n                      />\n                    )}\n                  />\n\n                  {/* <TextField\n                    name=\"State\"\n                    value={values.State}\n                    onChange={handleChangeItem}\n                    className=\"col-12 input-box\"\n                    id=\"outlined-basic\"\n                    placeholder=\"State\"\n                    variant=\"outlined\"\n                  /> */}\n                  {/* <Div style={{ color: \"red\" }}>{errors.poNumber?.message}</Div> */}\n                  {/*  */}\n                </FormControl>\n\n              </Grid>\n\n              <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\n                <Typography className=\"col-md-12 col-lg-7 col-xl-5 input-label\" sx={{ mt: 2 }}>\n                  PIN Code <span className=\"required\">*</span>\n                </Typography>\n                <FormControl className=\"col-md-12 col-lg-5 col-xl-6\">\n                  <TextField\n                    name=\"Pin_Code\"\n                    value={BusinessUnitPincode}\n                    onChange={async (e) => {\n                      setBusinessUnitPincode(e.target.value);\n                      const getValue = e.target.value\n                      try {\n                        const response = await axios.get(`${BASE_URL}/Erpapp/PincodeCRUD/?pincode=${getValue}`, header);\n                        const pincodeData = response?.data;\n                        // const pincodeExists = pincodeData?.some((opt) => opt?.cityname?.toLowerCase() === selectedCity?.toLowerCase());\n                        if (getValue?.length > 5) {\n                          if (pincodeData?.length > 0) {\n                            toast.success(\"Pincode is valid\");\n                          } else {\n                            toast.error(\"The provided pincode doesn't exist in the city.\");\n                          }\n                        }\n                      } catch (error) {\n                        console.error(error);\n                        toast.error(\"Please enter a valid pincode\");\n                      }\n                    }}\n                    className=\"col-12 input-box\"\n                    id=\"outlined-basic\"\n                    placeholder=\"PIN Code\"\n                    variant=\"outlined\"\n                  />\n                </FormControl>\n\n              </Grid>\n\n              <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\n                <Typography className=\"col-md-12 col-lg-7 col-xl-5 input-label\" sx={{ mt: 2 }}>\n                  GST No\n                </Typography>\n                <FormControl className=\"col-md-12 col-lg-5 col-xl-6\">\n                  <TextField\n                    name=\"GST_No\"\n                    value={BusinessUnitGSTNo}\n                    onChange={(e) => setBusinessUnitGSTNo(e.target.value)}\n                    className=\"col-12 input-box\"\n                    id=\"outlined-basic\"\n                    placeholder=\"GST No\"\n                    variant=\"outlined\"\n                  />\n                </FormControl>\n\n              </Grid>\n\n              <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\n                <Typography className=\"col-md-12 col-lg-7 col-xl-5 input-label\" sx={{ mt: 2 }}>\n                  Valid Upto\n                </Typography>\n                <FormControl className=\"col-md-12 col-lg-5 col-xl-6\">\n                  <ErpDateField\n                    id=\"AgreementValidupto\"\n                    name=\"AgreementValidupto\"\n                    inputValue={AgreementValidupto === \"0001-01-01\" ? \"\" : AgreementValidupto}\n                    handleInputChange={(e) => setAgreementValidupto(e.target.value)}\n                    variant=\"outlined\"\n                  />\n                </FormControl>\n              </Grid>\n\n              <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\n                <Typography className=\"col-md-12 col-lg-7 col-xl-5 input-label\" sx={{ mt: 2 }}>\n                  Office Timing To  <span className=\"required\">*</span>\n                </Typography>\n                <FormControl className=\"col-md-12 col-lg-5 col-xl-6\">\n                  <TextField\n                    type=\"time\"\n                    name=\"endTime\"\n                    value={endTime}\n                    onChange={(e) => setEndTime(e.target.value)}\n                    className=\"col-12 input-box\"\n                    id=\"outlined-basic\"\n                    placeholder=\"To Time\"\n                    variant=\"outlined\"\n                  />\n                </FormControl>\n              </Grid>\n\n              {/* <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\n                <Typography className=\"col-md-12 col-lg-7 col-xl-5 input-label\" sx={{ mt: 2 }}>\n                  Working Days\n                </Typography>\n                <FormGroup className=\"col-md-12 col-lg-5 col-xl-6\" sx={{ display: \"flex\", flexDirection: \"row\", flexWrap: \"wrap\", columnGap: 3 }}>\n                  <FormControlLabel control={<Checkbox />} label=\"Sunday\" />\n                  <FormControlLabel control={<Checkbox />} label=\"Monday\" />\n                  <FormControlLabel control={<Checkbox />} label=\"Tuesday\" />\n                  <FormControlLabel control={<Checkbox />} label=\"Wednesday\" />\n                  <FormControlLabel control={<Checkbox />} label=\"Thursday\" />\n                  <FormControlLabel control={<Checkbox />} label=\"Friday\" />\n                  <FormControlLabel control={<Checkbox />} label=\"Saturday\" />\n                </FormGroup>\n              </Grid> */}\n\n\n              <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\n                <Typography className=\"col-md-12 col-lg-7 col-xl-5 input-label\" sx={{ mt: 2 }}>\n                  Corporate BU\n                </Typography>\n                <FormGroup className=\"col-md-12 col-lg-5 col-xl-6\">\n                  <FormControlLabel control={<Checkbox value={corporateBU} checked={corporateBU} onChange={(e) => setCorporateBU(e.target.checked)} />} label=\"\" />\n                </FormGroup>\n              </Grid>\n\n            </Grid>\n          </Div>\n        </Div>\n\n        {/* code for purchase list table */}\n        <Div\n          className=\"buttons\"\n          sx={{ mt: 5, ml: 1, display: \"flex\", justifyContent: \"flex-start\" }}\n        >\n          <ButtonGroup\n            type=\"submit\"\n            aria-label=\"split button\"\n            sx={{ mr: { md: 2 } }}\n            onClick={HandleUpdate}\n          >\n            <Button type=\"submit\" className=\"plus-button\">\n              Update\n            </Button>\n            <Button variant=\"contained\" className=\"icon-button\">\n              <FaSave size={18} />\n            </Button>\n          </ButtonGroup>\n\n          <ButtonGroup aria-label=\"split button\" onClick={handleClickBack}>\n            <Button className=\"plus-button\">Cancel</Button>\n            <Button variant=\"contained\" className=\"icon-button\">\n              <TiCancel size={24} />\n            </Button>\n          </ButtonGroup>\n\n        </Div>\n      </Div>\n    </>\n  );\n};\n\n\n\nexport default EditPartnerList;","import JumboScrollbar from '@jumbo/components/JumboScrollbar'\r\nimport { Table, TableBody, TableHead, TableRow, TableCell, Grow } from '@mui/material'\r\nimport React from 'react'\r\nimport { CellNoborder } from '../../pages/TableStyled'\r\nimport { DateFormatter } from './DateFormatter'\r\nimport Div from '@jumbo/shared/Div'\r\nimport useResponsive from 'app/pages/useResponsive'\r\n\r\nconst HistoryOverview = ({ updatedHistory, itemId = \"Item Id\" }) => {\r\n\r\n    let isMobile = useResponsive(\"down\", \"md\");\r\n\r\n    console.log(\"updatedHistory\", updatedHistory);\r\n    return (\r\n        <JumboScrollbar\r\n            autoHeight={true}\r\n            autoHideTimeout={4000}\r\n            autoHeightMin={300}\r\n            autoHide={true}\r\n            hideTracksWhenNotNeeded\r\n            id=\"no-more-tables\"\r\n        >\r\n            <Grow\r\n                in={true}\r\n                style={{ transformOrigin: '0 0 0' }}\r\n                {...(true ? { timeout: 500 } : {})}\r\n            >\r\n                <Table stickyHeader className=\"table\">\r\n                    <TableHead className=\"history-header\">\r\n                        <TableRow>\r\n                            <CellNoborder sx={{ fontWeight: 900, minWidth: { xs: \"auto\", md: \"200px !important\" } }}>Activity Date</CellNoborder>\r\n                            <CellNoborder sx={{ fontWeight: 900, minWidth: { xs: \"auto\", md: \"200px !important\" } }}>{itemId}</CellNoborder>\r\n                            <CellNoborder sx={{ fontWeight: 900, minWidth: { xs: \"auto\", md: \"200px !important\" } }}>History</CellNoborder>\r\n                            <CellNoborder sx={{ fontWeight: 900, minWidth: { xs: \"auto\", md: \"200px !important\" } }}>Updated Fields</CellNoborder>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {updatedHistory?.length > 0 ? (\r\n                            updatedHistory?.map((data1, index) => (\r\n                                <TableRow>\r\n                                    <CellNoborder sx={{ minWidth: { xs: \"auto\", md: \"200px !important\" } }} data-title=\"Activity Date\">\r\n                                        <DateFormatter date={data1?.Updated_Date} />\r\n                                        <span style={{ marginLeft: \"5px\" }}>\r\n                                            {data1?.Updated_Time ? data1?.Updated_Time?.slice(0, 8) : isMobile ? \"-\" : \"\"}\r\n                                        </span>\r\n                                    </CellNoborder>\r\n                                    <CellNoborder sx={{ minWidth: { xs: \"auto\", md: \"200px !important\" } }} data-title={itemId}>\r\n                                        {data1?.Document_Id ? data1?.Document_Id : isMobile ? \"-\" : \"\"}\r\n                                    </CellNoborder>\r\n                                    <CellNoborder sx={{ minWidth: { xs: \"auto\", md: \"200px !important\" } }} data-title=\"History\">\r\n                                        {data1?.Updated_Person ? data1?.Updated_Person : isMobile ? \"-\" : \"\"}\r\n                                    </CellNoborder>\r\n                                    <CellNoborder sx={{ minWidth: { xs: \"auto\", md: \"200px !important\" } }} data-title=\"Updated Fields\">\r\n                                        {data1?.Updated_Field ? data1?.Updated_Field : isMobile ? \"-\" : \"\"}\r\n                                        {Array.isArray(data1?.Histroy) ? data1?.Histroy?.map(item => (\r\n                                            <Div sx={{ display: \"flex\", alignItems: \"center\", flexWrap: \"wrap\" }}>\r\n                                                {item?.keys?.map((i, idx) => {\r\n                                                    return (\r\n                                                        <span style={{ color: idx == 0 ? \"#00BFFF\" : \"\", marginRight: idx == 0 ? \"8px\" : \"\" }}>{i} {idx == 0 ? \"-\" : idx == item?.keys.length - 1 ? \"\" : \",\"}</span>\r\n                                                    )\r\n                                                })}\r\n                                            </Div>\r\n                                        )) : \"\"}\r\n                                    </CellNoborder>\r\n                                </TableRow>\r\n                            )\r\n                            )) :\r\n                            <TableRow>\r\n                                <TableCell colSpan={4} sx={{ textAlign: \"center\" }}>\r\n                                    No Records\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        }\r\n                    </TableBody>\r\n                </Table>\r\n            </Grow>\r\n        </JumboScrollbar>\r\n    )\r\n}\r\n\r\nexport default HistoryOverview;","import Div from \"@jumbo/shared/Div\";\r\nimport {\r\n  Button,\r\n  Typography,\r\n  Box,\r\n  ButtonGroup,\r\n  Tab,\r\n  useTheme,\r\n  useMediaQuery,\r\n  Grid,\r\n} from \"@mui/material\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport {\r\n  TabContext,\r\n  TabList,\r\n  TabPanel\r\n} from \"@mui/lab\";\r\nimport { BASE_URL } from \"app/services/auth-services\";\r\nimport axios from \"axios\";\r\nimport { MdClose } from \"react-icons/md\";\r\nimport { format } from \"date-fns\";\r\nimport HistoryOverview from \"app/shared/ReuseComponents/HistoryOverview\";\r\n\r\n\r\nconst PartnerOverview = ({\r\n  setListOverview,\r\n  setListMaterial,\r\n  buid,\r\n  scrollHeight\r\n}) => {\r\n  const token = localStorage.getItem(\"accesstoken\");\r\n\r\n  const header = {\r\n    headers: {\r\n      Authorization: `Bearer ${token}`,\r\n      \"Content-Type\": \"application/json\",\r\n      Accept: \"application/json\",\r\n    },\r\n  };\r\n\r\n  //Date format \r\n  let userDetails = localStorage.getItem(\"UserDetails\");\r\n  userDetails = JSON.parse(userDetails);\r\n  let companyId = userDetails && userDetails.Organization_Id;\r\n  let id1 = userDetails && userDetails.id;\r\n  const Partner_Id = parseInt(localStorage.getItem(\"PartnerId\"));\r\n\r\n\r\n\r\n  const theme = useTheme();\r\n  const isMdUp = useMediaQuery(theme.breakpoints.up('md'));\r\n\r\n  const [updateHistory, setUpdateHistory] = useState([]);\r\n  const [dateFormat, setDateFormat] = useState(\"\");\r\n\r\n  const [value, setValue] = useState(\"1\");\r\n\r\n\r\n  const [Businessunitlist, setBusinessunitlist] = useState([])\r\n\r\n\r\n  const handleChange = (event, newValue) => {\r\n    setValue(newValue);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setListOverview(false);\r\n    setListMaterial(true);\r\n  };\r\n\r\n\r\n  // get date format from organization get api\r\n  useEffect(() => {\r\n    if (id1) {\r\n      axios\r\n        .get(`${BASE_URL}/Erpapp/CompanyCRUD/?id=${companyId}`, header)\r\n        .then((res) => {\r\n          console.log(\"D\", res?.data);\r\n          console.log(\"res.data?.DateFormat\", res?.data?.DateFormat);\r\n          setDateFormat(res?.data?.DateFormat);\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n        });\r\n    }\r\n  }, []);\r\n\r\n\r\n  const getList = async () => {\r\n    await axios.get(`${BASE_URL}/Erpapp/PartnerCRUD/?Partner_Id=${buid}`, header)\r\n      .then((res) => {\r\n        setBusinessunitlist(res?.data)\r\n        // for history\r\n        axios\r\n          .get(\r\n            `${BASE_URL}/Erpapp/Updaterecordsfilter/?Partner_Id=${Partner_Id}&Document_Id=${res?.data?.Partner_Id}`,\r\n            header\r\n          )\r\n          .then((res) => {\r\n            console.error(\"data\", res?.data);\r\n            setUpdateHistory(res?.data);\r\n          })\r\n          .catch((err) => {\r\n            console.log(\"ds\", err);\r\n          });\r\n\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      })\r\n  }\r\n\r\n  useEffect(() => {\r\n    getList();\r\n  }, [buid]);\r\n\r\n  return (\r\n\r\n    <>\r\n      <Div className=\"row\">\r\n\r\n        <Div className=\"col-sm-12 col-md-10\">\r\n          <Typography variant=\"h3\" sx={{ fontWeight: 500 }}>\r\n            Bussiness Unit Overview\r\n          </Typography>\r\n        </Div>\r\n\r\n\r\n        <Div>\r\n          <TabContext value={value}>\r\n            <Box sx={{ borderBottom: 0, borderColor: \"divider\" }}>\r\n              <TabList\r\n                onChange={handleChange}\r\n                aria-label=\"lab API tabs example\"\r\n              >\r\n                <Tab\r\n                  label=\"Overview\"\r\n                  value=\"1\"\r\n                  sx={{ fontSize: \"16px\", color: \"#000000\" }}\r\n                />\r\n\r\n                <Tab\r\n                  label=\"History\"\r\n                  value=\"3\"\r\n                  sx={{ fontSize: \"16px\", color: \"#000000\" }}\r\n                />\r\n              </TabList>\r\n            </Box>\r\n\r\n            <TabPanel value=\"1\" sx={{ p: { xs: 1, md: 2 } }}>\r\n              <Grid container>\r\n                <Grid item xs={5.5} md={4} lg={3} xl={2}>\r\n                  <Typography variant=\"h4\" sx={{ fontSize: isMdUp ? \"14px !important\" : \"12px !important\" }}>Date</Typography>\r\n                  <Typography variant=\"h4\" sx={{ fontSize: isMdUp ? \"14px !important\" : \"12px !important\" }}>BU Id</Typography>\r\n                  <Typography variant=\"h4\" sx={{ fontSize: isMdUp ? \"14px !important\" : \"12px !important\" }}>BU Name</Typography>\r\n                  <Typography variant=\"h4\" sx={{ fontSize: isMdUp ? \"14px !important\" : \"12px !important\" }}>Head of Operation</Typography>\r\n                  <Typography variant=\"h4\" sx={{ fontSize: isMdUp ? \"14px !important\" : \"12px !important\" }}>Contact No</Typography>\r\n                  <Typography variant=\"h4\" sx={{ fontSize: isMdUp ? \"14px !important\" : \"12px !important\" }}>Email Id</Typography>\r\n                  {/* <Typography variant=\"h4\" sx={{ fontSize: isMdUp ? \"14px !important\" : \"12px !important\" }}>Location</Typography> */}\r\n                  <Typography variant=\"h4\" sx={{ fontSize: isMdUp ? \"14px !important\" : \"12px !important\" }}>Web</Typography>\r\n                  <Typography variant=\"h4\" sx={{ fontSize: isMdUp ? \"14px !important\" : \"12px !important\" }}>Office From Time</Typography>\r\n                  <Typography variant=\"h4\" sx={{ fontSize: isMdUp ? \"14px !important\" : \"12px !important\" }}>Office End Time</Typography>\r\n                  <Typography variant=\"h4\" sx={{ fontSize: isMdUp ? \"14px !important\" : \"12px !important\" }}>Commision Paid</Typography>\r\n                  <Typography variant=\"h4\" sx={{ fontSize: isMdUp ? \"14px !important\" : \"12px !important\" }}>Address</Typography>\r\n                  <Typography variant=\"h4\" sx={{ fontSize: isMdUp ? \"14px !important\" : \"12px !important\" }}>Corporate BU</Typography>\r\n                </Grid>\r\n\r\n                <Grid item xs={6.5} md={8} lg={8}>\r\n                  <Typography variant=\"h4\" sx={{ fontSize: isMdUp ? \"14px !important\" : \"12px !important\" }}>: {dateFormat &&\r\n                    Businessunitlist?.Created_Date &&\r\n                    format(new Date(Businessunitlist?.Created_Date), dateFormat)\r\n                    || Businessunitlist?.Created_Date}</Typography>\r\n                  <Typography variant=\"h4\" sx={{ fontSize: isMdUp ? \"14px !important\" : \"12px !important\" }}>: {Businessunitlist?.Partner_Id} </Typography>\r\n                  <Typography variant=\"h4\" sx={{ fontSize: isMdUp ? \"14px !important\" : \"12px !important\" }}>: {Businessunitlist?.Partner_Name}</Typography>\r\n                  <Typography variant=\"h4\" sx={{ fontSize: isMdUp ? \"14px !important\" : \"12px !important\" }}>: {Businessunitlist?.HeadOf_Operation} </Typography>\r\n                  <Typography variant=\"h4\" sx={{ fontSize: isMdUp ? \"14px !important\" : \"12px !important\" }}>: {Businessunitlist?.BusinessUnit_Phone} </Typography>\r\n                  <Typography variant=\"h4\" sx={{ fontSize: isMdUp ? \"14px !important\" : \"12px !important\" }}>: {Businessunitlist?.BusinessUnit_EMail} </Typography>\r\n                  {/* <Typography variant=\"h4\" sx={{ fontSize: isMdUp ? \"14px !important\" : \"12px !important\" }}>: {Businessunitlist?.BusinessUnit_City} </Typography> */}\r\n                  <Typography variant=\"h4\" sx={{ fontSize: isMdUp ? \"14px !important\" : \"12px !important\" }}>: {Businessunitlist?.BusinessUnit_Web || \"-\"} </Typography>\r\n                  <Typography variant=\"h4\" sx={{ fontSize: isMdUp ? \"14px !important\" : \"12px !important\" }}>: {Businessunitlist?.Ofc_Starttime} </Typography>\r\n                  <Typography variant=\"h4\" sx={{ fontSize: isMdUp ? \"14px !important\" : \"12px !important\" }}>: {Businessunitlist?.Ofc_Endtime} </Typography>\r\n                  <Typography variant=\"h4\" sx={{ fontSize: isMdUp ? \"14px !important\" : \"12px !important\" }}>: {Businessunitlist?.Commision_Paid} % </Typography>\r\n                  <Typography variant=\"h4\" sx={{ fontSize: isMdUp ? \"14px !important\" : \"12px !important\" }}>: {Businessunitlist?.BusinessUnit_Addressline1},{Businessunitlist?.BusinessUnit_City}, {Businessunitlist?.BusinessUnit_State},\r\n                    {Businessunitlist?.BusinessUnit_Country} - {Businessunitlist?.BusinessUnit_Pincode}\r\n                  </Typography>\r\n                  <Typography variant=\"h4\" sx={{ fontSize: isMdUp ? \"14px !important\" : \"12px !important\" }}>: {Businessunitlist?.Corporate_BU ? \"Yes\" : \"No\"} </Typography>\r\n                </Grid>\r\n              </Grid>\r\n            </TabPanel>\r\n\r\n\r\n            <TabPanel value=\"3\" sx={{ p: 1.5 }}>\r\n              <HistoryOverview updatedHistory={updateHistory} itemId={\"Business Unit Id\"} />\r\n            </TabPanel>\r\n          </TabContext>\r\n        </Div>\r\n\r\n      </Div>\r\n      <Div sx={{ mt: { xs: 5, md: 20 } }}>\r\n        <ButtonGroup\r\n          aria-label=\"split button\"\r\n          sx={{\r\n            mt: { xs: 0.5, lg: 0 },\r\n            mr: { xs: 0, md: 1 }\r\n          }}\r\n          onClick={handleClose}>\r\n          <Button className=\"plus-button\" sx={{ width: \"99px !important\" }}>Close</Button>\r\n          <Button variant=\"contained\" className=\"icon-button\" sx={{ p: 1 }}>\r\n            <MdClose size={18} />\r\n          </Button>\r\n        </ButtonGroup>\r\n      </Div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PartnerOverview;\r\n","import JumboScrollbar from \"@jumbo/components/JumboScrollbar\";\nimport Div from \"@jumbo/shared/Div\";\nimport {\n  Checkbox,\n  FormControlLabel,\n  FormGroup,\n  IconButton,\n  Menu,\n  Radio,\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableRow,\n  Typography,\n} from \"@mui/material\";\nimport { BASE_URL } from \"app/services/auth-services\";\nimport axios from \"axios\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { toast } from \"react-toastify\";\nimport CreatePartner from \"./CreatePartner\";\nimport EditPartnerList from \"./EditPartnerList\";\nimport \"./partners.css\";\nimport { format } from \"date-fns\";\nimport { BsArrowDownUp, BsThreeDotsVertical } from \"react-icons/bs\";\nimport PartnerOverview from \"./partnerOverview\";\nimport { DataContext } from \"app/pages/settings/Organization/OrganizationStructure\";\nimport { ErpAlertViewDialogBox, ErpDeleteDialogBox } from \"app/shared/ReuseComponents/ErpDialogBoxes\";\nimport { ErpActionButton, ErpCreateButton } from \"app/shared/ReuseComponents/ButtonComponent\";\n\nconst PartnerList = ({ scrollHeight }) => {\n\n  const {\n    checkId6,\n    setCheckId6,\n    name4,\n    name5,\n    setName5,\n    getId5,\n    setGetId5,\n    userRolePermissions,\n  } = useContext(DataContext);\n\n  const [PartnerListData, setPartnerListData] = useState([])\n  const [openDelete, setOpenDelete] = useState(false);\n  const [currentDeleteId, setCurrentDeleteId] = useState(\"\");\n  const [currentDeleteAccountId, setCurrentDeleteAccountId] = useState(\"\");\n  const [deleteName, setDeleteName] = useState(\"\");\n\n\n  const [editPartnerList, setEditPartnerList] = useState(false);\n  const [showFilter, setShowFilter] = useState(false);\n  const [setValue] = useState(\"My Material Transfer\");\n  const [createMaterial, setCreateMaterial] = useState(false);\n  const [listMaterial, setListMaterial] = useState(true);\n  const [ListOverview, setListOverview] = useState(false);\n  const [overviewAlert, setOverviewAlert] = useState(false);\n\n  const [id, setId] = useState(\"\");\n\n  const handleOverView = (id) => {\n    if (Array.isArray(userRolePermissions) && userRolePermissions.includes(743)) {\n      setListMaterial(false);\n      setListOverview(true);\n      setId(id)\n    } else {\n      setOverviewAlert(true);\n      setListMaterial(true);\n      setListOverview(false);\n    }\n  };\n\n  const navigate = useNavigate();\n  const token = localStorage.getItem(\"accesstoken\");\n\n  // gear box icon states\n\n\n  const [anchorEl, setAnchorEl] = useState(null);\n  const [Date1, setDate] = useState(true)\n  const [BU_Id, setBU_Id] = useState(true);\n  const [BU_Name, setBU_Name] = useState(true);\n  const [Contact_No, setContact_No] = useState(false)\n  const [Email_Id, setEmail_Id] = useState(true);\n  const [Location, setLocation] = useState(true);\n  const [Web, setWeb] = useState(false);\n  const [fromTime, setFromTime] = useState(false);\n  const [toTime, setToTime] = useState(false);\n  const [commisionPaid, setCommisionPaid] = useState(false);\n\n\n  const handleClickOpen = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n\n  const handleClosegear = () => {\n    setAnchorEl(null);\n  };\n\n  const [sortConfig, setSortConfig] = useState({\n    key: null,\n    direction: \"ascending\",\n  });\n\n  //Date format \n  let userDetails = localStorage.getItem(\"UserDetails\");\n  userDetails = JSON.parse(userDetails);\n  let companyId = userDetails && userDetails.Organization_Id;\n  let dateid = userDetails && userDetails.id;\n\n\n  const [dateFormat, setDateFormat] = useState(\"\");\n\n  const header = {\n    headers: {\n      Authorization: `Bearer ${token}`,\n      \"Content-Type\": \"application/json\",\n      Accept: \"application/json\",\n    },\n  };\n  // get date format from organization get api\n  useEffect(() => {\n    if (companyId) {\n      axios\n        .get(`${BASE_URL}/Erpapp/CompanyCRUD/?id=${companyId}`, header)\n        .then((res) => {\n          console.log(\"D\", res?.data);\n          setDateFormat(res?.data?.DateFormat);\n        })\n        .catch((error) => {\n          console.log(error);\n        });\n    }\n  }, []);\n\n  // state for pagination\n  const [page, setPage] = useState(1);\n  const [count, setCount] = useState(0);\n  const [rowsPerPage, setRowsPerPage] = useState(10);\n  const [visitedPages, setVisitedPages] = useState(page - 1);\n  const rowsPerPageOptions = [10];\n  const totalRecords = count;\n  const totalPages = Math.ceil(totalRecords / rowsPerPage);\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(1);\n    setVisitedPages(visitedPages);\n  };\n\n  // get data\n  const getData = async () => {\n    await axios.get(`${BASE_URL}/Erpapp/PartnerListDropdown/`, header)\n      .then((response) => {\n        console.log(\"Partner Response\", response);\n        const list = response?.data?.filter((opt) => opt?.BusinessUnit_City === name4);\n        setPartnerListData(list)\n        setCount(list?.length)\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  }\n\n  useEffect(() => {\n    getData();\n  }, [listMaterial]);\n\n  console.log(PartnerListData);\n\n  // delete & edit States\n\n  const [setOpen] = React.useState(false);\n  const [setSelectedValue] = React.useState();\n  const [currentPart, setCurrentPart] = useState({\n    id: \"\",\n    Partner_Id: \"\"\n  });\n\n\n  const handleDeletePopup = async (item) => {\n    const previousRecordResponse = await handleGetAllServiceRelatedDatas(item);\n    if (previousRecordResponse?.length > 0) {\n      toast.warning(\"You cannot delete this record because it is being used somewhere.\")\n    } else {\n      setOpenDelete(true);\n      setCurrentDeleteId(item?.id);\n      setCurrentDeleteAccountId(item?.Partner_Id);\n      setDeleteName(item?.Partner_Name)\n    }\n  };\n\n  // delete\n  const handleDelete = async () => {\n    const data = await axios\n      .delete(`${BASE_URL}/Erpapp/PartnerCRUD/?Partner_Id=${currentDeleteAccountId}`, header)\n      .then((res) => {\n        console.log(res?.data);\n        toast.success(`${currentDeleteAccountId} Partner is deleted successfully`);\n        setOpenDelete(false);\n        getData();\n      })\n      .catch((error) => {\n        console.log(\"ds\", error);\n      });\n    return data;\n  };\n  // edit\n  const handleClickEdit = (item) => {\n    setEditPartnerList(true);\n    setListMaterial(false);\n    setCurrentPart({\n      id: item?.id,\n      Partner_Id: item?.Partner_Id,\n    });\n  }\n\n  //Search\n  const searchItems = (e) => {\n    console.log(e.target.value);\n    e.target.value !== \"\" ? handleSearch(e.target.value) : getData();\n  }\n\n  const handleSearch = (search) => {\n    axios.get(`${BASE_URL}/Erpapp/Partnersearch/?Search=${search}`, header)\n      .then((response) => {\n        setPartnerListData(response?.data)\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  };\n\n  const handleClose = (value) => {\n    setOpen(false);\n    setSelectedValue(value);\n  };\n\n  const CreateForm = () => {\n    setCreateMaterial(true);\n    setListMaterial(false);\n  };\n\n\n  //code for table sorting\n  const sortData = (key, direction) => {\n    const sortedData = [...PartnerListData];\n\n    sortedData.sort((a, b) => {\n      if (key === \"Created_By\") {\n        const valueA =\n          typeof a[key].Business_Unit === \"string\"\n            ? a[key].Business_Unit.toLowerCase()\n            : a[key].Business_Unit;\n        const valueB =\n          typeof b[key].Business_Unit === \"string\"\n            ? b[key].Business_Unit.toLowerCase()\n            : b[key].Business_Unit;\n        if (valueA < valueB) {\n          return direction === \"ascending\" ? -1 : 1;\n        }\n        if (valueA > valueB) {\n          return direction === \"ascending\" ? 1 : -1;\n        }\n      }\n      else {\n        const valueA =\n          typeof a[key] === \"string\" ? a[key].toLowerCase() : a[key];\n        const valueB =\n          typeof b[key] === \"string\" ? b[key].toLowerCase() : b[key];\n        if (valueA < valueB) {\n          return direction === \"ascending\" ? -1 : 1;\n        }\n        if (valueA > valueB) {\n          return direction === \"ascending\" ? 1 : -1;\n        }\n      }\n      return 0;\n    });\n    setPartnerListData(sortedData);\n  };\n\n  const handleSort = (key) => {\n    let direction = \"ascending\";\n    if (sortConfig.key === key && sortConfig.direction === \"ascending\") {\n      direction = \"descending\";\n    }\n    setSortConfig({ key, direction });\n    sortData(key, direction);\n  };\n\n  const handleGetAllServiceRelatedDatas = async (data) => {\n    try {\n      const response = await axios.get(`${BASE_URL}/Erpapp/Partnerslotlist/?Partner_Id=${data?.id}`, header);\n      const partnerResponse = await axios.get(`${BASE_URL}/Erpapp/HREmployeelistwithoutpagination/`, header);\n      const filterData = response?.data;\n      const partnerFilterData = partnerResponse?.data?.filter((opt) => opt?.Partner_Id?.id === data?.id)\n\n      return filterData?.length > 0 ? filterData : partnerFilterData;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n\n  return (\n    <>\n      <Div className=\"card\"\n        sx={{ p: 2, borderRadius: 0, m: 0 }}\n      >\n        <Div sx={{ display: listMaterial === true ? \"block\" : \"none\" }}>\n          <Div\n            sx={{\n              position: \"absolute\",\n              right: 15,\n              // width: \"100%\",\n              display: \"flex\",\n              justifyContent: \"flex-end\"\n            }}\n          >\n            {Array.isArray(userRolePermissions) && userRolePermissions.includes(741) && (\n              <ErpCreateButton handleClick={CreateForm} name={\"Create BU\"} />\n            )}\n          </Div>\n          <br />\n\n          <Div sx={{ mt: { lg: 3, md: 5, xs: 5 }, minHeight: \"300px\" }}>\n            <JumboScrollbar\n              autoHeight={true}\n              autoHideTimeout={4000}\n              autoHeightMin={scrollHeight ? scrollHeight : 300}\n              autoHide={true}\n              hideTracksWhenNotNeeded\n              id=\"no-more-tables\"\n            >\n              <Table stickyHeader className=\"table table-borderless\">\n                <TableHead className=\"table-head\">\n                  <TableRow>\n                    <TableCell sx={{ height: \"53px !important\" }}>\n\n                    </TableCell>\n                    {Date1 && (\n                      <TableCell onClick={() => handleSort(\"Created_Date\")} sx={{ height: \"53px !important\" }}>\n                        Date\n                        {sortConfig.key === \"Created_Date\" &&\n                          (sortConfig.direction === \"ascending\" ? (\n                            <IconButton size=\"small\">\n                              <BsArrowDownUp />\n                            </IconButton>\n                          ) : (\n                            <IconButton size=\"small\">\n                              <BsArrowDownUp />\n                            </IconButton>\n                          ))}\n                      </TableCell>)}\n                    {BU_Id && (\n                      <TableCell onClick={() => handleSort(\"Partner_Id\")} sx={{ height: \"53px !important\" }}>\n                        BU Id\n                        {sortConfig.key === \"Partner_Id\" &&\n                          (sortConfig.direction === \"ascending\" ? (\n                            <IconButton size=\"small\">\n                              <BsArrowDownUp />\n                            </IconButton>\n                          ) : (\n                            <IconButton size=\"small\">\n                              <BsArrowDownUp />\n                            </IconButton>\n                          ))}\n                      </TableCell>)}\n                    {BU_Name && (\n                      <TableCell onClick={() => handleSort(\"Partner_Name\")}>\n                        BU Name\n                        {sortConfig.key === \"Partner_Name\" &&\n                          (sortConfig.direction === \"ascending\" ? (\n                            <IconButton size=\"small\">\n                              <BsArrowDownUp />\n                            </IconButton>\n                          ) : (\n                            <IconButton size=\"small\">\n                              <BsArrowDownUp />\n                            </IconButton>\n                          ))}\n                      </TableCell>)}\n                    {Contact_No && (\n                      <TableCell onClick={() => handleSort(\"BusinessUnit_Phone\")}\n                        xl={2}\n                      >\n                        Contact No\n                        {sortConfig.key === \"BusinessUnit_Phone\" &&\n                          (sortConfig.direction === \"ascending\" ? (\n                            <IconButton size=\"small\">\n                              <BsArrowDownUp />\n                            </IconButton>\n                          ) : (\n                            <IconButton size=\"small\">\n                              <BsArrowDownUp />\n                            </IconButton>\n                          ))}\n                      </TableCell>)}\n                    {Email_Id && (\n                      <TableCell onClick={() => handleSort(\"BusinessUnit_EMail\")}\n                        xl={4}\n                      >\n                        Email Id\n                        {sortConfig.key === \"BusinessUnit_EMail\" &&\n                          (sortConfig.direction === \"ascending\" ? (\n                            <IconButton size=\"small\">\n                              <BsArrowDownUp />\n                            </IconButton>\n                          ) : (\n                            <IconButton size=\"small\">\n                              <BsArrowDownUp />\n                            </IconButton>\n                          ))}\n                      </TableCell>)}\n                    {fromTime && (\n                      <TableCell onClick={() => handleSort(\"Ofc_Starttime\")} xl={4}>\n                        Office Start Time\n                        {sortConfig.key === \"Ofc_Starttime\" &&\n                          (sortConfig.direction === \"ascending\" ? (\n                            <IconButton size=\"small\">\n                              <BsArrowDownUp />\n                            </IconButton>\n                          ) : (\n                            <IconButton size=\"small\">\n                              <BsArrowDownUp />\n                            </IconButton>\n                          ))}\n                      </TableCell>)}\n                    {toTime && (\n                      <TableCell onClick={() => handleSort(\"Ofc_Endtime\")} xl={4}>\n                        Office End Time\n                        {sortConfig.key === \"Ofc_Endtime\" &&\n                          (sortConfig.direction === \"ascending\" ? (\n                            <IconButton size=\"small\">\n                              <BsArrowDownUp />\n                            </IconButton>\n                          ) : (\n                            <IconButton size=\"small\">\n                              <BsArrowDownUp />\n                            </IconButton>\n                          ))}\n                      </TableCell>)}\n                    {commisionPaid && (\n                      <TableCell onClick={() => handleSort(\"Commision_Paid\")} xl={4}>\n                        Commision Paid\n                        {sortConfig.key === \"Commision_Paid\" &&\n                          (sortConfig.direction === \"ascending\" ? (\n                            <IconButton size=\"small\">\n                              <BsArrowDownUp />\n                            </IconButton>\n                          ) : (\n                            <IconButton size=\"small\">\n                              <BsArrowDownUp />\n                            </IconButton>\n                          ))}\n                      </TableCell>)}\n                    {Location && (\n                      <TableCell onClick={() => handleSort(\"BusinessUnit_City\")}\n                      >\n                        Location\n                        {sortConfig.key === \"BusinessUnit_City\" &&\n                          (sortConfig.direction === \"ascending\" ? (\n                            <IconButton size=\"small\">\n                              <BsArrowDownUp />\n                            </IconButton>\n                          ) : (\n                            <IconButton size=\"small\">\n                              <BsArrowDownUp />\n                            </IconButton>\n                          ))}\n                      </TableCell>)}\n                    {Web && (\n                      <TableCell onClick={() => handleSort(\"BusinessUnit_Web\")}\n                      >\n                        Web\n                        {sortConfig.key === \"BusinessUnit_Web\" &&\n                          (sortConfig.direction === \"ascending\" ? (\n                            <IconButton size=\"small\">\n                              <BsArrowDownUp />\n                            </IconButton>\n                          ) : (\n                            <IconButton size=\"small\">\n                              <BsArrowDownUp />\n                            </IconButton>\n                          ))}\n                      </TableCell>)}\n                    <TableCell\n                    >\n                      <Div\n                        sx={{\n                          display: \"flex\",\n                          justifyContent: \"space-between\",\n                          lineHeight: 2.5,\n                        }}\n                      >\n                        Action\n                        <span\n                          onClick={handleClickOpen}\n                          style={{ cursor: \"pointer\" }}\n                        >\n                          <IconButton>\n                            <BsThreeDotsVertical size={18} color=\"black\" />\n                          </IconButton>\n                        </span>\n                      </Div>\n                    </TableCell>\n\n\n                    <Menu\n                      id=\"menu-appbar\"\n                      anchorEl={anchorEl}\n                      anchorOrigin={{\n                        vertical: \"top\",\n                        horizontal: \"right\",\n                      }}\n                      keepMounted\n                      transformOrigin={{\n                        vertical: \"top\",\n                        horizontal: \"right\",\n                      }}\n                      open={Boolean(anchorEl)}\n                      onClose={handleClosegear}\n                      sx={{\n                        mt: 7,\n                        maxHeight: \"300px\",\n                        scrollBehavior: \"smooth\",\n                      }}\n                    >\n                      <Typography variant=\"h4\" sx={{ p: 2, mb: -2 }}>\n                        Choose Columns\n                      </Typography>\n                      <FormGroup sx={{ p: 2 }}>\n\n\n                        <FormControlLabel\n                          control={\n                            <Checkbox\n                              checked={Date1}\n                              onChange={(e) => setDate(e.target.checked)}\n                            />\n                          }\n                          label=\"Date\"\n                        />\n                        {/* <FormControlLabel\n                        control={\n                          <Checkbox\n                            checked={BU}\n                            onChange={(e) => setBU(e.target.checked)}\n                          />\n                        }\n                        label=\"Bussiness unit\"\n                      /> */}\n                        <FormControlLabel\n                          control={\n                            <Checkbox\n                              checked={BU_Id}\n                              onChange={(e) => setBU_Id(e.target.checked)}\n                            />\n                          }\n                          label=\"BU Id\"\n                        />\n                        <FormControlLabel\n                          control={\n                            <Checkbox\n                              checked={BU_Name}\n                              onChange={(e) => setBU_Name(e.target.checked)}\n                            />\n                          }\n                          label=\"BU Name\"\n                        />\n                        <FormControlLabel\n                          control={\n                            <Checkbox\n                              checked={Contact_No}\n                              onChange={(e) => setContact_No(e.target.checked)}\n                            />\n                          }\n                          label=\"Contact No\"\n                        />\n                        <FormControlLabel\n                          control={\n                            <Checkbox\n                              checked={Email_Id}\n                              onChange={(e) => setEmail_Id(e.target.checked)}\n                            />\n                          }\n                          label=\"Email Id\"\n                        />\n                        <FormControlLabel\n                          control={\n                            <Checkbox\n                              checked={fromTime}\n                              onChange={(e) => setFromTime(e.target.checked)}\n                            />\n                          }\n                          label=\"Office From Time\"\n                        />\n                        <FormControlLabel\n                          control={\n                            <Checkbox\n                              checked={toTime}\n                              onChange={(e) => setToTime(e.target.checked)}\n                            />\n                          }\n                          label=\"Office End Time\"\n                        />\n                        <FormControlLabel\n                          control={\n                            <Checkbox\n                              checked={commisionPaid}\n                              onChange={(e) => setCommisionPaid(e.target.checked)}\n                            />\n                          }\n                          label=\"Commision Paid\"\n                        />\n                        <FormControlLabel\n                          control={\n                            <Checkbox\n                              checked={Location}\n                              onChange={(e) => setLocation(e.target.checked)}\n                            />\n                          }\n                          label=\"Location\"\n                        />\n                        <FormControlLabel\n                          control={\n                            <Checkbox\n                              checked={Web}\n                              onChange={(e) => setWeb(e.target.checked)}\n                            />\n                          }\n                          label=\"Web\"\n                        />\n                      </FormGroup>\n                    </Menu>\n                  </TableRow>\n                </TableHead>\n\n                <TableBody>\n                  {PartnerListData?.length > 0 ? PartnerListData?.map((item, index) => {\n                    let formattedDate = \"\"\n                    if (dateFormat !== undefined && dateFormat !== null && dateFormat !== \"\") {\n                      const date = new Date(item?.Created_Date);\n                      formattedDate = dateFormat && item?.Created_Date && format(date, dateFormat);\n                    }\n                    return (\n                      <TableRow hover key={index}>\n                        <TableCell data-title=\"Status\" sx={{ textAlign: \"center\" }}>\n                          <FormControlLabel\n                            control={<Radio\n                              color=\"primary\"\n                              size=\"small\"\n                              value={item?.Partner_Id}\n                              checked={checkId6 === item?.Partner_Id}\n                              onChange={(e) => {\n                                setCheckId6(e.target.value);\n                                setGetId5(item?.id);\n                                setName5(item?.Partner_Name);\n                              }} />}\n                          />\n                        </TableCell>\n                        {\n                          Date1 && (\n                            <TableCell data-title=\"Date\">\n                              {formattedDate || item?.Created_Date}\n                            </TableCell>)\n                        }\n                        {\n                          BU_Id && (\n                            <TableCell\n                              sx={{ color: \"#00BFFF\", cursor: \"pointer\" }}\n                              onClick={() => { handleOverView(item?.Partner_Id) }} data-title=\"BU Id\">\n                              {item?.Partner_Id}\n                            </TableCell>)\n                        }\n                        {\n                          BU_Name && (\n                            <TableCell data-title=\"BU Name\">\n                              {item?.Partner_Name}\n                            </TableCell>)\n                        }\n                        {\n                          Contact_No && (\n                            <TableCell data-title=\"Contact No\">\n                              {item?.BusinessUnit_Phone}\n                            </TableCell>)\n                        }\n                        {\n                          Email_Id && (\n                            <TableCell data-title=\"Email Id\">\n                              {item?.BusinessUnit_EMail}\n                            </TableCell>)\n                        }\n                        {\n                          fromTime && (\n                            <TableCell data-title=\"Office Start Time\">\n                              {item?.Ofc_Starttime}\n                            </TableCell>)\n                        }\n                        {\n                          toTime && (\n                            <TableCell data-title=\"Office End Time\">\n                              {item?.Ofc_Endtime}\n                            </TableCell>)\n                        }\n                        {\n                          commisionPaid && (\n                            <TableCell data-title=\"Commision Paid\">\n                              {item?.Commision_Paid}\n                            </TableCell>)\n                        }\n                        {\n                          Location && (\n                            <TableCell data-title=\"Location\">\n                              {item?.BusinessUnit_City}\n                            </TableCell>)\n                        }\n                        {\n                          Web && (\n                            <TableCell data-title=\"Web\">\n                              {item?.BusinessUnit_Web}\n                            </TableCell>)\n                        }\n\n                        <TableCell data-title=\"Action\">\n                          <ErpActionButton userRolePermissions={userRolePermissions} editPermissionId={742} deletePermissionId={744} onClickEdit={() => handleClickEdit(item)} onClickDelete={() => handleDeletePopup(item)} align=\"left\" />\n                        </TableCell>\n                      </TableRow>\n                    )\n                  }) : (\n                    <TableRow>\n                      <TableCell colSpan={10} sx={{ textAlign: \"center\" }}>No Records</TableCell>\n                    </TableRow>\n                  )}\n                </TableBody>\n              </Table>\n            </JumboScrollbar>\n          </Div>\n\n        </Div>\n\n        {/* for delate popup */}\n        <ErpDeleteDialogBox flag={openDelete} setFlag={setOpenDelete} handleClick={handleDelete} content={\"Are you sure you want to delete the BU\"} id={deleteName} />\n\n\n        <Div sx={{ display: createMaterial === true ? \"block\" : \"none\" }}>\n          <CreatePartner\n            setCreateMaterial={setCreateMaterial}\n            setListMaterial={setListMaterial}\n          />\n        </Div>\n\n        <Div sx={{ display: editPartnerList === true ? \"block\" : \"none\" }}>\n          <EditPartnerList\n            setEditPartnerList={setEditPartnerList}\n            setListMaterial={setListMaterial}\n            setCurrentPart={setCurrentPart}\n            currentPart={currentPart}\n            getData1={getData}\n          />\n        </Div>\n\n        {ListOverview && Array.isArray(userRolePermissions) && userRolePermissions.includes(743) ? (\n          <PartnerOverview\n            setListOverview={setListOverview}\n            setListMaterial={setListMaterial}\n            buid={id}\n          />\n        ) : (\n          <>\n            <ErpAlertViewDialogBox flag={overviewAlert} setFlag={setOverviewAlert} />\n          </>\n        )}\n      </Div>\n    </>\n  );\n};\n\nexport default PartnerList;","import Div from \"@jumbo/shared/Div\";\r\nimport {\r\n    Autocomplete,\r\n    Button,\r\n    ButtonGroup,\r\n    Dialog,\r\n    DialogContent,\r\n    DialogTitle,\r\n    FormControl,\r\n    Grid,\r\n    TextField,\r\n    Typography,\r\n} from \"@mui/material\";\r\nimport React, { useCallback, useEffect, useState } from \"react\";\r\nimport { fetchTransactionSeries } from \"app/shared/ReuseComponents/DateFormatter\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\nimport axios from \"axios\";\r\nimport { storesValidationSchema } from \"app/schemas/SettingValidationSchemas\";\r\nimport { BASE_URL } from \"app/services/auth-services\";\r\nimport hrApiServices from \"app/services/hr-api-services\";\r\nimport { toast } from \"react-toastify\";\r\nimport { FaSave } from \"react-icons/fa\";\r\nimport { TiCancel } from \"react-icons/ti\";\r\nimport { handleError } from \"app/pages/auth-pages/login/AuthGuard\";\r\nimport { handleCreateHistory } from \"app/shared/ReuseComponents/UpdatedHistoryRecords\";\r\n\r\n\r\n\r\nconst CreateStore = ({ countries, states, cities, zones, name1, name3, name4, name5, name6, getId5, openCreateStore, setOpenCreateStore, getStores, fullScreen }) => {\r\n    const token = localStorage.getItem(\"accesstoken\");\r\n\r\n    const header = {\r\n        headers: {\r\n            Authorization: `Bearer ${token}`,\r\n            \"Content-Type\": \"application/json\",\r\n            Accept: \"application/json\",\r\n        },\r\n    };\r\n\r\n    let userDetails = localStorage.getItem(\"UserDetails\");\r\n    userDetails = JSON.parse(userDetails);\r\n\r\n\r\n    const [partnerId, setPartnerId] = useState(getId5);\r\n    const [partnerName, setPartnerName] = useState(name5);\r\n    const [storeId, setStoreId] = useState(\"\");\r\n    const [storeName, setStoreName] = useState(\"\");\r\n    const [storeIncharge, setStoreIncharge] = useState(\"\");\r\n    const [location, setLocation] = useState(name6);\r\n    const [longitude, setLongitude] = useState(\"\");\r\n    const [latitude, setLatitude] = useState(\"\");\r\n\r\n\r\n    const [employeeLists, setEmployeeLists] = useState([]);\r\n    const [businessUnitList, setBusinessUnitList] = useState([]);\r\n\r\n\r\n    const getPartnerLists = async () => {\r\n        await axios\r\n            .get(`${BASE_URL}/Erpapp/PartnerListreportDropdown/`, header)\r\n            .then((response) => {\r\n                if (response) {\r\n                    const list = response?.data?.filter((opt) => opt?.BusinessUnit_City === selectedCity)\r\n                    setBusinessUnitList(list);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                console.log(\"Error in retrieving business unit list===>\", error);\r\n            });\r\n    };\r\n\r\n\r\n    // get employee list\r\n    useEffect(() => {\r\n        const fetchEmployeeList = async () => {\r\n            try {\r\n                const res = await hrApiServices.listofDropdownEmployees(partnerId, header);\r\n                if (res) {\r\n                    console.log(\"RES\", res)\r\n                    setEmployeeLists(res);\r\n                }\r\n            } catch (error) {\r\n                console.error(error);\r\n            }\r\n        };\r\n\r\n        fetchEmployeeList();\r\n    }, [partnerId]);\r\n\r\n\r\n    useEffect(() => {\r\n        getPartnerLists();\r\n    }, []);\r\n\r\n    const [buildingName, setBuildingName] = useState(\"\");\r\n    const [selectedCountry, setSelectedCountry] = useState(name1);\r\n    const [selectedState, setSelectedState] = useState(name3);\r\n    const [selectedCity, setSelectedCity] = useState(name4);\r\n\r\n\r\n\r\n    const handleSearchLocation = useCallback(async () => {\r\n        try {\r\n            if (location !== undefined && location !== \"\") {\r\n                const response = await fetch(`https://nominatim.openstreetmap.org/search?q=${encodeURIComponent(location)}&format=json&limit=1`);\r\n                const data = await response.json();\r\n                console.log(\"dataaa\", data)\r\n                if (data?.length > 0) {\r\n                    setLatitude(data[0].lat);\r\n                    setLongitude(data[0].lon);\r\n                } else {\r\n                    setLatitude('');\r\n                    setLongitude('');\r\n                    toast.error('Location not found');\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.error('Error:', error);\r\n        }\r\n    }, [location]);\r\n\r\n\r\n    useEffect(() => {\r\n        handleSearchLocation()\r\n    }, [location])\r\n\r\n\r\n\r\n    const handleCloseCreateStore = () => {\r\n        setStoreName(\"\");\r\n        setBuildingName(\"\");\r\n        setLocation(\"\");\r\n        setPartnerName(\"\");\r\n        setStoreIncharge(\"\");\r\n        setSelectedCountry(\"\");\r\n        setSelectedState(\"\");\r\n        setSelectedCity(\"\");\r\n        setLongitude(\"\");\r\n        setLatitude(\"\");\r\n        reset();\r\n        setOpenCreateStore(false)\r\n    };\r\n\r\n\r\n\r\n    const {\r\n        reset,\r\n        register,\r\n        trigger,\r\n        handleSubmit,\r\n        formState: { errors },\r\n    } = useForm({\r\n        mode: \"onBlur\",\r\n        resolver: yupResolver(storesValidationSchema),\r\n    });\r\n\r\n\r\n    const [transactionSeriesType, setTransactionSeriesType] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n        const transactionSeries = fetchTransactionSeries(\"Stores\")\r\n\r\n        if (transactionSeries) {\r\n            transactionSeries\r\n                .then((result) => {\r\n                    console.log(\"result\", result);\r\n                    setTransactionSeriesType(result)\r\n                })\r\n                .catch((error) => {\r\n                    console.error(error);\r\n                });\r\n        }\r\n    }, [transactionSeriesType])\r\n\r\n\r\n\r\n    const handleCreateStore = () => {\r\n\r\n\r\n        var storepayload = {\r\n            Type: \"\",\r\n            Store_Name: storeName,\r\n            StoreBuilding_Name: buildingName,\r\n            Store_Street: \"\",\r\n            Store_Area: location,\r\n            Store_City: selectedCity,\r\n            Store_State: selectedState,\r\n            Store_Country: selectedCountry,\r\n            Store_Incharge: storeIncharge,\r\n            Own_Partner: partnerName,\r\n            Items: [{\r\n                id: \"\",\r\n                Upload_Image: \"\",\r\n                Category: \"\",\r\n                Item_Group: \"\",\r\n                Item_Code: \"\",\r\n                Item_Name: \"\",\r\n                UOM: \"\",\r\n                Unit_Price: 0,\r\n                Opening_Stock: 0,\r\n                ReOrder_Lvl: 0,\r\n                Min_Stock_Lvl: 0\r\n            }],\r\n            Longitude: longitude,\r\n            Lotitude: latitude,\r\n            Partner_OrganizationId: localStorage.getItem(\"OrganizationId\"),\r\n            Store_UserId: localStorage.getItem(\"UserId\"),\r\n            Partner_Id: parseInt(partnerId),\r\n            Company_Id: parseInt(localStorage.getItem(\"OrganizationId\")),\r\n            Created_Date: new Date().toJSON().slice(0, 10),\r\n            Created_By: parseInt(localStorage.getItem(\"UserId\")),\r\n            Updated_By: parseInt(localStorage.getItem(\"UserId\")),\r\n        };\r\n\r\n        axios\r\n            .post(`${BASE_URL}/Erpapp/StoremasterCRUD/`, storepayload, header)\r\n            .then((respon) => {\r\n                console.log(respon?.data);\r\n                if (respon?.data?.id) {\r\n                    toast.success(\"Store information created successfully!\");\r\n                    reset();\r\n\r\n                    setStoreName(\"\");\r\n                    setBuildingName(\"\");\r\n                    setLocation(\"\");\r\n                    setPartnerName(\"\");\r\n                    setStoreIncharge(\"\");\r\n                    setSelectedCountry(\"\");\r\n                    setSelectedState(\"\");\r\n                    setSelectedCity(\"\");\r\n                    setLongitude(\"\");\r\n                    setLatitude(\"\");\r\n\r\n                    setOpenCreateStore(false);\r\n                    getStores();\r\n\r\n                    // create a history\r\n                    handleCreateHistory(respon?.data?.Store_Id, partnerId, \"store\", header)\r\n\r\n                } else {\r\n                    toast.error(\"Error updating store information.\");\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                console.log(error);\r\n                handleError(error)\r\n            });\r\n    }\r\n\r\n\r\n    return (\r\n        <Dialog\r\n            fullScreen={fullScreen}\r\n            maxWidth=\"lg\"\r\n            open={openCreateStore}\r\n            aria-labelledby=\"responsive-dialog-title\"\r\n        >\r\n            <DialogTitle id=\"responsive-dialog-title\">\r\n                Create Store\r\n            </DialogTitle>\r\n            <DialogContent>\r\n                <form onSubmit={handleSubmit(handleCreateStore)}>\r\n                    <Div sx={{ minHeight: \"250px\" }}>\r\n                        <Grid container xs={12}>\r\n                            <Grid item xs={12} md={6}>\r\n                                <Grid container xs={12}>\r\n\r\n                                    <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\r\n                                        <Typography className=\"col-md-12 col-lg-6 col-xl-4 input-label\" sx={{ mt: 2 }}>\r\n                                            Store Id <span className=\"required\">*</span>\r\n                                        </Typography>\r\n                                        <Div className=\"col-md-12 col-lg-6 col-xl-8\">\r\n                                            <TextField\r\n                                                className=\"col-12 input-box\"\r\n                                                name=\"storeId\"\r\n                                                {...register(\"storeId\")}\r\n                                                value={storeId}\r\n                                                onChange={(e) => {\r\n                                                    setStoreId(e.target.value);\r\n                                                }}\r\n                                                placeholder={transactionSeriesType === \"Automatic\" ? \"Auto Generated\" : \"Store Id\"}\r\n                                                variant=\"outlined\"\r\n                                                autoComplete=\"off\"\r\n                                                disabled={transactionSeriesType === \"Automatic\" ? true : false}\r\n                                                inputProps={{\r\n                                                    maxLength: 11,\r\n                                                    title: 'Please enter a maximum of 11 digits',\r\n                                                }}\r\n                                            />\r\n                                        </Div>\r\n                                    </Grid>\r\n\r\n                                    <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\r\n                                        <Typography className=\"col-md-12 col-lg-6 col-xl-4 input-label\" sx={{ mt: 2 }}>\r\n                                            Store Name <span className=\"required\">*</span>\r\n                                        </Typography>\r\n                                        <Div className=\"col-md-12 col-lg-6 col-xl-8\">\r\n                                            <TextField\r\n                                                className={`col-12 input-box  ${errors.storeName ? \"is-invalid\" : \"\"\r\n                                                    }`}\r\n                                                name=\"storeName\"\r\n                                                {...register(\"storeName\")}\r\n                                                value={storeName}\r\n                                                onChange={(e) => {\r\n                                                    setStoreName(e.target.value);\r\n                                                    console.log(e.target.value);\r\n                                                }}\r\n                                                placeholder=\"Store Name\"\r\n                                                autoComplete=\"off\"\r\n                                            />\r\n                                            <Div style={{ color: \"red\" }}>\r\n                                                {!storeName && errors.storeName?.message}\r\n                                            </Div>\r\n                                        </Div>\r\n                                    </Grid>\r\n\r\n                                    <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\r\n                                        <Typography className=\"col-md-12 col-lg-6 col-xl-4 input-label\" sx={{ mt: 2 }}>\r\n                                            Building Name <span className=\"required\">*</span>\r\n                                        </Typography>\r\n                                        <Div className=\"col-md-12 col-lg-6 col-xl-8\">\r\n                                            <TextField\r\n                                                className={`col-12 input-box  ${errors.buildingName ? \"is-invalid\" : \"\"\r\n                                                    }`}\r\n                                                name=\"buildingName\"\r\n                                                {...register(\"buildingName\")}\r\n                                                value={buildingName}\r\n                                                onChange={(e) => setBuildingName(e.target.value)}\r\n                                                placeholder=\"Building Name\"\r\n                                                autoComplete=\"off\"\r\n                                            />\r\n                                            <Div style={{ color: \"red\" }}>\r\n                                                {!buildingName && errors.buildingName?.message}\r\n                                            </Div>\r\n                                        </Div>\r\n                                    </Grid>\r\n\r\n                                    <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\r\n                                        <Typography className=\"col-md-12 col-lg-6 col-xl-4 input-label\" sx={{ mt: 2 }}>\r\n                                            Country <span className=\"required\">*</span>\r\n                                        </Typography>\r\n                                        <Div className=\"col-md-12 col-lg-6 col-xl-8\">\r\n                                            <FormControl className=\"col-12\">\r\n                                                <Autocomplete\r\n                                                    className={`search-select col-12 ${errors.countryName ? \"is-invalid\" : \"\"\r\n                                                        }`}\r\n                                                    name=\"countryName\"\r\n                                                    options={countries}\r\n                                                    getOptionLabel={(option) => option ? option?.Country_Name : \"\"}\r\n                                                    value={countries?.find(\r\n                                                        (option) => option?.Country_Name === selectedCountry\r\n                                                    ) || null}\r\n                                                    onChange={(event, newValue) => {\r\n                                                        setSelectedCountry(newValue?.Country_Name);\r\n                                                        setSelectedState(null); // Reset selectedState\r\n                                                        setSelectedCity(null); // Reset selectedCity\r\n                                                        console.log(\"Selected Country:\", newValue);\r\n                                                    }}\r\n\r\n                                                    renderInput={(params) => (\r\n                                                        <TextField\r\n                                                            {...params}\r\n                                                            {...register(\"countryName\")}\r\n                                                            placeholder=\"Select Country\"\r\n                                                        />\r\n                                                    )}\r\n                                                    disabled\r\n                                                />\r\n                                                <Div style={{ color: \"red\" }}>\r\n                                                    {!selectedCountry && errors.countryName?.message}\r\n                                                </Div>\r\n                                            </FormControl>\r\n                                        </Div>\r\n                                    </Grid>\r\n\r\n                                    <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\r\n                                        <Typography className=\"col-md-12 col-lg-6 col-xl-4 input-label\" sx={{ mt: 2 }}>\r\n                                            State <span className=\"required\">*</span>\r\n                                        </Typography>\r\n                                        <Div className=\"col-md-12 col-lg-6 col-xl-8\">\r\n                                            <FormControl className=\"col-12\">\r\n                                                <Autocomplete\r\n                                                    className={`search-select col-12 ${errors.stateName ? \"is-invalid\" : \"\"\r\n                                                        }`}\r\n                                                    name=\"stateName\"\r\n                                                    options={states}\r\n                                                    getOptionLabel={(option) => option ? option?.State_Name : \"\"}\r\n                                                    value={states?.find(\r\n                                                        (option) => option?.State_Name === selectedState\r\n                                                    ) || null}\r\n                                                    onChange={(event, newValue) => {\r\n                                                        setSelectedState(newValue?.State_Name);\r\n                                                        setSelectedCity(null); // Reset selectedCity\r\n                                                        console.log(\"Selected State:\", newValue);\r\n                                                    }}\r\n\r\n                                                    renderInput={(params) => (\r\n                                                        <TextField\r\n                                                            {...params}\r\n                                                            {...register(\"stateName\")}\r\n                                                            placeholder=\"Select State\"\r\n                                                        />\r\n                                                    )}\r\n                                                    disabled\r\n                                                />\r\n                                                <Div style={{ color: \"red\" }}>\r\n                                                    {!selectedState && errors.stateName?.message}\r\n                                                </Div>\r\n                                            </FormControl>\r\n                                        </Div>\r\n                                    </Grid>\r\n\r\n                                    <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\r\n                                        <Typography className=\"col-md-12 col-lg-6 col-xl-4 input-label\" sx={{ mt: 2 }}>\r\n                                            City <span className=\"required\">*</span>\r\n                                        </Typography>\r\n                                        <Div className=\"col-md-12 col-lg-6 col-xl-8\">\r\n                                            <FormControl className=\"col-12\">\r\n                                                <Autocomplete\r\n                                                    className={`search-select col-12 ${errors.cityName ? \"is-invalid\" : \"\"\r\n                                                        }`}\r\n                                                    name=\"cityName\"\r\n                                                    options={cities}\r\n                                                    getOptionLabel={(option) => option ? option?.City_Name : \"\"}\r\n                                                    value={cities?.find(\r\n                                                        (option) => option?.City_Name === selectedCity\r\n                                                    ) || null}\r\n                                                    onChange={(event, newValue) => {\r\n                                                        setSelectedCity(newValue?.City_Name);\r\n                                                        console.log(\"Selected City:\", newValue);\r\n                                                    }}\r\n\r\n                                                    renderInput={(params) => (\r\n                                                        <TextField\r\n                                                            {...params}\r\n                                                            {...register(\"cityName\")}\r\n                                                            placeholder=\"Select City\"\r\n                                                        />\r\n                                                    )}\r\n                                                    disabled\r\n                                                />\r\n                                                <Div style={{ color: \"red\" }}>\r\n                                                    {!selectedCity && errors.cityName?.message}\r\n                                                </Div>\r\n                                            </FormControl>\r\n                                        </Div>\r\n                                    </Grid>\r\n\r\n                                </Grid>\r\n                            </Grid>\r\n\r\n                            <Grid item xs={12} md={6}>\r\n                                <Grid container xs={12}>\r\n\r\n                                    <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\r\n                                        <Typography className=\"col-sm-12 col-md-12 col-lg-6 col-xl-4 input-label\" sx={{ mt: 2 }}>\r\n                                            Choose a BU <span className=\"required\">*</span>\r\n                                        </Typography>\r\n                                        <Div className=\"col-sm-12 col-md-12 col-lg-6 col-xl-8\">\r\n                                            <FormControl className=\"col-12\">\r\n                                                <Autocomplete\r\n                                                    className={`search-select col-12 ${errors.partnerName ? \"is-invalid\" : \"\"\r\n                                                        }`}\r\n                                                    onFocus={getPartnerLists}\r\n                                                    name=\"partnerName\"\r\n                                                    options={businessUnitList?.map(\r\n                                                        (partnerlist) => partnerlist\r\n                                                    )}\r\n                                                    getOptionLabel={(option) => option?.Partner_Name}\r\n                                                    value={businessUnitList?.find(\r\n                                                        (option) => option?.Partner_Name === partnerName\r\n                                                    ) || null}\r\n                                                    onChange={(e, newValue) => {\r\n                                                        setPartnerName(newValue?.Partner_Name);\r\n                                                        setPartnerId(newValue?.id);\r\n                                                    }}\r\n                                                    renderInput={(params) => (\r\n                                                        <TextField\r\n                                                            {...params}\r\n                                                            {...register(\"partnerName\")}\r\n                                                            placeholder=\"Choose a business unit\"\r\n                                                            autoComplete=\"off\"\r\n                                                            variant=\"outlined\"\r\n                                                        />\r\n                                                    )}\r\n                                                    disabled\r\n                                                />\r\n                                            </FormControl>\r\n                                            <Div style={{ color: \"red\" }}>\r\n                                                {!partnerName && errors.partnerName?.message}\r\n                                            </Div>\r\n                                        </Div>\r\n                                    </Grid>\r\n\r\n                                    <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\r\n                                        <Typography className=\"col-md-12 col-lg-6 col-xl-4 input-label\" sx={{ mt: 2 }}>\r\n                                            Location <span className=\"required\">*</span>\r\n                                        </Typography>\r\n                                        <Div className=\"col-md-12 col-lg-6 col-xl-8\">\r\n                                            <FormControl className=\"col-12\">\r\n                                                <Autocomplete\r\n                                                    className={`search-select col-12 ${errors.Location ? \"is-invalid\" : \"\"}`}\r\n                                                    name=\"location\"\r\n                                                    options={zones}\r\n                                                    getOptionLabel={(option) => option?.Zone_Name}\r\n                                                    value={zones?.find(\r\n                                                        (option) => option?.Zone_Name === location\r\n                                                    ) || null}\r\n                                                    onChange={(e, newValue) => {\r\n                                                        setLocation(newValue?.Zone_Name);\r\n                                                        handleSearchLocation(newValue?.Zone_Name)\r\n                                                    }}\r\n                                                    renderInput={(params) => (\r\n                                                        <TextField\r\n                                                            {...params}\r\n                                                            {...register(\"location\")}\r\n                                                            placeholder=\"Location\"\r\n                                                            autoComplete=\"off\"\r\n                                                            variant=\"outlined\"\r\n                                                        />\r\n                                                    )}\r\n                                                    disabled\r\n                                                />\r\n                                            </FormControl>\r\n                                            <Div style={{ color: \"red\" }}>\r\n                                                {!location && errors.location?.message}\r\n                                            </Div>\r\n                                        </Div>\r\n                                    </Grid>\r\n\r\n                                    <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\r\n                                        <Typography className=\"col-md-12 col-lg-6 col-xl-4 input-label\" sx={{ mt: 2 }}>\r\n                                            Longitude <span className=\"required\">*</span>\r\n                                        </Typography>\r\n                                        <Div className=\"col-md-12 col-lg-6 col-xl-8\">\r\n                                            <TextField\r\n                                                className=\"col-12 input-box\"\r\n                                                name=\"longitude\"\r\n                                                value={longitude}\r\n                                                placeholder=\"Longitude\"\r\n                                                autoComplete=\"off\"\r\n                                                disabled\r\n                                            />\r\n                                        </Div>\r\n                                    </Grid>\r\n\r\n                                    <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\r\n                                        <Typography className=\"col-md-12 col-lg-6 col-xl-4 input-label\" sx={{ mt: 2 }}>\r\n                                            Latitude <span className=\"required\">*</span>\r\n                                        </Typography>\r\n                                        <Div className=\"col-md-12 col-lg-6 col-xl-8\">\r\n                                            <TextField\r\n                                                className=\"col-12 input-box\"\r\n                                                name=\"latitude\"\r\n                                                value={latitude}\r\n                                                placeholder=\"Latitude\"\r\n                                                autoComplete=\"off\"\r\n                                                disabled\r\n                                            />\r\n                                        </Div>\r\n                                    </Grid>\r\n\r\n                                    <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\r\n                                        <Typography className=\"col-md-12 col-lg-6 col-xl-4 input-label\" sx={{ mt: 2 }}>\r\n                                            Store Incharge\r\n                                        </Typography>\r\n                                        <Div className=\"col-md-12 col-lg-6 col-xl-8\">\r\n                                            <FormControl className=\"col-12\">\r\n                                                <Autocomplete\r\n                                                    className={`search-select col-12 ${errors.storeIncharge ? \"is-invalid\" : \"\"\r\n                                                        }`}\r\n                                                    name=\"storeIncharge\"\r\n                                                    options={employeeLists}\r\n                                                    getOptionLabel={(option) => `${option?.Employee_FirstName} ${option?.Employee_LasttName}`}\r\n                                                    value={employeeLists?.find(\r\n                                                        (option) => `${option?.Employee_FirstName} ${option?.Employee_LasttName}` === storeIncharge\r\n                                                    ) || null}\r\n                                                    onChange={(e, newValue) => {\r\n                                                        setStoreIncharge(`${newValue?.Employee_FirstName} ${newValue?.Employee_LasttName}`);\r\n                                                    }}\r\n                                                    renderInput={(params) => (\r\n                                                        <TextField\r\n                                                            {...params}\r\n                                                            {...register(\"storeIncharge\")}\r\n                                                            placeholder=\"Store Incharge\"\r\n                                                            autoComplete=\"off\"\r\n                                                            variant=\"outlined\"\r\n                                                        />\r\n                                                    )}\r\n                                                />\r\n                                            </FormControl>\r\n                                            {/* <Div style={{ color: \"red\" }}>\r\n                                                {!storeIncharge && errors.storeIncharge?.message}\r\n                                            </Div> */}\r\n                                        </Div>\r\n                                    </Grid>\r\n\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Div>\r\n\r\n                    {/* code for save and cancel button */}\r\n                    <Div\r\n                        className=\"buttons\"\r\n                        sx={{\r\n                            mt: 5, mb: 3, display: \"flex\",\r\n                            justifyContent: \"end\"\r\n                        }}\r\n                    >\r\n                        <ButtonGroup\r\n                            aria-label=\"split button\"\r\n                            type=\"submit\"\r\n                            color=\"primary\"\r\n                            sx={{\r\n                                mt: { xs: 0.5, lg: 0 },\r\n                                mr: { xs: 0, md: 1 },\r\n                            }}\r\n                        >\r\n                            <Button type=\"submit\" className=\"plus-button\" sx={{ width: { md: \"99px !important\" } }}>\r\n                                Save\r\n                            </Button>\r\n                            <Button variant=\"contained\" className=\"icon-button\">\r\n                                <FaSave size={18} />\r\n                            </Button>\r\n                        </ButtonGroup>\r\n\r\n                        <ButtonGroup\r\n                            aria-label=\"split button\"\r\n                            onClick={handleCloseCreateStore}\r\n                            sx={{\r\n                                mt: { xs: 0.5, lg: 0 },\r\n                                mr: { xs: 0, md: 1 }\r\n                            }}\r\n                        >\r\n                            <Button className=\"plus-button\" sx={{ width: { md: \"99px !important\" } }}>Cancel</Button>\r\n                            <Button variant=\"contained\" className=\"icon-button\">\r\n                                <TiCancel size={20} />\r\n                            </Button>\r\n                        </ButtonGroup>\r\n                    </Div>\r\n                </form>\r\n            </DialogContent>\r\n\r\n        </Dialog>\r\n    )\r\n}\r\n\r\nexport default CreateStore","import axios from \"axios\";\r\nimport { BASE_URL } from \"./auth-services\";\r\n\r\nconst dropdownApiServices = {};\r\n\r\n\r\ndropdownApiServices.getItemDropdownList = async (id1, id2, header) => {\r\n    const { data } = await axios.get(\r\n        `${BASE_URL}/Erpapp/Itemlistwithoutpagination/?Company_Id=${id1}&Partner_Id=${id2}&Is_Deleted=False`,\r\n        header\r\n    );\r\n    return data;\r\n};\r\n\r\ndropdownApiServices.getCostcenterDropdownList = async (id, header) => {\r\n    const { data } = await axios.get(\r\n        `${BASE_URL}/Erpapp/Costcenterlistwithoutpagination/?Partner_Id=${id}`,\r\n        header\r\n    );\r\n    return data;\r\n};\r\n\r\ndropdownApiServices.getSupplierDropdownList = async (partnerId, header) => {\r\n    const { data } = await axios.get(\r\n        `${BASE_URL}/Erpapp/supplierlistwithoutpagination/?Partner_Id=${partnerId}`,\r\n        header\r\n    );\r\n    return data;\r\n};\r\n\r\ndropdownApiServices.getStoreDropdownList = async (partnerId, header) => {\r\n    const { data } = await axios.get(\r\n        `${BASE_URL}/Erpapp/Storelistwithoutpagination/?Partner_Id=${partnerId}`,\r\n        header\r\n    );\r\n    return data;\r\n};\r\n\r\ndropdownApiServices.getAllStoreDropdownList = async (header) => {\r\n    const { data } = await axios.get(\r\n        `${BASE_URL}/Erpapp/Storelistwithoutpaginationforfront/`,\r\n        header\r\n    );\r\n    return data;\r\n};\r\n\r\ndropdownApiServices.getServiceDropdownList = async (header) => {\r\n    const { data } = await axios.get(\r\n        `${BASE_URL}/Erpapp/ServiceListWithoutPagination/`,\r\n        header\r\n    );\r\n    return data;\r\n};\r\n\r\ndropdownApiServices.getMaterialReceiptDropdownList = async (id1, id3, header) => {\r\n    const { data } = await axios.get(\r\n        `${BASE_URL}/Erpapp/GoodsReceiptwithoutpagination/?Company_Id=${id1}&Partner_Id=${id3}`,\r\n        header\r\n    );\r\n    return data;\r\n};\r\n\r\ndropdownApiServices.getMaterialRequestDropdownList = async (companyId, header) => {\r\n    const { data } = await axios.get(\r\n        `${BASE_URL}/Erpapp/Materialrequestwithoutpagination/?Company_Id=${companyId}`,\r\n        header\r\n    );\r\n    return data;\r\n};\r\n\r\n\r\ndropdownApiServices.getMaterialIssueDropdownList = async (companyId, header) => {\r\n    const { data } = await axios.get(\r\n        `${BASE_URL}/Erpapp/MaterialIssueWithoutPaginationAllList/?Company_Id=${companyId}`,\r\n        header\r\n    );\r\n    return data;\r\n};\r\n\r\ndropdownApiServices.getCatalogueDropdownList = async (companyId, header) => {\r\n    const { data } = await axios.get(\r\n        `${BASE_URL}/Erpapp/Cataloguewithoutpaginationlist/?Company_Id=${companyId}`,\r\n        header\r\n    );\r\n    return data;\r\n};\r\n\r\n\r\nexport default dropdownApiServices;\r\n","import JumboScrollbar from \"@jumbo/components/JumboScrollbar\";\r\nimport Div from \"@jumbo/shared/Div\";\r\nimport {\r\n    Box,\r\n    Button,\r\n    ButtonGroup,\r\n    Tab,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableHead,\r\n    TableRow,\r\n    Typography,\r\n    useMediaQuery,\r\n    useTheme,\r\n} from \"@mui/material\";\r\nimport { BASE_URL } from \"app/services/auth-services\";\r\nimport itemServices from \"app/services/item-master-services\";\r\nimport axios from \"axios\";\r\nimport React, { useEffect } from \"react\";\r\nimport { useState } from \"react\";\r\nimport { MdClose } from \"react-icons/md\";\r\nimport { TabContext, TabList, TabPanel } from \"@mui/lab\";\r\nimport { format } from \"date-fns\";\r\nimport { formatIndianNumber } from \"app/shared/ReuseComponents/DateFormatter\";\r\nimport HistoryOverview from \"app/shared/ReuseComponents/HistoryOverview\";\r\n\r\n\r\nconst ViewStoreSettings = ({\r\n    scrollHeight,\r\n    setListStore,\r\n    setEditOverviewItem,\r\n    currentData,\r\n    setCurrentData\r\n}) => {\r\n    const token = localStorage.getItem(\"accesstoken\");\r\n\r\n    const header = {\r\n        headers: {\r\n            Authorization: `Bearer ${token}`,\r\n            \"Content-Type\": \"application/json\",\r\n            Accept: \"application/json\",\r\n        },\r\n    };\r\n    const Partner_Id = parseInt(localStorage.getItem(\"PartnerId\"));\r\n\r\n\r\n    const theme = useTheme();\r\n    const isMdUp = useMediaQuery(theme.breakpoints.up('md'));\r\n\r\n\r\n\r\n    const [itemGroups, setItemGroups] = useState([]);\r\n    const [current, setCurrent] = useState(true);\r\n    const [value, setValue] = useState(\"1\");\r\n    const [transactionHistory, setTransactionHistory] = useState([]);\r\n    const [updateHistory, setUpdateHistory] = useState([]);\r\n    const [dateFormat, setDateFormat] = useState(\"\");\r\n\r\n    // created by vijay\r\n\r\n    const [itemList, setItemList] = useState([]);\r\n\r\n\r\n    let userDetails = localStorage.getItem(\"UserDetails\");\r\n    userDetails = JSON.parse(userDetails);\r\n    let companyId = userDetails && userDetails.Organization_Id;\r\n    let id = userDetails && userDetails.id;\r\n\r\n    const handleChange = (event, newValue) => {\r\n        setValue(newValue);\r\n    };\r\n\r\n    const handleClickBack = () => {\r\n        setListStore(true);\r\n        setEditOverviewItem(false);\r\n    };\r\n\r\n    const getItemCategory = () => {\r\n        var payload = {\r\n            Search: \"UOM\",\r\n        };\r\n        itemServices\r\n            .getUnits(payload, header)\r\n            .then((res) => {\r\n                console.log(\"res\", res[0].value);\r\n            })\r\n            .catch((error) => {\r\n                console.log(error);\r\n            });\r\n    };\r\n\r\n    // item group\r\n    const getActiveItemGroups = async () => {\r\n        var payload = {\r\n            page: 1,\r\n            Is_Active: true,\r\n            Is_Deleted: false,\r\n        };\r\n        // itemServices\r\n        //   .activeItemGroups(payload, header)\r\n        //   .then((res) => {\r\n        //     console.log(\"res\", res.results);\r\n        //     setItemGroups(res.results);\r\n        //   })\r\n        //   .catch((error) => {\r\n        //     console.log(error);\r\n        //   });\r\n        await axios.get(`${BASE_URL}/Erpapp/Itemgroupwithoutpagination/`, payload, header)\r\n            .then((res) => {\r\n                console.log(\"resssss\", res?.data);\r\n                setItemGroups(res?.data);\r\n            })\r\n            .catch((error) => {\r\n                console.log(error);\r\n            });\r\n    };\r\n\r\n    useEffect(() => {\r\n        getItemCategory();\r\n        getActiveItemGroups();\r\n    }, []);\r\n\r\n    const items = currentData?.Item?.map((opt) => opt);\r\n    useEffect(() => {\r\n        items?.forEach((item) => {\r\n            axios\r\n                .get(\r\n                    `${BASE_URL}/Erpapp/Itemtransactionfilter/?Partner_Id=${Partner_Id}&Item_Name=${item?.Item_Name}`,\r\n                    header\r\n                )\r\n                .then((res) => {\r\n                    console.error(\"data\", res?.data);\r\n                    setTransactionHistory(res?.data);\r\n                })\r\n                .catch((error) => {\r\n                    console.log(\"ds\", error);\r\n                });\r\n        });\r\n\r\n        // for history\r\n        axios\r\n            .get(\r\n                `${BASE_URL}/Erpapp/Updaterecordsfilter/?Partner_Id=${Partner_Id}&Document_Id=${currentData?.Store_Id}`,\r\n                header\r\n            )\r\n            .then((res) => {\r\n                setUpdateHistory(res?.data);\r\n            })\r\n            .catch((error) => {\r\n                console.log(\"ds\", error);\r\n            });\r\n    }, [currentData]);\r\n\r\n\r\n    let userId = parseInt(localStorage.getItem(\"UserId\"));\r\n    let partnerId = parseInt(localStorage.getItem(\"PartnerId\"));\r\n\r\n\r\n    useEffect(async () => {\r\n        try {\r\n            await axios\r\n                .get(\r\n                    `${BASE_URL}/Erpapp/Itemlistwithoutpagination/?Company_Id=${companyId}&Partner_Id=${partnerId}`, header\r\n                )\r\n                .then((res) => {\r\n                    console.log(\"res\", res);\r\n                    setItemList(res?.data);\r\n                })\r\n                .catch((error) => {\r\n                    console.log(\"Error in retrieving item master===>\", error);\r\n                });\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n\r\n    }, []);\r\n\r\n    // useEffect(async () => {\r\n    //   try {\r\n    //     const findImage = await currentData?.Items?.map((img, index) => img?.Item_Name)\r\n    //     console.log(\"findImage\", findImage);\r\n    //     // get a item image\r\n    //     for (const item of findImage) {\r\n    //       const matchingItem = itemList?.find((opt) => opt?.Item_Name === item);\r\n\r\n    //       if (matchingItem) { // looping the array\r\n    //         const itemsImage = matchingItem?.Upload_Image;\r\n    //         console.log(\"itemImage\", itemsImage);\r\n\r\n    //         const image = await fetch(`${BASE_URL}${itemsImage}`)\r\n    //           .then((response) => response.arrayBuffer())\r\n    //           .then((buffer) => {\r\n    //             const base64 = btoa(\r\n    //               new Uint8Array(buffer).reduce(\r\n    //                 (data, byte) => data + String.fromCharCode(byte),\r\n    //                 \"\"\r\n    //               )\r\n    //             );\r\n    //             return base64;\r\n    //           })\r\n    //           .catch((error) => {\r\n    //             console.log(\"Error in retriving the item image\", error);\r\n    //           });\r\n    //         setItemImage(image)\r\n    //       }\r\n    //     }\r\n    //   }\r\n    //   catch (err) {\r\n    //     console.log(err);\r\n    //   }\r\n    // }, [currentData])\r\n\r\n\r\n    // get date format from organization get api\r\n\r\n    useEffect(() => {\r\n        const fetchItemImages = async () => {\r\n            try {\r\n                if (!currentData || !currentData.Items || !itemList) {\r\n                    return;\r\n                }\r\n\r\n                const itemImages = await Promise.all(\r\n                    currentData?.Items?.map(async (item) => {\r\n                        const matchingItem = itemList?.find((opt) => opt?.Item_Name === item?.Item_Name);\r\n                        if (matchingItem) {\r\n                            const itemsImage = matchingItem?.Upload_Image;\r\n                            const response = await fetch(`${BASE_URL}${itemsImage}`);\r\n                            const buffer = await response.arrayBuffer();\r\n                            const base64 = btoa(\r\n                                new Uint8Array(buffer).reduce((data, byte) => data + String.fromCharCode(byte), \"\")\r\n                            );\r\n                            return base64;\r\n                        }\r\n                        return null;\r\n                    })\r\n                );\r\n\r\n                const updatedData = {\r\n                    ...currentData,\r\n                    Items: currentData?.Items?.map((item, index) => ({\r\n                        ...item,\r\n                        Image: itemImages[index]\r\n                    }))\r\n                };\r\n\r\n                // Set the updated data with item images\r\n                // setCurrentData(updatedData);\r\n\r\n            } catch (err) {\r\n                console.log(\"Error in fetching item images:\", err);\r\n            }\r\n        };\r\n\r\n        fetchItemImages();\r\n    }, []);\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        axios\r\n            .get(`${BASE_URL}/Erpapp/CompanyCRUD/?id=${companyId}`, header)\r\n            .then((res) => {\r\n                console.log(\"D\", res?.data);\r\n                setDateFormat(res?.data?.DateFormat);\r\n            })\r\n            .catch((error) => {\r\n                console.log(error);\r\n            });\r\n    }, []);\r\n\r\n\r\n    return (\r\n        <>\r\n            <Div style={{ display: current ? \"block\" : \"none\" }}>\r\n                <Typography variant=\"h3\" sx={{ fontWeight: 600 }}>\r\n                    Store Overview\r\n                </Typography>\r\n\r\n                <Div>\r\n                    <TabContext value={value}>\r\n                        <Box sx={{ borderBottom: 0, borderColor: \"divider\" }}>\r\n                            <TabList\r\n                                onChange={handleChange}\r\n                                aria-label=\"lab API tabs example\"\r\n                            >\r\n                                <Tab\r\n                                    label=\"Overview\"\r\n                                    value=\"1\"\r\n                                    sx={{ fontSize: \"16px\", color: \"#000000\" }}\r\n                                />\r\n                                <Tab\r\n                                    label=\"History\"\r\n                                    value=\"3\"\r\n                                    sx={{ fontSize: \"16px\", color: \"#000000\" }}\r\n                                />\r\n                            </TabList>\r\n                        </Box>\r\n\r\n                        <TabPanel value=\"1\" sx={{ p: 1.5, minHeight: \"350px\" }}>\r\n                            <Div className=\"row mt-2\">\r\n                                <Div className=\"col col-sm-2 col-md-4 col-lg-3 col-xl-2\">\r\n                                    <Typography variant=\"h4\" sx={{ fontSize: isMdUp ? \"14px !important\" : \"12px !important\" }}>Store Id</Typography>\r\n                                    <Typography variant=\"h4\" sx={{ fontSize: isMdUp ? \"14px !important\" : \"12px !important\" }}>Store Name</Typography>\r\n                                    <Typography variant=\"h4\" sx={{ fontSize: isMdUp ? \"14px !important\" : \"12px !important\" }}>Store Incharge</Typography>\r\n                                    <Typography variant=\"h4\" sx={{ fontSize: isMdUp ? \"14px !important\" : \"12px !important\" }}>Business Unit</Typography>\r\n                                    <Typography variant=\"h4\" sx={{ fontSize: isMdUp ? \"14px !important\" : \"12px !important\" }}>Created Date</Typography>\r\n                                    <Typography variant=\"h4\" sx={{ fontSize: isMdUp ? \"14px !important\" : \"12px !important\" }}>Longitude</Typography>\r\n                                    <Typography variant=\"h4\" sx={{ fontSize: isMdUp ? \"14px !important\" : \"12px !important\" }}>Latitude</Typography>\r\n                                    <Typography variant=\"h4\" sx={{ fontSize: isMdUp ? \"14px !important\" : \"12px !important\" }}>Store Address</Typography>\r\n                                </Div>\r\n\r\n                                <Div className=\"col col-sm-5 col-md-5 col-lg-5 col-xl-5\">\r\n                                    <Typography variant=\"h4\" sx={{ fontSize: isMdUp ? \"14px !important\" : \"12px !important\" }}>\r\n                                        : {currentData?.Store_Id || \"-\"}\r\n                                    </Typography>\r\n                                    <Typography variant=\"h4\" sx={{ fontSize: isMdUp ? \"14px !important\" : \"12px !important\" }}>\r\n                                        : {currentData?.Store_Name || \"-\"}\r\n                                    </Typography>\r\n                                    <Typography variant=\"h4\" sx={{ fontSize: isMdUp ? \"14px !important\" : \"12px !important\" }}>\r\n                                        : {currentData?.Store_Incharge || \"-\"}\r\n                                    </Typography>\r\n                                    <Typography variant=\"h4\" sx={{ fontSize: isMdUp ? \"14px !important\" : \"12px !important\" }}>\r\n                                        : {currentData?.Own_Partner || \"-\"}\r\n                                    </Typography>\r\n                                    <Typography variant=\"h4\" sx={{ fontSize: isMdUp ? \"14px !important\" : \"12px !important\" }}>\r\n                                        : {dateFormat &&\r\n                                            currentData &&\r\n                                            currentData?.Created_Date &&\r\n                                            format(new Date(currentData?.Created_Date), dateFormat) || currentData?.Created_Date\r\n                                        }\r\n                                    </Typography>\r\n                                    <Typography variant=\"h4\" sx={{ fontSize: isMdUp ? \"14px !important\" : \"12px !important\" }}>\r\n                                        : {currentData?.Longitude || \"-\"}\r\n                                    </Typography>\r\n                                    <Typography variant=\"h4\" sx={{ fontSize: isMdUp ? \"14px !important\" : \"12px !important\" }}>\r\n                                        : {currentData?.Lotitude || \"-\"}\r\n                                    </Typography>\r\n                                    <Typography variant=\"h4\" sx={{ fontSize: isMdUp ? \"14px !important\" : \"12px !important\" }}>\r\n                                        : {currentData?.StoreBuilding_Name},\r\n                                        {currentData?.Store_Area},\r\n                                        {currentData?.Store_City}, {currentData?.Store_State},\r\n                                        {currentData?.Store_Country}\r\n                                    </Typography>\r\n                                </Div>\r\n                            </Div>\r\n                            <br />\r\n                        </TabPanel>\r\n\r\n                        <TabPanel value=\"2\" sx={{ p: 1.5, minHeight: \"350px\" }}>\r\n                            <Div>\r\n                                <JumboScrollbar\r\n                                    autoHeight={true}\r\n                                    autoHideTimeout={4000}\r\n                                    autoHeightMin={scrollHeight ? scrollHeight : 250}\r\n                                    autoHide={true}\r\n                                    hideTracksWhenNotNeeded\r\n                                    id=\"no-more-tables\"\r\n                                >\r\n                                    <Table className=\"table table-bordered\">\r\n                                        <TableHead className=\"table-head\">\r\n                                            <TableRow>\r\n                                                <TableCell>Trn date</TableCell>\r\n                                                <TableCell>Trn Type</TableCell>\r\n                                                <TableCell>Store Id</TableCell>\r\n                                                <TableCell>Store Name</TableCell>\r\n                                                <TableCell\r\n\r\n                                                    sx={{\r\n                                                        minWidth: \"100px !important\",\r\n                                                        overflow: \"hidden\",\r\n                                                        textOverflow: \"ellipsis\",\r\n                                                    }}\r\n                                                >\r\n                                                    UOM\r\n                                                </TableCell>\r\n                                                <TableCell\r\n\r\n                                                    sx={{\r\n                                                        minWidth: \"130px !important\",\r\n                                                        overflow: \"hidden\",\r\n                                                        textOverflow: \"ellipsis\",\r\n                                                    }}\r\n                                                >\r\n                                                    Quantity\r\n                                                </TableCell>\r\n                                                <TableCell>Unit Price</TableCell>\r\n                                                <TableCell>Value</TableCell>\r\n                                            </TableRow>\r\n                                        </TableHead>\r\n                                        <TableBody>\r\n                                            {transactionHistory?.GoodsRecipt != [] ? (\r\n                                                <>\r\n                                                    {transactionHistory?.GoodsRecipt?.map(\r\n                                                        (receipt, index) => {\r\n                                                            console.log(\"receipt\", receipt);\r\n                                                            const itemForReceipt = receipt?.Item?.find(\r\n                                                                (item) =>\r\n                                                                    items?.some(\r\n                                                                        (opt) => opt?.Item_Name === item?.Item_Name\r\n                                                                    )\r\n                                                            );\r\n\r\n                                                            return (\r\n                                                                <TableRow key={index}>\r\n                                                                    <TableCell>{receipt?.Created_Date}</TableCell>\r\n                                                                    <TableCell>Material Receipt</TableCell>\r\n                                                                    <TableCell>{receipt?.TrfIn_Id}</TableCell>\r\n                                                                    <TableCell>\r\n                                                                        {itemForReceipt\r\n                                                                            ? itemForReceipt?.Item_Name\r\n                                                                            : \" \"}\r\n                                                                    </TableCell>\r\n                                                                    <TableCell>\r\n                                                                        {itemForReceipt ? itemForReceipt?.UOM : \"\"}\r\n                                                                    </TableCell>\r\n                                                                    <TableCell className=\"Amount_Fields\">\r\n                                                                        {itemForReceipt\r\n                                                                            ? `${itemForReceipt?.Quantity}`\r\n                                                                            : \"0\"}\r\n                                                                    </TableCell>\r\n                                                                    <TableCell className=\"Amount_Fields\">\r\n                                                                        {itemForReceipt\r\n                                                                            ? `${formatIndianNumber(itemForReceipt?.Unit_Price)}`\r\n                                                                            : \"0.00\"}\r\n                                                                    </TableCell>\r\n                                                                    <TableCell className=\"Amount_Fields\">\r\n                                                                        {itemForReceipt\r\n                                                                            ? `${formatIndianNumber(itemForReceipt?.Amount)}`\r\n                                                                            : \"0.00\"}\r\n                                                                    </TableCell>\r\n                                                                </TableRow>\r\n                                                            );\r\n                                                        }\r\n                                                    )}\r\n\r\n                                                    {transactionHistory?.Materialreturn?.map(\r\n                                                        (receipt, index) => {\r\n                                                            console.log(\"receipt\", receipt);\r\n                                                            const itemForReceipt = receipt?.Item?.find(\r\n                                                                (item) =>\r\n                                                                    items?.some(\r\n                                                                        (opt) => opt?.Item_Name === item?.Item_Name\r\n                                                                    )\r\n                                                            );\r\n\r\n                                                            return (\r\n                                                                <TableRow key={index}>\r\n                                                                    <TableCell>{receipt?.Created_Date}</TableCell>\r\n                                                                    <TableCell>Material Return</TableCell>\r\n                                                                    <TableCell>{receipt?.MatRet_Id}</TableCell>\r\n                                                                    <TableCell>\r\n                                                                        {itemForReceipt\r\n                                                                            ? itemForReceipt?.Item_Name\r\n                                                                            : \" \"}\r\n                                                                    </TableCell>\r\n                                                                    <TableCell>\r\n                                                                        {itemForReceipt ? itemForReceipt?.UOM : \"\"}\r\n                                                                    </TableCell>\r\n                                                                    <TableCell className=\"Amount_Fields\">\r\n                                                                        {itemForReceipt\r\n                                                                            ? `${itemForReceipt?.Quantity}`\r\n                                                                            : \"0\"}\r\n                                                                    </TableCell>\r\n                                                                    <TableCell className=\"Amount_Fields\">\r\n                                                                        {itemForReceipt\r\n                                                                            ? `${formatIndianNumber(itemForReceipt?.Unit_Price)}`\r\n                                                                            : \"0.00\"}\r\n                                                                    </TableCell>\r\n                                                                    <TableCell className=\"Amount_Fields\">\r\n                                                                        {itemForReceipt\r\n                                                                            ? `${formatIndianNumber(itemForReceipt?.Amount)}`\r\n                                                                            : \"0.00\"}\r\n                                                                    </TableCell>\r\n                                                                </TableRow>\r\n                                                            );\r\n                                                        }\r\n                                                    )}\r\n\r\n                                                    {transactionHistory?.Materialtransfer?.map(\r\n                                                        (receipt, index) => {\r\n                                                            console.log(\"receipt\", receipt);\r\n                                                            const itemForReceipt = receipt?.Item?.find(\r\n                                                                (item) =>\r\n                                                                    items?.some(\r\n                                                                        (opt) => opt?.Item_Name === item?.Item_Name\r\n                                                                    )\r\n                                                            );\r\n\r\n                                                            return (\r\n                                                                <TableRow key={index}>\r\n                                                                    <TableCell>{receipt?.Created_Date}</TableCell>\r\n                                                                    <TableCell>Material Transfer</TableCell>\r\n                                                                    <TableCell>{receipt?.MatTransf_Id}</TableCell>\r\n                                                                    <TableCell>\r\n                                                                        {itemForReceipt\r\n                                                                            ? itemForReceipt?.Item_Name\r\n                                                                            : \" \"}\r\n                                                                    </TableCell>\r\n                                                                    <TableCell>\r\n                                                                        {itemForReceipt ? itemForReceipt?.UOM : \"\"}\r\n                                                                    </TableCell>\r\n                                                                    <TableCell className=\"Amount_Fields\">\r\n                                                                        {itemForReceipt\r\n                                                                            ? `${itemForReceipt?.Quantity}`\r\n                                                                            : \"0\"}\r\n                                                                    </TableCell>\r\n                                                                    <TableCell className=\"Amount_Fields\">\r\n                                                                        {itemForReceipt\r\n                                                                            ? `${formatIndianNumber(itemForReceipt?.Unit_Price)}`\r\n                                                                            : \"0.00\"}\r\n                                                                    </TableCell>\r\n                                                                    <TableCell className=\"Amount_Fields\">\r\n                                                                        {itemForReceipt\r\n                                                                            ? `${formatIndianNumber(itemForReceipt?.Amount)}`\r\n                                                                            : \"0.00\"}\r\n                                                                    </TableCell>\r\n                                                                </TableRow>\r\n                                                            );\r\n                                                        }\r\n                                                    )}\r\n                                                    {transactionHistory?.MeterialRequest?.map(\r\n                                                        (receipt, index) => {\r\n                                                            console.log(\"receipt\", receipt);\r\n                                                            const itemForReceipt = receipt?.Item?.find(\r\n                                                                (item) =>\r\n                                                                    items?.some(\r\n                                                                        (opt) => opt?.Item_Name === item?.Item_Name\r\n                                                                    )\r\n                                                            );\r\n\r\n                                                            return (\r\n                                                                <TableRow key={index}>\r\n                                                                    <TableCell>{receipt?.Created_Date}</TableCell>\r\n                                                                    <TableCell>Material Request</TableCell>\r\n                                                                    <TableCell>{receipt?.MatReq_Id}</TableCell>\r\n                                                                    <TableCell>\r\n                                                                        {itemForReceipt\r\n                                                                            ? itemForReceipt?.Item_Name\r\n                                                                            : \" \"}\r\n                                                                    </TableCell>\r\n                                                                    <TableCell>\r\n                                                                        {itemForReceipt ? itemForReceipt?.UOM : \"\"}\r\n                                                                    </TableCell>\r\n                                                                    <TableCell className=\"Amount_Fields\">\r\n                                                                        {itemForReceipt\r\n                                                                            ? `${itemForReceipt?.Quantity}`\r\n                                                                            : \"0\"}\r\n                                                                    </TableCell>\r\n                                                                    <TableCell className=\"Amount_Fields\">\r\n                                                                        {itemForReceipt\r\n                                                                            ? `${formatIndianNumber(itemForReceipt?.Unit_Price)}`\r\n                                                                            : \"0.00\"}\r\n                                                                    </TableCell>\r\n                                                                    <TableCell className=\"Amount_Fields\">\r\n                                                                        {itemForReceipt\r\n                                                                            ? `${formatIndianNumber(itemForReceipt?.Amount)}`\r\n                                                                            : \"0.00\"}\r\n                                                                    </TableCell>\r\n                                                                </TableRow>\r\n                                                            );\r\n                                                        }\r\n                                                    )}\r\n                                                </>\r\n                                            ) : (\r\n                                                <TableRow>\r\n                                                    <TableCell colSpan={8} align=\"center\">\r\n                                                        No Records\r\n                                                    </TableCell>\r\n                                                </TableRow>\r\n                                            )}\r\n                                        </TableBody>\r\n                                    </Table>\r\n                                </JumboScrollbar>\r\n                            </Div>\r\n                        </TabPanel>\r\n\r\n                        <TabPanel value=\"3\" sx={{ p: 1.5, minHeight: \"350px\" }}>\r\n                            <HistoryOverview updatedHistory={updateHistory} itemId={\"Store Id\"} />\r\n                        </TabPanel>\r\n                    </TabContext>\r\n                </Div>\r\n            </Div>\r\n\r\n            {/* code for save and back buttons */}\r\n            <Div>\r\n                <ButtonGroup aria-label=\"split button\" onClick={handleClickBack}>\r\n                    <Button className=\"plus-button\">Close</Button>\r\n                    <Button variant=\"contained\" className=\"icon-button\">\r\n                        <MdClose size={18} />\r\n                    </Button>\r\n                </ButtonGroup>\r\n            </Div>\r\n\r\n            {/* <Div style={{ display: editItems ? \"block\" : \"none\" }}>\r\n        <EditOverviewItem setCurrent={setCurrent} setEditItems={setEditItems} />\r\n      </Div> */}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default ViewStoreSettings\r\n","import Div from \"@jumbo/shared/Div\";\r\nimport {\r\n    Autocomplete,\r\n    Button,\r\n    ButtonGroup,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    FormControl,\r\n    FormControlLabel,\r\n    Grid,\r\n    Radio,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableHead,\r\n    TableRow,\r\n    TextField,\r\n    Typography,\r\n    useMediaQuery,\r\n    useTheme,\r\n} from \"@mui/material\";\r\nimport axios from \"axios\";\r\nimport React, { useCallback, useContext, useEffect, useState } from \"react\";\r\nimport { DataContext } from \"../OrganizationStructure\";\r\nimport { toast } from \"react-toastify\";\r\nimport { storesValidationSchema } from \"app/schemas/SettingValidationSchemas\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\nimport { BASE_URL } from \"app/services/auth-services\";\r\nimport JumboScrollbar from \"@jumbo/components/JumboScrollbar\";\r\nimport { FaSave } from \"react-icons/fa\";\r\nimport { TiCancel } from \"react-icons/ti\";\r\nimport { fetchTransactionSeries } from \"app/shared/ReuseComponents/DateFormatter\";\r\nimport { Country } from \"country-state-city\";\r\nimport CreateStore from \"./CreateStore\";\r\nimport hrApiServices from \"app/services/hr-api-services\";\r\nimport dropdownApiServices from \"app/services/dropdownapi-services\";\r\nimport ViewStoreSettings from \"./ViewStoreSettings\";\r\nimport { ErpAlertViewDialogBox, ErpDeleteDialogBox } from \"app/shared/ReuseComponents/ErpDialogBoxes\";\r\nimport { ErpActionButton, ErpCreateButton } from \"app/shared/ReuseComponents/ButtonComponent\";\r\n\r\n\r\nconst countryOptions = Country.getAllCountries();\r\n\r\nconst StoreList = (scrollHeight) => {\r\n    const { name1, name3, name4, name5, name6, countries, states, cities, zones, getId4, getId5, getId6, id4, userRolePermissions } =\r\n        useContext(DataContext);\r\n\r\n    const token = localStorage.getItem(\"accesstoken\");\r\n\r\n    const header = {\r\n        headers: {\r\n            Authorization: `Bearer ${token}`,\r\n            \"Content-Type\": \"application/json\",\r\n            Accept: \"application/json\",\r\n        },\r\n    };\r\n\r\n    const theme = useTheme();\r\n    const fullScreen = useMediaQuery(theme.breakpoints.down('lg'));\r\n\r\n    const [openListStore, setOpenListStore] = useState(true);\r\n    const [openCreateStore, setOpenCreateStore] = useState(false);\r\n    const [openEditStore, setOpenEditStore] = useState(false);\r\n    const [openViewStore, setOpenViewStore] = useState(false);\r\n    const [openDeleteStore, setOpenDeleteStore] = useState(false);\r\n    const [overviewAlert, setOverviewAlert] = useState(false);\r\n\r\n\r\n    const [cityName, setCityName] = useState({\r\n        City_Name: name4\r\n    });\r\n    const [zoneName, setZoneName] = useState();\r\n    const [pincode, setPincode] = useState(\"\");\r\n    const [cityId, setCityId] = useState(getId4);\r\n\r\n    const [currentData, setCurrentData] = useState({})\r\n\r\n\r\n    const [employeeName, setEmployeeName] = useState(\"\");\r\n    const [storeId, setStoreId] = useState(\"\");\r\n    const [storeName, setStoreName] = useState(\"\");\r\n    const [storeIncharge, setStoreIncharge] = useState(\"\");\r\n    const [buildingName, setBuildingName] = useState(\"\");\r\n    const [location, setLocation] = useState(\"\");\r\n\r\n    const [partners, setPartners] = useState([]);\r\n    const [employeeLists, setEmployeeLists] = useState([]);\r\n    const [businessUnitList, setBusinessUnitList] = useState([]);\r\n    const [storeLists, setStoreLists] = useState([]);\r\n\r\n\r\n    const [selectedCountry, setSelectedCountry] = useState(name1);\r\n    const [selectedState, setSelectedState] = useState(name3);\r\n    const [selectedCity, setSelectedCity] = useState(name4);\r\n    const [partnerId, setPartnerId] = useState(getId5);\r\n    const [partnerName, setPartnerName] = useState(name5);\r\n    const [longitude, setLongitude] = useState(\"\");\r\n    const [latitude, setLatitude] = useState(\"\");\r\n\r\n\r\n\r\n    const getPartnerLists = async () => {\r\n        await axios\r\n            .get(`${BASE_URL}/Erpapp/PartnerListreportDropdown/`, header)\r\n            .then((response) => {\r\n                if (response) console.log(response);\r\n                setBusinessUnitList(response?.data);\r\n            })\r\n            .catch((error) => {\r\n                console.log(\"Error in retrieving business unit list===>\", error);\r\n            });\r\n    };\r\n\r\n    useEffect(() => {\r\n        getPartnerLists();\r\n    }, []);\r\n\r\n    // get employee list\r\n    useEffect(() => {\r\n        const fetchEmployeeList = async () => {\r\n            try {\r\n                const res = await hrApiServices.listofDropdownEmployees(partnerId, header);\r\n                if (res) {\r\n                    console.log(\"RES\", res)\r\n                    setEmployeeLists(res);\r\n                }\r\n            } catch (error) {\r\n                console.error(error);\r\n            }\r\n        };\r\n\r\n        fetchEmployeeList();\r\n    }, [partnerId]);\r\n\r\n\r\n    const getStores = () => {\r\n        dropdownApiServices\r\n            .getStoreDropdownList(partnerId, header)\r\n            .then((res) => {\r\n                console.log(res);\r\n                setStoreLists(res);\r\n            })\r\n            .catch((error) => {\r\n                console.log(error);\r\n            });\r\n    }\r\n\r\n    useEffect(() => {\r\n        getStores()\r\n    }, [])\r\n\r\n\r\n\r\n    const handleAddZones = () => {\r\n        setOpenCreateStore(true);\r\n    };\r\n\r\n\r\n\r\n    const handleClose = () => {\r\n        setOpenEditStore(false);\r\n        reset()\r\n    };\r\n\r\n\r\n    const handleSearchLocation = useCallback(async () => {\r\n        try {\r\n            if (location !== undefined && location !== \"\") {\r\n                const response = await fetch(`https://nominatim.openstreetmap.org/search?q=${encodeURIComponent(location)}&format=json&limit=1`);\r\n                const data = await response.json();\r\n                console.log(\"dataaa\", data)\r\n                if (data?.length > 0) {\r\n                    setLatitude(data[0].lat);\r\n                    setLongitude(data[0].lon);\r\n                } else {\r\n                    setLatitude('');\r\n                    setLongitude('');\r\n                    toast.error('Location not found');\r\n                }\r\n            }\r\n        } catch (error) {\r\n            console.error('Error:', error);\r\n        }\r\n    }, [location]);\r\n\r\n\r\n\r\n    const {\r\n        reset,\r\n        register,\r\n        handleSubmit,\r\n        formState: { errors },\r\n    } = useForm({\r\n        mode: \"onBlur\",\r\n        resolver: yupResolver(storesValidationSchema),\r\n    });\r\n\r\n    const handleUpdateStore = (e) => {\r\n        e.preventDefault();\r\n\r\n        var payload = {\r\n            id: currentData?.id,\r\n            Store_Id: currentData?.Store_Id,\r\n            Store_Name: storeName,\r\n            StoreBuilding_Name: buildingName,\r\n            Store_Street: currentData?.Store_Street,\r\n            Store_Area: location,\r\n            Store_City: selectedCity,\r\n            Store_State: selectedState,\r\n            Store_Country: selectedCountry,\r\n            Store_Incharge: storeIncharge,\r\n            Own_Partner: partnerName,\r\n            Items: currentData?.Items,\r\n            Lotitude: latitude,\r\n            Longitude: longitude,\r\n            Partner_OrganizationId: localStorage.getItem(\"OrganizationId\"),\r\n            Store_UserId: localStorage.getItem(\"UserId\"),\r\n            Partner_Id: parseInt(partnerId),\r\n            Company_Id: parseInt(localStorage.getItem(\"OrganizationId\")),\r\n            Created_Date: new Date().toJSON().slice(0, 10),\r\n            Created_By: parseInt(localStorage.getItem(\"UserId\")),\r\n            Updated_By: parseInt(localStorage.getItem(\"UserId\")),\r\n        };\r\n        axios\r\n            .put(`${BASE_URL}/Erpapp/StoremasterCRUD/`, payload, header)\r\n            .then((res) => {\r\n                console.log(res?.data);\r\n                if (res?.data?.id) {\r\n                    toast.success(\"Updated Successfully\");\r\n                    getStores();\r\n                    setOpenEditStore(false);\r\n\r\n                    // Edited Fields History\r\n\r\n                    let EditedArr = [];\r\n\r\n                    if (storeName !== currentData?.Store_Name) {\r\n                        EditedArr.push(\"Store Name\");\r\n                    }\r\n                    if (buildingName !== currentData?.StoreBuilding_Name) {\r\n                        EditedArr.push(\"Building Name\");\r\n                    }\r\n                    if (location !== currentData?.Store_Area) {\r\n                        EditedArr.push(\"Location\");\r\n                    }\r\n                    if (selectedCity !== currentData?.Store_City) {\r\n                        EditedArr.push(\"City\");\r\n                    }\r\n                    if (selectedState !== currentData?.Store_State) {\r\n                        EditedArr.push(\"State\");\r\n                    }\r\n                    if (selectedCountry !== currentData?.Store_Country) {\r\n                        EditedArr.push(\"Country\");\r\n                    }\r\n                    if (storeIncharge !== currentData?.Store_Incharge) {\r\n                        EditedArr.push(\"Store Incharge\");\r\n                    }\r\n                    if (partnerName !== currentData?.Own_Partner) {\r\n                        EditedArr.push(\"Business Unit\");\r\n                    }\r\n                    if (latitude !== currentData?.Lotitude) {\r\n                        EditedArr.push(\"Latitude\");\r\n                    }\r\n                    if (longitude !== currentData?.Longitude) {\r\n                        EditedArr.push(\"Longitude\");\r\n                    }\r\n\r\n\r\n                    // history of updated records\r\n                    let editUser = localStorage.getItem(\"Username\");\r\n                    if (EditedArr?.length > 0) {\r\n                        axios\r\n                            .post(\r\n                                `${BASE_URL}/Erpapp/Updaterecordscrud/`,\r\n                                {\r\n                                    Document_Id: currentData?.Store_Id,\r\n                                    Updated_Person: `${editUser} edited this store.`,\r\n                                    Is_Deleted: false,\r\n                                    Updated_Time: `${new Date().getHours()}:${new Date().getMinutes()}:${new Date().getSeconds()}`,\r\n                                    Updated_Field: EditedArr.join(\",\"),\r\n                                    Partner_Id: parseInt(localStorage.getItem(\"PartnerId\")),\r\n                                    Updated_By: parseInt(localStorage.getItem(\"UserId\")),\r\n                                },\r\n                                header\r\n                            )\r\n                            .then((res) => {\r\n                                console.log(\"Result\", res.data);\r\n                            })\r\n                            .catch((res) => {\r\n                                console.log(res.message);\r\n                            });\r\n                    }\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                console.log(error);\r\n                toast.error(\"Store is already exists\");\r\n            });\r\n    };\r\n\r\n\r\n    // edit store\r\n    const editStoreById = async (data) => {\r\n        setOpenEditStore(true);\r\n        setCurrentData(data);\r\n\r\n        await axios\r\n            .get(`${BASE_URL}/Erpapp/StoremasterCRUD/?Store_Id=${data?.Store_Id}`, header)\r\n            .then((res) => {\r\n                console.log(res?.data);\r\n                if (res?.data?.id) {\r\n                    setStoreName(res?.data?.Store_Name);\r\n                    setBuildingName(res?.data?.StoreBuilding_Name);\r\n                    setLocation(res?.data?.Store_Area);\r\n                    setSelectedCity(res?.data?.Store_City);\r\n                    setSelectedState(res?.data?.Store_State);\r\n                    setSelectedCountry(res?.data?.Store_Country);\r\n                    setStoreIncharge(res?.data?.Store_Incharge);\r\n                    setPartnerName(res?.data?.Own_Partner);\r\n                    setPartnerId(res?.data?.Partner_Id?.id);\r\n                    setLatitude(res?.data?.Lotitude);\r\n                    setLongitude(res?.data?.Longitude);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                console.log(error);\r\n            });\r\n\r\n    }\r\n\r\n    // delete store\r\n    const deleteStoreById = async (data) => {\r\n        const previousRecordResponse = await handleGetAllServiceRelatedDatas(data);\r\n        if (previousRecordResponse?.length > 0) {\r\n            toast.warning(\"You cannot delete this record because it is being used somewhere.\")\r\n        } else {\r\n            setOpenDeleteStore(true);\r\n            setCurrentData(data);\r\n        }\r\n    }\r\n\r\n    const handleDeleteStore = async () => {\r\n        await axios\r\n            .delete(`${BASE_URL}/Erpapp/StoremasterCRUD/?Store_Id=${currentData?.Store_Id}`, header)\r\n            .then((res) => {\r\n                console.log(res?.data);\r\n                if (res?.data?.id) {\r\n                    toast.success(\"Store Deleted Successfully.\")\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                console.log(error);\r\n            });\r\n    }\r\n\r\n\r\n    // GetPartners\r\n    const getPartners = async () => {\r\n        await axios.get(`${BASE_URL}/Erpapp/PartnerListreportDropdown/`, header)\r\n            .then((response) => {\r\n                console.log(\"Partner Response\", response?.data);\r\n                const names = response?.data;\r\n                const filterPartners = names?.filter((opt) => opt?.BusinessUnit_City === cityName?.City_Name)\r\n                const uniqueNames = filterPartners?.filter(newName => !partners?.some(prevName => prevName.id === newName.id));\r\n                console.log(\"filterPartners\", uniqueNames, filterPartners)\r\n                setPartners(filterPartners);\r\n            }).catch((error) => {\r\n                console.log(error);\r\n            })\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        getPartners();\r\n    }, [cityName]);\r\n\r\n\r\n    const handleGetAllServiceRelatedDatas = async (data) => {\r\n        try {\r\n            const response = await axios.get(`${BASE_URL}/Erpapp/storeeditdropdownlist/?Partner_Id=${data?.Partner_Id}`, header);\r\n            const filterData = response?.data;\r\n            return filterData;\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n\r\n\r\n    const [transactionSeriesType, setTransactionSeriesType] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n        const transactionSeries = fetchTransactionSeries(\"Stores\")\r\n\r\n        if (transactionSeries) {\r\n            transactionSeries\r\n                .then((result) => {\r\n                    console.log(\"result\", result);\r\n                    setTransactionSeriesType(result)\r\n                })\r\n                .catch((error) => {\r\n                    console.error(error);\r\n                });\r\n        }\r\n    }, [transactionSeriesType])\r\n\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            <Div>\r\n                <Div\r\n                    className=\"card\"\r\n                    sx={{ p: 2, borderRadius: 0, m: 0 }}\r\n                >\r\n                    <Div sx={{ display: openListStore === true ? \"block\" : \"none\" }}>\r\n                        <Div\r\n                            sx={{\r\n                                position: \"absolute\",\r\n                                right: 15,\r\n                                // width: \"100%\",\r\n                                display: \"flex\",\r\n                                justifyContent: \"flex-end\"\r\n                            }}\r\n                        >\r\n                            {Array.isArray(userRolePermissions) && userRolePermissions.includes(301) && (\r\n                                <ErpCreateButton handleClick={handleAddZones} name={\"Add Store\"} />\r\n                            )}\r\n                        </Div>\r\n                        <br />\r\n\r\n                        <Div sx={{ mt: { lg: 3, md: 5, xs: 5 }, minHeight: \"300px\" }}>\r\n                            <JumboScrollbar\r\n                                autoHeight={true}\r\n                                autoHideTimeout={4000}\r\n                                autoHeightMin={scrollHeight ? scrollHeight : 300}\r\n                                autoHide={true}\r\n                                hideTracksWhenNotNeeded\r\n                                id=\"no-more-tables\"\r\n                            >\r\n                                <Table stickyHeader className=\"table table-borderless\">\r\n                                    <TableHead className=\"table-head\">\r\n                                        <TableRow>\r\n                                            <TableCell></TableCell>\r\n                                            <TableCell sx={{ fontWeight: 600 }}>Store Id</TableCell>\r\n                                            <TableCell sx={{ fontWeight: 600 }}>Store Name</TableCell>\r\n                                            <TableCell sx={{ fontWeight: 600 }}>Store Incharge</TableCell>\r\n                                            <TableCell sx={{ fontWeight: 600 }}>Zone Name</TableCell>\r\n                                            <TableCell sx={{ fontWeight: 600 }}>Action</TableCell>\r\n                                        </TableRow>\r\n                                    </TableHead>\r\n                                    <TableBody>\r\n                                        {storeLists?.filter((opt) => opt?.Store_Area === name6).length > 0 ? storeLists?.filter((opt) => opt.Store_Area === name6).map((store) => {\r\n                                            return (\r\n                                                <TableRow key={store.id}>\r\n                                                    <TableCell padding=\"checkbox\" data-title=\"Status\">\r\n                                                        <FormControlLabel\r\n                                                            control={<Radio color=\"primary\" size=\"small\" />}\r\n                                                        />\r\n                                                    </TableCell>\r\n                                                    <TableCell data-title=\"Store Id\"\r\n                                                        onClick={() => {\r\n                                                            if (Array.isArray(userRolePermissions) && userRolePermissions.includes(303)) {\r\n                                                                setOpenViewStore(true);\r\n                                                                setOpenListStore(false);\r\n                                                                setCurrentData(store);\r\n                                                            } else {\r\n                                                                setOverviewAlert(true);\r\n                                                                setOpenListStore(true);\r\n                                                                setOpenViewStore(false);\r\n                                                            }\r\n                                                        }}\r\n                                                        sx={{ color: \"#00BFFF\", cursor: \"pointer\" }}\r\n                                                    >\r\n                                                        {store?.Store_Id}\r\n                                                    </TableCell>\r\n                                                    <TableCell data-title=\"Store Name\">{store?.Store_Name}</TableCell>\r\n                                                    <TableCell data-title=\"Store Incharge\">{store?.Store_Incharge || \"-\"}</TableCell>\r\n                                                    <TableCell data-title=\"Zone Name\">{store?.Store_Area}</TableCell>\r\n                                                    <TableCell data-title=\"Action\">\r\n                                                        <ErpActionButton userRolePermissions={userRolePermissions} editPermissionId={302} deletePermissionId={304} onClickEdit={() => editStoreById(store)} onClickDelete={() => deleteStoreById(store)} align=\"left\" />\r\n                                                    </TableCell>\r\n                                                </TableRow>\r\n                                            );\r\n                                        }) : (\r\n                                            <TableRow>\r\n                                                <TableCell colSpan={10} sx={{ textAlign: \"center\" }}>No Records</TableCell>\r\n                                            </TableRow>\r\n                                        )}\r\n                                    </TableBody>\r\n                                </Table>\r\n                            </JumboScrollbar>\r\n                        </Div>\r\n                    </Div>\r\n\r\n                    {openViewStore && Array.isArray(userRolePermissions) && userRolePermissions.includes(303) ? (\r\n                        <ViewStoreSettings currentData={currentData} countries={countries} states={states} cities={cities} zones={zones} name1={name1} name3={name3} name4={name4} name5={name5} name6={name6} getId5={getId5} openViewStore={openViewStore} setEditOverviewItem={setOpenViewStore} openListStore={openListStore} setListStore={setOpenListStore} fullScreen={fullScreen} />\r\n\r\n                    ) : (\r\n                        <>\r\n                            <ErpAlertViewDialogBox flag={overviewAlert} setFlag={setOverviewAlert} />\r\n                        </>\r\n                    )}\r\n\r\n                </Div>\r\n\r\n                <Div>\r\n                    <Dialog\r\n                        fullWidth\r\n                        open={openEditStore}\r\n                        aria-labelledby=\"alert-dialog-title\"\r\n                        aria-describedby=\"alert-dialog-description\"\r\n                        maxWidth=\"lg\"\r\n                    >\r\n                        <form onSubmit={(handleUpdateStore)}>\r\n                            <DialogContent>\r\n                                <Div sx={{ mt: 2, minHeight: \"300px\" }}>\r\n                                    <Grid container xs={12}>\r\n                                        <Grid item xs={12} md={6}>\r\n                                            <Grid container xs={12}>\r\n                                                <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\r\n                                                    <Typography className=\"col-md-12 col-lg-6 col-xl-4 input-label\" sx={{ mt: 2 }}>\r\n                                                        Store Id <span className=\"required\">*</span>\r\n                                                    </Typography>\r\n                                                    <Div className=\"col-md-12 col-lg-6 col-xl-8\">\r\n                                                        <TextField\r\n                                                            className=\"col-12 input-box\"\r\n                                                            name=\"storeId\"\r\n                                                            {...register(\"storeId\")}\r\n                                                            value={currentData?.Store_Id}\r\n                                                            // onChange={(e) => {\r\n                                                            //     setStoreId(e.target.value);\r\n                                                            // }}\r\n                                                            placeholder={transactionSeriesType === \"Automatic\" ? \"Auto Generated\" : \"Store Id\"}\r\n                                                            variant=\"outlined\"\r\n                                                            autoComplete=\"off\"\r\n                                                            disabled={transactionSeriesType === \"Automatic\" ? true : false}\r\n                                                            inputProps={{\r\n                                                                maxLength: 11,\r\n                                                                title: 'Please enter a maximum of 11 digits',\r\n                                                            }}\r\n                                                        />\r\n                                                    </Div>\r\n                                                </Grid>\r\n\r\n                                                <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\r\n                                                    <Typography className=\"col-md-12 col-lg-6 col-xl-4 input-label\" sx={{ mt: 2 }}>\r\n                                                        Store Name <span className=\"required\">*</span>\r\n                                                    </Typography>\r\n                                                    <Div className=\"col-md-12 col-lg-6 col-xl-8\">\r\n                                                        <TextField\r\n                                                            className={`col-12 input-box  ${errors.storeName ? \"is-invalid\" : \"\"\r\n                                                                }`}\r\n                                                            name=\"storeName\"\r\n                                                            {...register(\"storeName\")}\r\n                                                            value={storeName}\r\n                                                            onChange={(e) => {\r\n                                                                setStoreName(e.target.value);\r\n                                                                console.log(e.target.value);\r\n                                                            }}\r\n                                                            placeholder=\"Store Name\"\r\n                                                            autoComplete=\"off\"\r\n                                                        />\r\n                                                        <Div style={{ color: \"red\" }}>\r\n                                                            {!storeName && errors.storeName?.message}\r\n                                                        </Div>\r\n                                                    </Div>\r\n                                                </Grid>\r\n\r\n                                                <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\r\n                                                    <Typography className=\"col-md-12 col-lg-6 col-xl-4 input-label\" sx={{ mt: 2 }}>\r\n                                                        Building Name <span className=\"required\">*</span>\r\n                                                    </Typography>\r\n                                                    <Div className=\"col-md-12 col-lg-6 col-xl-8\">\r\n                                                        <TextField\r\n                                                            className={`col-12 input-box  ${errors.buildingName ? \"is-invalid\" : \"\"\r\n                                                                }`}\r\n                                                            name=\"buildingName\"\r\n                                                            {...register(\"buildingName\")}\r\n                                                            value={buildingName}\r\n                                                            onChange={(e) => setBuildingName(e.target.value)}\r\n                                                            placeholder=\"Building Name\"\r\n                                                            autoComplete=\"off\"\r\n                                                        />\r\n                                                        <Div style={{ color: \"red\" }}>\r\n                                                            {!buildingName && errors.buildingName?.message}\r\n                                                        </Div>\r\n                                                    </Div>\r\n                                                </Grid>\r\n\r\n                                                <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\r\n                                                    <Typography className=\"col-md-12 col-lg-6 col-xl-4 input-label\" sx={{ mt: 2 }}>\r\n                                                        Country <span className=\"required\">*</span>\r\n                                                    </Typography>\r\n                                                    <Div className=\"col-md-12 col-lg-6 col-xl-8\">\r\n                                                        <FormControl className=\"col-12\">\r\n                                                            <Autocomplete\r\n                                                                className={`search-select col-12 ${errors.countryName ? \"is-invalid\" : \"\"\r\n                                                                    }`}\r\n                                                                name=\"countryName\"\r\n                                                                options={countries}\r\n                                                                getOptionLabel={(option) => option ? option?.Country_Name : \"\"}\r\n                                                                value={countries?.find(\r\n                                                                    (option) => option?.Country_Name === selectedCountry\r\n                                                                ) || null}\r\n                                                                onChange={(event, newValue) => {\r\n                                                                    setSelectedCountry(newValue?.Country_Name);\r\n                                                                    setSelectedState(null); // Reset selectedState\r\n                                                                    setSelectedCity(null); // Reset selectedCity\r\n                                                                    console.log(\"Selected Country:\", newValue);\r\n                                                                }}\r\n\r\n                                                                renderInput={(params) => (\r\n                                                                    <TextField\r\n                                                                        {...params}\r\n                                                                        {...register(\"countryName\")}\r\n                                                                        placeholder=\"Select Country\"\r\n                                                                    />\r\n                                                                )}\r\n                                                                disabled\r\n                                                            />\r\n                                                            <Div style={{ color: \"red\" }}>\r\n                                                                {!selectedCountry && errors.countryName?.message}\r\n                                                            </Div>\r\n                                                        </FormControl>\r\n                                                    </Div>\r\n                                                </Grid>\r\n\r\n                                                <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\r\n                                                    <Typography className=\"col-md-12 col-lg-6 col-xl-4 input-label\" sx={{ mt: 2 }}>\r\n                                                        State <span className=\"required\">*</span>\r\n                                                    </Typography>\r\n                                                    <Div className=\"col-md-12 col-lg-6 col-xl-8\">\r\n                                                        <FormControl className=\"col-12\">\r\n                                                            <Autocomplete\r\n                                                                className={`search-select col-12 ${errors.stateName ? \"is-invalid\" : \"\"\r\n                                                                    }`}\r\n                                                                name=\"stateName\"\r\n                                                                options={states}\r\n                                                                getOptionLabel={(option) => option ? option?.State_Name : \"\"}\r\n                                                                value={states?.find(\r\n                                                                    (option) => option?.State_Name === selectedState\r\n                                                                ) || null}\r\n                                                                onChange={(event, newValue) => {\r\n                                                                    setSelectedState(newValue?.State_Name);\r\n                                                                    setSelectedCity(null); // Reset selectedCity\r\n                                                                    console.log(\"Selected State:\", newValue);\r\n                                                                }}\r\n\r\n                                                                renderInput={(params) => (\r\n                                                                    <TextField\r\n                                                                        {...params}\r\n                                                                        {...register(\"stateName\")}\r\n                                                                        placeholder=\"Select State\"\r\n                                                                    />\r\n                                                                )}\r\n                                                                disabled\r\n                                                            />\r\n                                                            <Div style={{ color: \"red\" }}>\r\n                                                                {!selectedState && errors.stateName?.message}\r\n                                                            </Div>\r\n                                                        </FormControl>\r\n                                                    </Div>\r\n                                                </Grid>\r\n\r\n                                                <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\r\n                                                    <Typography className=\"col-md-12 col-lg-6 col-xl-4 input-label\" sx={{ mt: 2 }}>\r\n                                                        City <span className=\"required\">*</span>\r\n                                                    </Typography>\r\n                                                    <Div className=\"col-md-12 col-lg-6 col-xl-8\">\r\n                                                        <FormControl className=\"col-12\">\r\n                                                            <Autocomplete\r\n                                                                className={`search-select col-12 ${errors.cityName ? \"is-invalid\" : \"\"\r\n                                                                    }`}\r\n                                                                name=\"cityName\"\r\n                                                                options={cities}\r\n                                                                getOptionLabel={(option) => option ? option?.City_Name : \"\"}\r\n                                                                value={cities?.find(\r\n                                                                    (option) => option?.City_Name === selectedCity\r\n                                                                ) || null}\r\n                                                                onChange={(event, newValue) => {\r\n                                                                    setSelectedCity(newValue?.City_Name);\r\n                                                                    console.log(\"Selected City:\", newValue);\r\n                                                                }}\r\n\r\n                                                                renderInput={(params) => (\r\n                                                                    <TextField\r\n                                                                        {...params}\r\n                                                                        {...register(\"cityName\")}\r\n                                                                        placeholder=\"Select City\"\r\n                                                                    />\r\n                                                                )}\r\n                                                                disabled\r\n                                                            />\r\n                                                            <Div style={{ color: \"red\" }}>\r\n                                                                {!selectedCity && errors.cityName?.message}\r\n                                                            </Div>\r\n                                                        </FormControl>\r\n                                                    </Div>\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </Grid>\r\n\r\n                                        <Grid item xs={12} md={6}>\r\n                                            <Grid container xs={12}>\r\n\r\n                                                <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\r\n                                                    <Typography className=\"col-sm-12 col-md-12 col-lg-6 col-xl-4 input-label\" sx={{ mt: 2 }}>\r\n                                                        Choose a BU <span className=\"required\">*</span>\r\n                                                    </Typography>\r\n                                                    <Div className=\"col-sm-12 col-md-12 col-lg-6 col-xl-8\">\r\n                                                        <FormControl className=\"col-12\">\r\n                                                            <Autocomplete\r\n                                                                className={`search-select col-12 ${errors.partnerName ? \"is-invalid\" : \"\"\r\n                                                                    }`}\r\n                                                                onFocus={getPartnerLists}\r\n                                                                name=\"partnerName\"\r\n                                                                options={businessUnitList?.map(\r\n                                                                    (partnerlist) => partnerlist\r\n                                                                )}\r\n                                                                getOptionLabel={(option) => option?.Partner_Name}\r\n                                                                value={businessUnitList?.find(\r\n                                                                    (option) => option?.Partner_Name === partnerName\r\n                                                                ) || null}\r\n                                                                onChange={(e, newValue) => {\r\n                                                                    setPartnerName(newValue?.Partner_Name);\r\n                                                                    setPartnerId(newValue?.id);\r\n                                                                }}\r\n                                                                renderInput={(params) => (\r\n                                                                    <TextField\r\n                                                                        {...params}\r\n                                                                        {...register(\"partnerName\")}\r\n                                                                        placeholder=\"Choose a business unit\"\r\n                                                                        autoComplete=\"off\"\r\n                                                                        variant=\"outlined\"\r\n                                                                    />\r\n                                                                )}\r\n                                                                disabled\r\n                                                            />\r\n                                                        </FormControl>\r\n                                                        <Div style={{ color: \"red\" }}>\r\n                                                            {!partnerName && errors.partnerName?.message}\r\n                                                        </Div>\r\n                                                    </Div>\r\n                                                </Grid>\r\n\r\n                                                <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\r\n                                                    <Typography className=\"col-md-12 col-lg-6 col-xl-4 input-label\" sx={{ mt: 2 }}>\r\n                                                        Location <span className=\"required\">*</span>\r\n                                                    </Typography>\r\n                                                    <Div className=\"col-md-12 col-lg-6 col-xl-8\">\r\n                                                        <FormControl className=\"col-12\">\r\n                                                            <Autocomplete\r\n                                                                className={`search-select col-12 ${errors.Location ? \"is-invalid\" : \"\"}`}\r\n                                                                name=\"location\"\r\n                                                                options={zones}\r\n                                                                getOptionLabel={(option) => option?.Zone_Name}\r\n                                                                value={zones?.find(\r\n                                                                    (option) => option?.Zone_Name === location\r\n                                                                ) || null}\r\n                                                                onChange={(e, newValue) => {\r\n                                                                    setLocation(newValue?.Zone_Name);\r\n                                                                    handleSearchLocation(newValue?.Zone_Name)\r\n                                                                }}\r\n                                                                renderInput={(params) => (\r\n                                                                    <TextField\r\n                                                                        {...params}\r\n                                                                        {...register(\"location\")}\r\n                                                                        placeholder=\"Location\"\r\n                                                                        autoComplete=\"off\"\r\n                                                                        variant=\"outlined\"\r\n                                                                    />\r\n                                                                )}\r\n                                                                disabled\r\n                                                            />\r\n                                                        </FormControl>\r\n                                                        <Div style={{ color: \"red\" }}>\r\n                                                            {!location && errors.location?.message}\r\n                                                        </Div>\r\n                                                    </Div>\r\n                                                </Grid>\r\n\r\n                                                <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\r\n                                                    <Typography className=\"col-md-12 col-lg-6 col-xl-4 input-label\" sx={{ mt: 2 }}>\r\n                                                        Longitude <span className=\"required\">*</span>\r\n                                                    </Typography>\r\n                                                    <Div className=\"col-md-12 col-lg-6 col-xl-8\">\r\n                                                        <TextField\r\n                                                            className=\"col-12 input-box\"\r\n                                                            name=\"longitude\"\r\n                                                            value={longitude}\r\n                                                            placeholder=\"Longitude\"\r\n                                                            autoComplete=\"off\"\r\n                                                            disabled\r\n                                                        />\r\n                                                    </Div>\r\n                                                </Grid>\r\n\r\n                                                <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\r\n                                                    <Typography className=\"col-md-12 col-lg-6 col-xl-4 input-label\" sx={{ mt: 2 }}>\r\n                                                        Latitude <span className=\"required\">*</span>\r\n                                                    </Typography>\r\n                                                    <Div className=\"col-md-12 col-lg-6 col-xl-8\">\r\n                                                        <TextField\r\n                                                            className=\"col-12 input-box\"\r\n                                                            name=\"latitude\"\r\n                                                            value={latitude}\r\n                                                            placeholder=\"Latitude\"\r\n                                                            autoComplete=\"off\"\r\n                                                            disabled\r\n                                                        />\r\n                                                    </Div>\r\n                                                </Grid>\r\n\r\n                                                <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\r\n                                                    <Typography className=\"col-md-12 col-lg-6 col-xl-4 input-label\" sx={{ mt: 2 }}>\r\n                                                        Store Incharge <span className=\"required\">*</span>\r\n                                                    </Typography>\r\n                                                    <Div className=\"col-md-12 col-lg-6 col-xl-8\">\r\n                                                        <FormControl className=\"col-12\">\r\n                                                            <Autocomplete\r\n                                                                className={`search-select col-12 ${errors.storeIncharge ? \"is-invalid\" : \"\"\r\n                                                                    }`}\r\n                                                                name=\"storeIncharge\"\r\n                                                                options={employeeLists}\r\n                                                                getOptionLabel={(option) => `${option?.Employee_FirstName} ${option?.Employee_LasttName}`}\r\n                                                                value={employeeLists?.find(\r\n                                                                    (option) => `${option?.Employee_FirstName} ${option?.Employee_LasttName}` === storeIncharge\r\n                                                                ) || null}\r\n                                                                onChange={(e, newValue) => {\r\n                                                                    setStoreIncharge(`${newValue?.Employee_FirstName} ${newValue?.Employee_LasttName}`);\r\n                                                                }}\r\n                                                                renderInput={(params) => (\r\n                                                                    <TextField\r\n                                                                        {...params}\r\n                                                                        {...register(\"storeIncharge\")}\r\n                                                                        placeholder=\"Store Incharge\"\r\n                                                                        autoComplete=\"off\"\r\n                                                                        variant=\"outlined\"\r\n                                                                    />\r\n                                                                )}\r\n                                                            />\r\n                                                        </FormControl>\r\n                                                        <Div style={{ color: \"red\" }}>\r\n                                                            {!storeIncharge && errors.storeIncharge?.message}\r\n                                                        </Div>\r\n                                                    </Div>\r\n                                                </Grid>\r\n\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </Div>\r\n                            </DialogContent>\r\n\r\n                            {/* code for save and cancel button */}\r\n                            <DialogActions>\r\n                                <Div className=\"buttons\" sx={{\r\n                                    mb: 3, display: \"flex\",\r\n                                    justifyContent: \"end\"\r\n                                }}>\r\n                                    <ButtonGroup\r\n                                        aria-label=\"split button\"\r\n                                        type=\"submit\"\r\n                                        color=\"primary\"\r\n                                        sx={{\r\n                                            mt: { xs: 0.5, lg: 0 },\r\n                                            mr: { xs: 0, md: 1 },\r\n                                        }}\r\n                                    >\r\n                                        <Button type=\"submit\" className=\"plus-button\" sx={{ width: { md: \"99px !important\" } }}>\r\n                                            Update\r\n                                        </Button>\r\n                                        <Button variant=\"contained\" className=\"icon-button\">\r\n                                            <FaSave size={18} />\r\n                                        </Button>\r\n                                    </ButtonGroup>\r\n\r\n                                    <ButtonGroup\r\n                                        aria-label=\"split button\"\r\n                                        onClick={handleClose}\r\n                                        sx={{\r\n                                            mt: { xs: 0.5, lg: 0 },\r\n                                            mr: { xs: 0, md: 1 }\r\n                                        }}\r\n                                    >\r\n                                        <Button className=\"plus-button\" sx={{ width: { md: \"99px !important\" } }}>Cancel</Button>\r\n                                        <Button variant=\"contained\" className=\"icon-button\">\r\n                                            <TiCancel size={20} />\r\n                                        </Button>\r\n                                    </ButtonGroup>\r\n                                </Div>\r\n                            </DialogActions>\r\n                        </form>\r\n                    </Dialog>\r\n                </Div>\r\n\r\n                <Div>\r\n                    {openCreateStore &&\r\n                        <CreateStore countries={countries} states={states} cities={cities} zones={zones} name1={name1} name3={name3} name4={name4} name5={name5} name6={name6} getId5={getId5} openCreateStore={openCreateStore} setOpenCreateStore={setOpenCreateStore} getStores={getStores} fullScreen={fullScreen} />\r\n                    }\r\n\r\n\r\n                    {openDeleteStore &&\r\n                        <ErpDeleteDialogBox flag={openDeleteStore} setFlag={setOpenDeleteStore} handleClick={handleDeleteStore} content={\"Are you sure you want to delete the store\"} id={currentData?.Store_Name} />\r\n                    }\r\n                </Div>\r\n            </Div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default StoreList","import JumboContentLayoutMain from \"@jumbo/components/JumboContentLayout/JumboContentLayoutMain\";\nimport {\n  Autocomplete,\n  Typography,\n  Tab,\n  Box,\n  Button,\n  Dialog,\n  DialogContent,\n  FormControl,\n  FormControlLabel,\n  Grid,\n  Radio,\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableRow,\n  TextField,\n  ButtonGroup,\n  DialogActions,\n  Tooltip,\n  IconButton,\n} from \"@mui/material\";\nimport React, {\n  createContext,\n  useCallback,\n  useEffect,\n} from \"react\";\nimport Setting from \"../Setting\";\nimport Div from \"@jumbo/shared/Div\";\nimport { TabContext, TabList, TabPanel } from \"@mui/lab\";\nimport { useState } from \"react\";\nimport axios from \"axios\";\nimport ZoneLists from \"./ZoneLists\";\nimport { toast } from \"react-toastify\";\nimport CityLists from \"./CityLists\";\nimport { BASE_URL } from \"app/services/auth-services\";\nimport StateLists from \"./StateLists\";\nimport { FaSave } from \"react-icons/fa\";\nimport { TiCancel } from \"react-icons/ti\";\nimport ScrollToTop from \"app/pages/ScrollToTop\";\nimport PartnerList from \"app/pages/settings/Organization/Partner/PartnerList\";\nimport StoreList from \"./Store/StoreList\";\nimport JumboScrollbar from \"@jumbo/components/JumboScrollbar\";\nimport { handleError } from \"app/pages/auth-pages/login/AuthGuard\";\nimport useResponsive from \"app/pages/useResponsive\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { fetchUserRolePermissions, selectedUserRolePermissions } from \"app/redux/actions/fetchUserRolePermissions\";\nimport { ErpActionButton, ErpCreateButton } from \"app/shared/ReuseComponents/ButtonComponent\";\nimport { MdDelete } from \"react-icons/md\";\n\nexport const DataContext = createContext();\n\nexport default function OrganizationStructure({ scrollHeight }) {\n  const token = localStorage.getItem(\"accesstoken\");\n\n  const header = {\n    headers: {\n      Authorization: `Bearer ${token}`,\n      \"Content-Type\": \"application/json\",\n      Accept: \"application/json\",\n    },\n  };\n\n  const dispatch = useDispatch();\n  const { userRolePermissions, formPermissions, modulePermissions } = useSelector(selectedUserRolePermissions);\n\n  const [errors, setErrors] = useState({});\n\n\n  const [id, setId] = useState(\"\");\n  const [id1, setId1] = useState(\"\");\n  const [id2, setId2] = useState(\"\");\n  const [id3, setId3] = useState(\"\");\n  const [id4, setId4] = useState(\"\");\n\n  const [name, setName] = useState(\"\");\n  const [name1, setName1] = useState(\"\");\n  const [name2, setName2] = useState(\"\");\n  const [name3, setName3] = useState(\"\");\n  const [name4, setName4] = useState(\"\");\n  const [name5, setName5] = useState(\"\");\n  const [name6, setName6] = useState(\"\");\n\n  const [inputNumber, setInputNumber] = useState(\"1\");\n  const [entities, setEntities] = useState([]);\n  const [countries, setCountries] = useState([]);\n  const [regions, setRegions] = useState([]);\n  const [states, setStates] = useState([]);\n  const [cities, setCities] = useState([]);\n  const [zones, setZones] = useState([]);\n\n\n  const [entityId, setEntityId] = useState(\"\");\n  const [entityName, setEntityName] = useState(name);\n  const [entityDescription, setEntityDescription] = useState(\"\");\n  const [countryName, setCountryName] = useState(\"\");\n  const [countryId, setCountryId] = useState(\"\");\n  const [countryDescription, setCountryDescription] = useState(\"\");\n  const [regionId, setRegionId] = useState(\"\");\n  const [regionName, setRegionName] = useState(\"\");\n  const [regionDescription, setRegionDescription] = useState(\"\");\n\n  const [currentData, setCurrentData] = useState({});\n\n  let isMobile = useResponsive(\"down\", \"lg\");\n\n\n  const handleChange = (index, newValue) => {\n    console.log(\"newValuenewValue\", newValue, inputNumber)\n    // setInputNumber(newValue, index);\n    switch (inputNumber) {\n      case \"1\":\n        if (inputNumber < newValue) {\n          if (checkId1) {\n            setInputNumber(newValue, index);\n          } else {\n            toast.error(\"Choose Your Entity\");\n          }\n        } else {\n          setInputNumber(newValue, index);\n        }\n\n        break;\n      case \"2\":\n        if (inputNumber < newValue) {\n          if (checkId1 && checkId2) {\n            setInputNumber(newValue, index);\n          } else {\n            toast.error(\"Choose Your Country\");\n          }\n        } else {\n          setInputNumber(newValue, index);\n        }\n\n        break;\n      case \"3\":\n        if (inputNumber < newValue) {\n          if (checkId1 && checkId2 && checkId3) {\n            setInputNumber(newValue, index);\n          } else {\n            toast.error(\"Choose Your Region\");\n          }\n        } else {\n          setInputNumber(newValue, index);\n        }\n\n        break;\n      case \"4\":\n        if (inputNumber < newValue) {\n          if (checkId1 && checkId2 && checkId3 && checkId4) {\n            setInputNumber(newValue, index);\n          } else {\n            toast.error(\"Choose Your State\");\n          }\n        } else {\n          setInputNumber(newValue, index);\n        }\n\n        break;\n      case \"5\":\n        if (inputNumber < newValue) {\n          if (checkId1 && checkId2 && checkId3 && checkId4 && checkId5) {\n            setInputNumber(newValue, index);\n          } else {\n            toast.error(\"Choose Your City\");\n          }\n        } else {\n          setInputNumber(newValue, index);\n        }\n\n        break;\n\n      case \"6\":\n        if (inputNumber < newValue) {\n          if (checkId1 && checkId2 && checkId3 && checkId4 && checkId5 && checkId6) {\n            setInputNumber(newValue, index);\n          } else {\n            toast.error(\"Choose Your Business Unit\");\n          }\n        } else {\n          setInputNumber(newValue, index);\n        }\n\n        break;\n\n      case \"7\":\n        if (inputNumber < newValue) {\n          if (checkId1 && checkId2 && checkId3 && checkId4 && checkId5 && checkId6 && checkId7) {\n            setInputNumber(newValue, index);\n          } else {\n            toast.error(\"Choose Your Zone\");\n          }\n        } else {\n          setInputNumber(newValue, index);\n        }\n\n        break;\n      default:\n        setInputNumber(newValue, index);\n    }\n  };\n\n  const [openEntity, setOpenEntity] = useState(false);\n  const [openCountry, setOpenCountry] = useState(false);\n  const [openRegion, setOpenRegion] = useState(false);\n\n  const [checkId1, setCheckId1] = useState(false);\n  const [checkId2, setCheckId2] = useState(false);\n  const [checkId3, setCheckId3] = useState(false);\n  const [checkId4, setCheckId4] = useState(false);\n  const [checkId5, setCheckId5] = useState(false);\n  const [checkId6, setCheckId6] = useState(false);\n  const [checkId7, setCheckId7] = useState(false);\n\n  const [countryLists, setCountryLists] = useState([]);\n  const [stateLists, setStateLists] = useState([]);\n\n  const [getId, setGetId] = useState(\"\");\n  const [getId1, setGetId1] = useState(\"\");\n  const [getId2, setGetId2] = useState(\"\");\n  const [getId3, setGetId3] = useState(\"\");\n  const [getId4, setGetId4] = useState(\"\");\n  const [getId5, setGetId5] = useState(\"\");\n  const [getId6, setGetId6] = useState(\"\");\n\n\n  const handleClose = () => {\n    setOpenEntity(false);\n    setOpenCountry(false);\n    setOpenRegion(false);\n    setErrors({});\n\n    setEntityName(\"\");\n    setEntityDescription(\"\");\n\n    setCountryName(\"\");\n    setCountryDescription(\"\");\n\n    setRegionName(\"\");\n    setRegionDescription(\"\");\n  };\n\n  const handleAddLegalEntity = () => {\n    setOpenEntity(true);\n    setCurrentData({});\n  };\n\n  const handleAddCountry = () => {\n    setOpenCountry(true);\n    setCurrentData({});\n  };\n\n  const handleAddRegion = () => {\n    setOpenRegion(true);\n    setCurrentData({});\n  };\n\n  // const handleAddState = () => {\n  //   setOpen(true);\n  // };\n\n  // const handleAddCity = () => {\n  //   setOpen(true);\n  // };\n\n  const getEntityDatas = useCallback(async () => {\n    await axios\n      .get(`${BASE_URL}/Erpapp/EntityLists/`, header)\n      .then((res) => {\n        console.log(res?.data?.results);\n        setEntities(res?.data?.results);\n      })\n      .catch((error) => {\n        console.log(\"ds\", error);\n      });\n  }, [entities]);\n\n  const getEntity = async () => {\n    await axios\n      .get(`${BASE_URL}/Erpapp/EntityDetailsCRUD/?id=${getId}`, header)\n      .then((res) => {\n        console.log(\"entityid\", res?.data);\n        setId(res?.data?.Entity_Id);\n        setName(res?.data?.Entity_Name);\n        // setCountries(res.data);\n      })\n      .catch((error) => {\n        console.log(\"ds\", error);\n      });\n  };\n\n  const getCountryDatas = async () => {\n    await axios\n      .post(\n        `${BASE_URL}/Erpapp/CountryLists/`,\n        {\n          Entity_Id: getId,\n        },\n        header\n      )\n      .then((res) => {\n        console.log(res?.data);\n        setCountries(res?.data);\n      })\n      .catch((error) => {\n        console.log(\"ds\", error);\n      });\n  };\n\n  const getCountry = async () => {\n    await axios\n      .get(`${BASE_URL}/Erpapp/CountryDetailsCRUD/?id=${getId1}`, header)\n      .then((res) => {\n        console.log(\"countryid\", res?.data);\n        setId1(res?.data?.Country_Id);\n        setName1(res?.data?.Country_Name);\n        // setName(res.data.Entity_Name);\n      })\n      .catch((error) => {\n        console.log(\"ds\", error);\n      });\n  };\n\n  const getRegionDatas = async () => {\n    await axios\n      .post(\n        `${BASE_URL}/Erpapp/RegionLists/`,\n        {\n          Country_Id: getId1,\n        },\n        header\n      )\n      .then((res) => {\n        console.log(res?.data);\n        setRegions(res?.data);\n      })\n      .catch((error) => {\n        console.log(\"ds\", error);\n      });\n  };\n\n  const getRegion = async () => {\n    await axios\n      .get(`${BASE_URL}/Erpapp/RegionDetailsCRUD/?id=${getId2}`, header)\n      .then((res) => {\n        console.log(\"regionid\", res?.data);\n        setId2(res?.data?.Region_Id);\n        setName2(res?.data?.Region_Name);\n        // setName(res.data.Entity_Name);\n      })\n      .catch((error) => {\n        console.log(\"ds\", error);\n      });\n  };\n\n  const getStateDatas = async () => {\n    await axios\n      .post(\n        `${BASE_URL}/Erpapp/StateLists/`,\n        {\n          Entity_Id: getId,\n          Country_Id: getId1,\n          Region_Id: getId2,\n        },\n        header\n      )\n      .then((res) => {\n        console.log(\"res?.data\", res?.data);\n        const filterLists = res?.data?.filter((opt) => opt?.Entity_Id === getId && opt?.Country_Id === getId1 && opt?.Region_Id === getId2)\n        setStates(filterLists);\n      })\n      .catch((error) => {\n        console.log(\"ds\", error);\n      });\n  };\n\n  const getStates = async () => {\n    await axios\n      .get(`${BASE_URL}/Erpapp/StateDetailsCRUD/?id=${getId3}`, header)\n      .then((res) => {\n        console.log(\"stateid\", res?.data);\n        setId3(res?.data?.State_Id);\n        setName3(res?.data?.State_Name);\n      })\n      .catch((error) => {\n        console.log(\"ds\", error);\n      });\n  };\n\n  const getCityDatas = async () => {\n    await axios\n      .post(\n        `${BASE_URL}/Erpapp/CityLists/`,\n        {\n          State_Id: getId3,\n        },\n        header\n      )\n      .then((res) => {\n        console.log(res?.data);\n        setCities(res?.data);\n      })\n      .catch((error) => {\n        console.log(\"ds\", error);\n      });\n  };\n\n  const getCity = async () => {\n    await axios\n      .get(`${BASE_URL}/Erpapp/CityDetailsCRUD/?id=${getId4}`, header)\n      .then((res) => {\n        console.log(\"cityid\", res?.data);\n        setId4(res?.data?.City_Id);\n        setName4(res?.data?.City_Name);\n      })\n      .catch((error) => {\n        console.log(\"ds\", error);\n      });\n  };\n\n  const getZoneDatas = async () => {\n    await axios\n      .post(\n        `${BASE_URL}/Erpapp/ZoneLists/`,\n        {\n          City_Id: getId4,\n        },\n        header\n      )\n      .then((res) => {\n        console.log(res?.data);\n        setZones(res?.data);\n        // setCityName(res.data.City_Id)\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  };\n\n  useEffect(() => {\n    getEntity();\n    getCountry();\n    getRegion();\n    getStates();\n    getCity();\n    getEntityDatas();\n    getCountryDatas();\n    getRegionDatas();\n    getStateDatas();\n    getCityDatas();\n    getZoneDatas();\n    getCountryLists();\n    getStateLists();\n  }, []);\n\n\n\n  useEffect(() => {\n    const nextEntity = entities?.find((opt, index) => index + 1 === entities?.length);\n    if (nextEntity) {\n      const nextEntityId = nextEntity?.Entity_Id;\n      const numericPart = parseInt(nextEntityId, 10) + 1;\n      const paddedValue = numericPart.toString().padStart(nextEntityId?.length, '0');\n      setEntityId(paddedValue);\n      console.log(\"numericPart\", paddedValue)\n    }\n  }, [entityId]);\n\n\n  // Regular Expression\n  const validateEntity = () => {\n    let error = {};\n\n    if (entityName === \"\" || entityName === null || entityName === undefined) {\n      error.entityName = \"Entity Name is required\"\n    }\n    if (entityDescription === \"\" || entityDescription === null || entityDescription === undefined) {\n      error.entityDescription = \"Entity Description is required\"\n    }\n\n    return error;\n  };\n\n  const handleCreateEntity = async (e) => {\n    e.preventDefault();\n\n    let validForm = validateEntity();\n    setErrors(validForm);\n\n    if (Object.keys(validForm).length === 0) {\n      if (currentData?.id !== undefined) {\n        var entitypayload = {\n          ...currentData,\n          Entity_Name: entityName,\n          Entity_Description: entityDescription,\n          Entity_Type_Code: parseInt(entityId) || parseInt(entities?.length) + 1,\n          Company_Id: parseInt(localStorage.getItem(\"OrganizationId\")),\n          Created_By: parseInt(localStorage.getItem(\"UserId\")),\n          Updated_By: parseInt(localStorage.getItem(\"UserId\")),\n        };\n        axios\n          .put(`${BASE_URL}/Erpapp/EntityDetailsCRUD/`, entitypayload, header)\n          .then((res) => {\n            console.log(res?.data);\n            if (res?.data?.id) {\n              toast.success(\"Entity updated successfully\");\n              setOpenEntity(false);\n              getEntityDatas();\n            } else {\n              toast.error(\"Entity Matching Query Doesn't Exist.\")\n            }\n          })\n          .catch((error) => {\n            console.log(error);\n            handleError(error);\n          });\n      } else {\n        var entitypayload = {\n          Entity_Name: entityName,\n          Entity_Description: entityDescription,\n          Entity_Type_Code: parseInt(entityId) || parseInt(entities?.length) + 1,\n          Company_Id: parseInt(localStorage.getItem(\"OrganizationId\")),\n          Created_By: parseInt(localStorage.getItem(\"UserId\")),\n          Updated_By: parseInt(localStorage.getItem(\"UserId\")),\n        };\n        axios\n          .post(`${BASE_URL}/Erpapp/EntityDetailsCRUD/`, entitypayload, header)\n          .then((res) => {\n            console.log(res?.data);\n            if (res?.data?.id) {\n              toast.success(\"Entity created successfully\");\n              setOpenEntity(false);\n              getEntityDatas();\n              setEntityName(\"\");\n              setEntityDescription(\"\");\n            } else {\n              toast.error(\"Entity Matching Query Doesn't Exist.\")\n            }\n          })\n          .catch((error) => {\n            console.log(error);\n            handleError(error);\n            // toast.error(\"Entity name is already exists\");\n          });\n      }\n    }\n  };\n\n  // edit entity\n  const editEntityById = async (data) => {\n    console.log(\"datadata\", data);\n    setOpenEntity(true);\n    setCurrentData(data);\n\n    await axios.get(`${BASE_URL}/Erpapp/EntityDetailsCRUD/?id=${data?.id}`, header)\n      .then((res) => {\n        console.log(res.data);\n        if (res.status === 200) {\n          setEntityName(res?.data?.Entity_Name);\n          setEntityDescription(res?.data?.Entity_Description);\n        }\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  }\n\n  // delete a entity \n  const deleteEntityById = async (id) => {\n    await axios.delete(`${BASE_URL}/Erpapp/EntityDetailsCRUD/?id=${id}`, header)\n      .then((res) => {\n        console.log(res.data);\n        if (res?.status === 200 && res?.data?.id) {\n          toast.success(\"Entity deleted successfully\");\n          getEntityDatas();\n        } else {\n          toast.error(res.message)\n        }\n      })\n      .catch((error) => {\n        console.log(error);\n        toast.error(error.message);\n      });\n  }\n\n\n  useEffect(() => {\n    const nextCountry = countries?.filter((opt, index) => index + 1 === countries?.length);\n    if (nextCountry) {\n      const nextCountryId = nextCountry[0]?.Country_Id;\n      const numericPart = parseInt(nextCountryId, 10) + 1;\n      const paddedValue = numericPart.toString().padStart(nextCountryId?.length, '0');\n      setCountryId(paddedValue);\n    }\n  }, [countryName]);\n\n  // Regular Expression\n  const validateCountry = () => {\n    let error = {};\n\n    if (countryName === \"\" || countryName === null || countryName === undefined) {\n      error.countryName = \"Country Name is required\"\n    }\n    if (countryDescription === \"\" || countryDescription === null || countryDescription === undefined) {\n      error.countryDescription = \"Country Description is required\"\n    }\n\n    return error;\n  };\n\n  const handleCreateCountry = async (e) => {\n    e.preventDefault();\n\n    let validForm = validateCountry();\n    setErrors(validForm);\n\n    if (Object.keys(validForm).length === 0) {\n      if (currentData?.id !== undefined) {\n        var countrypayload = {\n          ...currentData,\n          Entity_Id: getId,\n          Country_Name: countryName,\n          Country_Description: countryDescription,\n          Country_Type_Code: parseInt(`${id}${countryId}`),\n          Company_Id: parseInt(localStorage.getItem(\"OrganizationId\")),\n          Created_By: parseInt(localStorage.getItem(\"UserId\")),\n          Updated_By: parseInt(localStorage.getItem(\"UserId\")),\n        };\n        axios\n          .put(`${BASE_URL}/Erpapp/CountryDetailsCRUD/`, countrypayload, header)\n          .then((res) => {\n            console.log(res?.data);\n            if (res?.data?.id) {\n              toast.success(\"Country updated successfully\");\n              setOpenCountry(false);\n              getCountryDatas();\n            }\n          })\n          .catch((error) => {\n            console.log(error);\n            handleError(error);\n          });\n      } else {\n        var countrypayload = {\n          Entity_Id: getId,\n          Country_Name: countryName,\n          Country_Description: countryDescription,\n          Country_Type_Code: parseInt(`${id}${countryId}`),\n          Company_Id: parseInt(localStorage.getItem(\"OrganizationId\")),\n          Created_By: parseInt(localStorage.getItem(\"UserId\")),\n          Updated_By: parseInt(localStorage.getItem(\"UserId\")),\n        };\n        axios\n          .post(`${BASE_URL}/Erpapp/CountryDetailsCRUD/`, countrypayload, header)\n          .then((res) => {\n            console.log(res?.data);\n            if (res?.status === 201 && res?.data?.id) {\n              toast.success(\"Country created successfully\");\n              setOpenCountry(false);\n              getCountryDatas();\n              setCountryName(\"\");\n              setCountryDescription(\"\");\n            }\n          })\n          .catch((error) => {\n            console.log(error);\n            handleError(error);\n            // toast.error(\"Country name is already exists\");\n          });\n      }\n    }\n  };\n\n  // edit country\n  const editCountryById = async (data) => {\n    setOpenCountry(true);\n    setCurrentData(data);\n\n    await axios.get(`${BASE_URL}/Erpapp/CountryDetailsCRUD/?id=${data?.id}`, header)\n      .then((res) => {\n        console.log(res.data);\n        if (res.status === 200) {\n          setCountryName(res?.data?.Country_Name);\n          setCountryDescription(res?.data?.Country_Description);\n        }\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  }\n\n  // delete a country \n  const deleteCountryById = async (id) => {\n    await axios.delete(`${BASE_URL}/Erpapp/CountryDetailsCRUD/?id=${id}`, header)\n      .then((res) => {\n        console.log(res?.data);\n        if (res?.status === 200 && res?.data?.id) {\n          toast.success(\"Country deleted successfully\");\n          getCountryDatas();\n        } else {\n          toast.error(res.message)\n        }\n      })\n      .catch((error) => {\n        console.log(error);\n        toast.error(error.message);\n      });\n  }\n\n\n  useEffect(() => {\n    const nextRegion = regions?.filter((opt, index) => index + 1 === regions?.length);\n    if (nextRegion) {\n      const nextRegionId = nextRegion[0]?.Region_Id;\n      const numericPart = parseInt(nextRegionId, 10) + 1;\n      const paddedValue = numericPart.toString().padStart(nextRegionId?.length, '0');\n      setRegionId(paddedValue);\n    }\n  }, [regionName]);\n\n\n  // Regular Expression\n  const validateRegion = () => {\n    let error = {};\n\n    if (regionName === \"\" || regionName === null || regionName === undefined) {\n      error.regionName = \"Region Name is required\"\n    }\n    if (regionDescription === \"\" || regionDescription === null || regionDescription === undefined) {\n      error.regionDescription = \"Region Description is required\"\n    }\n\n    return error;\n  };\n\n  const handleCreateRegion = async (e) => {\n    e.preventDefault();\n\n    let validForm = validateRegion();\n    setErrors(validForm);\n\n    if (Object.keys(validForm).length === 0) {\n      if (currentData?.id !== undefined) {\n        var regionpayload = {\n          ...currentData,\n          Entity_Id: getId,\n          Country_Id: getId1,\n          Region_Name: regionName,\n          Region_Description: regionDescription,\n          Region_Type_Code: parseInt(`${id}${id1}${regionId}`),\n          Company_Id: parseInt(localStorage.getItem(\"OrganizationId\")),\n          Created_By: parseInt(localStorage.getItem(\"UserId\")),\n          Updated_By: parseInt(localStorage.getItem(\"UserId\")),\n        };\n        await axios\n          .put(`${BASE_URL}/Erpapp/RegionDetailsCRUD/`, regionpayload, header)\n          .then((res) => {\n            console.log(res?.data);\n            if (res?.data?.id) {\n              toast.success(\"Region updated successfully\");\n              setOpenRegion(false);\n              getRegionDatas();\n            }\n          })\n          .catch((error) => {\n            console.log(error);\n            handleError(error);\n          });\n      } else {\n        const getRegionName = regions?.some((opt) => opt?.Region_Name === regionName)\n        if (getRegionName) {\n          toast.error(\"Region Name is already exists\")\n        } else {\n          var regionpayload = {\n            Entity_Id: getId,\n            Country_Id: getId1,\n            Region_Name: regionName,\n            Region_Description: regionDescription,\n            Region_Type_Code: parseInt(`${id}${id1}${regionId}`),\n            Company_Id: parseInt(localStorage.getItem(\"OrganizationId\")),\n            Created_By: parseInt(localStorage.getItem(\"UserId\")),\n            Updated_By: parseInt(localStorage.getItem(\"UserId\")),\n          };\n          await axios\n            .post(`${BASE_URL}/Erpapp/RegionDetailsCRUD/`, regionpayload, header)\n            .then((res) => {\n              console.log(res?.data);\n              if (res?.status === 201 && res?.data?.id) {\n                toast.success(\"Region created successfully\");\n                setOpenRegion(false);\n                getRegionDatas();\n                setRegionName(\"\");\n                setRegionDescription(\"\");\n              }\n            })\n            .catch((error) => {\n              console.log(error);\n              handleError(error);\n            });\n        }\n      }\n    }\n  };\n\n  // edit region\n  const editRegionById = async (data) => {\n    setOpenRegion(true);\n    setCurrentData(data);\n\n    await axios.get(`${BASE_URL}/Erpapp/RegionDetailsCRUD/?id=${data?.id}`, header)\n      .then((res) => {\n        console.log(res.data);\n        if (res.status === 200) {\n          setRegionName(res?.data?.Region_Name);\n          setRegionDescription(res?.data?.Region_Description);\n        }\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  }\n\n  // delete a region \n  const deleteRegionById = async (id) => {\n    await axios.delete(`${BASE_URL}/Erpapp/RegionDetailsCRUD/?id=${id}`, header)\n      .then((res) => {\n        console.log(res?.data);\n        if (res?.status === 200 && res?.data?.id) {\n          toast.success(\"Region deleted successfully\");\n          getRegionDatas();\n        } else {\n          toast.error(res.message)\n        }\n      })\n      .catch((error) => {\n        console.log(error);\n        toast.error(error.message);\n      });\n  }\n\n\n  const getCountryLists = () => {\n    axios\n      .get(`https://countriesnow.space/api/v0.1/countries`, {\n        headers: {\n          //   Authorization: `Bearer ${token}`,\n          \"Content-Type\": \"application/json\",\n          Accept: \"application/json\",\n        },\n      })\n      .then((res) => {\n        console.log(res?.data?.data);\n        setCountryLists(res?.data?.data);\n      })\n      .catch((error) => {\n        console.log(\"ds\", error);\n      });\n  };\n\n  const getStateLists = () => {\n    axios\n      .post(\n        `https://countriesnow.space/api/v0.1/countries/states`,\n        { country: countryName.country },\n        {\n          headers: {\n            //   Authorization: `Bearer ${token}`,\n            \"Content-Type\": \"application/json\",\n            Accept: \"application/json\",\n          },\n        }\n      )\n      .then((res) => {\n        console.log(res?.data?.data);\n        var state = res?.data?.data;\n        setStateLists(state?.states);\n      })\n      .catch((error) => {\n        console.log(\"ds\", error);\n      });\n  };\n\n\n  useEffect(() => {\n    dispatch(fetchUserRolePermissions(token))\n  }, []);\n\n\n  return (\n    <>\n      <JumboContentLayoutMain>\n        <Setting />\n        <Typography variant=\"h3\" sx={{ fontWeight: 600 }}>\n          Organization Structure\n        </Typography>\n        <Typography variant=\"h4\" sx={{ fontWeight: 500 }}>\n          Users shall use this form to set up the Organization structure for all\n          operational activities.\n        </Typography>\n\n        <Div>\n          <TabContext value={inputNumber}>\n            <Box\n              sx={{\n                borderBottom: 0,\n                borderColor: \"divider\",\n                overflow: \"auto\",\n                mb: -1,\n              }}\n            >\n              <TabList\n                onChange={handleChange}\n                aria-label=\"scrollable auto tabs example\"\n                variant=\"scrollable\"\n                scrollButtons={isMobile ? true : false}\n                allowScrollButtonsMobile\n              >\n                <Tab\n                  label=\"Legal Entity\"\n                  value=\"1\"\n                  sx={{ fontSize: \"16px\", color: \"#000000\" }}\n                />\n                <Tab\n                  label=\"Country\"\n                  value=\"2\"\n                  onClick={() => {\n                    getCountryDatas();\n                    getEntity();\n                  }}\n                  sx={{ fontSize: \"16px\", color: \"#000000\" }}\n                />\n                <Tab\n                  label=\"Region\"\n                  value=\"3\"\n                  onClick={() => {\n                    getRegionDatas();\n                    getCountry();\n                    getEntity();\n                    getRegion();\n                  }}\n                  sx={{ fontSize: \"16px\", color: \"#000000\" }}\n                />\n                <Tab\n                  label=\"State\"\n                  value=\"4\"\n                  onClick={() => {\n                    getStateDatas();\n                    getCountry();\n                    getEntity();\n                    getRegion();\n                  }}\n                  sx={{ fontSize: \"16px\", color: \"#000000\" }}\n                />\n                <Tab\n                  label=\"City\"\n                  value=\"5\"\n                  onClick={() => {\n                    getCountry();\n                    getEntity();\n                    getRegion();\n                    getStates();\n                    getCityDatas();\n                  }}\n                  sx={{ fontSize: \"16px\", color: \"#000000\" }}\n                />\n\n                <Tab\n                  label=\"Business Unit\"\n                  value=\"6\"\n                  onClick={() => {\n                    getCountry();\n                    getEntity();\n                    getRegion();\n                    getStates();\n                    getCityDatas();\n                  }}\n                  sx={{ fontSize: \"16px\", color: \"#000000\" }}\n                />\n\n                <Tab\n                  label=\"Zones\"\n                  value=\"7\"\n                  onClick={() => {\n                    getCity();\n                    getZoneDatas();\n                  }}\n                  sx={{ fontSize: \"16px\", color: \"#000000\" }}\n                />\n\n                <Tab\n                  label=\"Store\"\n                  value=\"8\"\n                  onClick={() => {\n                    getCity();\n                    getZoneDatas();\n                  }}\n                  sx={{ fontSize: \"16px\", color: \"#000000\" }}\n                />\n\n                {/* <Tab\n                  label=\"Hub\"\n                  value=\"8\"\n                  sx={{ fontSize: \"16px\", color: \"#000000\" }}\n                /> */}\n                {/* <Tab\n                  label=\"Location\"\n                  value=\"9\"\n                  sx={{ fontSize: \"16px\", color: \"#000000\" }}\n                /> */}\n              </TabList>\n\n            </Box>\n\n            <DataContext.Provider\n              value={{\n                entities,\n                countries,\n                regions,\n                states,\n                cities,\n                zones,\n                id,\n                id1,\n                id2,\n                id3,\n                id4,\n                name,\n                name1,\n                name2,\n                name3,\n                name4,\n                name5,\n                name6,\n                setName,\n                setName1,\n                setName2,\n                setName3,\n                setName4,\n                setName5,\n                setName6,\n                checkId1,\n                checkId2,\n                checkId3,\n                checkId4,\n                checkId5,\n                checkId6,\n                setCheckId1,\n                setCheckId2,\n                setCheckId3,\n                setCheckId4,\n                setCheckId5,\n                setCheckId6,\n                setCheckId7,\n                getId,\n                getId1,\n                getId2,\n                setGetId2,\n                getId3,\n                setGetId3,\n                getId4,\n                setGetId4,\n                getId5,\n                setGetId5,\n                getId6,\n                setGetId6,\n                getCityDatas,\n                getStates,\n                getZoneDatas,\n                getStateDatas,\n                userRolePermissions,\n                currentData,\n                setCurrentData\n              }}\n            >\n              <TabPanel value=\"1\" index=\"1\" sx={{ ml: -3 }}>\n                {/* <EntityLists getEntity={getEntity}/> */}\n                <Div>\n                  <Div\n                    className=\"card\"\n                    sx={{ p: 2, minHeight: \"390px\", borderRadius: 0, m: 0 }}\n                  >\n                    <Div\n                      sx={{\n                        position: \"absolute\",\n                        right: 15,\n                        // width: \"100%\",\n                        display: \"flex\",\n                        justifyContent: \"flex-end\"\n                      }}\n                    >\n                      {Array.isArray(userRolePermissions) && userRolePermissions.includes(121) && (\n                        <ErpCreateButton handleClick={handleAddLegalEntity} name={\"Add Legal Entity\"} />\n                      )}\n                    </Div>\n                    <br />\n\n                    <Div sx={{ mt: { lg: 3, md: 5, xs: 5 } }}>\n                      <JumboScrollbar\n                        autoHeight={true}\n                        autoHideTimeout={4000}\n                        autoHeightMin={scrollHeight ? scrollHeight : 349}\n                        autoHide={true}\n                        hideTracksWhenNotNeeded\n                        id=\"no-more-tables\"\n                      >\n                        <Table stickyHeader className=\"table table-borderless\">\n                          <TableHead className=\"table-head\">\n                            <TableRow>\n                              <TableCell></TableCell>\n                              <TableCell sx={{ fontWeight: 600 }}>Code</TableCell>\n                              <TableCell sx={{ fontWeight: 600 }}>Name</TableCell>\n                              <TableCell sx={{ fontWeight: 600 }}>Description</TableCell>\n                              <TableCell sx={{ fontWeight: 600 }}>Action</TableCell>\n                            </TableRow>\n                          </TableHead>\n\n                          <TableBody>\n                            {entities?.map((entity, index) => {\n                              return (\n                                <TableRow key={index}>\n                                  <TableCell padding=\"checkbox\" data-title=\"Status\">\n                                    <FormControlLabel\n                                      control={\n                                        <Radio\n                                          color=\"primary\"\n                                          size=\"small\"\n                                          name=\"id\"\n                                          value={entity?.Entity_Id}\n                                          checked={\n                                            checkId1 === entity?.Entity_Id\n                                          }\n                                          onChange={(e) => {\n                                            setCheckId1(e.target.value);\n                                            setGetId(entity?.id);\n                                            setName(entity?.Entity_Name);\n                                            getCountry();\n                                          }}\n                                        />\n                                      }\n                                    />\n                                  </TableCell>\n                                  <TableCell data-title=\"Code\">{entity?.Entity_Id}</TableCell>\n                                  <TableCell data-title=\"Name\">{entity?.Entity_Name}</TableCell>\n                                  <TableCell data-title=\"Description\">{entity?.Entity_Description}</TableCell>\n                                  <TableCell data-title=\"Action\">\n                                    <Div sx={{ textAlign: \"left\" }}>\n                                      <Tooltip title=\"Delete\">\n                                        <IconButton\n                                          size=\"small\"\n                                          className=\"delete-icon\"\n                                          onClick={() => deleteEntityById(entity?.id)}\n                                          disabled={Array.isArray(userRolePermissions) && (userRolePermissions || [])?.includes(124) ? false : true}\n                                        >\n                                          <MdDelete\n                                            color={Array.isArray(userRolePermissions) && (userRolePermissions || [])?.includes(124) ? \"\" : \"#C7C8CC\"}\n                                          />\n                                        </IconButton>\n                                      </Tooltip>\n                                    </Div>\n                                  </TableCell>\n                                </TableRow>\n                              );\n                            })}\n                          </TableBody>\n                        </Table>\n                      </JumboScrollbar>\n                    </Div>\n                  </Div>\n\n                  {/* create entity popup */}\n                  <Dialog\n                    open={openEntity}\n                    // onClose={handleClose}\n                    aria-labelledby=\"alert-dialog-title\"\n                    aria-describedby=\"alert-dialog-description\"\n                  >\n                    <form onSubmit={handleCreateEntity}>\n                      <DialogContent>\n                        <Grid container>\n                          <Grid item xs={12} sx={{ ml: { sm: 0, md: 1.5 } }}>\n                            <Typography className=\"col-12 input-label\">\n                              Legal Entity Name{\" \"}\n                              <span className=\"required\">*</span>\n                            </Typography>\n                          </Grid>\n                          <Grid item xs={12} sx={{ ml: { sm: 0, md: 1.5 } }}>\n                            <TextField\n                              className=\"col-12 input-box\"\n                              id=\"outlined-basic\"\n                              placeholder=\"Legal Entity Name\"\n                              variant=\"outlined\"\n                              name=\"entityName\"\n                              value={entityName}\n                              onChange={(e) =>\n                                setEntityName(e.target.value)\n                              }\n                              autoComplete=\"off\"\n                              sx={{\n                                minWidth: { xs: \"100%\" },\n                                maxWidth: \"1005px\",\n                              }}\n                            />\n                            <Div style={{ color: \"red\" }}>\n                              {errors.entityName}\n                            </Div>\n                          </Grid>\n\n                          <Grid item xs={12} sx={{ ml: { sm: 0, md: 1.5 } }}>\n                            <Typography className=\"col-12 input-label\">\n                              Description <span className=\"required\">*</span>\n                            </Typography>\n                          </Grid>\n                          <Grid item xs={12} sx={{ ml: { sm: 0, md: 1.5 } }}>\n                            <TextField\n                              className=\"col-12 multiline-box\"\n                              id=\"outlined-basic\"\n                              placeholder=\"Description\"\n                              multiline\n                              rows={3}\n                              variant=\"outlined\"\n                              name=\"entityDescription\"\n                              value={entityDescription}\n                              onChange={(e) =>\n                                setEntityDescription(e.target.value)\n                              }\n                              autoComplete=\"off\"\n                              sx={{\n                                minWidth: { xs: \"100%\" },\n                                maxWidth: \"1005px\",\n                              }}\n                            />\n                            <Div style={{ color: \"red\" }}>\n                              {errors.entityDescription}\n                            </Div>\n                          </Grid>\n                        </Grid>\n                      </DialogContent>\n\n                      {/* code for save and cancel button */}\n                      <DialogActions>\n                        <Div className=\"buttons\" sx={{\n                          mb: 3, display: \"flex\",\n                          justifyContent: { sm: \"center\", md: \"end\" }\n                        }}>\n                          <ButtonGroup\n                            aria-label=\"split button\"\n                            type=\"submit\"\n                            sx={{\n                              mt: { xs: 0.5, lg: 0 },\n                              mr: { xs: 0, md: 1 }\n                            }}\n                          >\n                            <Button type=\"submit\" className=\"plus-button\" sx={{ width: { md: { md: \"99px !important\" } } }}>\n                              {currentData?.id !== undefined ? \"Update\" : \"Save\"}\n                            </Button>\n                            <Button variant=\"contained\" className=\"icon-button\">\n                              <FaSave size={18} />\n                            </Button>\n                          </ButtonGroup>\n\n                          <ButtonGroup\n                            aria-label=\"split button\"\n                            onClick={handleClose}\n                            sx={{\n                              mt: { xs: 0.5, lg: 0 },\n                              mr: { xs: 0, md: 1 }\n                            }}\n                          >\n                            <Button className=\"plus-button\" sx={{ width: { md: { md: \"99px !important\" } } }}>Cancel</Button>\n                            <Button variant=\"contained\" className=\"icon-button\">\n                              <TiCancel size={20} />\n                            </Button>\n                          </ButtonGroup>\n                        </Div>\n                      </DialogActions>\n                    </form>\n                  </Dialog>\n                </Div>\n              </TabPanel>\n\n              <TabPanel value=\"2\" index=\"2\" sx={{ ml: -2 }}>\n                {/* <CountryLists countries={countries} getId={getId}/> */}\n                <Div\n                  className=\"card\"\n                  sx={{ p: 2, minHeight: \"390px\", borderRadius: 0, m: 0 }}\n                >\n                  <Div\n                    sx={{\n                      position: \"absolute\",\n                      right: 15,\n                      // width: \"100%\",\n                      display: \"flex\",\n                      justifyContent: \"flex-end\"\n                    }}\n                  >\n                    {Array.isArray(userRolePermissions) && userRolePermissions.includes(85) && (\n                      <ErpCreateButton handleClick={handleAddCountry} name={\"Add Country\"} />\n                    )}\n                  </Div>\n                  <br />\n\n                  <Div sx={{ mt: { lg: 3, md: 5, xs: 5 } }}>\n                    <JumboScrollbar\n                      autoHeight={true}\n                      autoHideTimeout={4000}\n                      autoHeightMin={scrollHeight ? scrollHeight : 300}\n                      autoHide={true}\n                      hideTracksWhenNotNeeded\n                      id=\"no-more-tables\"\n                    >\n                      <Table stickyHeader className=\"table table-borderless\">\n                        <TableHead className=\"table-head\">\n                          <TableRow>\n                            <TableCell></TableCell>\n                            <TableCell sx={{ fontWeight: 600 }}>Code</TableCell>\n                            <TableCell sx={{ fontWeight: 600 }}>Name</TableCell>\n                            <TableCell sx={{ fontWeight: 600 }}>Description</TableCell>\n                            <TableCell sx={{ fontWeight: 600 }}>Action</TableCell>\n                          </TableRow>\n                        </TableHead>\n                        <TableBody>\n                          {countries?.map((country) => {\n                            return (\n                              <TableRow>\n                                <TableCell padding=\"checkbox\" data-title=\"Status\">\n                                  <FormControlLabel\n                                    control={\n                                      <Radio\n                                        color=\"primary\"\n                                        size=\"small\"\n                                        checked={\n                                          checkId2 === country?.Country_Id\n                                        }\n                                        value={country?.Country_Id}\n                                        onChange={(e) => {\n                                          setCheckId2(e.target.value);\n                                          setGetId1(country?.id);\n                                          setName1(country?.Country_Name);\n                                          getRegion();\n                                        }}\n                                      />\n                                    }\n                                  />\n                                </TableCell>\n                                <TableCell data-title=\"Code\">\n                                  {id}\n                                  {country?.Country_Id}\n                                </TableCell>\n                                <TableCell data-title=\"Name\">{country?.Country_Name}</TableCell>\n                                <TableCell data-title=\"Description\">\n                                  {country?.Country_Description}\n                                </TableCell>\n                                <TableCell data-title=\"Action\">\n                                  <ErpActionButton userRolePermissions={userRolePermissions} editPermissionId={86} deletePermissionId={88} onClickEdit={() => editCountryById(country)} onClickDelete={() => deleteCountryById(country?.id)} align=\"left\" />\n                                </TableCell>\n                              </TableRow>\n                            );\n                          })}\n                        </TableBody>\n                      </Table>\n                    </JumboScrollbar>\n                  </Div>\n\n                </Div>\n\n                {/* create a country */}\n                <Dialog\n                  open={openCountry}\n                  aria-labelledby=\"alert-dialog-title\"\n                  aria-describedby=\"alert-dialog-description\"\n                >\n                  <form onSubmit={handleCreateCountry}>\n                    <DialogContent>\n                      <Grid container>\n                        <Grid item xs={12} sx={{ ml: { sm: 0, md: 1.5 } }}>\n                          <Typography className=\"col-12 input-label\">\n                            Entity Name <span className=\"required\">*</span>\n                          </Typography>\n                        </Grid>\n                        <Grid item xs={12} sx={{ ml: { sm: 0, md: 1.5 } }}>\n                          <FormControl className=\"col-12\">\n                            <Autocomplete\n                              className={`search-select col-12 ${errors.entityName ? \"is-invalid\" : \"\"\n                                }`}\n                              id=\"entityName\"\n                              name=\"entityName\"\n                              options={entities?.map((entity) => entity)}\n                              getOptionLabel={(option) => {\n                                if (typeof option === \"string\") {\n                                  return option;\n                                }\n                                if (option && option?.Entity_Name) {\n                                  return option?.Entity_Name;\n                                }\n                                return \"\";\n                              }}\n                              value={entities?.find(\n                                (option) =>\n                                  option?.Entity_Name === entityName\n                              )}\n                              onChange={(e, newValue) => {\n                                setEntityName(newValue);\n                                // setValue(\n                                //   \"entityName\",\n                                //   entities?.find(\n                                //     (option) =>\n                                //       option?.Entity_Name === entityName\n                                //   )\n                                // );\n                              }}\n                              defaultValue={entities?.find(\n                                (option) => option?.Entity_Name === name\n                              )}\n                              isOptionEqualToValue={(option, value) =>\n                                option?.Entity_Name === value\n                              }\n                              sx={{\n                                minWidth: { xs: \"100%\" },\n                                maxWidth: \"1005px\",\n                              }}\n                              renderInput={(params) => (\n                                <TextField\n                                  {...params}\n                                  placeholder=\"Entity Name\"\n                                  variant=\"outlined\"\n                                  autoComplete=\"off\"\n                                />\n                              )}\n                            />\n                          </FormControl>\n                          <Div style={{ color: \"red\" }}>\n                            {errors.entityName}\n                          </Div>\n                        </Grid>\n\n                        <Grid item xs={12} sx={{ ml: { sm: 0, md: 1.5 } }}>\n                          <Typography className=\"col-12 input-label\">\n                            Country Name <span className=\"required\">*</span>\n                          </Typography>\n                        </Grid>\n                        <Grid item xs={12} sx={{ ml: { sm: 0, md: 1.5 } }}>\n                          <Autocomplete\n                            // freeSolo\n                            className={`search-select col-12 ${errors.countryName ? \"is-invalid\" : \"\"\n                              }`}\n                            id=\"countryName\"\n                            name=\"countryName\"\n                            getOptionLabel={(option) => {\n                              if (typeof option === \"string\") {\n                                return option;\n                              }\n                              if (option && option?.country) {\n                                return option?.country;\n                              }\n                              return \"\";\n                            }}\n                            options={countryLists?.map(\n                              (countrylist) => countrylist\n                            )}\n                            value={currentData?.id !== undefined ? countryName : countryLists?.find(\n                              (option) => option?.country === countryName\n                            )}\n                            onChange={(e, newValue) => {\n                              setCountryName(newValue?.country);\n                            }}\n                            sx={{\n                              minWidth: { xs: \"100%\" },\n                              maxWidth: \"1005px\",\n                              fontSize: \"14px\",\n                            }}\n                            renderInput={(params) => (\n                              <TextField\n                                {...params}\n                                placeholder=\"Country Name\"\n                                variant=\"outlined\"\n                                autoComplete=\"off\"\n                              />\n                            )}\n                          />\n\n                          <Div style={{ color: \"red\" }}>\n                            {errors.countryName}\n                          </Div>\n                        </Grid>\n\n                        <Grid item xs={12} sx={{ ml: { sm: 0, md: 1.5 } }}>\n                          <Typography className=\"col-12 input-label\">\n                            Description\n                          </Typography>\n                        </Grid>\n                        <Grid item xs={12} sx={{ ml: { sm: 0, md: 1.5 } }}>\n                          <TextField\n                            className={`multiline-box col-12 ${errors.countryDescription ? \"is-invalid\" : \"\"\n                              }`}\n                            id=\"outlined-basic\"\n                            placeholder=\"Description\"\n                            multiline\n                            rows={3}\n                            variant=\"outlined\"\n                            name=\"countryDescription\"\n                            value={countryDescription}\n                            onChange={(e) =>\n                              setCountryDescription(e.target.value)\n                            }\n                            autoComplete=\"off\"\n                            sx={{\n                              minWidth: { xs: \"100%\" },\n                              maxWidth: \"1005px\",\n                            }}\n                          />\n                          <Div style={{ color: \"red\" }}>\n                            {errors.countryDescription}\n                          </Div>\n                        </Grid>\n                      </Grid>\n                    </DialogContent>\n\n                    {/* code for save and cancel button */}\n                    <DialogActions>\n                      <Div className=\"buttons\" sx={{\n                        mb: 3, display: \"flex\",\n                        justifyContent: \"end\"\n                      }}>\n                        <ButtonGroup\n                          aria-label=\"split button\"\n                          type=\"submit\"\n                          // loading={isSubmitting}\n                          sx={{\n                            mt: { xs: 0.5, lg: 0 },\n                            mr: { xs: 0, md: 1 }\n                          }}\n                        >\n                          <Button type=\"submit\" className=\"plus-button\" sx={{ width: { md: \"99px !important\" } }}>\n                            {currentData?.id !== undefined ? \"Update\" : \"Save\"}\n                          </Button>\n                          <Button variant=\"contained\" className=\"icon-button\">\n                            <FaSave size={18} />\n                          </Button>\n                        </ButtonGroup>\n\n                        <ButtonGroup\n                          aria-label=\"split button\"\n                          onClick={handleClose}\n                          sx={{\n                            mt: { xs: 0.5, lg: 0 },\n                            mr: { xs: 0, md: 1 }\n                          }}\n                        >\n                          <Button className=\"plus-button\" sx={{ width: { md: \"99px !important\" } }}>Cancel</Button>\n                          <Button variant=\"contained\" className=\"icon-button\">\n                            <TiCancel size={20} />\n                          </Button>\n                        </ButtonGroup>\n                      </Div>\n                    </DialogActions>\n                  </form>\n                  {/* //     </Form>\n                    //   )}\n                    // </Formik> */}\n                </Dialog>\n\n              </TabPanel>\n\n              <TabPanel value=\"3\" index=\"3\" sx={{ ml: -2 }}>\n                {/* <RegionLists /> */}\n                <Div\n                  className=\"card\"\n                  sx={{ p: 2, minHeight: \"380px\", borderRadius: 0, m: 0 }}\n                >\n                  <Div\n                    sx={{\n                      position: \"absolute\",\n                      right: 15,\n                      // width: \"100%\",\n                      display: \"flex\",\n                      justifyContent: \"flex-end\"\n                    }}\n                  >\n                    {Array.isArray(userRolePermissions) && userRolePermissions.includes(173) && (\n                      <ErpCreateButton handleClick={handleAddRegion} name={\"Add Region\"} />\n                    )}\n                  </Div>\n                  <br />\n\n                  <Div sx={{ mt: { lg: 3, md: 5, xs: 5 } }}>\n                    <JumboScrollbar\n                      autoHeight={true}\n                      autoHideTimeout={4000}\n                      autoHeightMin={scrollHeight ? scrollHeight : 300}\n                      autoHide={true}\n                      hideTracksWhenNotNeeded\n                      id=\"no-more-tables\"\n                    >\n                      <Table stickyHeader className=\"table table-borderless\">\n                        <TableHead className=\"table-head\">\n                          <TableRow>\n                            <TableCell></TableCell>\n                            <TableCell sx={{ fontWeight: 600 }}>Code</TableCell>\n                            <TableCell sx={{ fontWeight: 600 }}>Name</TableCell>\n                            <TableCell sx={{ fontWeight: 600 }}>Description</TableCell>\n                            <TableCell sx={{ fontWeight: 600 }}>Action</TableCell>\n                          </TableRow>\n                        </TableHead>\n                        <TableBody>\n                          {regions?.map((region) => {\n                            return (\n                              <TableRow>\n                                <TableCell padding=\"checkbox\" data-title=\"Status\">\n                                  <FormControlLabel\n                                    control={\n                                      <Radio\n                                        color=\"primary\"\n                                        size=\"small\"\n                                        checked={checkId3 === region?.Region_Id}\n                                        value={region?.Region_Id}\n                                        onChange={(e) => {\n                                          setCheckId3(e.target.value);\n                                          setGetId2(region?.id);\n                                          setName2(region?.Region_Name);\n                                          getStates();\n                                        }}\n                                      />\n                                    }\n                                  />\n                                </TableCell>\n                                <TableCell data-title=\"Code\">\n                                  {id}\n                                  {id1}\n                                  {region?.Region_Id}\n                                </TableCell>\n                                <TableCell data-title=\"Name\">{region?.Region_Name}</TableCell>\n                                <TableCell data-title=\"Description\">\n                                  {region?.Region_Description}\n                                </TableCell>\n                                <TableCell data-title=\"Action\">\n                                  <ErpActionButton userRolePermissions={userRolePermissions} editPermissionId={174} deletePermissionId={176} onClickEdit={() => editRegionById(region)} onClickDelete={() => deleteRegionById(region?.id)} align=\"left\" />\n                                </TableCell>\n                              </TableRow>\n                            );\n                          })}\n                        </TableBody>\n                      </Table>\n                    </JumboScrollbar>\n                  </Div>\n\n                </Div>\n\n                {/* create a region */}\n                <Dialog\n                  open={openRegion}\n                  // onClose={handleClose}\n                  aria-labelledby=\"alert-dialog-title\"\n                  aria-describedby=\"alert-dialog-description\"\n                >\n                  <form onSubmit={handleCreateRegion}>\n                    <DialogContent>\n                      <Grid container>\n                        <Grid item xs={12} sx={{ ml: { sm: 0, md: 1.5 } }}>\n                          <Typography className=\"col-12 input-label\">\n                            Entity Name <span className=\"required\">*</span>\n                          </Typography>\n                        </Grid>\n                        <Grid item xs={12} sx={{ ml: { sm: 0, md: 1.5 } }}>\n                          <Autocomplete\n                            // freeSolo\n                            className={`search-select col-12 ${errors.entityName ? \"is-invalid\" : \"\"\n                              }`}\n                            id=\"free-solo-demo\"\n                            placeholder=\"Entity Name\"\n                            name=\"entityName\"\n                            options={entities?.map((entity) => entity)}\n                            getOptionLabel={(option) => option?.Entity_Name}\n                            value={entities?.find(\n                              (option) => option?.Entity_Name === entityName\n                            )}\n                            onChange={(e, newValue) =>\n                              setEntityName(newValue)\n                            }\n                            defaultValue={entities?.find(\n                              (option) => option?.Entity_Name === name\n                            )}\n                            sx={{\n                              minWidth: { xs: \"100%\" },\n                              maxWidth: \"1005px\",\n                            }}\n                            renderInput={(params) => (\n                              <TextField\n                                {...params}\n                                placeholder=\"Entity Name\"\n                                variant=\"outlined\"\n                                autoComplete=\"off\"\n                              />\n                            )}\n                          />\n                          <Div style={{ color: \"red\" }}>\n                            {errors.entityName}\n                          </Div>\n                        </Grid>\n\n                        <Grid item xs={12} sx={{ ml: { sm: 0, md: 1.5 } }}>\n                          <Typography className=\"col-12 input-label\">\n                            Country Name <span className=\"required\">*</span>\n                          </Typography>\n                        </Grid>\n                        <Grid item xs={12} sx={{ ml: { sm: 0, md: 1.5 } }}>\n                          <Autocomplete\n                            // freeSolo\n                            className={`search-select col-12 ${errors.countryName ? \"is-invalid\" : \"\"\n                              }`}\n                            id=\"free-solo-demo\"\n                            placeholder=\"Country Name\"\n                            name=\"countryName\"\n                            options={countries?.map((country) => country)}\n                            getOptionLabel={(option) => option?.Country_Name}\n                            value={countries?.find(\n                              (option) =>\n                                option?.Country_Name === countryName\n                            )}\n                            onChange={(e, newValue) => {\n                              setCountryName(newValue);\n                            }}\n                            defaultValue={countries.find(\n                              (option) => option?.Country_Name === name1\n                            )}\n                            sx={{\n                              minWidth: { xs: \"100%\" },\n                              maxWidth: \"1005px\",\n                              fontSize: \"14px\",\n                            }}\n                            renderInput={(params) => (\n                              <TextField\n                                {...params}\n                                placeholder=\"Country Name\"\n                                variant=\"outlined\"\n                                autoComplete=\"off\"\n                              />\n                            )}\n                          />\n                          <Div style={{ color: \"red\" }}>\n                            {errors.countryName}\n                          </Div>\n                        </Grid>\n\n                        <Grid item xs={12} sx={{ ml: { sm: 0, md: 1.5 } }}>\n                          <Typography className=\"col-12 input-label\">\n                            Region Name <span className=\"required\">*</span>\n                          </Typography>\n                        </Grid>\n                        <Grid item xs={12} sx={{ ml: { sm: 0, md: 1.5 } }}>\n                          <TextField\n                            className={`input-box col-12 ${errors.regionName ? \"is-invalid\" : \"\"\n                              }`}\n                            id=\"outlined-basic\"\n                            placeholder=\"Region Name\"\n                            variant=\"outlined\"\n                            name=\"regionName\"\n                            value={regionName}\n                            onChange={(e) => setRegionName(e.target.value)}\n                            autoComplete=\"off\"\n                            sx={{\n                              minWidth: { xs: \"100%\" },\n                              maxWidth: \"1005px\",\n                            }}\n                          />\n                          <Div style={{ color: \"red\" }}>\n                            {errors.regionName}\n                          </Div>\n                        </Grid>\n\n                        <Grid item xs={12} sx={{ ml: { sm: 0, md: 1.5 } }}>\n                          <Typography className=\"col-12 input-label\">\n                            Description\n                          </Typography>\n                        </Grid>\n                        <Grid item xs={12} sx={{ ml: { sm: 0, md: 1.5 } }}>\n                          <TextField\n                            className={`multiline-box col-12 ${errors.regionDescription ? \"is-invalid\" : \"\"\n                              }`}\n                            id=\"outlined-basic\"\n                            placeholder=\"Description\"\n                            multiline\n                            rows={3}\n                            variant=\"outlined\"\n                            name=\"regionDescription\"\n                            value={regionDescription}\n                            onChange={(e) =>\n                              setRegionDescription(e.target.value)\n                            }\n                            autoComplete=\"off\"\n                            sx={{\n                              minWidth: { xs: \"100%\" },\n                              maxWidth: \"1005px\",\n                            }}\n                          />\n                          <Div style={{ color: \"red\" }}>\n                            {errors.regionDescription}\n                          </Div>\n                        </Grid>\n                      </Grid>\n                    </DialogContent>\n\n                    {/* code for save and cancel button */}\n                    <DialogActions>\n                      <Div className=\"buttons\" sx={{\n                        mb: 3, display: \"flex\",\n                        justifyContent: \"end\"\n                      }}>\n                        <ButtonGroup\n                          aria-label=\"split button\"\n                          type=\"submit\"\n                          // loading={isSubmitting}\n                          sx={{\n                            mt: { xs: 0.5, lg: 0 },\n                            mr: { xs: 0, md: 1 }\n                          }}\n                        >\n                          <Button type=\"submit\" className=\"plus-button\" sx={{ width: { md: \"99px !important\" } }}>\n                            {currentData?.id !== undefined ? \"Update\" : \"Save\"}\n                          </Button>\n                          <Button variant=\"contained\" className=\"icon-button\">\n                            <FaSave size={18} />\n                          </Button>\n                        </ButtonGroup>\n\n                        <ButtonGroup\n                          aria-label=\"split button\"\n                          onClick={handleClose}\n                          sx={{\n                            mt: { xs: 0.5, lg: 0 },\n                            mr: { xs: 0, md: 1 }\n                          }}\n                        >\n                          <Button className=\"plus-button\" sx={{ width: { md: \"99px !important\" } }}>Cancel</Button>\n                          <Button variant=\"contained\" className=\"icon-button\">\n                            <TiCancel size={20} />\n                          </Button>\n                        </ButtonGroup>\n                      </Div>\n                    </DialogActions>\n                  </form>\n                </Dialog>\n              </TabPanel>\n\n              <TabPanel value=\"4\" index=\"4\" sx={{ ml: -2 }}>\n                <StateLists />\n              </TabPanel>\n\n              <TabPanel value=\"5\" index=\"5\" sx={{ ml: -2 }}>\n                <CityLists />\n              </TabPanel>\n\n              <TabPanel value=\"6\" index=\"6\" sx={{ ml: -2 }}>\n                <PartnerList />\n              </TabPanel>\n\n              <TabPanel value=\"7\" index=\"7\" sx={{ ml: -2 }}>\n                <ZoneLists />\n              </TabPanel>\n\n              <TabPanel value=\"8\" index=\"8\" sx={{ ml: -2 }}>\n                <StoreList />\n              </TabPanel>\n            </DataContext.Provider>\n          </TabContext>\n        </Div>\n        <ScrollToTop Scrollheight={180} />\n      </JumboContentLayoutMain>\n    </>\n  );\n}","import React from 'react';\nimport { Typography } from '@mui/material';\nimport Div from \"@jumbo/shared/Div\";\nimport './Setting.css';\n\n\n\n\nconst Setting = () => {\n  return ( \n    <>\n      <Div>\n        {/* <img src='.\\images\\mainlogo-icon.jpg' width={30} height={30}></img> */}\n        <Typography variant='h1' sx={{ fontWeight: 800, mt: -2}}>Settings</Typography>\n      </Div>\n    </>\n    \n  )\n}\n\nexport default Setting;\n","// @mui\r\nimport { useTheme } from '@mui/material/styles';\r\nimport useMediaQuery from '@mui/material/useMediaQuery';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nexport default function useResponsive(query, key, start, end) {\r\n  const theme = useTheme();\r\n\r\n  const mediaUp = useMediaQuery(theme.breakpoints.up(key));\r\n\r\n  const mediaDown = useMediaQuery(theme.breakpoints.down(key));\r\n\r\n  const mediaBetween = useMediaQuery(theme.breakpoints.between(start, end));\r\n\r\n  const mediaOnly = useMediaQuery(theme.breakpoints.only(key));\r\n\r\n  if (query === 'up') {\r\n    return mediaUp;\r\n  }\r\n\r\n  if (query === 'down') {\r\n    return mediaDown;\r\n  }\r\n\r\n  if (query === 'between') {\r\n    return mediaBetween;\r\n  }\r\n\r\n  if (query === 'only') {\r\n    return mediaOnly;\r\n  }\r\n  return null;\r\n}\r\n","import React from \"react\";\r\nimport * as yup from \"yup\";\r\nimport * as Yup from \"yup\";\r\n\r\nexport const entityValidationSchema = yup.object({\r\n  entityName: yup\r\n    .string(\"Enter your entity name\")\r\n    .required(\"Entity name is required\"),\r\n  entityDescription: yup\r\n    .string(\"Enter your entity description\")\r\n    .required(\"Entity Description is required\")\r\n    .min(10, \"Entity Description must be at least 10 characters\")\r\n    .max(240, \"Entity Description must not exceed 240 characters\"),\r\n});\r\n\r\nexport const countryValidationSchema = Yup.object({\r\n  // entityName: Yup.string().required(\"Entity name is required\"),\r\n  countryName: Yup.string().required(\"Country name is required\"),\r\n  countryDescription: Yup.string()\r\n    .required(\"Country Description is required\")\r\n    .min(10, \"Country Description must be at least 10 characters\")\r\n    .max(240, \"Country Description must not exceed 240 characters\"),\r\n});\r\n\r\nexport const regionValidationSchema = yup.object({\r\n  // entityName: yup.string().required(\"Entity name is required\"),\r\n  // countryName: yup.string().required(\"Country name is required\"),\r\n  regionName: yup.string().required(\"Region name is required\"),\r\n  regionDescription: yup\r\n    .string()\r\n    .required(\"Region Description is required\")\r\n    .min(10, \"Region Description must be at least 10 characters\")\r\n    .max(240, \"Region Description must not exceed 240 characters\"),\r\n});\r\n\r\nexport const stateValidationSchema = yup.object({\r\n  // entityName: yup.string().required(\"Entity name is required\"),\r\n  // countryName: yup.string().required(\"Country name is required\"),\r\n  // regionName: yup.string().required(\"Region name is required\"),\r\n  stateName: yup.string().required(\"State name is required\"),\r\n  stateDescription: yup\r\n    .string()\r\n    .required(\"State Description is required\")\r\n    .min(10, \"State Description must be at least 10 characters\")\r\n    .max(240, \"State Description must not exceed 240 characters\"),\r\n});\r\n\r\nexport const cityValidationSchema = yup.object({\r\n  // entityName: yup.string().required(\"Entity name is required\"),\r\n  // countryName: yup.string().required(\"Country name is required\"),\r\n  // regionName: yup.string().required(\"Region name is required\"),\r\n  // stateName: yup.string().required(\"State name is required\"),\r\n  cityName: yup.string().required(\"City name is required\"),\r\n  cityDescription: yup\r\n    .string()\r\n    .required(\"City Description is required\")\r\n    .min(10, \"City Description must be at least 10 characters\")\r\n    .max(240, \"City Description must not exceed 240 characters\"),\r\n});\r\n\r\nexport const zoneValidationSchema = yup.object({\r\n  // cityName: yup\r\n  //   .string(\"Enter your city name\")\r\n  //   .required(\"City name is required\"),\r\n  pincode: yup.string(\"Enter the pincode\").required(\"Enter valid pincode\"),\r\n  zoneName: yup.string(\"Enter the zone name\").required(\"Zone name is required\"),\r\n});\r\n\r\nexport const itemMasterValidationSchema = yup.object({\r\n  itemName: yup.string().required(\"Item name is required\"),\r\n  uom: yup.string().required(\"Uom is required\"),\r\n  // imageName: yup.string().required(\"Item Image is required\"),\r\n  purchaseDescription: yup.string(),\r\n  inventoryDescription: yup.string(),\r\n  purchaseAccount: yup.string().required(\"Purchase account is required\"),\r\n  inventoryAccount: yup.string().required(\"Inventory account is required\"),\r\n});\r\n\r\n\r\nexport const lookupValidationSchema = yup.object({\r\n  itemName: yup.string().required(\"Lookup name is required\"),\r\n  // Lookupname: yup.string().required(\"Lookup Name is required\"),\r\n  // value: yup.string().required(\"Value is required\"),\r\n\r\n});\r\n\r\nexport const EditlookupValidationSchema = yup.object({\r\n  // Lookupname: yup.string().required(\"Lookup Name is required\"),\r\n  // value: yup.string().required(\"Value is required\"),\r\n});\r\n\r\n\r\nexport const storesValidationSchema = yup.object({\r\n  // storeId: yup.string().required(\"Store Id is required\"),\r\n  // partnerName: yup.string().required(\"Business Unit is required\"),\r\n  storeName: yup.string().required(\"Store Name is required\"),\r\n  // storeIncharge: yup.string().required(\"Store Incharge is required\"),\r\n  // buildingName: yup.string().required(\"Building Name is required\"),\r\n  // location: yup.string().required(\"Location is required\"),\r\n  // countryName: yup.string().required(\"Country is required\"),\r\n  // stateName: yup.string().required(\"State is required\"),\r\n  // cityName: yup.string().required(\"City is required\"),\r\n})\r\n\r\nexport const costcentreValidationSchema = yup.object({\r\n  // buName: yup.string().required(\"Business Unit is required\"),\r\n  costCentreName: yup.string().required(\"Cost Centre Name is required\"),\r\n})\r\n\r\nexport const mailConfigureValidationSchema = yup.object({\r\n  mailId: yup\r\n    .string()\r\n    .required(\"Mail Id is required\"),\r\n  mailPassword: yup\r\n    .string()\r\n    .required(\"Mail Password is required\")\r\n    .min(8, \"Mail Password must be at least 8 characters\"),\r\n});\r\n\r\n\r\nexport const workflowAssignValidationSchema = yup.object({\r\n  partnerName: yup\r\n    .string()\r\n    .required(\"Partner Name is required\"),\r\n  workflowName: yup\r\n    .string()\r\n    .required(\"Workflow Name is required\"),\r\n  basedOnWorkflow: yup\r\n    .string()\r\n    .required(\"Workflow Based On is required\"),\r\n  documentName: yup\r\n    .string()\r\n    .required(\"Document Name is required\"),\r\n  fieldName: yup\r\n    .string()\r\n    .required(\"Field Name is required\"),\r\n  noOfLevels: yup\r\n    .string()\r\n    .required(\"No of Level is required\"),\r\n});\r\n\r\n\r\n\r\nexport const workflowRuleValidationSchema = yup.object({\r\n  // partnerName: yup\r\n  //   .string()\r\n  //   .required(\"Partner Name is required\"),\r\n  ruleName1: yup\r\n    .string()\r\n    .required(\"Rule Name is required\"),\r\n  action: yup\r\n    .string()\r\n    .required(\"Action is required\"),\r\n});\r\n\r\n\r\n\r\nexport const workflowValidationSchema = yup.object({\r\n  partnerName: yup\r\n    .string()\r\n    .required(\"Partner Name is required\"),\r\n  workflowName: yup\r\n    .string()\r\n    .required(\"Workflow Name is required\"),\r\n  basedOnWorkflow: yup\r\n    .string()\r\n    .required(\"Workflow Based On is required\"),\r\n  ruleName: yup\r\n    .string()\r\n    .required(\"Rule Name is required\"),\r\n  noOfLevels: yup\r\n    .string()\r\n    .required(\"No of Level is required\"),\r\n});","import Div from '@jumbo/shared/Div'\r\nimport { Box, Button, ButtonGroup, Dialog, DialogActions, DialogContent, IconButton, Typography, styled, useMediaQuery, useTheme } from '@mui/material'\r\nimport React from 'react'\r\nimport { MdCheck, MdClear, MdClose, MdDelete } from 'react-icons/md'\r\nimport { TiCancel } from 'react-icons/ti'\r\n\r\n\r\nconst DialogBox = styled(Dialog)(({ theme }) => ({\r\n    '& .MuiDialog-paper': {\r\n        borderRadius: 5,\r\n        backgroundColor: theme.palette.background.default,\r\n        border: `1px solid ${theme.palette.divider}`,\r\n    },\r\n}));\r\n\r\nconst StyledIconButton = styled(IconButton)(({ theme }) => ({\r\n    color: theme.palette.error.main,\r\n    '&:hover': {\r\n        backgroundColor: theme.palette.error.light,\r\n        color: theme.palette.background.default,\r\n    },\r\n}));\r\n\r\nconst CustomTypography = styled(Typography)(({ theme }) => ({\r\n    padding: theme.spacing(0.5),\r\n    textAlign: 'left',\r\n    // backgroundColor: theme.palette.error.light,\r\n    // color: theme.palette.error.contrastText,\r\n    borderRadius: theme.shape.borderRadius,\r\n}));\r\n\r\n\r\nexport const ErpDeleteDialogBox = ({ flag, setFlag, handleClick, content, id, isMobile }) => {\r\n    const theme = useTheme();\r\n    const isMdUp = useMediaQuery(theme.breakpoints.down('md'));\r\n\r\n    return (\r\n        <DialogBox open={flag}\r\n            maxWidth={window.innerWidth <= 600 ? 'xs' : window.innerWidth <= 768 ? 'sm' : window.innerWidth <= 992 ? 'sm' : 'sm'}\r\n            fullWidth\r\n            onClose={() => setFlag(false)}\r\n        >\r\n            <DialogContent>\r\n                <Typography variant=\"h3\">\r\n                    {content}\r\n                    <span>&nbsp;</span>\r\n                    <span style={{ fontWeight: 700 }}>\r\n                        {\" \"}\r\n                        \"{id}\" ?\r\n                    </span>\r\n                </Typography>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                {isMobile ? isMobile : isMdUp ? (\r\n                    <>\r\n                        <Button variant=\"contained\" color={\"error\"} endIcon={<MdDelete />} onClick={handleClick}>\r\n                            Delete\r\n                        </Button>\r\n                        <Button variant=\"contained\" endIcon={<TiCancel />} onClick={() => setFlag(false)}>\r\n                            Cancel\r\n                        </Button>\r\n                    </>\r\n                ) :\r\n                    <Div className=\"buttons\">\r\n                        <ButtonGroup\r\n                            aria-label=\"split button\"\r\n                            onClick={handleClick}\r\n                            sx={{\r\n                                mt: { xs: 0.5, lg: 0 },\r\n                                mr: { xs: 0, md: 1 }\r\n                            }}\r\n                        >\r\n                            <Button className=\"plus-button\">\r\n                                Delete\r\n                            </Button>\r\n                            <Button variant=\"contained\" className=\"icon-button\">\r\n                                <MdDelete size={18} />\r\n                            </Button>\r\n                        </ButtonGroup>\r\n\r\n                        <ButtonGroup\r\n                            aria-label=\"split button\"\r\n                            onClick={() => setFlag(false)}\r\n                            sx={{\r\n                                mt: { xs: 0.5, lg: 0 },\r\n                                mr: { xs: 0, md: 1 }\r\n                            }}\r\n                        >\r\n                            <Button className=\"plus-button\">Cancel</Button>\r\n                            <Button variant=\"contained\" className=\"icon-button\">\r\n                                <TiCancel size={22} />\r\n                            </Button>\r\n                        </ButtonGroup>\r\n                    </Div>\r\n                }\r\n            </DialogActions>\r\n        </DialogBox>\r\n    )\r\n}\r\n\r\n\r\nexport const ErpConfirmDialogBox = ({ flag, setFlag, handleClick, content, isMobile }) => {\r\n    return (\r\n        <Dialog\r\n            open={flag}\r\n            maxWidth=\"sm\"\r\n            fullWidth\r\n        >\r\n            <DialogContent>\r\n                <Typography variant='h4'>\r\n                    {content}\r\n                </Typography>\r\n                <br />\r\n                <Typography variant='h4'>\r\n                    Do you want still to continue...\r\n                </Typography>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                {isMobile ? (\r\n                    <>\r\n                        <Button variant=\"contained\" color={\"error\"} endIcon={<MdCheck />} onClick={() => setFlag(false)} >\r\n                            Yes\r\n                        </Button>\r\n                        <Button variant=\"contained\" endIcon={<MdClear />} onClick={handleClick}>\r\n                            No\r\n                        </Button>\r\n                    </>\r\n                ) :\r\n                    <Div className=\"buttons\">\r\n                        <ButtonGroup\r\n                            aria-label=\"split button\"\r\n                            onClick={() => setFlag(false)}\r\n                            sx={{\r\n                                mt: { xs: 0.5, lg: 0 },\r\n                                mr: { xs: 0, md: 1 }\r\n                            }}\r\n                        >\r\n                            <Button className=\"plus-button\">\r\n                                Yes\r\n                            </Button>\r\n                            <Button variant=\"contained\" className=\"icon-button\">\r\n                                <MdCheck size={16} />\r\n                            </Button>\r\n                        </ButtonGroup>\r\n                        <ButtonGroup\r\n                            aria-label=\"split button\"\r\n                            onClick={handleClick}\r\n                            sx={{\r\n                                mt: { xs: 0.5, lg: 0 },\r\n                                mr: { xs: 0, md: 1 }\r\n                            }}\r\n                        >\r\n                            <Button className=\"plus-button\">\r\n                                No\r\n                            </Button>\r\n                            <Button variant=\"contained\" className=\"icon-button\">\r\n                                <MdClear size={16} />\r\n                            </Button>\r\n                        </ButtonGroup>\r\n                    </Div>\r\n                }\r\n            </DialogActions>\r\n        </Dialog>\r\n    )\r\n}\r\n\r\n\r\nexport const ErpStatusConfirmDialogBox = ({ flag, setFlag, handleClick, content, isMobile }) => {\r\n    return (\r\n        <Dialog\r\n            open={flag}\r\n            maxWidth=\"sm\"\r\n            fullWidth\r\n        >\r\n            <DialogContent>\r\n                <Typography variant='h4'>\r\n                    {content}\r\n                </Typography>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                {isMobile ? (\r\n                    <>\r\n                        <Button variant=\"contained\" color={\"error\"} endIcon={<MdCheck />} onClick={handleClick} >\r\n                            Yes\r\n                        </Button>\r\n                        <Button variant=\"contained\" endIcon={<MdClear />} onClick={() => setFlag(false)} >\r\n                            No\r\n                        </Button>\r\n                    </>\r\n                ) :\r\n                    <Div className=\"buttons\">\r\n                        <ButtonGroup\r\n                            aria-label=\"split button\"\r\n                            onClick={handleClick}\r\n                            sx={{\r\n                                mt: { xs: 0.5, lg: 0 },\r\n                                mr: { xs: 0, md: 1 }\r\n                            }}\r\n                        >\r\n                            <Button className=\"plus-button\">\r\n                                Yes\r\n                            </Button>\r\n                            <Button variant=\"contained\" className=\"icon-button\">\r\n                                <MdCheck size={16} />\r\n                            </Button>\r\n                        </ButtonGroup>\r\n                        <ButtonGroup\r\n                            aria-label=\"split button\"\r\n                            onClick={() => setFlag(false)}\r\n                            sx={{\r\n                                mt: { xs: 0.5, lg: 0 },\r\n                                mr: { xs: 0, md: 1 }\r\n                            }}\r\n                        >\r\n                            <Button className=\"plus-button\">\r\n                                No\r\n                            </Button>\r\n                            <Button variant=\"contained\" className=\"icon-button\">\r\n                                <MdClear size={16} />\r\n                            </Button>\r\n                        </ButtonGroup>\r\n                    </Div>\r\n                }\r\n            </DialogActions>\r\n        </Dialog>\r\n    )\r\n}\r\n\r\n\r\nexport const ErpAlertViewDialogBox = ({ flag, setFlag, isMobile }) => {\r\n    return (\r\n        <DialogBox\r\n            open={flag}\r\n            maxWidth=\"xs\"\r\n        // onClose={() => setFlag(false)} // Optional: You can enable this if you want the dialog to close on backdrop click.\r\n        >\r\n            <DialogContent>\r\n                <Div sx={{ p: 0, m: 0, mb: 2, display: \"flex\", justifyContent: \"space-between\", alignItems: \"center\" }}>\r\n                    <CustomTypography variant='h3'>\r\n                        Alert\r\n                    </CustomTypography>\r\n\r\n                    <StyledIconButton onClick={() => setFlag(false)} sx={{ p: 0.3 }}>\r\n                        <MdClose size={22} />\r\n                    </StyledIconButton>\r\n                </Div>\r\n                <Typography variant='h4' sx={{ color: 'text.secondary' }}>\r\n                    You don't have the permission to view this page.\r\n                </Typography>\r\n            </DialogContent>\r\n        </DialogBox>\r\n    )\r\n}\r\n\r\n\r\n"],"names":["_ref","Scrollheight","isVisible","setIsVisible","useState","isAboveXl","useResponsive","handleScroll","window","scrollY","useEffect","addEventListener","removeEventListener","_jsx","style","display","justifyContent","alignItems","position","bottom","right","zIndex","borderRadius","boxShadow","padding","width","height","backgroundColor","color","transition","cursor","onClick","scrollToTopHandler","scrollTo","top","behavior","className","children","FaArrowCircleUp","size","scrollHeight","name1","name3","name4","cities","zones","getId4","getId6","setGetId6","setName6","getZoneDatas","getId5","name5","checkId7","setCheckId7","userRolePermissions","currentData","setCurrentData","useContext","DataContext","token","localStorage","getItem","header","headers","Authorization","concat","Accept","partners","setPartners","open","setOpen","showSave","setShowSave","cityName","setCityName","City_Name","businessUnit","setBusinessUnit","zoneLists","setZoneLists","zoneName","setZoneName","pincode","setPincode","cityId","setCityId","errors","setErrors","async","axios","BASE_URL","then","response","console","log","data","names","catch","error","getPartners","_Fragment","_jsxs","Div","sx","p","m","Array","isArray","includes","ErpCreateButton","handleClick","handleAddZones","name","mt","lg","md","xs","minHeight","JumboScrollbar","autoHeight","autoHideTimeout","autoHeightMin","autoHide","hideTracksWhenNotNeeded","id","Table","stickyHeader","TableHead","TableRow","TableCell","fontWeight","TableBody","filter","opt","Partner_Id","length","map","zone","FormControlLabel","control","Radio","checked","value","onChange","e","target","Zone_Name","Pincode","ErpActionButton","editPermissionId","deletePermissionId","onClickEdit","res","_res$data3","_res$data4","status","toast","message","editZoneById","onClickDelete","_res$data5","success","deleteZoneById","align","colSpan","textAlign","Dialog","onSubmit","preventDefault","validForm","validate","undefined","Object","keys","zonepayload","_objectSpread","City_Id","Zone_Type_Code","Company_Id","parseInt","Created_By","Updated_By","_res$data","_res$data2","DialogContent","Grid","container","item","Typography","FormControl","Autocomplete","options","city","getOptionLabel","option","newValue","isOptionEqualToValue","minWidth","maxWidth","renderInput","params","TextField","placeholder","variant","autoComplete","Partner_Name","ml","Button","dataResponse","normalizeCityName","_normalized","normalized","toLowerCase","replace","normalize","isValidPincode","some","cityname","Zonename","mb","ButtonGroup","type","disabled","mr","FaSave","handleClose","TiCancel","_errors$regionName","entities","countries","regions","states","id1","id2","id3","name2","setName4","checkId5","setCheckId5","getId","getId1","getId2","getId3","setGetId4","getCityDatas","getStates","React","entityName","setEntityName","Entity_Name","countryName","setCountryName","Country_Name","regionName","setRegionName","Region_Name","stateName","setStateName","State_Name","cityDescription","setCityDescription","cityLists","setCityLists","getCityLists","payload","country","state","citynames","normalizedCity","_cities$filter$","currentValue","index","paddedValue","toString","padStart","handleAddCity","City_Description","editCityById","_res$data6","deleteCityById","citypayload","Entity_Id","Country_Id","Region_Id","State_Id","City_Type_Code","handleError","sm","find","onFocus","fontSize","region","onInputChange","lineHeight","multiline","rows","DialogActions","_errors$entityName","_errors$countryName","setName","setName1","setName2","setName3","checkId1","checkId2","checkId3","checkId4","setCheckId1","setCheckId2","setCheckId3","setCheckId4","setGetId3","getStateDatas","stateLists","setStateLists","stateId","setStateId","stateDescription","setStateDescription","getStateLists","nextState","_nextState$","nextStateId","numericPart","handleAddState","State_Description","editStateById","_res$data7","deleteStateById","statepayload","State_Type_Code","statelist","CellNoborder","styled","theme","border","_ref2","_ref3","commonServices","handleCreateHistory","requestId","partnerId","resp","_resp$data","_resp$data2","filterlistIds","deletePreviousHistory","editUser","Document_Id","Updated_Person","Updated_Time","Date","getHours","getMinutes","getSeconds","Updated_Date","toJSON","slice","Is_Deleted","setCreateMaterial","setListMaterial","userDetails","JSON","parse","OwnerNames","setOwnerNames","HeadOperation","setHeadOperation","values","setValues","Bussiness_Unit","Operated_By","Contact","Email","Website","Head_Of_Operation","Address_1","Address_2","City","State","Country","Pin_Code","Pan_No","GST_No","Agreement_Ref","Valid_Upto","Corporate_BU","Commision_Paid","timer","setTimeout","_response$data","first_name","last_name","getUsers","clearTimeout","selectedCountry","setSelectedCountry","selectedState","setSelectedState","selectedCity","setSelectedCity","managedByLists","setManagedByLists","countryLists","setCountryLists","countryId","setCountryId","setcityId","itemServices","getUnits","Search","handleChangeItem","getValue","pincodeData","regex","test","yearB","getFullYear","fromTimeObject","Ofc_Starttime","toTimeObject","Ofc_Endtime","timeDiff","Math","abs","hours","floor","minutes","totalhours","itempayload","HeadOf_Operation","BusinessUnit_Phone","BusinessUnit_EMail","BusinessUnit_Web","BusinessUnit_Addressline1","BusinessUnit_City","BusinessUnit_Country","BusinessUnit_State","BusinessUnit_Zone","BusinessUnit_Pincode","BusinessUnit_PanNo","BusinessUnit_GSTNo","Agreement_RefNo","Agreement_Validupto","Total_hours","Created_Date","todayDate","_res$data8","disablePortal","InputProps","endAdornment","InputAdornment","ErpDateField","inputValue","handleInputChange","FormGroup","Checkbox","label","newState","setEditPartnerList","currentPart","setcurenrtPart","PartnerName","setPartnerName","OperatedBy","setOperatedBy","HeadOfOperation","setHeadOfOperation","BusinessUnitPhone","setBusinessUnitPhone","BusinessUnitEMail","setBusinessUnitEMail","BusinessUnitWeb","setBusinessUnitWeb","BusinessUnitAddressline1","setBusinessUnitAddressline1","BusinessUnitAddressline2","setBusinessUnitAddressline2","BusinessUnitPincode","setBusinessUnitPincode","BusinessUnitPanNo","setBusinessUnitPanNo","BusinessUnitGSTNo","setBusinessUnitGSTNo","AgreementRefNo","setAgreementRefNo","AgreementValidupto","setAgreementValidupto","PartnerId","setPartnerId","setId","startTime","setStartTime","endTime","setEndTime","totalHours","setTotalHours","commisionPaid","setCommisionPaid","corporateBU","setCorporateBU","PartnerName1","setPartnerName1","OperatedBy1","setOperatedBy1","HeadOfOperation1","setHeadOfOperation1","BusinessUnitPhone1","setBusinessUnitPhone1","BusinessUnitEMail1","setBusinessUnitEMail1","BusinessUnitWeb1","setBusinessUnitWeb1","BusinessUnitAddressline11","setBusinessUnitAddressline11","BusinessUnitAddressline21","setBusinessUnitAddressline21","BusinessUnitPincode1","setBusinessUnitPincode1","BusinessUnitPanNo1","setBusinessUnitPanNo1","BusinessUnitGSTNo1","setBusinessUnitGSTNo1","AgreementRefNo1","setAgreementRefNo1","AgreementValidupto1","setAgreementValidupto1","selectedCountry1","setSelectedCountry1","selectedState1","setSelectedState1","selectedCity1","setSelectedCity1","startTime1","setStartTime1","endTime1","setEndTime1","totalHours1","setTotalHours1","commisionPaid1","setCommisionPaid1","corporateBU1","setCorporateBU1","_response$data2","_response$data3","_response$data4","_response$data5","_response$data6","_response$data7","_response$data8","_response$data9","_response$data10","_response$data11","_response$data12","_response$data13","_response$data14","_response$data15","_response$data16","_response$data17","_response$data18","_response$data19","_response$data20","_response$data21","_response$data22","_response$data23","_response$data24","_response$data25","_response$data26","_response$data27","_response$data28","_response$data29","_response$data30","_response$data31","_response$data32","_response$data33","_response$data34","_response$data35","_response$data36","_response$data37","_response$data38","_response$data39","_response$data40","_response$data41","_response$data42","_response$data43","_response$data44","_response$data45","getData","parseFloat","EditedArr","push","Updated_Field","join","handleClickBack","updatedHistory","itemId","isMobile","Grow","in","transformOrigin","timeout","data1","_data1$Updated_Time","_data1$Histroy","DateFormatter","date","marginLeft","Histroy","_item$keys","flexWrap","i","idx","marginRight","setListOverview","buid","companyId","Organization_Id","useTheme","isMdUp","useMediaQuery","breakpoints","up","updateHistory","setUpdateHistory","dateFormat","setDateFormat","setValue","Businessunitlist","setBusinessunitlist","DateFormat","err","getList","TabContext","Box","borderBottom","borderColor","TabList","handleChange","event","Tab","TabPanel","xl","format","HistoryOverview","MdClose","checkId6","setCheckId6","setName5","setGetId5","PartnerListData","setPartnerListData","openDelete","setOpenDelete","currentDeleteId","setCurrentDeleteId","currentDeleteAccountId","setCurrentDeleteAccountId","deleteName","setDeleteName","editPartnerList","showFilter","setShowFilter","createMaterial","listMaterial","ListOverview","overviewAlert","setOverviewAlert","useNavigate","anchorEl","setAnchorEl","Date1","setDate","BU_Id","setBU_Id","BU_Name","setBU_Name","Contact_No","setContact_No","Email_Id","setEmail_Id","Location","setLocation","Web","setWeb","fromTime","setFromTime","toTime","setToTime","sortConfig","setSortConfig","key","direction","page","setPage","count","setCount","rowsPerPage","setRowsPerPage","visitedPages","setVisitedPages","totalRecords","ceil","list","setSelectedValue","setCurrentPart","handleSort","sortData","sortedData","sort","a","b","valueA","Business_Unit","valueB","handleGetAllServiceRelatedDatas","_partnerResponse$data","partnerResponse","filterData","partnerFilterData","_opt$Partner_Id","CreateForm","IconButton","BsArrowDownUp","currentTarget","BsThreeDotsVertical","Menu","anchorOrigin","vertical","horizontal","keepMounted","Boolean","onClose","handleClosegear","maxHeight","scrollBehavior","formattedDate","hover","handleOverView","handleClickEdit","previousRecordResponse","warning","handleDeletePopup","ErpDeleteDialogBox","flag","setFlag","content","CreatePartner","EditPartnerList","getData1","PartnerOverview","ErpAlertViewDialogBox","_errors$storeName","_errors$buildingName","_errors$stateName","_errors$cityName","_errors$partnerName","_errors$location","name6","openCreateStore","setOpenCreateStore","getStores","fullScreen","partnerName","storeId","setStoreId","storeName","setStoreName","storeIncharge","setStoreIncharge","location","longitude","setLongitude","latitude","setLatitude","employeeLists","setEmployeeLists","businessUnitList","setBusinessUnitList","getPartnerLists","hrApiServices","listofDropdownEmployees","fetchEmployeeList","buildingName","setBuildingName","handleSearchLocation","useCallback","fetch","encodeURIComponent","json","lat","lon","reset","register","trigger","handleSubmit","formState","useForm","mode","resolver","yupResolver","storesValidationSchema","transactionSeriesType","setTransactionSeriesType","transactionSeries","fetchTransactionSeries","result","DialogTitle","handleCreateStore","storepayload","Type","Store_Name","StoreBuilding_Name","Store_Street","Store_Area","Store_City","Store_State","Store_Country","Store_Incharge","Own_Partner","Items","Upload_Image","Category","Item_Group","Item_Code","Item_Name","UOM","Unit_Price","Opening_Stock","ReOrder_Lvl","Min_Stock_Lvl","Longitude","Lotitude","Partner_OrganizationId","Store_UserId","respon","_respon$data","_respon$data2","Store_Id","inputProps","maxLength","title","partnerlist","Employee_FirstName","Employee_LasttName","handleCloseCreateStore","dropdownApiServices","_currentData$Item","_transactionHistory$G","_transactionHistory$M","_transactionHistory$M2","_transactionHistory$M3","setListStore","setEditOverviewItem","itemGroups","setItemGroups","current","setCurrent","transactionHistory","setTransactionHistory","itemList","setItemList","Is_Active","getActiveItemGroups","items","Item","forEach","_currentData$Items","_currentData$Items2","itemImages","Promise","all","matchingItem","itemsImage","buffer","arrayBuffer","btoa","Uint8Array","reduce","byte","String","fromCharCode","Image","fetchItemImages","overflow","textOverflow","GoodsRecipt","receipt","_receipt$Item","itemForReceipt","TrfIn_Id","Quantity","formatIndianNumber","Amount","Materialreturn","_receipt$Item2","MatRet_Id","Materialtransfer","_receipt$Item3","MatTransf_Id","MeterialRequest","_receipt$Item4","MatReq_Id","getAllCountries","_errors$storeIncharge","id4","down","openListStore","setOpenListStore","openEditStore","setOpenEditStore","openViewStore","setOpenViewStore","openDeleteStore","setOpenDeleteStore","employeeName","setEmployeeName","storeLists","setStoreLists","getStoreDropdownList","filterPartners","uniqueNames","newName","prevName","store","_res$data9","_res$data10","_res$data11","_res$data11$Partner_I","_res$data12","_res$data13","editStoreById","deleteStoreById","ViewStoreSettings","fullWidth","CreateStore","_res$data14","createContext","OrganizationStructure","dispatch","useDispatch","formPermissions","modulePermissions","useSelector","selectedUserRolePermissions","setId1","setId2","setId3","setId4","inputNumber","setInputNumber","setEntities","setCountries","setRegions","setStates","setCities","setZones","entityId","setEntityId","entityDescription","setEntityDescription","countryDescription","setCountryDescription","regionId","setRegionId","regionDescription","setRegionDescription","openEntity","setOpenEntity","openCountry","setOpenCountry","openRegion","setOpenRegion","setGetId","setGetId1","setGetId2","getEntityDatas","results","getEntity","getCountryDatas","getCountry","getRegionDatas","getRegion","filterLists","getCity","getCountryLists","nextEntity","nextEntityId","nextCountry","_nextCountry$","nextCountryId","nextRegion","_nextRegion$","nextRegionId","_res$data29","_res$data30","_res$data31","_res$data32","fetchUserRolePermissions","JumboContentLayoutMain","Setting","scrollButtons","allowScrollButtonsMobile","Provider","handleAddLegalEntity","entity","Entity_Description","Tooltip","_res$data18","deleteEntityById","MdDelete","validateEntity","entitypayload","Entity_Type_Code","_res$data15","handleAddCountry","Country_Description","_res$data21","_res$data22","editCountryById","_res$data23","deleteCountryById","validateCountry","countrypayload","Country_Type_Code","_res$data19","_res$data20","defaultValue","countrylist","handleAddRegion","Region_Description","_res$data26","_res$data27","editRegionById","_res$data28","deleteRegionById","validateRegion","regionpayload","Region_Type_Code","_res$data24","_res$data25","StateLists","CityLists","PartnerList","ZoneLists","StoreList","ScrollToTop","query","start","end","mediaUp","mediaDown","mediaBetween","between","mediaOnly","only","yup","required","min","max","Yup","itemName","uom","purchaseDescription","inventoryDescription","purchaseAccount","inventoryAccount","workflowRuleValidationSchema","costCentreName","mailId","mailPassword","workflowName","basedOnWorkflow","documentName","fieldName","noOfLevels","ruleName1","action","workflowValidationSchema","ruleName","DialogBox","palette","background","default","divider","StyledIconButton","main","light","CustomTypography","spacing","shape","_ref4","innerWidth","endIcon","ErpConfirmDialogBox","_ref5","MdCheck","MdClear","_ref7"],"sourceRoot":""}