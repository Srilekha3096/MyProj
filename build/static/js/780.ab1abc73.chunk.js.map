{"version":3,"file":"static/js/780.ab1abc73.chunk.js","mappings":"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","sources":["app/pages/analytics/CustomStyle.js","app/pages/analytics/VendorAnalysis.js"],"sourcesContent":["export const CustomButton = {\r\n    width: \"40px\",\r\n    height: \"25px\",\r\n    fontSize: \"10px\",\r\n    margin: \"5px\"\r\n}\r\n\r\nexport const BarColor = {\r\n    BudgetColor: { color: \"#ffb703\" },\r\n    SpendColor: { color: \"#00b4d8\" },\r\n    ServiceColor: { color: \"linear-gradient(to right, #051937, #004d7a, #008793, #00bf72, #a8eb12)\" },\r\n    CustomerColor: { color: \"linear-gradient(90deg, rgba(75,69,69,0.9332107843137255) 0%, rgba(63,226,71,1) 0%, rgba(0,212,255,1) 100%)\" }\r\n}\r\n\r\nexport const CardTitle = {\r\n    fontSize: \"12px\",\r\n    fontWeight: 600,\r\n}\r\n\r\nexport const DisplayFlex = {\r\n    display: \"flex !important\",\r\n    alignItems: \"center\",\r\n}","import JumboContentLayoutMain from '@jumbo/components/JumboContentLayout/JumboContentLayoutMain'\r\nimport { Autocomplete, Grid, TextField, Typography } from '@mui/material'\r\nimport React, { useEffect, useState } from 'react'\r\nimport Div from '@jumbo/shared/Div';\r\nimport moment from 'moment';\r\nimport { BASE_URL } from 'app/services/auth-services';\r\nimport axios from 'axios';\r\nimport { BarColor, DisplayFlex } from './CustomStyle';\r\nimport { ErpDateField } from 'app/shared/ReuseComponents/ButtonComponent';\r\n\r\nconst palette = [\r\n    '#f48c06',\r\n    '#1f6924',\r\n    '#721cb8',\r\n    '#ffb703',\r\n    '#1b263b',\r\n    '#9d0208',\r\n    '#d90429',\r\n    '#0081a7',\r\n];\r\n\r\nfunction VendorAnalysis() {\r\n\r\n    const dataSource = [\r\n        {\r\n            Vendor1: 18,\r\n            Vendor2: 9.8,\r\n            Vendor3: 40.1,\r\n            Vendor4: 30,\r\n            Vendor5: 34.1,\r\n            Vendor6: 13.1,\r\n            Vendor7: 23.1,\r\n            Vendor8: 4.1,\r\n            perc1: 25.4,\r\n            perc2: 5.3,\r\n            perc3: 31.6,\r\n            perc4: 8.6,\r\n            perc5: 10.6,\r\n            perc6: 23.6,\r\n            perc7: 16.6,\r\n            perc8: 19.6,\r\n            label1: 'Vendor1',\r\n            label2: 'Vendor2',\r\n            label3: 'Vendor3',\r\n            label4: 'Vendor4',\r\n            label5: 'Vendor5',\r\n            label6: 'Vendor6',\r\n            label7: 'Vendor7',\r\n            label8: 'Vendor8',\r\n        },\r\n    ];\r\n\r\n    const token = localStorage.getItem('accesstoken')\r\n    const companyId = localStorage.getItem('OrganizationId');\r\n\r\n    const header = {\r\n        headers: {\r\n            Authorization: `Bearer ${token}`,\r\n            \"Content-Type\": \"application/json\",\r\n            Accept: \"application/json\",\r\n        },\r\n    }\r\n\r\n    let date = new Date();\r\n    let day = date.getDate();\r\n    let month = date.getMonth() + 1;\r\n    let year = date.getFullYear();\r\n    let TodayDate = `${year}-${month < 10 ? \"0\" + month : month}-${day}`;\r\n\r\n\r\n    let startDate = moment().startOf('year');\r\n    let endDate = moment().endOf('year');\r\n\r\n    let ThisYearStart = startDate?.format('YYYY-MM-DD');\r\n    let ThisYearEnd = endDate?.format('YYYY-MM-DD');\r\n\r\n    const [customDate, setCustomDate] = useState(false);\r\n    const [selectedDate, setSelectedDate] = useState(ThisYearStart);\r\n    const [fromDate, setfromDate] = useState(\"\");\r\n    const [toDate, settoDate] = useState(\"\");\r\n    const [getPartnerName, setgetPartnerName] = useState(\"\");\r\n    const [userId, setuserId] = useState(0);\r\n\r\n    const [getRegion, setgetRegion] = useState(\"All\");\r\n    const [selectedPeriod, setSelectedPeriod] = useState('This Year');\r\n    const [currentDate, setCurrentDate] = useState(ThisYearEnd);\r\n    const [OwnerNames, setOwnerNames] = useState([]);\r\n    const [purchaseVendorLists, setPurchaseVendorLists] = useState([]);\r\n\r\n    const [stateLists, setStateLists] = useState([]);\r\n    const [cityLists, setCityLists] = useState([]);\r\n    const [state, setState] = useState(\"\");\r\n    const [city, setCity] = useState(\"\");\r\n\r\n    const periodOptions = [\r\n        'Previous Week',\r\n        'Previous Month',\r\n        'Previous Quarter',\r\n        'Previous Year',\r\n        'This Week',\r\n        'This Month',\r\n        'This Quarter',\r\n        'This Year',\r\n        'Last One Year',\r\n        'Last Six Month',\r\n        'Last Three Month',\r\n        'Custom Date',\r\n    ];\r\n\r\n    const handlePeriodChange = (event, newValue) => {\r\n        setSelectedPeriod(newValue);\r\n        setSelectedDate(null);\r\n        setfromDate(\"\");\r\n        settoDate(\"\");\r\n\r\n        let date;\r\n\r\n        let startDate; // for previous\r\n        let endDate;\r\n\r\n        switch (newValue) {\r\n\r\n            case 'This Week':\r\n\r\n                startDate = moment().startOf('week');\r\n                endDate = moment().endOf('week');\r\n\r\n                let ThisWeekStart = startDate?.format('YYYY-MM-DD');\r\n                let ThisWeekEnd = endDate?.format('YYYY-MM-DD');\r\n\r\n                setSelectedDate(ThisWeekStart);\r\n                setCurrentDate(ThisWeekEnd);\r\n\r\n                setCustomDate(false);\r\n                return;\r\n\r\n            case 'This Month':\r\n\r\n                startDate = moment().startOf('month');\r\n                endDate = moment().endOf('month');\r\n\r\n                let ThisMonthStart = startDate?.format('YYYY-MM-DD');\r\n                let ThisMonthEnd = endDate?.format('YYYY-MM-DD');\r\n\r\n                setSelectedDate(ThisMonthStart);\r\n                setCurrentDate(ThisMonthEnd);\r\n\r\n                setCustomDate(false);\r\n                return;\r\n\r\n            case 'This Quarter':\r\n                startDate = moment().startOf('quarter');\r\n                endDate = moment().endOf('quarter');\r\n\r\n                let ThisQuarterStart = startDate?.format('YYYY-MM-DD');\r\n                let ThisQuarterEnd = endDate?.format('YYYY-MM-DD');\r\n\r\n                setSelectedDate(ThisQuarterStart);\r\n                setCurrentDate(ThisQuarterEnd);\r\n\r\n                setCustomDate(false);\r\n                return;\r\n\r\n            case 'This Year':\r\n                startDate = moment().startOf('year');\r\n                endDate = moment().endOf('year');\r\n\r\n                let ThisYearStart = startDate?.format('YYYY-MM-DD');\r\n                let ThisYearEnd = endDate?.format('YYYY-MM-DD');\r\n\r\n                setSelectedDate(ThisYearStart);\r\n                setCurrentDate(ThisYearEnd);\r\n\r\n                setCustomDate(false);\r\n                return;\r\n\r\n            case 'Previous Week':\r\n                startDate = moment().subtract(1, 'week').startOf('week');\r\n                endDate = moment().subtract(1, 'week').endOf('week');\r\n\r\n                let PrevWeekStart = startDate?.format('YYYY-MM-DD');\r\n                let PrevWeekEnd = endDate?.format('YYYY-MM-DD');\r\n\r\n                setSelectedDate(PrevWeekStart);\r\n                setCurrentDate(PrevWeekEnd);\r\n\r\n                setCustomDate(false);\r\n                return;\r\n\r\n            case 'Previous Month':\r\n                startDate = moment().subtract(1, 'month').startOf('month');\r\n                endDate = moment().subtract(1, 'month').endOf('month');\r\n\r\n                let PrevMonthStart = startDate?.format('YYYY-MM-DD');\r\n                let PrevMonthEnd = endDate?.format('YYYY-MM-DD');\r\n\r\n                setSelectedDate(PrevMonthStart);\r\n                setCurrentDate(PrevMonthEnd);\r\n\r\n                setCustomDate(false);\r\n                return;\r\n\r\n            case 'Previous Quarter':\r\n                startDate = moment().subtract(1, 'quarter').startOf('quarter');\r\n                endDate = moment().subtract(1, 'quarter').endOf('quarter');\r\n\r\n                let PrevQuarterStart = startDate?.format('YYYY-MM-DD');\r\n                let PrevQuarterEnd = endDate?.format('YYYY-MM-DD');\r\n\r\n                setSelectedDate(PrevQuarterStart);\r\n                setCurrentDate(PrevQuarterEnd);\r\n\r\n                setCustomDate(false);\r\n                return;\r\n\r\n            case 'Previous Year':\r\n                startDate = moment().subtract(1, 'year').startOf('year');\r\n                endDate = moment().subtract(1, 'year').endOf('year');\r\n\r\n                let MomentDateStart = startDate?.format('YYYY-MM-DD');\r\n                let MomentDateEnd = endDate?.format('YYYY-MM-DD');\r\n\r\n                setSelectedDate(MomentDateStart);\r\n                setCurrentDate(MomentDateEnd);\r\n\r\n                setCustomDate(false);\r\n                return;\r\n\r\n            case 'Last One Year':\r\n                date = moment().subtract(1, 'year');\r\n                setCustomDate(false);\r\n                break;\r\n\r\n            case 'Last Six Month':\r\n                date = moment().subtract(6, 'months');\r\n                setCustomDate(false);\r\n                break;\r\n\r\n            case 'Last Three Month':\r\n                date = moment().subtract(3, 'months');\r\n                setCustomDate(false);\r\n                break;\r\n\r\n            case 'Custom Date':\r\n                setCustomDate(true);\r\n                setSelectedDate(\"\");\r\n                break;\r\n            default:\r\n                date = null;\r\n        }\r\n        let MomentDate = date?.format('YYYY-MM-DD');\r\n        setSelectedDate(MomentDate);\r\n        setCurrentDate(TodayDate)\r\n    };\r\n\r\n    const HandleChooseRegion = (e, newValue) => {\r\n        // Dates\r\n        setfromDate(\"\"); // for validation\r\n        settoDate(\"\");\r\n        setSelectedPeriod(\"\");\r\n        setSelectedDate(\"\");\r\n        setCity(\"\");\r\n        setState(\"\");\r\n        setgetPartnerName(\"\");\r\n        setuserId(0);\r\n        setSelectedDate(\"\");\r\n        setCustomDate(false);\r\n        setgetRegion(newValue);\r\n    }\r\n\r\n    const HandleChooseBu = (e, newValue) => {\r\n        // Dates\r\n        setfromDate(\"\"); // for validation\r\n        settoDate(\"\");\r\n        setSelectedPeriod(\"\");\r\n        setCustomDate(false);\r\n        setuserId(newValue?.id)\r\n        setgetPartnerName(newValue?.Partner_Name)\r\n    }\r\n    const getDefaultStartDate = () => {\r\n        return moment().startOf('year').format('YYYY-MM-DD');\r\n    };\r\n\r\n    const getDefaultEndDate = () => {\r\n        return moment().endOf('year').format('YYYY-MM-DD');\r\n    };\r\n    // getuser\r\n    const getUser = async () => {\r\n\r\n        try {\r\n            await axios.get(`${BASE_URL}/Erpapp/Partnerlist/`, {\r\n                headers: {\r\n                    Authorization: `Bearer ${token}`,\r\n                    'Content-Type': 'application/json',\r\n                    Accept: 'application/json',\r\n                }\r\n            })\r\n                .then((response) => {\r\n                    const names = response?.data?.results\r\n                    setOwnerNames(names);\r\n                })\r\n        } catch (error) {\r\n            console.log(\"failed to fecth\", error);\r\n        }\r\n\r\n    }\r\n\r\n    const getData = async () => {\r\n\r\n        if (getRegion === \"All\" || getRegion === \"\") {\r\n            // if region is  ALL111\r\n            // if (Boolean(selectedDate?.trim()) && Boolean(currentDate?.trim())) {\r\n            try {\r\n\r\n                let payload = {\r\n                    \"Company_Id\": companyId,\r\n                    \"Date\": [selectedDate || fromDate || getDefaultStartDate(), toDate || currentDate || getDefaultEndDate()]\r\n                }\r\n                console.log(\"payload\", payload);\r\n\r\n                // 1.vendor All lists\r\n\r\n                await axios.post(`${BASE_URL}/Erpapp/Vendoranalysis/`, payload, header)\r\n                    .then(res => {\r\n\r\n                        console.log(\"All --- > vendorressss choose period\", res.data);\r\n\r\n                        let newArr = [];\r\n\r\n                        res?.data?.map(item => {\r\n                            let key = Object.keys(item)[0];\r\n                            let val = item[key];\r\n                            newArr.push({\r\n                                label: key,\r\n                                value: val || 0\r\n                            })\r\n                        })\r\n\r\n                        // console.log(\"vendor response\", newArr);\r\n                        setPurchaseVendorLists(newArr);\r\n                    }).catch(err => {\r\n                        console.log(\"failed to fetch data\", err)\r\n                    })\r\n\r\n            } catch (error) {\r\n                console.log(\"failed to fetch data\", error)\r\n            }\r\n            // }\r\n\r\n            // if (Boolean(fromDate?.trim()) && Boolean(toDate?.trim())) {\r\n            // try {\r\n\r\n            //     let payload = {\r\n            //         \"Company_Id\": companyId,\r\n            //         Date: [fromDate || getDefaultStartDate(), toDate || getDefaultEndDate()]\r\n            //     }\r\n            //     console.log(\"payload\", payload);\r\n\r\n            //     // 1.vendor All lists\r\n\r\n            //     await axios.post(`${BASE_URL}/Erpapp/Vendoranalysis/`, payload, header)\r\n            //         .then(res => {\r\n\r\n            //             console.log(\"All --- > vendorressss from and to date\", res.data);\r\n\r\n            //             let newArr = [];\r\n\r\n            //             res?.data?.map(item => {\r\n            //                 let key = Object.keys(item)[0];\r\n            //                 let val = item[key];\r\n            //                 newArr.push({\r\n            //                     label: key,\r\n            //                     value: val || 0\r\n            //                 })\r\n            //             })\r\n\r\n            //             // console.log(\"vendor response\", newArr);\r\n            //             setPurchaseVendorLists(newArr);\r\n\r\n            //         }).catch(err => {\r\n            //             console.log(\"failed to fetch data\", err)\r\n            //         })\r\n\r\n            // } catch (error) {\r\n            //     console.log(\"failed to fetch data\", error)\r\n            // }\r\n            // }\r\n        }\r\n\r\n        else {\r\n            // if (\r\n            //     Boolean(selectedDate?.trim()) && Boolean(currentDate?.trim()) &&\r\n            //     Boolean(getRegion?.trim()) && Boolean(city?.trim()) && Boolean(getPartnerName?.trim()) && Boolean(state?.trim())\r\n            // ) {\r\n            try {\r\n                let payload = {\r\n                    \"Region\": getRegion,\r\n                    \"Partner_Name\": getPartnerName,\r\n                    \"City\": city,\r\n                    \"State\": state,\r\n                    \"Date\": [selectedDate || fromDate || getDefaultStartDate(), toDate || currentDate || getDefaultEndDate()]\r\n                }\r\n                console.log(\"payload\", payload);\r\n\r\n                //  1. vendor my lists\r\n\r\n                await axios.post(`${BASE_URL}/Erpapp/BUVendoranalysis/`, payload, header)\r\n                    .then(res => {\r\n\r\n                        console.log(\"particullar --- > vendorressss choose period\", res.data);\r\n\r\n                        let newArr = [];\r\n\r\n                        res?.data?.map(item => {\r\n                            let key = Object.keys(item)[0];\r\n                            let val = item[key];\r\n                            newArr.push({\r\n                                label: key,\r\n                                value: val || 0\r\n                            })\r\n                        })\r\n\r\n                        // console.log(\"vendor response\", newArr);\r\n                        setPurchaseVendorLists(newArr);\r\n\r\n                    }).catch(err => {\r\n                        console.log(\"failed to fetch data\", err)\r\n                    })\r\n\r\n\r\n            } catch (error) {\r\n                console.log(\"failed to fetch data\", error)\r\n                // }\r\n            }\r\n\r\n            // if (Boolean(fromDate?.trim()) && Boolean(toDate?.trim()) &&\r\n            //     Boolean(getRegion?.trim()) && Boolean(city?.trim()) &&\r\n            //     Boolean(state?.trim()) && Boolean(getPartnerName?.trim())\r\n            // ) {\r\n            // try {\r\n            //     let payload = {\r\n            //         \"Region\": getRegion,\r\n            //         \"Partner_Id\": userId,\r\n            //         \"City\": city,\r\n            //         \"State\": state,\r\n            //         Date: [fromDate, toDate]\r\n            //     }\r\n            //     console.log(\"payload\", payload);\r\n\r\n            //     //  1. vendor my lists\r\n            //     await axios.post(`${BASE_URL}/Erpapp/BUVendoranalysis/`, payload, header)\r\n            //         .then(res => {\r\n\r\n            //             console.log(\"vendoparticuler ---- > rressssfrom and to dated\", res.data);\r\n\r\n            //             let newArr = [];\r\n\r\n            //             res?.data?.map(item => {\r\n            //                 let key = Object.keys(item)[0];\r\n            //                 let val = item[key];\r\n            //                 newArr.push({\r\n            //                     label: key,\r\n            //                     value: val || 0\r\n            //                 })\r\n            //             })\r\n\r\n            //             // console.log(\"vendor response\", newArr);\r\n            //             setPurchaseVendorLists(newArr);\r\n\r\n            //         }).catch(err => {\r\n            //             console.log(\"failed to fetch data\", err)\r\n            //         })\r\n\r\n            // } catch (error) {\r\n            //     console.log(\"failed to fetch data\", error)\r\n            // }\r\n            // }\r\n        }\r\n\r\n\r\n    }\r\n\r\n    const getStateLists = async () => {\r\n        try {\r\n            await axios.post(`https://countriesnow.space/api/v0.1/countries/states`, { country: \"india\" },\r\n                {\r\n                    headers: {\r\n                        //   Authorization: `Bearer ${token}`,\r\n                        \"Content-Type\": \"application/json\",\r\n                        Accept: \"application/json\",\r\n                    },\r\n                }\r\n            )\r\n                .then((res) => {\r\n                    console.log(res.data.data);\r\n                    var state = res.data.data;\r\n                    setStateLists(state.states);\r\n                })\r\n                .catch((error) => {\r\n                    console.log(\"ds\", error);\r\n                });\r\n        } catch (error) {\r\n            console.log(\"failed to fetch state names\", error);\r\n        }\r\n    };\r\n\r\n    const getCityLists = async (state) => {\r\n        try {\r\n            let payload = {\r\n                country: \"India\",\r\n                state: state,\r\n            };\r\n            console.log(\"payloadcitis\", payload, state);\r\n            await axios.post(`https://countriesnow.space/api/v0.1/countries/state/cities`, payload,\r\n                {\r\n                    headers: {\r\n                        //   Authorization: `Bearer ${token}`,\r\n                        \"Content-Type\": \"application/json\",\r\n                        Accept: \"application/json\",\r\n                    },\r\n                }\r\n            )\r\n                .then((res) => {\r\n                    console.log(\"res.data\", res.data);\r\n                    var city = res.data.data;\r\n                    var citynames = city?.map((cityname) => {\r\n                        const normalizedCity = cityname.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\r\n                        if (normalizedCity === \"Naini Tal\") {\r\n                            return normalizedCity.replace(\" \", \"\");\r\n                        }\r\n                        return normalizedCity;\r\n                    });\r\n                    setCityLists(citynames);\r\n                })\r\n                .catch((error) => {\r\n                    console.log(\"ds\", error);\r\n                });\r\n        } catch (error) {\r\n            console.log(\"failed to fetch city names\", error);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        getData()\r\n    }, [selectedDate, currentDate, fromDate, toDate, getRegion, state, city, getPartnerName])\r\n\r\n    useEffect(() => {\r\n        getUser();\r\n    }, [])\r\n\r\n\r\n    let conditions = (actualData) => {\r\n        console.log(\"condition 1\", getRegion, !Boolean(selectedPeriod));\r\n        if (Boolean(getRegion)) {\r\n\r\n            if (Boolean(getRegion == \"All\") && Boolean(selectedPeriod)) {\r\n                return actualData;\r\n            } else if (Boolean(getRegion != \"All\") && Boolean(selectedPeriod) && Boolean(getPartnerName) && Boolean(state) && Boolean(city)) {\r\n                return actualData;\r\n            } else {\r\n                return []\r\n            }\r\n\r\n        } else {\r\n            return []\r\n        }\r\n    }\r\n\r\n    console.log(\"conditions\", conditions(purchaseVendorLists));\r\n\r\n    return (\r\n        <JumboContentLayoutMain>\r\n            <Typography variant='h1' sx={{ fontWeight: 800, mt: -2, mb: 0.5 }}>\r\n                Analytics\r\n            </Typography>\r\n            <Typography sx={{ fontSize: \"15px\", color: BarColor.SpendColor.color, fontWeight: 500, mt: 1 }}>\r\n                Vendor Analysis\r\n            </Typography>\r\n            <Grid container columnSpacing={2} xs={12} sx={{ mt: 2 }}>\r\n                <Grid item xs={12} md={3.5} lg={3}>\r\n                    <Typography className=\"col-12 input-label\">\r\n                        Select Region <span className=\"required\">*</span>\r\n                    </Typography>\r\n                    <Autocomplete\r\n                        className=\"search-select col-12\"\r\n                        options={[\"All\", \"North\", \"South\", \"East\", \"West\"]}\r\n                        getOptionLabel={(option) => option || \"\"}\r\n                        value={getRegion}\r\n                        color='#FFFF'\r\n                        onChange={(e, newValue) => HandleChooseRegion(e, newValue)}\r\n                        renderInput={(params) => <TextField {...params} placeholder=\" Select \" />}\r\n                    />\r\n                </Grid>\r\n\r\n                {getRegion !== \"All\" && (\r\n                    <Grid item xs={12} md={3.5} lg={3}>\r\n                        <Typography className=\"col-12 input-label\">\r\n                            State <span className=\"required\">*</span>\r\n                        </Typography>\r\n                        <Autocomplete\r\n                            className=\"search-select col-12\"\r\n                            onFocus={getStateLists}\r\n                            name=\"state\"\r\n                            getOptionLabel={(option) => {\r\n                                if (typeof option === \"string\") {\r\n                                    return option;\r\n                                }\r\n                                if (option && option?.name) {\r\n                                    return option?.name;\r\n                                }\r\n                                return \"\";\r\n                            }}\r\n                            options={stateLists}\r\n                            value={state}\r\n                            onChange={(e, newValue) => {\r\n                                setState(newValue?.name);\r\n                                getCityLists(newValue?.name)\r\n                            }}\r\n                            isOptionEqualToValue={(option, value) =>\r\n                                option?.name === value || value === \"\"\r\n                            }\r\n                            renderInput={(params) => (\r\n                                <TextField\r\n                                    {...params}\r\n                                    variant=\"outlined\"\r\n                                    placeholder=\"State Name\"\r\n                                />\r\n                            )}\r\n                        />\r\n                    </Grid>\r\n                )}\r\n                {getRegion !== \"All\" && (\r\n                    <Grid item xs={12} md={3.5} lg={3}>\r\n                        <Typography className=\"col-12 input-label\">\r\n                            City<span className=\"required\">*</span>\r\n                        </Typography>\r\n                        <Autocomplete\r\n                            className=\"search-select col-12\"\r\n                            name=\"city\"\r\n                            getOptionLabel={(option) => {\r\n                                if (typeof option === \"string\") {\r\n                                    return option;\r\n                                }\r\n                                if (option && option) {\r\n                                    return option\r\n                                }\r\n                                return \"\";\r\n                            }}\r\n                            options={cityLists}\r\n                            value={city}\r\n                            onChange={(e, newValue) => {\r\n                                setCity(newValue);\r\n                            }}\r\n                            isOptionEqualToValue={(option, value) =>\r\n                                option === value || value === \"\"\r\n                            }\r\n                            renderInput={(params) => (\r\n                                <TextField\r\n                                    {...params}\r\n                                    variant=\"outlined\"\r\n                                    placeholder=\"City Name\"\r\n                                />\r\n                            )}\r\n                            disabled={!state ? true : false}\r\n                        />\r\n                    </Grid>\r\n                )}\r\n                {getRegion !== \"All\" && (\r\n                    <Grid item xs={12} md={3.5} lg={3}>\r\n                        <Typography className=\"col-12 input-label\">\r\n                            Choose a BU <span className=\"required\">*</span>\r\n                        </Typography>\r\n                        <Autocomplete\r\n                            className=\"col-12 search-select\"\r\n                            options={OwnerNames}\r\n                            getOptionLabel={(option) => option?.Partner_Name || \"\"}\r\n                            value={OwnerNames?.find((option) => option?.Partner_Name === getPartnerName) || null}\r\n                            onChange={(e, newValue) => HandleChooseBu(e, newValue)}\r\n                            renderInput={(params) => <TextField {...params} placeholder=\"Choose a BU\" />}\r\n                        />\r\n                    </Grid>\r\n                )}\r\n                {/* {getRegion !== \"All\" && ( */}\r\n                <Grid item xs={12} md={3.5} lg={3}>\r\n                    <Typography className=\"col-12 input-label\">\r\n                        Choose a Period<span className=\"required\">*</span>\r\n                    </Typography>\r\n                    <Autocomplete\r\n                        className=\"col-12 search-select\"\r\n                        value={selectedPeriod}\r\n                        options={periodOptions}\r\n                        onChange={handlePeriodChange}\r\n                        renderInput={(params) => <TextField {...params} placeholder=\"Choose a Period\" />}\r\n                    />\r\n                </Grid>\r\n                {/* )} */}\r\n\r\n                <Grid container columnSpacing={2} item md={5} lg={6} style={{ display: customDate ? \"flex\" : \"none\" }}>\r\n                    <Grid item className=\"col-6\">\r\n                        <Typography className=\"col-12 input-label\">\r\n                            From<span className=\"required\">*</span>\r\n                        </Typography>\r\n                        <ErpDateField\r\n                            id=\"fromDate\"\r\n                            name=\"fromDate\"\r\n                            inputValue={fromDate}\r\n                            handleInputChange={(e) => setfromDate(e.target.value)}\r\n                            variant=\"outlined\"\r\n                        />\r\n                    </Grid>\r\n\r\n                    <Grid item className=\"col-6\">\r\n                        <Typography className=\"col-12 input-label\">\r\n                            To <span className=\"required\">*</span>\r\n                        </Typography>\r\n                        <ErpDateField\r\n                            id=\"toDate\"\r\n                            name=\"toDate\"\r\n                            inputValue={toDate}\r\n                            handleInputChange={(e) => settoDate(e.target.value)}\r\n                            variant=\"outlined\"\r\n                            InputProps={{\r\n                                inputProps: {\r\n                                    min: fromDate,\r\n                                },\r\n                            }}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n\r\n            <Div sx={{ mt: 3 }}>\r\n                <Div sx={[{ p: 1, }]} className='card'>\r\n                    <Typography variant='h5' sx={{ bgcolor: \"#ECECEC\", padding: \"8px\", borderRadius: \"5px\" }}>Vendor Analysis</Typography>\r\n                    {Boolean(purchaseVendorLists) ?\r\n                        <>\r\n                          \r\n                        </>\r\n                        :\r\n                        <Div sx={[DisplayFlex, { justifyContent: 'center', height: 350 }]}>\r\n                            <Typography sx={{ fontSize: '14px' }} >No record </Typography>\r\n                        </Div>\r\n                    }\r\n                </Div>\r\n            </Div>\r\n\r\n        </JumboContentLayoutMain >\r\n    )\r\n}\r\n\r\nexport default VendorAnalysis\r\n"],"names":["BarColor","color","DisplayFlex","display","alignItems","token","localStorage","getItem","companyId","header","headers","Authorization","concat","Accept","date","Date","day","getDate","month","getMonth","year","getFullYear","TodayDate","startDate","moment","startOf","endDate","endOf","ThisYearStart","format","ThisYearEnd","customDate","setCustomDate","useState","selectedDate","setSelectedDate","fromDate","setfromDate","toDate","settoDate","getPartnerName","setgetPartnerName","userId","setuserId","getRegion","setgetRegion","selectedPeriod","setSelectedPeriod","currentDate","setCurrentDate","OwnerNames","setOwnerNames","purchaseVendorLists","setPurchaseVendorLists","stateLists","setStateLists","cityLists","setCityLists","state","setState","city","setCity","getDefaultStartDate","getDefaultEndDate","actualData","useEffect","async","payload","console","log","axios","BASE_URL","then","res","_res$data","data","newArr","map","item","key","Object","keys","val","push","label","value","catch","err","error","_res$data2","getData","response","_response$data","names","results","getUser","Boolean","_jsxs","JumboContentLayoutMain","children","_jsx","Typography","variant","sx","fontWeight","mt","mb","fontSize","Grid","container","columnSpacing","xs","md","lg","className","Autocomplete","options","getOptionLabel","option","onChange","e","newValue","HandleChooseRegion","renderInput","params","TextField","_objectSpread","placeholder","onFocus","country","states","name","citynames","cityname","normalizedCity","normalize","replace","getCityLists","isOptionEqualToValue","disabled","Partner_Name","find","HandleChooseBu","id","handlePeriodChange","event","_startDate","_endDate","_startDate2","_endDate2","_startDate3","_endDate3","_startDate4","_endDate4","_startDate5","_endDate5","_startDate6","_endDate6","_startDate7","_endDate7","_startDate8","_endDate8","_date","ThisWeekStart","ThisWeekEnd","ThisMonthStart","ThisMonthEnd","ThisQuarterStart","ThisQuarterEnd","subtract","PrevWeekStart","PrevWeekEnd","PrevMonthStart","PrevMonthEnd","PrevQuarterStart","PrevQuarterEnd","MomentDateStart","MomentDateEnd","MomentDate","style","ErpDateField","inputValue","handleInputChange","target","InputProps","inputProps","min","Div","p","bgcolor","padding","borderRadius","_Fragment","justifyContent","height"],"sourceRoot":""}