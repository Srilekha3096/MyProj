{"version":3,"file":"static/js/223.ec3c6128.chunk.js","mappings":"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","sources":["app/pages/ScrollToTop.js","app/pages/settings/Preferences/SalesOrder.js","app/pages/settings/Setting.js","app/pages/useResponsive.js","app/shared/ReuseComponents/ErpDialogBoxes.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { FaArrowCircleUp } from 'react-icons/fa';\r\nimport useResponsive from './useResponsive';\r\n\r\nconst ScrollToTop = ({ Scrollheight }) => {\r\n  const [isVisible, setIsVisible] = useState(false);\r\n  const isAboveXl = useResponsive(\"up\", \"xl\");\r\n\r\n  const handleScroll = () => {\r\n    if (window.scrollY > Scrollheight) {\r\n      setIsVisible(true);\r\n    } else {\r\n      setIsVisible(false);\r\n    }\r\n  };\r\n\r\n  const scrollToTopHandler = () => {\r\n    window.scrollTo({\r\n      top: 0,\r\n      behavior: 'smooth',\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    window.addEventListener('scroll', handleScroll);\r\n\r\n    return () => {\r\n      window.removeEventListener('scroll', handleScroll);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        display: isVisible ? 'flex' : 'none',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        position: 'fixed',\r\n        bottom: isAboveXl ? \"10%\" : \"10.5%\",\r\n        right: '10px',\r\n        zIndex: 99999,\r\n        borderRadius: '50%',\r\n        boxShadow: '0px 2px 9px lightgray',\r\n        padding: 0.5,\r\n        width: '35px',\r\n        height: '35px',\r\n        backgroundColor: 'white',\r\n        color: '#00bfff',\r\n        transition: 'linear 1.5s ease-in-out',\r\n        cursor: 'pointer',\r\n      }}\r\n      onClick={scrollToTopHandler}\r\n      className=\"topToBottomAnimation\"\r\n    >\r\n      <FaArrowCircleUp size={22} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ScrollToTop;\r\n","import JumboContentLayoutMain from \"@jumbo/components/JumboContentLayout/JumboContentLayoutMain\";\nimport Div from \"@jumbo/shared/Div\";\nimport {\n  Checkbox,\n  FormControlLabel,\n  FormGroup,\n  Grid,\n  TextField,\n  Typography,\n} from \"@mui/material\";\nimport React, { useEffect, useState } from \"react\";\nimport Setting from \"../Setting\";\nimport axios from \"axios\";\nimport { BASE_URL } from \"app/services/auth-services\";\nimport { toast } from \"react-toastify\";\nimport settingServices from \"app/services/setting-api-services\";\nimport ScrollToTop from \"app/pages/ScrollToTop\";\nimport { CKEditor } from '@ckeditor/ckeditor5-react';\nimport ClassicEditor from \"@ckeditor/ckeditor5-build-classic\";\nimport { ErpConfirmDialogBox } from \"app/shared/ReuseComponents/ErpDialogBoxes\";\nimport { ErpCancelButton, ErpSaveUpdateButton } from \"app/shared/ReuseComponents/ButtonComponent\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { fetchUserRolePermissions, selectedUserRolePermissions } from \"app/redux/actions/fetchUserRolePermissions\";\n\nconst SalesOrder = () => {\n  const token = localStorage.getItem(\"accesstoken\");\n\n  const header = {\n    headers: {\n      Authorization: `Bearer ${token}`,\n      \"Content-Type\": \"application/json\",\n      Accept: \"application/json\",\n    },\n  };\n\n\n  const dispatch = useDispatch();\n  const { userRolePermissions, formPermissions, modulePermissions } = useSelector(selectedUserRolePermissions);\n\n\n  const [showCreatePage, setShowCreatePage] = useState(true);\n  const [showUpdatePage, setShowUpdatePage] = useState(false);\n  const [openBox, setOpenBox] = useState(false);\n\n  const [id, setId] = useState(\"\");\n  const [salePreferanceId, setSalePreferanceId] = useState(\"\");\n  const [checkAddress, setCheckAddress] = useState(false);\n  const [checkTermsConditions, setCheckTermsConditions] = useState(false);\n  const [checkCustomerNotes, setCheckCustomerNotes] = useState(false);\n  const [customerNotes, setCustomerNotes] = useState(\"\");\n  const [termsAndConditions, setTermsAndConditions] = useState(\"\");\n  const [cancellationBeforeHours, setCancellationBeforeHours] = useState(\"\");\n  const [pauseServiceBefore, setPauseServiceBefore] = useState(0);\n  const [refundPercentage, setRefundPercentage] = useState(0);\n\n\n  const partnerId = parseInt(localStorage.getItem(\"PartnerId\"));\n  const companyId = parseInt(localStorage.getItem(\"OrganizationId\"));\n\n  const getUser = () => {\n    settingServices\n      .getSalesOrderSettings(companyId, header)\n      .then((res) => {\n        console.log(res);\n        var Id = res?.Created_By;\n        if (Id === 0) {\n          setShowCreatePage(true);\n          setShowUpdatePage(false);\n        } else {\n          setShowCreatePage(false);\n          setShowUpdatePage(true);\n        }\n        setId(res?.id);\n        setSalePreferanceId(res?.Salesorderpreference_Id);\n        setCheckAddress(res?.Address);\n        setCheckCustomerNotes(res?.Customernotes);\n        setCheckTermsConditions(res?.Termsandcondition);\n        setCustomerNotes(res?.Notes);\n        setTermsAndConditions(res?.Termsand_condition);\n        setCancellationBeforeHours(res?.Cancelbefore_Service);\n        setPauseServiceBefore(res?.Pausebefore_Service);\n        setRefundPercentage(res?.Refund_Percentage);\n\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  };\n\n  useEffect(() => {\n    getUser();\n  }, []);\n\n  const handleSubmitSalesPreferance = (e) => {\n    e.preventDefault();\n    var payload = {\n      Address: checkAddress,\n      Customernotes: checkCustomerNotes,\n      Termsandcondition: checkTermsConditions,\n      Notes: customerNotes,\n      Termsand_condition: termsAndConditions,\n      Cancelbefore_Service: Number(cancellationBeforeHours),\n      Pausebefore_Service: Number(pauseServiceBefore),\n      Refund_Percentage: Number(refundPercentage),\n      Partner_Id: parseInt(localStorage.getItem(\"PartnerId\")),\n      Company_Id: parseInt(localStorage.getItem(\"OrganizationId\")),\n      Created_By: parseInt(localStorage.getItem(\"UserId\")),\n      Updated_By: parseInt(localStorage.getItem(\"UserId\")),\n    };\n    axios\n      .post(`${BASE_URL}/Erpapp/SalesorderpreferenceCRUD/`, payload, header)\n      .then((res) => {\n        console.log(res);\n        if (res?.data?.id) {\n          toast.success(\"Created successfully\");\n          if (res?.data?.id === 0) {\n            setShowUpdatePage(false);\n            setShowCreatePage(true);\n          } else {\n            setShowCreatePage(false);\n            setShowUpdatePage(true);\n            getUser();\n          }\n        } else {\n          toast.error(\"Sales Matching Query Doesn't Exist.\")\n        }\n      }).catch((error) => {\n        console.log(error);\n        toast.error(error.message);\n      });\n  };\n\n\n  const onChange = (evt, editor) => {\n    var newContent = editor.getData();\n    setTermsAndConditions(newContent);\n  };\n\n  // this code for update the preferance sales order\n  const handleUpdateSalesPreferance = (e) => {\n    e.preventDefault();\n    var payload = {\n      id: id,\n      Salesorderpreference_Id: salePreferanceId,\n      Address: checkAddress,\n      Customernotes: checkCustomerNotes,\n      Termsandcondition: checkTermsConditions,\n      Notes: customerNotes,\n      Termsand_condition: termsAndConditions,\n      Cancelbefore_Service: Number(cancellationBeforeHours),\n      Pausebefore_Service: Number(pauseServiceBefore),\n      Refund_Percentage: Number(refundPercentage),\n      Partner_Id: parseInt(localStorage.getItem(\"PartnerId\")),\n      Company_Id: parseInt(localStorage.getItem(\"OrganizationId\")),\n      Created_By: parseInt(localStorage.getItem(\"UserId\")),\n      Updated_By: parseInt(localStorage.getItem(\"UserId\")),\n    };\n\n    axios\n      .put(`${BASE_URL}/Erpapp/SalesorderpreferenceCRUD/`, payload, header)\n      .then((res) => {\n        console.log(res);\n        if (res?.data?.id) {\n          toast.success(\"updated successfully\");\n        } else {\n          toast.error(\"Sales Matching Query Doesn't Exist.\")\n        }\n      }).catch((error) => {\n        console.log(error);\n        toast.error(error.message)\n      });\n  };\n\n\n\n  const handleClick = () => {\n    setOpenBox(false);\n    getUser()\n  }\n\n\n  useEffect(() => {\n    dispatch(fetchUserRolePermissions(token))\n  }, []);\n\n\n  return (\n    <>\n      <JumboContentLayoutMain>\n        <Setting />\n        <Typography variant=\"h3\" sx={{ fontWeight: 600 }}>\n          Preferences\n        </Typography>\n        <Typography variant=\"h3\" sx={{ fontWeight: 500 }}>\n          Sales Order\n        </Typography>\n\n        <Div sx={{ display: showCreatePage === true ? \"block\" : \"none\" }}>\n          <form onSubmit={handleSubmitSalesPreferance}>\n            <Div className=\"row\" sx={{ mt: 2 }}>\n              <Typography variant=\"h4\">\n                Select the fields of the sales order to set in respective\n                invoices\n              </Typography>\n              <br />\n\n              <Div className=\"col-12 col-md-12 col-lg-6 col-xl-5\">\n\n                <Grid container>\n                  <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\n                    <FormGroup>\n                      <FormControlLabel\n                        control={\n                          <Checkbox\n                            size=\"small\"\n                            checked={checkAddress}\n                            onChange={(e) => {\n                              setCheckAddress(e.target.checked);\n                            }}\n                          />\n                        }\n                        label=\"Address\"\n                      />\n                      <FormControlLabel\n                        control={\n                          <Checkbox\n                            size=\"small\"\n                            checked={checkCustomerNotes}\n                            onChange={(e) => {\n                              setCheckCustomerNotes(e.target.checked);\n                            }}\n                          />\n                        }\n                        label=\"Customer Notes\"\n                      />\n                      <FormControlLabel\n                        control={\n                          <Checkbox\n                            size=\"small\"\n                            checked={checkTermsConditions}\n                            onChange={(e) => {\n                              setCheckTermsConditions(e.target.checked);\n                            }}\n                          />\n                        }\n                        label=\"Terms & Conditions\"\n                      />\n                    </FormGroup>\n                  </Grid>\n\n                  <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\n                    <Div sx={{ mt: 2 }}>\n                      <Typography variant=\"h4\">Customer Notes</Typography>\n                      <TextField\n                        className=\"multiline-box ms-1 col-10\"\n                        multiline\n                        rows={6}\n                        value={customerNotes}\n                        onChange={(e) => setCustomerNotes(e.target.value)}\n                        InputProps={{\n                          readOnly: checkCustomerNotes === true ? false : true,\n                        }}\n                        placeholder=\"Thank you for your business\"\n                        sx={{\n                          cursor: checkCustomerNotes === false ? \"no-drop\" : \"text\",\n                        }}\n                        disabled={checkCustomerNotes === false ? true : false}\n                      />\n                    </Div>\n\n                  </Grid>\n                </Grid>\n              </Div>\n\n              {/* right side column */}\n              <Div className=\"col-12 col-md-12 col-lg-6 col-xl-7\" sx={{ pt: { lg: 2, xl: 1 } }}>\n                <Grid container>\n                  {/* <Grid xs={12} className=\"row\" sx={{ mt: 1 }}>\n                    <Typography variant=\"h5\" className=\"col-md-12 col-lg-8 col-xl-6 input-label\">\n                      Cancellation before hours\n                    </Typography>\n\n                    <Div className=\"col-11 col-md-11 col-lg-3 col-xl-5\">\n                      <TextField\n                        className=\"col-12 input-box\"\n                        value={cancellationBeforeHours}\n                        onChange={(e) => setCancellationBeforeHours(e.target.value)}\n                        placeholder=\"Cancelation before hours\"\n                      />\n                    </Div>\n                    <span className=\"input-label col-1\">Hrs</span>\n                  </Grid>\n\n                  <Grid xs={12} className=\"row\" sx={{ mt: 1 }}>\n                    <Typography variant=\"h5\" className=\"col-md-12 col-lg-8 col-xl-6 input-label\">\n                      Pause service before\n                    </Typography>\n\n                    <Div className=\"col-11 col-md-11 col-lg-3 col-xl-5\">\n                      <TextField\n                        className=\"input-box col-12\"\n                        value={pauseServiceBefore}\n                        onChange={(e) => setPauseServiceBefore(e.target.value)}\n                        placeholder=\"Pause service before\"\n                      />\n                    </Div>\n                    <span className=\"input-label col-1\">Days</span>\n                  </Grid> */}\n\n\n                  {/* <Grid xs={12} className=\"row\" sx={{ mt: 1 }}>\n                    <Typography variant=\"h5\" className=\"col-md-12 col-lg-8 col-xl-6 input-label\">\n                      Refund percentage\n                    </Typography>\n\n                    <Div className=\"col-11 col-md-11 col-lg-3 col-xl-5\">\n                      <TextField\n                        className=\"input-box col-12\"\n                        value={refundPercentage}\n                        onChange={(e) => setRefundPercentage(e.target.value)}\n                        placeholder=\"Refund percentage\" />\n                    </Div>\n                    <span className=\"input-label col-1\">%</span>\n                  </Grid> */}\n\n                  <Grid xs={12} className=\"row\">\n                    <Div>\n                      <Typography variant=\"h4\" className=\"input-label\">Terms and Condition</Typography>\n\n                      <Div className=\"col-12\">\n                        <CKEditor\n                          editor={ClassicEditor}\n                          content={termsAndConditions}\n                          data={termsAndConditions}\n                          onChange={onChange}\n                          disabled={!checkTermsConditions}\n                        />\n                      </Div>\n                    </Div>\n                  </Grid>\n\n                </Grid>\n              </Div>\n            </Div>\n\n            {/* code for save and cancel button */}\n            <Div className=\"buttons\" sx={{ mt: 5 }}>\n              {Array.isArray(userRolePermissions) && userRolePermissions.includes(357) && (\n                <>\n                  <ErpSaveUpdateButton name={\"Save\"} type={\"submit\"} />\n                  <ErpCancelButton handleClick={() => {\n                    setOpenBox(true)\n                  }} />\n                </>\n              )}\n            </Div>\n\n          </form>\n        </Div>\n\n\n        {/* code for update a sales order preferance */}\n        <Div sx={{ display: showUpdatePage === true ? \"block\" : \"none\" }}>\n          <form onSubmit={handleUpdateSalesPreferance}>\n            <Div className=\"row\" sx={{ mt: 2 }}>\n              <Typography variant=\"h4\">\n                Select the fields of the sales order to update in respective\n                invoices\n              </Typography>\n              <br />\n\n              <Div className=\"col-12 col-md-12 col-lg-6 col-xl-5\">\n\n                <Grid container>\n                  <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\n                    <FormGroup>\n                      <FormControlLabel\n                        control={\n                          <Checkbox\n                            size=\"small\"\n                            checked={checkAddress}\n                            onChange={(e) => {\n                              setCheckAddress(e.target.checked);\n                            }}\n                          />\n                        }\n                        label=\"Address\"\n                      />\n                      <FormControlLabel\n                        control={\n                          <Checkbox\n                            size=\"small\"\n                            checked={checkCustomerNotes}\n                            onChange={(e) => {\n                              setCheckCustomerNotes(e.target.checked);\n                            }}\n                          />\n                        }\n                        label=\"Customer Notes\"\n                      />\n                      <FormControlLabel\n                        control={\n                          <Checkbox\n                            size=\"small\"\n                            checked={checkTermsConditions}\n                            onChange={(e) => {\n                              setCheckTermsConditions(e.target.checked);\n                            }}\n                          />\n                        }\n                        label=\"Terms & Conditions\"\n                      />\n                    </FormGroup>\n                  </Grid>\n\n                  <Grid item xs={12} className=\"row\" sx={{ mt: 1 }}>\n\n                    <Div sx={{ mt: 2 }}>\n                      <Typography variant=\"h4\">Customer Notes</Typography>\n                      <TextField\n                        className=\"multiline-box ms-1 col-12\"\n                        multiline\n                        rows={6}\n                        value={customerNotes}\n                        onChange={(e) => setCustomerNotes(e.target.value)}\n                        InputProps={{\n                          readOnly: checkCustomerNotes === true ? false : true,\n                        }}\n                        placeholder=\"Thank you for your business\"\n                        disabled={checkCustomerNotes === false ? true : false}\n                        sx={{\n                          cursor: checkCustomerNotes === false ? \"no-drop\" : \"text\",\n                        }}\n                      />\n                    </Div>\n\n                  </Grid>\n                </Grid>\n              </Div>\n\n              {/* right side column */}\n              <Div className=\"col-12 col-md-12 col-lg-6 col-xl-7\" sx={{ pt: { lg: 2, xl: 1 } }}>\n                <Grid container>\n                  {/* <Grid xs={12} className=\"row\" sx={{ mt: 1 }}>\n                    <Typography variant=\"h5\" className=\"col-md-12 col-lg-8 col-xl-6 input-label\">\n                      Cancellation before hours\n                    </Typography>\n                    <Div className=\"col-11 col-md-11 col-lg-3 col-xl-5\">\n                      <TextField\n                        className=\"col-12 input-box\"\n                        value={cancellationBeforeHours}\n                        onChange={(e) => setCancellationBeforeHours(e.target.value)}\n                        placeholder=\"Cancelation before hours\"\n                      />\n                    </Div>\n                    <span className=\"input-label col-1\">Hrs</span>\n                  </Grid>\n\n                  <Grid xs={12} className=\"row\" sx={{ mt: 1 }}>\n                    <Typography variant=\"h5\" className=\"col-md-12 col-lg-8 col-xl-6 input-label\">\n                      Pause service before\n                    </Typography>\n\n                    <Div className=\"col-11 col-md-11 col-lg-3 col-xl-5\">\n                      <TextField\n                        className=\"col-12 input-box\"\n                        value={pauseServiceBefore}\n                        onChange={(e) => setPauseServiceBefore(e.target.value)}\n                        placeholder=\"Pause service before\"\n                      />\n                    </Div>\n                    <span className=\"input-label col-1\">Days</span>\n                  </Grid> */}\n\n                  {/* <Grid xs={12} className=\"row\" sx={{ mt: 1 }}>\n                    <Typography variant=\"h5\" className=\"col-md-12 col-lg-8 col-xl-6 input-label\">\n                      Refund percentage\n                    </Typography>\n\n                    <Div className=\"col-11 col-md-11 col-lg-3 col-xl-5\">\n                      <TextField\n                        className=\"col-12 input-box\"\n                        value={refundPercentage}\n                        onChange={(e) => setRefundPercentage(e.target.value)}\n                        placeholder=\"Refund percentage\"\n                      />\n                    </Div>\n                    <span className=\"input-label col-1\">%</span>\n                  </Grid> */}\n\n                  <Grid xs={12} className=\"row\">\n                    <Div>\n                      <Typography variant=\"h4\" className=\"input-label\">Terms and Condition</Typography>\n\n                      <Div className=\"col-12\">\n                        <CKEditor\n                          editor={ClassicEditor}\n                          content={termsAndConditions}\n                          data={termsAndConditions}\n                          events={{\n                            change: onChange,\n                          }}\n                          onChange={onChange}\n                          disabled={!checkTermsConditions}\n                        />\n                      </Div>\n                    </Div>\n                  </Grid>\n                </Grid>\n              </Div>\n            </Div>\n\n            {/* code for save and cancel button */}\n            <Div className=\"buttons\" sx={{ mt: 5 }}>\n              {Array.isArray(userRolePermissions) && userRolePermissions.includes(358) && (\n                <>\n                  <ErpSaveUpdateButton name={\"Update\"} type={\"submit\"} />\n                  <ErpCancelButton handleClick={() => {\n                    setOpenBox(true)\n                  }} />\n                </>\n              )}\n            </Div>\n\n          </form>\n        </Div>\n\n        <ErpConfirmDialogBox flag={openBox} setFlag={setOpenBox} handleClick={handleClick} content={\"You have done some changes. Onclicking the cancel button changed data will not be saved.\"} />\n\n        <ScrollToTop Scrollheight={180} />\n      </JumboContentLayoutMain>\n    </>\n  );\n};\n\nexport default SalesOrder;\n","import React from 'react';\nimport { Typography } from '@mui/material';\nimport Div from \"@jumbo/shared/Div\";\nimport './Setting.css';\n\n\n\n\nconst Setting = () => {\n  return ( \n    <>\n      <Div>\n        {/* <img src='.\\images\\mainlogo-icon.jpg' width={30} height={30}></img> */}\n        <Typography variant='h1' sx={{ fontWeight: 800, mt: -2}}>Settings</Typography>\n      </Div>\n    </>\n    \n  )\n}\n\nexport default Setting;\n","// @mui\r\nimport { useTheme } from '@mui/material/styles';\r\nimport useMediaQuery from '@mui/material/useMediaQuery';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nexport default function useResponsive(query, key, start, end) {\r\n  const theme = useTheme();\r\n\r\n  const mediaUp = useMediaQuery(theme.breakpoints.up(key));\r\n\r\n  const mediaDown = useMediaQuery(theme.breakpoints.down(key));\r\n\r\n  const mediaBetween = useMediaQuery(theme.breakpoints.between(start, end));\r\n\r\n  const mediaOnly = useMediaQuery(theme.breakpoints.only(key));\r\n\r\n  if (query === 'up') {\r\n    return mediaUp;\r\n  }\r\n\r\n  if (query === 'down') {\r\n    return mediaDown;\r\n  }\r\n\r\n  if (query === 'between') {\r\n    return mediaBetween;\r\n  }\r\n\r\n  if (query === 'only') {\r\n    return mediaOnly;\r\n  }\r\n  return null;\r\n}\r\n","import Div from '@jumbo/shared/Div'\r\nimport { Box, Button, ButtonGroup, Dialog, DialogActions, DialogContent, IconButton, Typography, styled, useMediaQuery, useTheme } from '@mui/material'\r\nimport React from 'react'\r\nimport { MdCheck, MdClear, MdClose, MdDelete } from 'react-icons/md'\r\nimport { TiCancel } from 'react-icons/ti'\r\n\r\n\r\nconst DialogBox = styled(Dialog)(({ theme }) => ({\r\n    '& .MuiDialog-paper': {\r\n        borderRadius: 5,\r\n        backgroundColor: theme.palette.background.default,\r\n        border: `1px solid ${theme.palette.divider}`,\r\n    },\r\n}));\r\n\r\nconst StyledIconButton = styled(IconButton)(({ theme }) => ({\r\n    color: theme.palette.error.main,\r\n    '&:hover': {\r\n        backgroundColor: theme.palette.error.light,\r\n        color: theme.palette.background.default,\r\n    },\r\n}));\r\n\r\nconst CustomTypography = styled(Typography)(({ theme }) => ({\r\n    padding: theme.spacing(0.5),\r\n    textAlign: 'left',\r\n    // backgroundColor: theme.palette.error.light,\r\n    // color: theme.palette.error.contrastText,\r\n    borderRadius: theme.shape.borderRadius,\r\n}));\r\n\r\n\r\nexport const ErpDeleteDialogBox = ({ flag, setFlag, handleClick, content, id, isMobile }) => {\r\n    const theme = useTheme();\r\n    const isMdUp = useMediaQuery(theme.breakpoints.down('md'));\r\n\r\n    return (\r\n        <DialogBox open={flag}\r\n            maxWidth={window.innerWidth <= 600 ? 'xs' : window.innerWidth <= 768 ? 'sm' : window.innerWidth <= 992 ? 'sm' : 'sm'}\r\n            fullWidth\r\n            onClose={() => setFlag(false)}\r\n        >\r\n            <DialogContent>\r\n                <Typography variant=\"h3\">\r\n                    {content}\r\n                    <span>&nbsp;</span>\r\n                    <span style={{ fontWeight: 700 }}>\r\n                        {\" \"}\r\n                        \"{id}\" ?\r\n                    </span>\r\n                </Typography>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                {isMobile ? isMobile : isMdUp ? (\r\n                    <>\r\n                        <Button variant=\"contained\" color={\"error\"} endIcon={<MdDelete />} onClick={handleClick}>\r\n                            Delete\r\n                        </Button>\r\n                        <Button variant=\"contained\" endIcon={<TiCancel />} onClick={() => setFlag(false)}>\r\n                            Cancel\r\n                        </Button>\r\n                    </>\r\n                ) :\r\n                    <Div className=\"buttons\">\r\n                        <ButtonGroup\r\n                            aria-label=\"split button\"\r\n                            onClick={handleClick}\r\n                            sx={{\r\n                                mt: { xs: 0.5, lg: 0 },\r\n                                mr: { xs: 0, md: 1 }\r\n                            }}\r\n                        >\r\n                            <Button className=\"plus-button\">\r\n                                Delete\r\n                            </Button>\r\n                            <Button variant=\"contained\" className=\"icon-button\">\r\n                                <MdDelete size={18} />\r\n                            </Button>\r\n                        </ButtonGroup>\r\n\r\n                        <ButtonGroup\r\n                            aria-label=\"split button\"\r\n                            onClick={() => setFlag(false)}\r\n                            sx={{\r\n                                mt: { xs: 0.5, lg: 0 },\r\n                                mr: { xs: 0, md: 1 }\r\n                            }}\r\n                        >\r\n                            <Button className=\"plus-button\">Cancel</Button>\r\n                            <Button variant=\"contained\" className=\"icon-button\">\r\n                                <TiCancel size={22} />\r\n                            </Button>\r\n                        </ButtonGroup>\r\n                    </Div>\r\n                }\r\n            </DialogActions>\r\n        </DialogBox>\r\n    )\r\n}\r\n\r\n\r\nexport const ErpConfirmDialogBox = ({ flag, setFlag, handleClick, content, isMobile }) => {\r\n    return (\r\n        <Dialog\r\n            open={flag}\r\n            maxWidth=\"sm\"\r\n            fullWidth\r\n        >\r\n            <DialogContent>\r\n                <Typography variant='h4'>\r\n                    {content}\r\n                </Typography>\r\n                <br />\r\n                <Typography variant='h4'>\r\n                    Do you want still to continue...\r\n                </Typography>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                {isMobile ? (\r\n                    <>\r\n                        <Button variant=\"contained\" color={\"error\"} endIcon={<MdCheck />} onClick={() => setFlag(false)} >\r\n                            Yes\r\n                        </Button>\r\n                        <Button variant=\"contained\" endIcon={<MdClear />} onClick={handleClick}>\r\n                            No\r\n                        </Button>\r\n                    </>\r\n                ) :\r\n                    <Div className=\"buttons\">\r\n                        <ButtonGroup\r\n                            aria-label=\"split button\"\r\n                            onClick={() => setFlag(false)}\r\n                            sx={{\r\n                                mt: { xs: 0.5, lg: 0 },\r\n                                mr: { xs: 0, md: 1 }\r\n                            }}\r\n                        >\r\n                            <Button className=\"plus-button\">\r\n                                Yes\r\n                            </Button>\r\n                            <Button variant=\"contained\" className=\"icon-button\">\r\n                                <MdCheck size={16} />\r\n                            </Button>\r\n                        </ButtonGroup>\r\n                        <ButtonGroup\r\n                            aria-label=\"split button\"\r\n                            onClick={handleClick}\r\n                            sx={{\r\n                                mt: { xs: 0.5, lg: 0 },\r\n                                mr: { xs: 0, md: 1 }\r\n                            }}\r\n                        >\r\n                            <Button className=\"plus-button\">\r\n                                No\r\n                            </Button>\r\n                            <Button variant=\"contained\" className=\"icon-button\">\r\n                                <MdClear size={16} />\r\n                            </Button>\r\n                        </ButtonGroup>\r\n                    </Div>\r\n                }\r\n            </DialogActions>\r\n        </Dialog>\r\n    )\r\n}\r\n\r\n\r\nexport const ErpStatusConfirmDialogBox = ({ flag, setFlag, handleClick, content, isMobile }) => {\r\n    return (\r\n        <Dialog\r\n            open={flag}\r\n            maxWidth=\"sm\"\r\n            fullWidth\r\n        >\r\n            <DialogContent>\r\n                <Typography variant='h4'>\r\n                    {content}\r\n                </Typography>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                {isMobile ? (\r\n                    <>\r\n                        <Button variant=\"contained\" color={\"error\"} endIcon={<MdCheck />} onClick={handleClick} >\r\n                            Yes\r\n                        </Button>\r\n                        <Button variant=\"contained\" endIcon={<MdClear />} onClick={() => setFlag(false)} >\r\n                            No\r\n                        </Button>\r\n                    </>\r\n                ) :\r\n                    <Div className=\"buttons\">\r\n                        <ButtonGroup\r\n                            aria-label=\"split button\"\r\n                            onClick={handleClick}\r\n                            sx={{\r\n                                mt: { xs: 0.5, lg: 0 },\r\n                                mr: { xs: 0, md: 1 }\r\n                            }}\r\n                        >\r\n                            <Button className=\"plus-button\">\r\n                                Yes\r\n                            </Button>\r\n                            <Button variant=\"contained\" className=\"icon-button\">\r\n                                <MdCheck size={16} />\r\n                            </Button>\r\n                        </ButtonGroup>\r\n                        <ButtonGroup\r\n                            aria-label=\"split button\"\r\n                            onClick={() => setFlag(false)}\r\n                            sx={{\r\n                                mt: { xs: 0.5, lg: 0 },\r\n                                mr: { xs: 0, md: 1 }\r\n                            }}\r\n                        >\r\n                            <Button className=\"plus-button\">\r\n                                No\r\n                            </Button>\r\n                            <Button variant=\"contained\" className=\"icon-button\">\r\n                                <MdClear size={16} />\r\n                            </Button>\r\n                        </ButtonGroup>\r\n                    </Div>\r\n                }\r\n            </DialogActions>\r\n        </Dialog>\r\n    )\r\n}\r\n\r\n\r\nexport const ErpAlertViewDialogBox = ({ flag, setFlag, isMobile }) => {\r\n    return (\r\n        <DialogBox\r\n            open={flag}\r\n            maxWidth=\"xs\"\r\n        // onClose={() => setFlag(false)} // Optional: You can enable this if you want the dialog to close on backdrop click.\r\n        >\r\n            <DialogContent>\r\n                <Div sx={{ p: 0, m: 0, mb: 2, display: \"flex\", justifyContent: \"space-between\", alignItems: \"center\" }}>\r\n                    <CustomTypography variant='h3'>\r\n                        Alert\r\n                    </CustomTypography>\r\n\r\n                    <StyledIconButton onClick={() => setFlag(false)} sx={{ p: 0.3 }}>\r\n                        <MdClose size={22} />\r\n                    </StyledIconButton>\r\n                </Div>\r\n                <Typography variant='h4' sx={{ color: 'text.secondary' }}>\r\n                    You don't have the permission to view this page.\r\n                </Typography>\r\n            </DialogContent>\r\n        </DialogBox>\r\n    )\r\n}\r\n\r\n\r\n"],"names":["_ref","Scrollheight","isVisible","setIsVisible","useState","isAboveXl","useResponsive","handleScroll","window","scrollY","useEffect","addEventListener","removeEventListener","_jsx","style","display","justifyContent","alignItems","position","bottom","right","zIndex","borderRadius","boxShadow","padding","width","height","backgroundColor","color","transition","cursor","onClick","scrollToTopHandler","scrollTo","top","behavior","className","children","FaArrowCircleUp","size","SalesOrder","token","localStorage","getItem","header","headers","Authorization","concat","Accept","dispatch","useDispatch","userRolePermissions","formPermissions","modulePermissions","useSelector","selectedUserRolePermissions","showCreatePage","setShowCreatePage","showUpdatePage","setShowUpdatePage","openBox","setOpenBox","id","setId","salePreferanceId","setSalePreferanceId","checkAddress","setCheckAddress","checkTermsConditions","setCheckTermsConditions","checkCustomerNotes","setCheckCustomerNotes","customerNotes","setCustomerNotes","termsAndConditions","setTermsAndConditions","cancellationBeforeHours","setCancellationBeforeHours","pauseServiceBefore","setPauseServiceBefore","refundPercentage","setRefundPercentage","companyId","parseInt","getUser","settingServices","getSalesOrderSettings","then","res","console","log","Created_By","Salesorderpreference_Id","Address","Customernotes","Termsandcondition","Notes","Termsand_condition","Cancelbefore_Service","Pausebefore_Service","Refund_Percentage","catch","error","onChange","evt","editor","newContent","getData","fetchUserRolePermissions","_Fragment","_jsxs","JumboContentLayoutMain","Setting","Typography","variant","sx","fontWeight","Div","onSubmit","e","preventDefault","payload","Number","Partner_Id","Company_Id","Updated_By","axios","BASE_URL","_res$data","_res$data2","data","toast","success","message","mt","Grid","container","item","xs","FormGroup","FormControlLabel","control","Checkbox","checked","target","label","TextField","multiline","rows","value","InputProps","readOnly","placeholder","disabled","pt","lg","xl","CKEditor","ClassicEditor","content","Array","isArray","includes","ErpSaveUpdateButton","name","type","ErpCancelButton","handleClick","_res$data3","events","change","ErpConfirmDialogBox","flag","setFlag","ScrollToTop","query","key","start","end","theme","useTheme","mediaUp","useMediaQuery","breakpoints","up","mediaDown","down","mediaBetween","between","mediaOnly","only","DialogBox","styled","Dialog","palette","background","default","border","divider","StyledIconButton","IconButton","_ref2","main","light","CustomTypography","_ref3","spacing","textAlign","shape","ErpDeleteDialogBox","_ref4","isMobile","isMdUp","open","maxWidth","innerWidth","fullWidth","onClose","DialogContent","DialogActions","Button","endIcon","MdDelete","TiCancel","ButtonGroup","mr","md","_ref5","MdCheck","MdClear","ErpAlertViewDialogBox","_ref7","p","m","mb","MdClose"],"sourceRoot":""}