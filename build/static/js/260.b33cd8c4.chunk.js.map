{"version":3,"file":"static/js/260.b33cd8c4.chunk.js","mappings":"4cAWA,MAAMA,EAAO,CACT,CAAEC,MAAO,MAAOC,OAAQ,IAAMC,aAAc,KAAMC,IAAK,MACvD,CAAEH,MAAO,MAAOC,OAAQ,IAAMC,aAAc,KAAMC,IAAK,MACvD,CAAEH,MAAO,MAAOC,OAAQ,IAAMC,aAAc,KAAMC,IAAK,MACvD,CAAEH,MAAO,MAAOC,OAAQ,KAAMC,aAAc,KAAMC,IAAK,KACvD,CAAEH,MAAO,MAAOC,OAAQ,KAAMC,aAAc,KAAMC,IAAK,MACvD,CAAEH,MAAO,MAAOC,OAAQ,KAAMC,aAAc,KAAMC,IAAK,MACvD,CAAEH,MAAO,MAAOC,OAAQ,KAAMC,aAAc,KAAMC,IAAK,OAqN3D,EAlNqBD,KACjB,MAAOE,EAAcC,IAAmBC,EAAAA,EAAAA,UAAS,OAC1CC,EAAiBC,IAAsBF,EAAAA,EAAAA,UAAS,KAChDG,EAAeC,IAAoBJ,EAAAA,EAAAA,UAAS,KAC5CK,EAAcC,IAAmBN,EAAAA,EAAAA,UAAS,KAC1CO,EAAWC,IAAgBR,EAAAA,EAAAA,UAAS,IACpCS,EAAgBC,IAAqBV,EAAAA,EAAAA,UAAS,KAC9CW,EAAYC,IAAiBZ,EAAAA,EAAAA,UAAS,KACtCa,EAAeC,IAAoBd,EAAAA,EAAAA,UAAS,OAE5Ce,EAAcC,IAAmBhB,EAAAA,EAAAA,UAAS,KAC1CiB,EAAaC,IAAkBlB,EAAAA,EAAAA,UAAS,IAGzCmB,EAAQC,aAAaC,QAAQ,eAE7BC,EAAS,CACXC,QAAS,CACLC,cAAc,UAADC,OAAYN,GACzB,eAAgB,mBAChBO,OAAQ,qBAcVC,EACG,QADHA,EAEG,QAGH,SAAEC,IAAaC,EAAAA,EAAAA,IAAe,CAAEC,iBA1BtB,4CAiDhBC,QAAQC,IAAI/B,EAAiBE,EAAeE,GAE5C,MAAM4B,GAAiB,CAAEC,KAAiB,OAAZpC,QAAY,IAAZA,OAAY,EAAZA,EAAcoC,MAAOP,EAAmBQ,KAAiB,OAAZrC,QAAY,IAAZA,OAAY,EAAZA,EAAcqC,MAAOR,IAgBhGS,EAAAA,EAAAA,YAAU,KACN,MAAMC,EAAkBC,EAAAA,GAAAA,mBAAwC,OAAfrC,QAAe,IAAfA,OAAe,EAAfA,EAAiBsC,SAClEvB,EAAgBqB,EAAgB,GACjC,CAACpC,KAEJmC,EAAAA,EAAAA,YAAU,KACN,GAAInC,GAAmBE,EAAe,CAClC,MAAMqC,EAAgBC,EAAAA,EAAKC,iBACvBzC,EAAgBsC,QAChBpC,EAAcoC,SAElBrB,EAAesB,EACnB,MACItB,EAAe,GACnB,GACD,CAACjB,EAAiBE,IAoBrB,OAPAiC,EAAAA,EAAAA,YAAU,KATNO,IAAAA,IAAU,GAADlB,OAAImB,EAAAA,GAAQ,wBAAwBtB,GACxCuB,MAAMC,IACHf,QAAQC,IAAI,SAAUc,EAASrD,KAAKsD,SACpCnC,EAAckC,EAASrD,KAAKsD,QAAQ,IAEvCC,OAAOC,IACJlB,QAAQC,IAAIiB,EAAM,GAIV,GACjB,IAEHlB,QAAQC,IAAI,YAAazB,GACzBwB,QAAQC,IAAI,aAAcrB,IAGtBuC,EAAAA,EAAAA,MAACC,EAAAA,EAAsB,CAAAC,SAAA,EACnBC,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CAACC,QAAQ,KAAIH,SAAC,kBACzBF,EAAAA,EAAAA,MAACM,EAAAA,GAAI,CAACC,WAAS,EAACC,QAAS,EAAGC,GAAI,CAAEC,GAAI,EAAGC,GAAI,GAAIT,SAAA,EAC7CF,EAAAA,EAAAA,MAACM,EAAAA,GAAI,CAACM,MAAI,EAACC,UAAU,MAAMC,GAAI,EAAEZ,SAAA,EAC7BC,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CAACS,UAAU,uBAAsBX,SAAC,iBAG7CC,EAAAA,EAAAA,KAACY,EAAAA,EAAW,CAACF,UAAU,QAAOX,UAC1BC,EAAAA,EAAAA,KAACa,EAAAA,EAAY,CACTC,QAASxD,EACTyD,eAAiBC,IAAiB,OAANA,QAAM,IAANA,OAAM,EAANA,EAAQC,eAAgB,GACpDC,MAAO5D,EAAW6D,MAAMH,IAAiB,OAANA,QAAM,IAANA,OAAM,EAANA,EAAQC,gBAAiB7D,KAAmB,KAC/EgE,SAAUA,CAACC,EAAGC,KACVjE,EAA0B,OAARiE,QAAQ,IAARA,OAAQ,EAARA,EAAUL,cAC5BxD,EAAiB6D,EAAS,EAE9BC,YAAcC,IAAWxB,EAAAA,EAAAA,KAACyB,EAAAA,GAASC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAKF,GAAM,IAAEG,YAAY,iBAC5DjB,UAAU,wBAItBV,EAAAA,EAAAA,KAACG,EAAAA,GAAI,CAACM,MAAI,EAACC,UAAU,MAAMC,GAAI,EAAEZ,UAC7BF,EAAAA,EAAAA,MAAC+B,EAAAA,EAAW,CACR,aAAW,eACXlB,UAAU,SACVmB,QAASA,KA3EFC,IAACC,EAASC,EAAOC,EAzBrBC,OAAOH,EAASC,EAAOC,KAC1C,IAAK,IAADE,EAAAC,EAAAC,EAAAC,EAEA,MAAMC,EAAO,GAAAnE,OAAMZ,EAAcgF,kBAAiB,MAAApE,OAAKZ,EAAciF,mBAAkB,MAAArE,OAAKZ,EAAckF,sBACpGjD,QAAiBH,IAAAA,IAAU,kDAADlB,OACsBuE,mBAC9CJ,GACH,0CAEL7F,EAAwB,OAAR+C,QAAQ,IAARA,GAAc,QAAN0C,EAAR1C,EAAUrD,YAAI,IAAA+F,GAAY,QAAZC,EAAdD,EAAgBzC,QAAQ,UAAE,IAAA0C,OAAlB,EAARA,EAA4BQ,UAC5ClE,QAAQC,IAAI,cAAuB,OAARc,QAAQ,IAARA,GAAc,QAAN4C,EAAR5C,EAAUrD,YAAI,IAAAiG,GAAY,QAAZC,EAAdD,EAAgB3C,QAAQ,UAAE,IAAA4C,OAAlB,EAARA,EAA4BM,SAK3D,CAAE,MAAOhD,GACLlB,QAAQkB,MAAM,8BAA+BA,GAC7ClB,QAAQkB,MAAMA,EAAMH,SAASrD,KACjC,GAmFoByG,GA5EId,EA6EenF,EA7ENoF,EA6EuBlF,EA7EhBmF,EA6E+BjF,EA5EvE0B,QAAQC,IAAI,cAAeoD,EAASC,EAAOC,GAEvC9E,EADS,OAAT8E,GAA2B,OAAVD,GAA8B,OAAZD,GAA6B,KAATE,GAAyB,KAAVD,GAA4B,KAAZD,EACzE,GACI,OAAVC,GAA8B,OAAZD,GAA8B,KAAVC,GAA4B,KAAZD,EAChD,EACM,OAAZA,GAAgC,KAAZA,EACd,EAEA,EAoEmE,EAGpEzB,GAAI,CACAC,GAAI,CAAEI,GAAI,GAAKmC,GAAI,GACnBC,GAAI,CAAEpC,GAAI,EAAGqC,GAAI,IACnBjD,SAAA,EAEFC,EAAAA,EAAAA,KAACiD,EAAAA,EAAM,CAACvC,UAAU,cAAaX,SAAC,YAGhCC,EAAAA,EAAAA,KAACiD,EAAAA,EAAM,CAAC/C,QAAQ,YAAYQ,UAAU,cAAaX,UAC/CC,EAAAA,EAAAA,KAACkD,EAAAA,IAAQ,CAACC,KAAM,gBAMhCtD,EAAAA,EAAAA,MAACM,EAAAA,GAAI,CAACC,WAAS,EAACC,QAAS,EAAGC,GAAI,CAAEE,GAAI,EAAG4C,WAAY,UAAWrD,SAAA,EAC5DC,EAAAA,EAAAA,KAACG,EAAAA,GAAI,CAACM,MAAI,EAACE,GAAI,EAAEZ,SACZxB,GACGyB,EAAAA,EAAAA,KAACqD,EAAAA,EAAG,CAAAtD,UACAF,EAAAA,EAAAA,MAACyD,EAAAA,GAAS,CAACC,kBA5IjB,CACdC,OAAQ,QACRC,MAAO,QA0IsDC,KAAM,GAAIC,OAAQ/E,GAAemB,SAAA,CAEe,KACpFC,EAAAA,EAAAA,KAAC4D,EAAAA,GAAO,CACLC,SAAU,CAAEhF,IAAiB,OAAZpC,QAAY,IAAZA,OAAY,EAAZA,EAAcoC,IAAKC,IAAiB,OAAZrC,QAAY,IAAZA,OAAY,EAAZA,EAAcqC,KACvDgF,MAAO,MAEPjC,QAASA,KA7IrCnD,QAAQC,IAAI,OA6IoD,IAE9B,UAOlBqB,EAAAA,EAAAA,KAACqD,EAAAA,EAAG,CAAAtD,UACAC,EAAAA,EAAAA,KAAC+D,EAAAA,EAAG,CAACzD,GAAI,CAAE0D,QAAS,OAAQC,eAAgB,UAAWlE,UACnDC,EAAAA,EAAAA,KAAA,OAAKkE,MAAM,yBAAyBC,KAAK,SAAQpE,UAC7CC,EAAAA,EAAAA,KAAA,QAAMkE,MAAM,kBAAiBnE,SAAC,wBAMlDC,EAAAA,EAAAA,KAACG,EAAAA,GAAI,CAACM,MAAI,EAACE,GAAI,EAAEZ,UACbC,EAAAA,EAAAA,KAACoE,EAAAA,EAAmB,CAACX,MAAM,OAAOD,OAAQ,IAAIzD,UAC1CF,EAAAA,EAAAA,MAACwE,EAAAA,EAAa,CAACjI,KAAMA,EAAMkI,OAAQ,CAAEC,IAAK,EAAGC,MAAO,EAAGC,KAAM,EAAGC,OAAQ,GAAI3E,SAAA,EACxEC,EAAAA,EAAAA,KAAC2E,EAAAA,EAAK,CAACC,QAAQ,WACf5E,EAAAA,EAAAA,KAAC6E,EAAAA,EAAK,KACN7E,EAAAA,EAAAA,KAAC8E,EAAAA,EAAO,CAACC,WAAY,CAAEC,MAAO,SAAWC,UAAW,CAAED,MAAO,SAAWE,QAAQ,KAChFlF,EAAAA,EAAAA,KAACmF,EAAAA,EAAM,KACPnF,EAAAA,EAAAA,KAACoF,EAAAA,EAAa,CAACC,OAAO,aACtBrF,EAAAA,EAAAA,KAACsF,EAAAA,EAAG,CAACV,QAAQ,SAASW,QAAS,GAAIC,KAAM,aACzCxF,EAAAA,EAAAA,KAACyF,EAAAA,EAAI,CAACC,KAAK,WAAWd,QAAQ,eAAeS,OAAO,wBAO/C,C","sources":["app/pages/analytics/Transactions.js"],"sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { GoogleMap, MarkerF, useJsApiLoader } from '@react-google-maps/api';\r\nimport { Typography, Box, TextField, ButtonGroup, Button, Grid, FormControl, Autocomplete } from '@mui/material';\r\nimport axios from 'axios';\r\nimport { BASE_URL } from 'app/services/auth-services';\r\nimport JumboContentLayoutMain from '@jumbo/components/JumboContentLayout/JumboContentLayoutMain';\r\nimport Div from '@jumbo/shared/Div';\r\nimport { Bar, CartesianGrid, ComposedChart, Legend, Line, ResponsiveContainer, Tooltip, XAxis, YAxis } from 'recharts';\r\nimport { FaSearch } from \"react-icons/fa\";\r\nimport { State, City } from \"country-state-city\";\r\n\r\nconst data = [\r\n    { month: 'Jan', Target: 4000, Transactions: 2400, amt: 2400 },\r\n    { month: 'Feb', Target: 3000, Transactions: 1398, amt: 2210 },\r\n    { month: 'Mar', Target: 2000, Transactions: 9800, amt: 2290 },\r\n    { month: 'Apr', Target: 2780, Transactions: 3908, amt: 2000 },\r\n    { month: 'May', Target: 1890, Transactions: 4800, amt: 2181 },\r\n    { month: 'Jun', Target: 2390, Transactions: 3800, amt: 2500 },\r\n    { month: 'Jul', Target: 3490, Transactions: 4300, amt: 2100 },\r\n];\r\n\r\nconst Transactions = () => {\r\n    const [locationData, setLocationData] = useState(null);\r\n    const [selectedCountry, setSelectedCountry] = useState(\"\");\r\n    const [selectedState, setSelectedState] = useState(\"\");\r\n    const [selectedCity, setSelectedCity] = useState(\"\");\r\n    const [zoomLevel, setZoomLevel] = useState(3);\r\n    const [getPartnerName, setgetPartnerName] = useState(\"\");\r\n    const [ownerNames, setOwnerNames] = useState([]);\r\n    const [searchedDatas, setSearchedDatas] = useState(null);\r\n\r\n    const [stateOptions, setStateOptions] = useState([]);\r\n    const [cityOptions, setCityOptions] = useState([]);\r\n\r\n    const APIKKey = \"AIzaSyDl22ksIKq0yqXNjnrmy_PYRKcZVbLwAns\";\r\n    const token = localStorage.getItem(\"accesstoken\");\r\n\r\n    const header = {\r\n        headers: {\r\n            Authorization: `Bearer ${token}`,\r\n            \"Content-Type\": \"application/json\",\r\n            Accept: \"application/json\",\r\n        },\r\n    }\r\n\r\n\r\n    const mapStyles = {\r\n        height: '500px',\r\n        width: '100%',\r\n    };\r\n\r\n    const handleMarkerClick = (data) => {\r\n        console.log(\"info\")\r\n    }\r\n\r\n    const defaultCenter = {  //delhi\r\n        lat: 28.6139,\r\n        lng: 77.2090,\r\n    };\r\n\r\n    const { isLoaded } = useJsApiLoader({ googleMapsApiKey: APIKKey });\r\n\r\n    const getCoordinates = async (country, state, city) => {\r\n        try {\r\n            // if (getPartnerName.BusinessUnit_City !== \"\" && state !== \"\" && city !== \"\") {\r\n            const address = `${searchedDatas.BusinessUnit_City}, ${searchedDatas.BusinessUnit_State}, ${searchedDatas.BusinessUnit_Country}`;\r\n            const response = await axios.get(\r\n                `https://api.opencagedata.com/geocode/v1/json?q=${encodeURIComponent(\r\n                    address\r\n                )}&key=6c3e49178d1f4cca84a003096c7e1911`\r\n            );\r\n            setLocationData(response?.data?.results[0]?.geometry);\r\n            console.log(\"GeoLocation\", response?.data?.results[0]?.geometry);\r\n            // }\r\n            // else {\r\n            //     console.log(\"Please Select selectedCountry selectedState selectedCity\");\r\n            // }\r\n        } catch (error) {\r\n            console.error('Error fetching coordinates:', error);\r\n            console.error(error.response.data);\r\n        }\r\n    };\r\n\r\n    console.log(selectedCountry, selectedState, selectedCity);\r\n\r\n    const centerPosition = { lat: locationData?.lat || defaultCenter.lat, lng: locationData?.lng || defaultCenter.lng };\r\n\r\n    const determineZoomLevel = (country, state, city) => {\r\n        console.log(\"countryyyyy\", country, state, city);\r\n        if (city !== null && state !== null && country !== null && city !== \"\" && state !== \"\" && country !== \"\") {\r\n            setZoomLevel(11);\r\n        } else if (state !== null && country !== null && state !== \"\" && country !== \"\") {\r\n            setZoomLevel(7);\r\n        } else if (country !== null && country !== \"\") {\r\n            setZoomLevel(4);\r\n        } else {\r\n            setZoomLevel(3);\r\n        }\r\n    };\r\n\r\n\r\n    useEffect(() => {\r\n        const statesOfCountry = State.getStatesOfCountry(selectedCountry?.isoCode);\r\n        setStateOptions(statesOfCountry);\r\n    }, [selectedCountry]);\r\n\r\n    useEffect(() => {\r\n        if (selectedCountry && selectedState) {\r\n            const citiesOfState = City.getCitiesOfState(\r\n                selectedCountry.isoCode,\r\n                selectedState.isoCode\r\n            );\r\n            setCityOptions(citiesOfState);\r\n        } else {\r\n            setCityOptions([]);\r\n        }\r\n    }, [selectedCountry, selectedState]);\r\n\r\n    // PartnerList\r\n    const getPartnerData = () => {\r\n        axios.get(`${BASE_URL}/Erpapp/Partnerlist/`, header)\r\n            .then((response) => {\r\n                console.log(\"sevity\", response.data.results);\r\n                setOwnerNames(response.data.results);\r\n            })\r\n            .catch((error) => {\r\n                console.log(error);\r\n            });\r\n    }\r\n    useEffect(() => {\r\n        getPartnerData();\r\n    }, []);\r\n\r\n    console.log(\"ZoomLevel\", zoomLevel);\r\n    console.log(\"ownerNames\", ownerNames);\r\n\r\n    return (\r\n        <JumboContentLayoutMain>\r\n            <Typography variant='h1'>Transactions</Typography>\r\n            <Grid container spacing={2} sx={{ mt: 2, mb: 2 }}>\r\n                <Grid item className='row' xs={4}>\r\n                    <Typography className=\"col-md-4 input-label\">\r\n                        Choose a BU\r\n                    </Typography>\r\n                    <FormControl className=\"col-6\">\r\n                        <Autocomplete\r\n                            options={ownerNames}\r\n                            getOptionLabel={(option) => option?.Partner_Name || \"\"}\r\n                            value={ownerNames.find((option) => option?.Partner_Name === getPartnerName) || null}\r\n                            onChange={(e, newValue) => {\r\n                                setgetPartnerName(newValue?.Partner_Name)\r\n                                setSearchedDatas(newValue)\r\n                            }}\r\n                            renderInput={(params) => <TextField {...params} placeholder=\"Choose a BU\" />}\r\n                            className=\"search-select\"\r\n                        />\r\n                    </FormControl>\r\n                </Grid>\r\n                <Grid item className='row' xs={3}>\r\n                    <ButtonGroup\r\n                        aria-label=\"split button\"\r\n                        className=\"col-12\"\r\n                        onClick={() => {\r\n                            getCoordinates(selectedCountry, selectedState, selectedCity);\r\n                            determineZoomLevel(selectedCountry, selectedState, selectedCity)\r\n                        }\r\n                        }\r\n                        sx={{\r\n                            mt: { xs: 0.5, lg: 0 },\r\n                            mr: { xs: 0, md: 1 }\r\n                        }}\r\n                    >\r\n                        <Button className=\"plus-button\">\r\n                            Search\r\n                        </Button>\r\n                        <Button variant=\"contained\" className=\"icon-button\">\r\n                            <FaSearch size={18} />\r\n                        </Button>\r\n                    </ButtonGroup>\r\n                </Grid>\r\n            </Grid>\r\n\r\n            <Grid container spacing={2} sx={{ mb: 3, alignItems: 'center' }}>\r\n                <Grid item xs={6}>\r\n                    {isLoaded ?\r\n                        <Div>\r\n                            <GoogleMap mapContainerStyle={mapStyles} zoom={11} center={centerPosition}>\r\n                                {/* {\r\n                                        (selectedCity !== \"\" && selectedState !== \"\" && selectedCountry !== \"\") ? */}\r\n                                (<MarkerF\r\n                                    position={{ lat: locationData?.lat, lng: locationData?.lng }}\r\n                                    title={\"ERP\"}\r\n                                    // icon={<FaMapMarkerAlt />}\r\n                                    onClick={() => { handleMarkerClick() }}\r\n                                >\r\n                                </MarkerF>)\r\n                                {/* :\r\n                                            \"\"\r\n                                    } */}\r\n                            </GoogleMap>\r\n                        </Div>\r\n                        :\r\n                        <Div>\r\n                            <Box sx={{ display: 'flex', justifyContent: 'center' }}>\r\n                                <div class=\"spinner-grow text-info\" role=\"status\">\r\n                                    <span class=\"visually-hidden\">Loading...</span>\r\n                                </div>\r\n                            </Box>\r\n                        </Div>\r\n                    }\r\n                </Grid>\r\n                <Grid item xs={6}>\r\n                    <ResponsiveContainer width=\"100%\" height={200}>\r\n                        <ComposedChart data={data} margin={{ top: 0, right: 0, left: 0, bottom: 0 }}>\r\n                            <XAxis dataKey=\"month\" />\r\n                            <YAxis />\r\n                            <Tooltip labelStyle={{ color: 'black' }} itemStyle={{ color: 'black' }} cursor={false} />\r\n                            <Legend />\r\n                            <CartesianGrid stroke=\"#f5f5f5\" />\r\n                            <Bar dataKey=\"Target\" barSize={20} fill={\"#1ABBDE\"} />\r\n                            <Line type=\"monotone\" dataKey=\"Transactions\" stroke=\"#59AA2B\" />\r\n                            {/* <Line type=\"monotone\" dataKey=\"amt\" stroke=\"#59AA2B\" /> */}\r\n                        </ComposedChart>\r\n                    </ResponsiveContainer>\r\n                </Grid>\r\n            </Grid>\r\n\r\n        </JumboContentLayoutMain>\r\n    );\r\n}\r\n\r\nexport default Transactions;"],"names":["data","month","Target","Transactions","amt","locationData","setLocationData","useState","selectedCountry","setSelectedCountry","selectedState","setSelectedState","selectedCity","setSelectedCity","zoomLevel","setZoomLevel","getPartnerName","setgetPartnerName","ownerNames","setOwnerNames","searchedDatas","setSearchedDatas","stateOptions","setStateOptions","cityOptions","setCityOptions","token","localStorage","getItem","header","headers","Authorization","concat","Accept","defaultCenter","isLoaded","useJsApiLoader","googleMapsApiKey","console","log","centerPosition","lat","lng","useEffect","statesOfCountry","State","isoCode","citiesOfState","City","getCitiesOfState","axios","BASE_URL","then","response","results","catch","error","_jsxs","JumboContentLayoutMain","children","_jsx","Typography","variant","Grid","container","spacing","sx","mt","mb","item","className","xs","FormControl","Autocomplete","options","getOptionLabel","option","Partner_Name","value","find","onChange","e","newValue","renderInput","params","TextField","_objectSpread","placeholder","ButtonGroup","onClick","determineZoomLevel","country","state","city","async","_response$data","_response$data$result","_response$data2","_response$data2$resul","address","BusinessUnit_City","BusinessUnit_State","BusinessUnit_Country","encodeURIComponent","geometry","getCoordinates","lg","mr","md","Button","FaSearch","size","alignItems","Div","GoogleMap","mapContainerStyle","height","width","zoom","center","MarkerF","position","title","Box","display","justifyContent","class","role","ResponsiveContainer","ComposedChart","margin","top","right","left","bottom","XAxis","dataKey","YAxis","Tooltip","labelStyle","color","itemStyle","cursor","Legend","CartesianGrid","stroke","Bar","barSize","fill","Line","type"],"sourceRoot":""}